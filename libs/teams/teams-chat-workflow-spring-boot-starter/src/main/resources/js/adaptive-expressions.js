(function(f) {
    if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f()
    } else if (typeof define === "function" && define.amd) {
        define([], f)
    } else {
        var g;
        if (typeof window !== "undefined") {
            g = window
        } else if (typeof global !== "undefined") {
            g = global
        } else if (typeof self !== "undefined") {
            g = self
        } else {
            g = this
        }
        g.AEL = f()
    }
})(function() {
    var define,
        module,
        exports;
    return (function() {
        function r(e, n, t) {
            function o(i, f) {
                if (!n[i]) {
                    if (!e[i]) {
                        var c = "function" == typeof require && require;
                        if (!f && c)
                            return c(i, !0);
                        if (u)
                            return u(i, !0);
                        var a = new Error("Cannot find module '" + i + "'");
                        throw a.code = "MODULE_NOT_FOUND", a
                    }
                    var p = n[i] = {
                        exports: {}
                    };
                    e[i][0].call(p.exports, function(r) {
                        var n = e[i][1][r];
                        return o(n || r)
                    }, p, p.exports, r, e, n, t)
                }
                return n[i].exports
            }
            for (var u = "function" == typeof require && require, i = 0; i < t.length; i++)
                o(t[i]);
            return o
        }
        return r
    })()({
        1: [function(require, module, exports) {
            "use strict";
            function __export(m) {
                for (var p in m)
                    if (!exports.hasOwnProperty(p))
                        exports[p] = m[p];
            }
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            __export(require("./expressionFunctions"));
            __export(require("./constant"));
            __export(require("./expression"));
            __export(require("./expressionEvaluator"));
            __export(require("./expressionType"));
            __export(require("./extensions"));
            __export(require("./timeZoneConverter"));
            __export(require("./generated"));
            __export(require("./commonRegex"));
            __export(require("./options"));
            __export(require("./parser"));
            __export(require("./memory"));
            __export(require("./regexErrorListener"));
            __export(require("./datetimeFormatConverter"));
            __export(require("./functionTable"));
            __export(require("./converters"));
            __export(require("./expressionProperties"));
            var builtinFunctions_1 = require("./builtinFunctions");
            exports.NumberTransformEvaluator = builtinFunctions_1.NumberTransformEvaluator;
            exports.NumericEvaluator = builtinFunctions_1.NumericEvaluator;
            exports.StringTransformEvaluator = builtinFunctions_1.StringTransformEvaluator;
            exports.ComparisonEvaluator = builtinFunctions_1.ComparisonEvaluator;
            exports.MultivariateNumericEvaluator = builtinFunctions_1.MultivariateNumericEvaluator;
            exports.TimeTransformEvaluator = builtinFunctions_1.TimeTransformEvaluator;
            __export(require("./functionUtils"));
            __export(require("./returnType"));
            __export(require("./localeInfo"));
            __export(require("./triggerTrees"));

        }, {
            "./builtinFunctions": 64,
            "./commonRegex": 157,
            "./constant": 158,
            "./converters": 163,
            "./datetimeFormatConverter": 169,
            "./expression": 170,
            "./expressionEvaluator": 171,
            "./expressionFunctions": 172,
            "./expressionProperties": 177,
            "./expressionType": 183,
            "./extensions": 184,
            "./functionTable": 185,
            "./functionUtils": 187,
            "./generated": 190,
            "./localeInfo": 191,
            "./memory": 192,
            "./options": 195,
            "./parser": 200,
            "./regexErrorListener": 203,
            "./returnType": 204,
            "./timeZoneConverter": 205,
            "./triggerTrees": 207
        }],
        2: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const simpleObjectMemory_1 = require("../memory/simpleObjectMemory");
            const returnType_1 = require("../returnType");
            /**
             * Used to access the variable value corresponding to the path.
             */
            class Accessor extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Accessor](xref:adaptive-expressions.Accessor) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Accessor, Accessor.evaluator, returnType_1.ReturnType.Object, Accessor.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    const {path, left, error} = functionUtils_1.FunctionUtils.tryAccumulatePath(expression, state, options);
                    if (error) {
                        return {
                            value: undefined,
                            error
                        };
                    }
                    if (left == undefined) {
                        // fully converted to path, so we just delegate to memory scope
                        return {
                            value: functionUtils_internal_1.InternalFunctionUtils.wrapGetValue(state, path, options),
                            error: undefined
                        };
                    }
                    else {
                        const {value: newScope, error: err} = left.tryEvaluate(state, options);
                        if (err) {
                            return {
                                value: undefined,
                                error: err
                            };
                        }
                        return {
                            value: functionUtils_internal_1.InternalFunctionUtils.wrapGetValue(new simpleObjectMemory_1.SimpleObjectMemory(newScope), path, options),
                            error: undefined,
                        };
                    }
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    const children = expression.children;
                    if (children.length === 0 ||
                    children[0].type !== expressionType_1.ExpressionType.Constant ||
                    children[0].returnType !== returnType_1.ReturnType.String) {
                        throw new Error(`${expression} must have a string as first argument.`);
                    }
                    if (children.length > 2) {
                        throw new Error(`${expression} has more than 2 children.`);
                    }
                    if (children.length === 2 && (children[1].returnType & returnType_1.ReturnType.Object) === 0) {
                        throw new Error(`${expression} must have an object as its second argument.`);
                    }
                }
            }
            exports.Accessor = Accessor;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../memory/simpleObjectMemory": 193,
            "../returnType": 204
        }],
        3: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return the result from adding two or more numbers (pure number case) or concatting two or more strings (other case).
             */
            class Add extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Add](xref:adaptive-expressions.Add) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Add, Add.evaluator(), returnType_1.ReturnType.String | returnType_1.ReturnType.Number, Add.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applySequenceWithError((args) => {
                        let value;
                        let error;
                        const stringConcat = !functionUtils_1.FunctionUtils.isNumber(args[0]) || !functionUtils_1.FunctionUtils.isNumber(args[1]);
                        if (((args[0] === null || args[0] === undefined) && functionUtils_1.FunctionUtils.isNumber(args[1])) ||
                        ((args[1] === null || args[1] === undefined) && functionUtils_1.FunctionUtils.isNumber(args[0]))) {
                            error = "Operator '+' or add cannot be applied to operands of type 'number' and null object.";
                        }
                        else if (stringConcat) {
                            if ((args[0] === null || args[0] === undefined) && (args[1] === null || args[1] === undefined)) {
                                value = '';
                            }
                            else if (args[0] === null || args[0] === undefined) {
                                value = args[1].toString();
                            }
                            else if (args[1] === null || args[1] === undefined) {
                                value = args[0].toString();
                            }
                            else {
                                value = args[0].toString() + args[1].toString();
                            }
                        }
                        else {
                            value = args[0] + args[1];
                        }
                        return {
                            value,
                            error
                        };
                    }, functionUtils_1.FunctionUtils.verifyNumberOrStringOrNull);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateArityAndAnyType(expression, 2, Number.MAX_SAFE_INTEGER, returnType_1.ReturnType.String | returnType_1.ReturnType.Number);
                }
            }
            exports.Add = Add;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        4: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionType_1 = require("../expressionType");
            const timeTransformEvaluator_1 = require("./timeTransformEvaluator");
            /**
             * Add a number of days to a timestamp.
             */
            class AddDays extends timeTransformEvaluator_1.TimeTransformEvaluator {
                /**
                     * Initializes a new instance of the [AddDays](xref:adaptive-expressions.AddDays) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.AddDays, (ts, num) => moment_1.default(ts).utc().add(num, 'd').toDate());
                }
            }
            exports.AddDays = AddDays;

        }, {
            "../expressionType": 183,
            "./timeTransformEvaluator": 139,
            "moment": 514
        }],
        5: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionType_1 = require("../expressionType");
            const timeTransformEvaluator_1 = require("./timeTransformEvaluator");
            /**
             * Add a number of hours to a timestamp.
             */
            class AddHours extends timeTransformEvaluator_1.TimeTransformEvaluator {
                /**
                     * Initializes a new instance of the [AddHours](xref:adaptive-expressions.AddHours) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.AddHours, (ts, num) => moment_1.default(ts).utc().add(num, 'h').toDate());
                }
            }
            exports.AddHours = AddHours;

        }, {
            "../expressionType": 183,
            "./timeTransformEvaluator": 139,
            "moment": 514
        }],
        6: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionType_1 = require("../expressionType");
            const timeTransformEvaluator_1 = require("./timeTransformEvaluator");
            /**
             * Add a number of minutes to a timestamp.
             */
            class AddMinutes extends timeTransformEvaluator_1.TimeTransformEvaluator {
                /**
                     * Initializes a new instance of the [AddMinutes](xref:adaptive-expressions.AddMinutes) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.AddMinutes, (ts, num) => moment_1.default(ts).utc().add(num, 'minutes').toDate());
                }
            }
            exports.AddMinutes = AddMinutes;

        }, {
            "../expressionType": 183,
            "./timeTransformEvaluator": 139,
            "moment": 514
        }],
        7: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return the ordinal number of the input number.
             */
            class AddOrdinal extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [AddOrdinal](xref:adaptive-expressions.AddOrdinal) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.AddOrdinal, AddOrdinal.evaluator(), returnType_1.ReturnType.String, AddOrdinal.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => AddOrdinal.evalAddOrdinal(args[0]), functionUtils_1.FunctionUtils.verifyInteger);
                }
                /**
                     * @private
                     */
                static evalAddOrdinal(num)
                {
                    let hasResult = false;
                    let ordinalResult = num.toString();
                    if (num > 0) {
                        switch (num % 100) {
                        case 11:
                        case 12:
                        case 13:
                            ordinalResult += 'th';
                            hasResult = true;
                            break;
                        default:
                            break;
                        }
                        if (!hasResult) {
                            switch (num % 10) {
                            case 1:
                                ordinalResult += 'st';
                                break;
                            case 2:
                                ordinalResult += 'nd';
                                break;
                            case 3:
                                ordinalResult += 'rd';
                                break;
                            default:
                                ordinalResult += 'th';
                                break;
                            }
                        }
                    }
                    return ordinalResult;
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateArityAndAnyType(expression, 1, 1, returnType_1.ReturnType.Number);
                }
            }
            exports.AddOrdinal = AddOrdinal;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        8: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Add a property and its value, or name-value pair, to a JSON object, and return the updated object.
             * If the object already exists at runtime the function throws an error.
             */
            class AddProperty extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [AddProperty](xref:adaptive-expressions.AddProperty) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.AddProperty, AddProperty.evaluator(), returnType_1.ReturnType.Object, AddProperty.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => {
                        let error;
                        const temp = args[0];
                        const prop = String(args[1]);
                        if (prop in temp) {
                            error = `${prop} already exists`;
                        }
                        else {
                            temp[String(args[1])] = args[2];
                        }
                        return {
                            value: temp,
                            error
                        };
                    });
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, undefined, returnType_1.ReturnType.Object, returnType_1.ReturnType.String, returnType_1.ReturnType.Object);
                }
            }
            exports.AddProperty = AddProperty;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        9: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionType_1 = require("../expressionType");
            const timeTransformEvaluator_1 = require("./timeTransformEvaluator");
            /**
             * Add a number of seconds to a timestamp.
             */
            class AddSeconds extends timeTransformEvaluator_1.TimeTransformEvaluator {
                /**
                     * Initializes a new instance of the [AddSeconds](xref:adaptive-expressions.AddSeconds) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.AddSeconds, (ts, num) => moment_1.default(ts).utc().add(num, 'seconds').toDate());
                }
            }
            exports.AddSeconds = AddSeconds;

        }, {
            "../expressionType": 183,
            "./timeTransformEvaluator": 139,
            "moment": 514
        }],
        10: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Add a number of time units to a timestamp.
             */
            class AddToTime extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [AddToTime](xref:adaptive-expressions.AddToTime) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.AddToTime, AddToTime.evaluator, returnType_1.ReturnType.String, AddToTime.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expression, state, options);
                    let error = childrenError;
                    if (!error) {
                        const format = args.length === 4 ? functionUtils_1.FunctionUtils.timestampFormatter(args[3]) : functionUtils_1.FunctionUtils.DefaultDateTimeFormat;
                        if (typeof args[0] === 'string' && Number.isInteger(args[1]) && typeof args[2] === 'string') {
                            ({value, error} = AddToTime.evalAddToTime(args[0], args[1], args[2], format));
                        }
                        else {
                            error = `${expression} should contain an ISO format timestamp, a time interval integer, a string unit of time and an optional output format string.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static evalAddToTime(timeStamp, interval, timeUnit, format)
                {
                    let result;
                    const {value: parsed, error: parseError} = functionUtils_internal_1.InternalFunctionUtils.parseTimestamp(timeStamp);
                    let error = parseError;
                    if (!error) {
                        const dt = moment_1.default(parsed).utc();
                        let addedTime = dt;
                        let timeUnitMark;
                        switch (timeUnit) {
                        case 'Second':
                            {
                                timeUnitMark = 's';
                                break;
                            }
                        case 'Minute':
                            {
                                timeUnitMark = 'm';
                                break;
                            }
                        case 'Hour':
                            {
                                timeUnitMark = 'h';
                                break;
                            }
                        case 'Day':
                            {
                                timeUnitMark = 'd';
                                break;
                            }
                        case 'Week':
                            {
                                timeUnitMark = 'week';
                                break;
                            }
                        case 'Month':
                            {
                                timeUnitMark = 'month';
                                break;
                            }
                        case 'Year':
                            {
                                timeUnitMark = 'year';
                                break;
                            }
                        default:
                            {
                                error = `${timeUnit} is not valid time unit`;
                                break;
                            }
                        }
                        if (!error) {
                            addedTime = dt.add(interval, timeUnitMark);
                            ({value: result, error} = functionUtils_internal_1.InternalFunctionUtils.returnFormattedTimeStampStr(addedTime, format));
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.String], returnType_1.ReturnType.String, returnType_1.ReturnType.Number, returnType_1.ReturnType.String);
                }
            }
            exports.AddToTime = AddToTime;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "moment": 514
        }],
        11: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const options_1 = require("../options");
            const returnType_1 = require("../returnType");
            /**
             * Return true if all expressions are true or return false if at least one expression is false.
             */
            class And extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [And](xref:adaptive-expressions.And) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.And, And.evaluator, returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateAtLeastOne);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let result = true;
                    let error;
                    for (const child of expression.children) {
                        const newOptions = new options_1.Options(options);
                        newOptions.nullSubstitution = undefined;
                        ({value: result, error} = child.tryEvaluate(state, newOptions));
                        if (!error) {
                            if (functionUtils_internal_1.InternalFunctionUtils.isLogicTrue(result)) {
                                result = true;
                            }
                            else {
                                result = false;
                                break;
                            }
                        }
                        else {
                            result = false;
                            error = undefined;
                            break;
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
            }
            exports.And = And;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../options": 195,
            "../returnType": 204
        }],
        12: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return the average of a numeric array.
             */
            class Average extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Average](xref:adaptive-expressions.Average) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Average, Average.evaluator(), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => args[0].reduce((x, y) => x + y) / args[0].length, functionUtils_1.FunctionUtils.verifyNumericList);
                }
            }
            exports.Average = Average;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        13: [function(require, module, exports) {
            (function(Buffer) {
                (function() {
                    "use strict";
                    /**
                     * @module adaptive-expressions
                     */
                    /**
                     * Copyright (c) Microsoft Corporation. All rights reserved.
                     * Licensed under the MIT License.
                     */
                    Object.defineProperty(exports, "__esModule", {
                        value: true
                    });
                    const expressionEvaluator_1 = require("../expressionEvaluator");
                    const expressionType_1 = require("../expressionType");
                    const functionUtils_1 = require("../functionUtils");
                    const returnType_1 = require("../returnType");
                    /**
                     * Return the base64-encoded version of a string or byte array.
                     */
                    class Base64 extends expressionEvaluator_1.ExpressionEvaluator {
                        /**
                             * Initializes a new instance of the [Base64](xref:adaptive-expressions.Base64) class.
                             */
                        constructor()
                        {
                            super(expressionType_1.ExpressionType.Base64, Base64.evaluator(), returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnary);
                        }
                        /**
                             * @private
                             */
                        static evaluator()
                        {
                            return functionUtils_1.FunctionUtils.apply((args) => {
                                let result;
                                if (typeof args[0] === 'string') {
                                    result = Buffer.from(args[0]).toString('base64');
                                }
                                if (args[0] instanceof Uint8Array) {
                                    result = Buffer.from(args[0]).toString('base64');
                                }
                                return result;
                            });
                        }
                    }
                    exports.Base64 = Base64;

                }).call(this)
            }).call(this, require("buffer").Buffer)

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204,
            "buffer": 368
        }],
        14: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            const atob = require("atob-lite");
            /**
             * Return the binary array of a base64-encoded string.
             */
            class Base64ToBinary extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Base64ToBinary](xref:adaptive-expressions.Base64ToBinary) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Base64ToBinary, Base64ToBinary.evaluator(), returnType_1.ReturnType.Object, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => {
                        const raw = atob(args[0].toString());
                        return functionUtils_internal_1.InternalFunctionUtils.toBinary(raw);
                    }, functionUtils_1.FunctionUtils.verifyString);
                }
            }
            exports.Base64ToBinary = Base64ToBinary;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "atob-lite": 365
        }],
        15: [function(require, module, exports) {
            (function(Buffer) {
                (function() {
                    "use strict";
                    /**
                     * @module adaptive-expressions
                     */
                    /**
                     * Copyright (c) Microsoft Corporation. All rights reserved.
                     * Licensed under the MIT License.
                     */
                    Object.defineProperty(exports, "__esModule", {
                        value: true
                    });
                    const expressionEvaluator_1 = require("../expressionEvaluator");
                    const expressionType_1 = require("../expressionType");
                    const functionUtils_1 = require("../functionUtils");
                    const returnType_1 = require("../returnType");
                    /**
                     * Return the string version of a base64-encoded string, effectively decoding the base64 string.
                     */
                    class Base64ToString extends expressionEvaluator_1.ExpressionEvaluator {
                        /**
                             * Initializes a new instance of the [Base64ToString](xref:adaptive-expressions.Base64ToString) class.
                             */
                        constructor()
                        {
                            super(expressionType_1.ExpressionType.Base64ToString, Base64ToString.evaluator(), returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnary);
                        }
                        /**
                             * @private
                             */
                        static evaluator()
                        {
                            return functionUtils_1.FunctionUtils.apply((args) => Buffer.from(args[0], 'base64').toString(), functionUtils_1.FunctionUtils.verifyString);
                        }
                    }
                    exports.Base64ToString = Base64ToString;

                }).call(this)
            }).call(this, require("buffer").Buffer)

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204,
            "buffer": 368
        }],
        16: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the binary version of a string.
             */
            class Binary extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Binary](xref:adaptive-expressions.Binary) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Binary, Binary.evaluator(), returnType_1.ReturnType.Object, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => functionUtils_internal_1.InternalFunctionUtils.toBinary(args[0]), functionUtils_1.FunctionUtils.verifyString);
                }
            }
            exports.Binary = Binary;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        17: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const comparisonEvaluator_1 = require("./comparisonEvaluator");
            /**
             * Return the Boolean version of a value.
             */
            class Bool extends comparisonEvaluator_1.ComparisonEvaluator {
                /**
                     * Initializes a new instance of the [Bool](xref:adaptive-expressions.Bool) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Bool, Bool.func, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static func(args)
                {
                    return functionUtils_internal_1.InternalFunctionUtils.isLogicTrue(args[0]);
                }
            }
            exports.Bool = Bool;

        }, {
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "./comparisonEvaluator": 20
        }],
        18: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const numberTransformEvaluator_1 = require("./numberTransformEvaluator");
            /**
             * Returns the smallest integral value that is greater than or equal to the specified number.
             */
            class Ceiling extends numberTransformEvaluator_1.NumberTransformEvaluator {
                /**
                     * Initializes a new instance of the [Ceiling](xref:adaptive-expressions.Ceiling) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Ceiling, Ceiling.func);
                }
                /**
                     * @private
                     */
                static func(args)
                {
                    return Math.ceil(args[0]);
                }
            }
            exports.Ceiling = Ceiling;

        }, {
            "../expressionType": 183,
            "./numberTransformEvaluator": 103
        }],
        19: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return the first non-null value from one or more parameters.
             * Empty strings, empty arrays, and empty objects are not null.
             */
            class Coalesce extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Coalesce](xref:adaptive-expressions.Coalesce) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Coalesce, Coalesce.evaluator(), returnType_1.ReturnType.Object, functionUtils_1.FunctionUtils.validateAtLeastOne);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => Coalesce.evalCoalesce(args));
                }
                /**
                     * @private
                     */
                static evalCoalesce(objectList)
                {
                    for (const obj of objectList) {
                        if (obj !== null && obj !== undefined) {
                            return obj;
                        }
                    }
                    return undefined;
                }
            }
            exports.Coalesce = Coalesce;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        20: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const __1 = require("../");
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Comparison operators.
             * A comparison operator returns false if the comparison is false, or there is an error.  This prevents errors from short-circuiting boolean expressions.
             */
            class ComparisonEvaluator extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [ComparisonEvaluator](xref:adaptive-expressions.ComparisonEvaluator) class.
                     * @param type Name of the built-in function.
                     * @param func The comparison function, it takes a list of objects and returns a boolean.
                     * @param validator [ValidateExpressionDelegate](xref:adaptive-expressions.ValidateExpressionDelegate) for input arguments.
                     * @param verify Optional. [VerifyExpression](xref:adaptive-expressions.VerifyExpression) function to verify each child's result.
                     */
                constructor(type, func, validator, verify)
                {
                    super(type, ComparisonEvaluator.evaluator(func, verify), returnType_1.ReturnType.Boolean, validator);
                }
                /**
                     * @private
                     */
                static evaluator(func, verify)
                {
                    return (expression, state, options) => {
                        let result = false;
                        const newOptions = new __1.Options(options);
                        newOptions.nullSubstitution = undefined;
                        const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expression, state, newOptions, verify);
                        let error = childrenError;
                        if (!error) {
                            const isNumber = args && args.length > 0 && typeof args[0] === 'number';
                            for (const arg of args) {
                                if (arg && (typeof arg === 'number') !== isNumber) {
                                    error = `Arguments must either all be numbers or strings in ${expression}`;
                                    break;
                                }
                            }
                            if (!error) {
                                try {
                                    result = func(args);
                                }
                                catch (e) {
                                    // NOTE: This should not happen in normal execution
                                    error = e.message;
                                }
                            }
                        }
                        else {
                            error = undefined;
                        }
                        return {
                            value: result,
                            error
                        };
                    };
                }
            }
            exports.ComparisonEvaluator = ComparisonEvaluator;

        }, {
            "../": 1,
            "../expressionEvaluator": 171,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        21: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Combine two or more strings, and return the combined string.
             */
            class Concat extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Concat](xref:adaptive-expressions.Concat) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Concat, Concat.evaluator(), returnType_1.ReturnType.String | returnType_1.ReturnType.Array, functionUtils_1.FunctionUtils.validateAtLeastOne);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applySequence((args) => {
                        const firstItem = args[0];
                        const secondItem = args[1];
                        const isFirstList = Array.isArray(firstItem);
                        const isSecondList = Array.isArray(secondItem);
                        if ((firstItem === null || firstItem === undefined) && (secondItem === null || secondItem === undefined)) {
                            return undefined;
                        }
                        else if ((firstItem === null || firstItem === undefined) && isSecondList) {
                            return secondItem;
                        }
                        else if ((secondItem === null || secondItem === undefined) && isFirstList) {
                            return firstItem;
                        }
                        else if (isFirstList && isSecondList) {
                            return firstItem.concat(secondItem);
                        }
                        else {
                            return Concat.commonStringify(firstItem) + Concat.commonStringify(secondItem);
                        }
                    });
                }
                /**
                     * @private
                     */
                static commonStringify(input)
                {
                    if (input === null || input === undefined) {
                        return '';
                    }
                    if (Array.isArray(input)) {
                        return input.toString();
                    }
                    else if (typeof input === 'object') {
                        return JSON.stringify(input);
                    }
                    else {
                        return input.toString();
                    }
                }
            }
            exports.Concat = Concat;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        22: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Check whether a collection has a specific item. Return true if the item is found, or return false if not found.
             * This function is case-sensitive.
             */
            class Contains extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Contains](xref:adaptive-expressions.Contains) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Contains, Contains.evaluator, returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateBinary);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let found = false;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expression, state, options);
                    let error = childrenError;
                    if (!error) {
                        if ((typeof args[0] === 'string' && typeof args[1] === 'string') || Array.isArray(args[0])) {
                            found = args[0].includes(args[1]);
                        }
                        else if (args[0] instanceof Map) {
                            found = args[0].get(args[1]) !== undefined;
                        }
                        else if (typeof args[1] === 'string') {
                            let value;
                            ({value, error} = functionUtils_internal_1.InternalFunctionUtils.accessProperty(args[0], args[1]));
                            found = !error && value !== undefined;
                        }
                    }
                    return {
                        value: found,
                        error: undefined
                    };
                }
            }
            exports.Contains = Contains;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        23: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_timezone_1 = require("moment-timezone");
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            const timeZoneConverter_1 = require("../timeZoneConverter");
            /**
             * Convert a timestamp from Universal Time Coordinated (UTC) to a target time zone.
             */
            class ConvertFromUTC extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [ConvertFromUTC](xref:adaptive-expressions.ConvertFromUTC) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.ConvertFromUTC, ConvertFromUTC.evaluator, returnType_1.ReturnType.String, ConvertFromUTC.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expression, state, options);
                    let error = childrenError;
                    if (!error) {
                        const format = args.length === 3
                        ? functionUtils_1.FunctionUtils.timestampFormatter(args[2])
                        : ConvertFromUTC.NoneUtcDefaultDateTimeFormat;
                        if (typeof args[0] === 'string' && typeof args[1] === 'string') {
                            ({value, error} = ConvertFromUTC.evalConvertFromUTC(args[0], args[1], format));
                        }
                        else {
                            error = `${expression} should contain an ISO format timestamp, an origin time zone string and an optional output format string.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static evalConvertFromUTC(timeStamp, destinationTimeZone, format)
                {
                    let result;
                    let error;
                    error = functionUtils_internal_1.InternalFunctionUtils.verifyISOTimestamp(timeStamp);
                    const timeZone = timeZoneConverter_1.TimeZoneConverter.windowsToIana(destinationTimeZone);
                    if (!timeZoneConverter_1.TimeZoneConverter.verifyTimeZoneStr(timeZone)) {
                        error = `${destinationTimeZone} is not a valid timezone`;
                    }
                    if (!error) {
                        try {
                            result = moment_timezone_1.tz(timeStamp, timeZone).format(format);
                        }
                        catch (e) {
                            error = `${format} is not a valid timestamp format`;
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.String], returnType_1.ReturnType.String, returnType_1.ReturnType.String);
                }
            }
            ConvertFromUTC.NoneUtcDefaultDateTimeFormat = 'YYYY-MM-DDTHH:mm:ss.SSSZ';
            exports.ConvertFromUTC = ConvertFromUTC;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "../timeZoneConverter": 205,
            "moment-timezone": 512
        }],
        24: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const moment_timezone_1 = require("moment-timezone");
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            const timeZoneConverter_1 = require("../timeZoneConverter");
            /**
             * Convert a timestamp to Universal Time Coordinated (UTC) from the source time zone.
             */
            class ConvertToUTC extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [ConvertToUTC](xref:adaptive-expressions.ConvertToUTC) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.ConvertToUTC, ConvertToUTC.evaluator, returnType_1.ReturnType.String, ConvertToUTC.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expression, state, options);
                    let error = childrenError;
                    if (!error) {
                        const format = args.length === 3 ? functionUtils_1.FunctionUtils.timestampFormatter(args[2]) : functionUtils_1.FunctionUtils.DefaultDateTimeFormat;
                        if (typeof args[0] === 'string' && typeof args[1] === 'string') {
                            ({value, error} = ConvertToUTC.evalConvertToUTC(args[0], args[1], format));
                        }
                        else {
                            error = `${expression} should contain an ISO format timestamp, a destination time zone string and an optional output format string.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static verifyTimeStamp(timeStamp)
                {
                    const parsed = moment_1.default(timeStamp);
                    if (parsed.toString() === 'Invalid date') {
                        return `${timeStamp} is a invalid datetime`;
                    }
                    return undefined;
                }
                /**
                     * @private
                     */
                static evalConvertToUTC(timeStamp, sourceTimezone, format)
                {
                    let result;
                    let error;
                    let formattedSourceTime;
                    const timeZone = timeZoneConverter_1.TimeZoneConverter.windowsToIana(sourceTimezone);
                    if (!timeZoneConverter_1.TimeZoneConverter.verifyTimeZoneStr(timeZone)) {
                        error = `${sourceTimezone} is not a valid timezone`;
                    }
                    if (!error) {
                        error = this.verifyTimeStamp(timeStamp);
                        if (!error) {
                            try {
                                const sourceTime = moment_timezone_1.tz(timeStamp, timeZone);
                                formattedSourceTime = sourceTime.format();
                            }
                            catch (e) {
                                error = `${timeStamp} with ${timeZone} is not a valid timestamp with specified timeZone:`;
                            }
                            if (!error) {
                                try {
                                    result = moment_timezone_1.tz(formattedSourceTime, 'Etc/UTC').format(format);
                                }
                                catch (e) {
                                    error = `${format} is not a valid timestamp format`;
                                }
                            }
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expr)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expr, [returnType_1.ReturnType.String], returnType_1.ReturnType.String, returnType_1.ReturnType.String);
                }
            }
            exports.ConvertToUTC = ConvertToUTC;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204,
            "../timeZoneConverter": 205,
            "moment": 514,
            "moment-timezone": 512
        }],
        25: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return the number of items in a collection.
             */
            class Count extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Count](xref:adaptive-expressions.Count) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Count, Count.evaluator(), returnType_1.ReturnType.Number, Count.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => {
                        let count;
                        if (typeof args[0] === 'string' || Array.isArray(args[0])) {
                            count = args[0].length;
                        }
                        else if (args[0] instanceof Map) {
                            count = args[0].size;
                        }
                        else if (typeof args[0] == 'object') {
                            count = Object.keys(args[0]).length;
                        }
                        return count;
                    }, functionUtils_1.FunctionUtils.verifyContainer);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [], returnType_1.ReturnType.String | returnType_1.ReturnType.Array);
                }
            }
            exports.Count = Count;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        26: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the number of words in a string.
             */
            class CountWord extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [CountWord](xref:adaptive-expressions.CountWord) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.CountWord, CountWord.evaluator(), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateUnaryString);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[0]).trim().split(/\s+/).length, functionUtils_1.FunctionUtils.verifyStringOrNull);
                }
            }
            exports.CountWord = CountWord;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        27: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return an array from multiple inputs.
             */
            class CreateArray extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [CreateArray](xref:adaptive-expressions.CreateArray) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.CreateArray, CreateArray.evaluator(), returnType_1.ReturnType.Array);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => Array.from(args));
                }
            }
            exports.CreateArray = CreateArray;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        28: [function(require, module, exports) {
            (function(Buffer) {
                (function() {
                    "use strict";
                    /**
                     * @module adaptive-expressions
                     */
                    /**
                     * Copyright (c) Microsoft Corporation. All rights reserved.
                     * Licensed under the MIT License.
                     */
                    Object.defineProperty(exports, "__esModule", {
                        value: true
                    });
                    const expressionEvaluator_1 = require("../expressionEvaluator");
                    const expressionType_1 = require("../expressionType");
                    const functionUtils_1 = require("../functionUtils");
                    const returnType_1 = require("../returnType");
                    /**
                     * Return a data uniform resource identifier (URI) of a string.
                     */
                    class DataUri extends expressionEvaluator_1.ExpressionEvaluator {
                        /**
                             * Initializes a new instance of the [DataUri](xref:adaptive-expressions.DataUri) class.
                             */
                        constructor()
                        {
                            super(expressionType_1.ExpressionType.DataUri, DataUri.evaluator(), returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnary);
                        }
                        /**
                             * @private
                             */
                        static evaluator()
                        {
                            return functionUtils_1.FunctionUtils.apply((args) => 'data:text/plain;charset=utf-8;base64,'.concat(Buffer.from(args[0]).toString('base64')), functionUtils_1.FunctionUtils.verifyString);
                        }
                    }
                    exports.DataUri = DataUri;

                }).call(this)
            }).call(this, require("buffer").Buffer)

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204,
            "buffer": 368
        }],
        29: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the binary version of a data uniform resource identifier (URI).
             */
            class DataUriToBinary extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [DataUriToBinary](xref:adaptive-expressions.DataUriToBinary) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.DataUriToBinary, DataUriToBinary.evaluator(), returnType_1.ReturnType.Object, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => functionUtils_internal_1.InternalFunctionUtils.toBinary(args[0]), functionUtils_1.FunctionUtils.verifyString);
                }
            }
            exports.DataUriToBinary = DataUriToBinary;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        30: [function(require, module, exports) {
            (function(Buffer) {
                (function() {
                    "use strict";
                    /**
                     * @module adaptive-expressions
                     */
                    /**
                     * Copyright (c) Microsoft Corporation. All rights reserved.
                     * Licensed under the MIT License.
                     */
                    Object.defineProperty(exports, "__esModule", {
                        value: true
                    });
                    const expressionEvaluator_1 = require("../expressionEvaluator");
                    const expressionType_1 = require("../expressionType");
                    const functionUtils_1 = require("../functionUtils");
                    const returnType_1 = require("../returnType");
                    /**
                     * Return the string version of a data uniform resource identifier (URI).
                     */
                    class DataUriToString extends expressionEvaluator_1.ExpressionEvaluator {
                        /**
                             * Initializes a new instance of the [DataUriToString](xref:adaptive-expressions.DataUriToString) class.
                             */
                        constructor()
                        {
                            super(expressionType_1.ExpressionType.DataUriToString, DataUriToString.evaluator(), returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnary);
                        }
                        /**
                             * @private
                             */
                        static evaluator()
                        {
                            return functionUtils_1.FunctionUtils.apply((args) => Buffer.from(args[0].slice(args[0].indexOf(',') + 1), 'base64').toString(), functionUtils_1.FunctionUtils.verifyString);
                        }
                    }
                    exports.DataUriToString = DataUriToString;

                }).call(this)
            }).call(this, require("buffer").Buffer)

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204,
            "buffer": 368
        }],
        31: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the date of a specified timestamp in m/dd/yyyy format.
             */
            class DateFunc extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [DateFunc](xref:adaptive-expressions.DateFunc) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Date, DateFunc.evaluator(), returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnaryString);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => functionUtils_internal_1.InternalFunctionUtils.parseTimestamp(args[0], (timestamp) => moment_1.default(timestamp).utc().format('M/DD/YYYY')), functionUtils_1.FunctionUtils.verifyString);
                }
            }
            exports.DateFunc = DateFunc;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "moment": 514
        }],
        32: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const recognizers_text_data_types_timex_expression_1 = require("@microsoft/recognizers-text-data-types-timex-expression");
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Uses the date-time library to provide a date readback.
             */
            class DateReadBack extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [DateReadBack](xref:adaptive-expressions.DateReadBack) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.DateReadBack, DateReadBack.evaluator(), returnType_1.ReturnType.String, DateReadBack.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => {
                        let value;
                        let error;
                        const dateFormat = 'YYYY-MM-DD';
                        ({value, error} = functionUtils_internal_1.InternalFunctionUtils.parseTimestamp(args[0]));
                        if (!error) {
                            const timestamp1 = new Date(value.format(dateFormat));
                            ({value, error} = functionUtils_internal_1.InternalFunctionUtils.parseTimestamp(args[1]));
                            const timestamp2 = value.format(dateFormat);
                            const timex = new recognizers_text_data_types_timex_expression_1.TimexProperty(timestamp2);
                            return {
                                value: timex.toNaturalLanguage(timestamp1),
                                error
                            };
                        }
                    }, functionUtils_1.FunctionUtils.verifyString);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, undefined, returnType_1.ReturnType.String, returnType_1.ReturnType.String);
                }
            }
            exports.DateReadBack = DateReadBack;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "@microsoft/recognizers-text-data-types-timex-expression": 213
        }],
        33: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return a number of ticks that the two timestamps differ.
             */
            class DateTimeDiff extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [DateTimeDiff](xref:adaptive-expressions.DateTimeDiff) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.DateTimeDiff, DateTimeDiff.evaluator, returnType_1.ReturnType.Number, DateTimeDiff.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let value;
                    let dateTimeStart;
                    let dateTimeEnd;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        ({value: dateTimeStart, error: error} = functionUtils_internal_1.InternalFunctionUtils.ticks(args[0]));
                        if (!error) {
                            ({value: dateTimeEnd, error: error} = functionUtils_internal_1.InternalFunctionUtils.ticks(args[1]));
                        }
                    }
                    if (!error) {
                        value = dateTimeStart - dateTimeEnd;
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateArityAndAnyType(expression, 2, 2, returnType_1.ReturnType.String);
                }
            }
            exports.DateTimeDiff = DateTimeDiff;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        34: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the day of the month from a timestamp.
             */
            class DayOfMonth extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [DayOfMonth](xref:adaptive-expressions.DayOfMonth) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.DayOfMonth, DayOfMonth.evaluator(), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateUnaryString);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => functionUtils_internal_1.InternalFunctionUtils.parseTimestamp(args[0], (timestamp) => timestamp.getUTCDate()), functionUtils_1.FunctionUtils.verifyString);
                }
            }
            exports.DayOfMonth = DayOfMonth;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        35: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the day of the week from a timestamp.
             */
            class DayOfWeek extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [DayOfWeek](xref:adaptive-expressions.DayOfWeek) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.DayOfWeek, DayOfWeek.evaluator(), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateUnaryString);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => functionUtils_internal_1.InternalFunctionUtils.parseTimestamp(args[0], (timestamp) => timestamp.getUTCDay()), functionUtils_1.FunctionUtils.verifyString);
                }
            }
            exports.DayOfWeek = DayOfWeek;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        36: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the day of the year from a timestamp.
             */
            class DayOfYear extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [DayOfYear](xref:adaptive-expressions.DayOfYear) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.DayOfYear, DayOfYear.evaluator(), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateUnaryString);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => functionUtils_internal_1.InternalFunctionUtils.parseTimestamp(args[0], (timestamp) => moment_1.default(timestamp).utc().dayOfYear()), functionUtils_1.FunctionUtils.verifyString);
                }
            }
            exports.DayOfYear = DayOfYear;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "moment": 514
        }],
        37: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const multivariateNumericEvaluator_1 = require("./multivariateNumericEvaluator");
            /**
             * Return the integer result from dividing two numbers.
             */
            class Divide extends multivariateNumericEvaluator_1.MultivariateNumericEvaluator {
                /**
                     * Initializes a new instance of the [Divide](xref:adaptive-expressions.Divide) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Divide, Divide.func, Divide.verify);
                }
                /**
                     * @private
                     */
                static func(args)
                {
                    return Math.floor(Number(args[0]) / Number(args[1]));
                }
                /**
                     * @private
                     */
                static verify(val, expression, pos)
                {
                    let error = functionUtils_1.FunctionUtils.verifyNumber(val, expression, pos);
                    if (!error && pos > 0 && Number(val) === 0) {
                        error = `Cannot divide by 0 from ${expression}`;
                    }
                    return error;
                }
            }
            exports.Divide = Divide;

        }, {
            "../expressionType": 183,
            "../functionUtils": 187,
            "./multivariateNumericEvaluator": 99
        }],
        38: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const options_1 = require("../options");
            const returnType_1 = require("../returnType");
            /**
             * The indexing operator ([ ]) selects a single element from a sequence.
             * Support number index for list or string index for object.
             */
            class Element extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Element](xref:adaptive-expressions.Element) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Element, Element.evaluator, returnType_1.ReturnType.Object, functionUtils_1.FunctionUtils.validateBinary);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let value;
                    const instance = expression.children[0];
                    const index = expression.children[1];
                    const {value: inst, error: evalError} = instance.tryEvaluate(state, options);
                    let error = evalError;
                    if (!error) {
                        let idxValue;
                        const newOptions = new options_1.Options(options);
                        newOptions.nullSubstitution = undefined;
                        ({value: idxValue, error} = index.tryEvaluate(state, newOptions));
                        if (!error) {
                            if (Number.isInteger(idxValue)) {
                                ({value, error} = functionUtils_internal_1.InternalFunctionUtils.accessIndex(inst, Number(idxValue)));
                            }
                            else if (typeof idxValue === 'string') {
                                ({value, error} = functionUtils_internal_1.InternalFunctionUtils.accessProperty(inst, idxValue.toString()));
                            }
                            else {
                                error = `Could not coerce ${index} to an int or string.`;
                            }
                            return {
                                value,
                                error
                            };
                        }
                    }
                }
            }
            exports.Element = Element;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../options": 195,
            "../returnType": 204
        }],
        39: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const comparisonEvaluator_1 = require("./comparisonEvaluator");
            /**
             * Check whether an instance is empty. Return true if the input is empty. Empty means:
             * 1.Input is null or undefined.
             * 2.Input is a null or empty string.
             * 3.Input is zero size collection.
             * 4.Input is an object with no property.
             */
            class Empty extends comparisonEvaluator_1.ComparisonEvaluator {
                /**
                     * Initializes a new instance of the [Empty](xref:adaptive-expressions.Empty) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Empty, Empty.func, functionUtils_1.FunctionUtils.validateUnary, functionUtils_1.FunctionUtils.verifyContainer);
                }
                /**
                     * @private
                     */
                static func(args)
                {
                    return Empty.isEmpty(args[0]);
                }
                /**
                     * @private
                     */
                static isEmpty(instance)
                {
                    let result;
                    if (instance === undefined) {
                        result = true;
                    }
                    else if (typeof instance === 'string') {
                        result = instance === '';
                    }
                    else if (Array.isArray(instance)) {
                        result = instance.length === 0;
                    }
                    else if (instance instanceof Map) {
                        result = instance.size === 0;
                    }
                    else {
                        result = Object.keys(instance).length === 0;
                    }
                    return result;
                }
            }
            exports.Empty = Empty;

        }, {
            "../expressionType": 183,
            "../functionUtils": 187,
            "./comparisonEvaluator": 20
        }],
        40: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Check whether a string ends with a specific substring. Return true if the substring is found, or return false if not found.
             * This function is case-insensitive.
             */
            class EndsWith extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [EndsWith](xref:adaptive-expressions.EndsWith) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.EndsWith, EndsWith.evaluator(), returnType_1.ReturnType.Boolean, EndsWith.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[0]).endsWith(functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[1])), functionUtils_1.FunctionUtils.verifyStringOrNull);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateArityAndAnyType(expression, 2, 2, returnType_1.ReturnType.String);
                }
            }
            exports.EndsWith = EndsWith;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        41: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const comparisonEvaluator_1 = require("./comparisonEvaluator");
            /**
             * Check whether both values, expressions, or objects are equivalent.
             * Return true if both are equivalent, or return false if they're not equivalent.
             */
            class Equal extends comparisonEvaluator_1.ComparisonEvaluator {
                /**
                     * Initializes a new instance of the [Equal](xref:adaptive-expressions.Equal) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Equal, functionUtils_internal_1.InternalFunctionUtils.isEqual, functionUtils_1.FunctionUtils.validateBinary);
                }
            }
            exports.Equal = Equal;

        }, {
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "./comparisonEvaluator": 20
        }],
        42: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const comparisonEvaluator_1 = require("./comparisonEvaluator");
            /**
             * Evaluates an expression for truthiness.
             */
            class Exists extends comparisonEvaluator_1.ComparisonEvaluator {
                /**
                     * Initializes a new instance of the [Exists](xref:adaptive-expressions.Exists) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Exists, Exists.func, functionUtils_1.FunctionUtils.validateUnary, functionUtils_1.FunctionUtils.verifyNotNull);
                }
                /**
                     * @private
                     */
                static func(args)
                {
                    return args[0] !== undefined && args[0] !== null;
                }
            }
            exports.Exists = Exists;

        }, {
            "../expressionType": 183,
            "../functionUtils": 187,
            "./comparisonEvaluator": 20
        }],
        43: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the first item from a string or array.
             */
            class First extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [First](xref:adaptive-expressions.First) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.First, First.evaluator(), returnType_1.ReturnType.Object, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => {
                        let first;
                        if (typeof args[0] === 'string' && args[0].length > 0) {
                            first = args[0][0];
                        }
                        if (Array.isArray(args[0]) && args[0].length > 0) {
                            first = functionUtils_internal_1.InternalFunctionUtils.accessIndex(args[0], 0).value;
                        }
                        return first;
                    });
                }
            }
            exports.First = First;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        44: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             *  Flatten an array into non-array values. You can optionally set the maximum depth to flatten to.
             */
            class Flatten extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Flatten](xref:adaptive-expressions.Flatten) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Flatten, Flatten.evaluator(), returnType_1.ReturnType.Array, Flatten.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => {
                        const array = args[0];
                        const depth = args.length > 1 ? args[1] : 100;
                        return Flatten.evalFlatten(array, depth);
                    });
                }
                /**
                     * @private
                     */
                static evalFlatten(arr, dept)
                {
                    if (!functionUtils_1.FunctionUtils.isNumber(dept) || dept < 1) {
                        dept = 1;
                    }
                    let res = JSON.parse(JSON.stringify(arr));
                    const reduceArr = (_arr) => _arr.reduce((prevItem, curItem) => prevItem.concat(curItem), []);
                    for (let i = 0; i < dept; i++) {
                        const hasArrayItem = res.some((item) => Array.isArray(item));
                        if (hasArrayItem) {
                            res = reduceArr(res);
                        }
                        else {
                            break;
                        }
                    }
                    return res;
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.Number], returnType_1.ReturnType.Array);
                }
            }
            exports.Flatten = Flatten;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        45: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Convert the string version of a floating-point number to a floating-point number.
             */
            class Float extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Float](xref:adaptive-expressions.Float) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Float, Float.evaluator(), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => {
                        let error;
                        const value = parseFloat(args[0]);
                        if (!functionUtils_1.FunctionUtils.isNumber(value)) {
                            error = `parameter ${args[0]} is not a valid number string.`;
                        }
                        return {
                            value,
                            error
                        };
                    });
                }
            }
            exports.Float = Float;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        46: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const numberTransformEvaluator_1 = require("./numberTransformEvaluator");
            /**
             * Returns the largest integer less than or equal to the specified number.
             */
            class Floor extends numberTransformEvaluator_1.NumberTransformEvaluator {
                /**
                     * Initializes a new instance of the [Floor](xref:adaptive-expressions.Floor) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Floor, Floor.func);
                }
                /**
                     * @private
                     */
                static func(args)
                {
                    return Math.floor(args[0]);
                }
            }
            exports.Floor = Floor;

        }, {
            "../expressionType": 183,
            "./numberTransformEvaluator": 103
        }],
        47: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Operate on each element and return the new collection.
             */
            class Foreach extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Foreach](xref:adaptive-expressions.Foreach) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Foreach, functionUtils_internal_1.InternalFunctionUtils.foreach, returnType_1.ReturnType.Array, functionUtils_internal_1.InternalFunctionUtils.validateForeach);
                }
            }
            exports.Foreach = Foreach;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        48: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return a timestamp in the specified format.
             * Format reference: https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings
             */
            class FormatDateTime extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [FormatDateTime](xref:adaptive-expressions.FormatDateTime) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.FormatDateTime, FormatDateTime.evaluator(), returnType_1.ReturnType.String, FormatDateTime.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => {
                        let error;
                        let arg = args[0];
                        if (typeof arg === 'string') {
                            error = functionUtils_internal_1.InternalFunctionUtils.verifyTimestamp(arg.toString());
                        }
                        else {
                            arg = arg.toString();
                        }
                        let value;
                        if (!error) {
                            const dateString = new Date(arg).toISOString();
                            value =
                            args.length === 2
                            ? moment_1.default(dateString).format(functionUtils_1.FunctionUtils.timestampFormatter(args[1]))
                            : dateString;
                        }
                        return {
                            value,
                            error
                        };
                    });
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.String], returnType_1.ReturnType.String);
                }
            }
            exports.FormatDateTime = FormatDateTime;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "moment": 514
        }],
        49: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return a timestamp in the specified format from UNIX time (also know as Epoch time, POSIX time, UNIX Epoch time).
             */
            class FormatEpoch extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [FormatEpoch](xref:adaptive-expressions.FormatEpoch) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.FormatEpoch, FormatEpoch.evaluator(), returnType_1.ReturnType.String, FormatEpoch.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => {
                        let error;
                        let arg = args[0];
                        if (typeof arg !== 'number') {
                            error = `formatEpoch first argument ${arg} must be a number`;
                        }
                        else {
                            // Convert to ms
                            arg = arg * 1000;
                        }
                        let value;
                        if (!error) {
                            const dateString = new Date(arg).toISOString();
                            value =
                            args.length === 2
                            ? moment_1.default(dateString).format(functionUtils_1.FunctionUtils.timestampFormatter(args[1]))
                            : dateString;
                        }
                        return {
                            value,
                            error
                        };
                    });
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.String], returnType_1.ReturnType.Number);
                }
            }
            exports.FormatEpoch = FormatEpoch;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204,
            "moment": 514
        }],
        50: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const d3_format_1 = require("d3-format");
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            const localeInfo_1 = require("../localeInfo");
            /**
             * Format number into required decimal numbers.
             */
            class FormatNumber extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [FormatNumber](xref:adaptive-expressions.FormatNumber) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.FormatNumber, FormatNumber.evaluator(), returnType_1.ReturnType.String, FormatNumber.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithOptionsAndError((args, options) => {
                        let value = null;
                        let error;
                        const number = args[0];
                        const precision = args[1];
                        let locale = options.locale;
                        locale = functionUtils_1.FunctionUtils.determineLocale(args, 3, locale);
                        if (typeof number !== 'number') {
                            error = `formatNumber first argument ${number} must be a number`;
                        }
                        else if (typeof precision !== 'number') {
                            error = `formatNumber second argument ${precision} must be a number`;
                        }
                        else if (locale && typeof locale !== 'string') {
                            error = `formatNubmer third argument ${locale} is not a valid locale`;
                        }
                        else {
                            const fixedNotation = `,.${precision}f`;
                            const roundedNumber = this.roundToPrecision(number, precision);
                            const formatLocale = localeInfo_1.localeInfo[locale];
                            if (formatLocale !== undefined) {
                                value = d3_format_1.formatLocale(formatLocale).format(fixedNotation)(roundedNumber);
                            }
                            else {
                                value = d3_format_1.format(fixedNotation)(roundedNumber);
                            }
                        }
                        return {
                            value,
                            error
                        };
                    });
                }
                static validator(expr)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expr, [returnType_1.ReturnType.String], returnType_1.ReturnType.Number, returnType_1.ReturnType.Number);
                }
            }
            FormatNumber.roundToPrecision = (num, digits) => Math.round(num * Math.pow(10, digits)) / Math.pow(10, digits);
            exports.FormatNumber = FormatNumber;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../localeInfo": 191,
            "../returnType": 204,
            "d3-format": 369
        }],
        51: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const big_integer_1 = __importDefault(require("big-integer"));
            const moment_1 = __importDefault(require("moment"));
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return a timestamp in the specified format from ticks.
             */
            class FormatTicks extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [FormatTicks](xref:adaptive-expressions.FormatTicks) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.FormatTicks, FormatTicks.evaluator(), returnType_1.ReturnType.String, FormatTicks.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => {
                        let error;
                        let arg = args[0];
                        if (typeof arg === 'number') {
                            arg = big_integer_1.default(arg);
                        }
                        if (typeof arg === 'string') {
                            arg = big_integer_1.default(arg);
                        }
                        if (!big_integer_1.default.isInstance(arg)) {
                            error = `formatTicks first argument ${arg} is not a number, numeric string or bigInt`;
                        }
                        else {
                            // Convert to ms
                            arg = arg
                            .subtract(functionUtils_internal_1.InternalFunctionUtils.UnixMilliSecondToTicksConstant)
                            .divide(functionUtils_internal_1.InternalFunctionUtils.MillisecondToTickConstant)
                            .toJSNumber();
                        }
                        let value;
                        if (!error) {
                            const dateString = new Date(arg).toISOString();
                            value =
                            args.length === 2
                            ? moment_1.default(dateString).format(functionUtils_1.FunctionUtils.timestampFormatter(args[1]))
                            : dateString;
                        }
                        return {
                            value,
                            error
                        };
                    });
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.String], returnType_1.ReturnType.Number);
                }
            }
            exports.FormatTicks = FormatTicks;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "big-integer": 367,
            "moment": 514
        }],
        52: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the current timestamp plus the specified time units.
             */
            class GetFutureTime extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [GetFutureTime](xref:adaptive-expressions.GetFutureTime) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.GetFutureTime, GetFutureTime.evaluator, returnType_1.ReturnType.String, GetFutureTime.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expression, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (Number.isInteger(args[0]) && typeof args[1] === 'string') {
                            const format = args.length === 3 ? functionUtils_1.FunctionUtils.timestampFormatter(args[2]) : functionUtils_1.FunctionUtils.DefaultDateTimeFormat;
                            const {duration, tsStr} = functionUtils_internal_1.InternalFunctionUtils.timeUnitTransformer(args[0], args[1]);
                            if (tsStr === undefined) {
                                error = `${args[2]} is not a valid time unit.`;
                            }
                            else {
                                const dur = duration;
                                ({value, error} = functionUtils_internal_1.InternalFunctionUtils.parseTimestamp(new Date().toISOString(), (dt) => {
                                    return moment_1.default(dt).utc().add(dur, tsStr).format(format);
                                }));
                            }
                        }
                        else {
                            error = `${expression} should contain a time interval integer, a string unit of time and an optional output format string.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.String], returnType_1.ReturnType.Number, returnType_1.ReturnType.String);
                }
            }
            exports.GetFutureTime = GetFutureTime;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "moment": 514
        }],
        53: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const returnType_1 = require("../returnType");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const timeZoneConverter_1 = require("../timeZoneConverter");
            const moment_timezone_1 = require("moment-timezone");
            const moment_1 = __importDefault(require("moment"));
            const recognizers_text_data_types_timex_expression_1 = require("@microsoft/recognizers-text-data-types-timex-expression");
            /**
             * Return the next viable date of a timex expression based on the current date and user's timezone.
             */
            class GetNextViableDate extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [GetNextViableDate](xref:adaptive-expressions.GetNextViableDate) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.GetNextViableDate, GetNextViableDate.evaluator, returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnaryOrBinaryString);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let parsed;
                    const currentTime = moment_1.default(new Date().toISOString());
                    let validYear = 0;
                    let validMonth = 0;
                    let validDay = 0;
                    let convertedDateTime;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        ({timexProperty: parsed, error: error} = functionUtils_internal_1.InternalFunctionUtils.parseTimexProperty(args[0]));
                    }
                    if (parsed && !error) {
                        if (parsed.year || !parsed.month || !parsed.dayOfMonth) {
                            error = `${args[0]} must be a timex string which only contains month and day-of-month, for example: 'XXXX-10-31'.`;
                        }
                    }
                    if (!error) {
                        if (args.length === 2 && typeof args[1] === 'string') {
                            const timeZone = timeZoneConverter_1.TimeZoneConverter.windowsToIana(args[1]);
                            if (!timeZoneConverter_1.TimeZoneConverter.verifyTimeZoneStr(timeZone)) {
                                error = `${args[1]} is not a valid timezone`;
                            }
                            if (!error) {
                                convertedDateTime = moment_timezone_1.tz(currentTime.utc(), timeZone);
                            }
                        }
                        else {
                            convertedDateTime = currentTime.utc();
                        }
                    }
                    if (!error) {
                        const year = convertedDateTime.year();
                        const month = convertedDateTime.month() + 1;
                        const dayOfMonth = convertedDateTime.date();
                        if (parsed.month > month || (parsed.month === month && parsed.dayOfMonth >= dayOfMonth)) {
                            validYear = year;
                        }
                        else {
                            validYear = year + 1;
                        }
                        validMonth = parsed.month;
                        validDay = parsed.dayOfMonth;
                        if (validMonth === 2 && validDay === 29) {
                            while (!GetNextViableDate.leapYear(validYear)) {
                                validYear += 1;
                            }
                        }
                    }
                    const value = recognizers_text_data_types_timex_expression_1.TimexProperty.fromDate(new Date(validYear, validMonth - 1, validDay)).timex;
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static leapYear(year)
                {
                    return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;
                }
            }
            exports.GetNextViableDate = GetNextViableDate;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "../timeZoneConverter": 205,
            "@microsoft/recognizers-text-data-types-timex-expression": 213,
            "moment": 514,
            "moment-timezone": 512
        }],
        54: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const returnType_1 = require("../returnType");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const timeZoneConverter_1 = require("../timeZoneConverter");
            const moment_timezone_1 = require("moment-timezone");
            const moment_1 = __importDefault(require("moment"));
            const recognizers_text_data_types_timex_expression_1 = require("@microsoft/recognizers-text-data-types-timex-expression");
            /**
             * Return the next viable time of a timex expression based on the current time and user's timezone.
             */
            class GetNextViableTime extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [GetNextViableTime](xref:adaptive-expressions.GetNextViableTime) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.GetNextViableTime, GetNextViableTime.evaluator, returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnaryOrBinaryString);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let parsed;
                    const currentTime = moment_1.default(new Date().toISOString());
                    let validHour = 0;
                    let validMinute = 0;
                    let validSecond = 0;
                    let convertedDateTime;
                    const formatRegex = /TXX:[0-5][0-9]:[0-5][0-9]/g;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (!formatRegex.test(args[0])) {
                            error = `${args[0]}  must be a timex string which only contains minutes and seconds, for example: 'TXX:15:28'`;
                        }
                    }
                    if (!error) {
                        if (args.length === 2 && typeof args[1] === 'string') {
                            const timeZone = timeZoneConverter_1.TimeZoneConverter.windowsToIana(args[1]);
                            if (!timeZoneConverter_1.TimeZoneConverter.verifyTimeZoneStr(timeZone)) {
                                error = `${args[1]} is not a valid timezone`;
                            }
                            if (!error) {
                                convertedDateTime = moment_timezone_1.tz(currentTime.utc(), timeZone);
                            }
                        }
                        else {
                            convertedDateTime = currentTime.utc();
                        }
                    }
                    if (!error) {
                        ({timexProperty: parsed, error: error} = functionUtils_internal_1.InternalFunctionUtils.parseTimexProperty(args[0].replace('XX', '00')));
                    }
                    if (!error) {
                        const hour = convertedDateTime.hour();
                        const minute = convertedDateTime.minute();
                        const second = convertedDateTime.second();
                        if (parsed.minute > minute || (parsed.minute === minute && parsed.second >= second)) {
                            validHour = hour;
                        }
                        else {
                            validHour = hour + 1;
                        }
                        if (validHour >= 24) {
                            validHour -= 24;
                        }
                        validMinute = parsed.minute;
                        validSecond = parsed.second;
                    }
                    const value = recognizers_text_data_types_timex_expression_1.TimexProperty.fromTime(new recognizers_text_data_types_timex_expression_1.Time(validHour, validMinute, validSecond)).timex;
                    return {
                        value,
                        error
                    };
                }
            }
            exports.GetNextViableTime = GetNextViableTime;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "../timeZoneConverter": 205,
            "@microsoft/recognizers-text-data-types-timex-expression": 213,
            "moment": 514,
            "moment-timezone": 512
        }],
        55: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the current timestamp minus the specified time units.
             */
            class GetPastTime extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [GetPastTime](xref:adaptive-expressions.GetPastTime) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.GetPastTime, GetPastTime.evaluator, returnType_1.ReturnType.String, GetPastTime.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expression, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (Number.isInteger(args[0]) && typeof args[1] === 'string') {
                            const format = args.length === 3 ? functionUtils_1.FunctionUtils.timestampFormatter(args[2]) : functionUtils_1.FunctionUtils.DefaultDateTimeFormat;
                            const {duration, tsStr} = functionUtils_internal_1.InternalFunctionUtils.timeUnitTransformer(args[0], args[1]);
                            if (tsStr === undefined) {
                                error = `${args[2]} is not a valid time unit.`;
                            }
                            else {
                                const dur = duration;
                                ({value, error} = functionUtils_internal_1.InternalFunctionUtils.parseTimestamp(new Date().toISOString(), (dt) => {
                                    return moment_1.default(dt).utc().subtract(dur, tsStr).format(format);
                                }));
                            }
                        }
                        else {
                            error = `${expression} should contain a time interval integer, a string unit of time and an optional output format string.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.String], returnType_1.ReturnType.Number, returnType_1.ReturnType.String);
                }
            }
            exports.GetPastTime = GetPastTime;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "moment": 514
        }],
        56: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const returnType_1 = require("../returnType");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const timeZoneConverter_1 = require("../timeZoneConverter");
            const moment_timezone_1 = require("moment-timezone");
            const moment_1 = __importDefault(require("moment"));
            const recognizers_text_data_types_timex_expression_1 = require("@microsoft/recognizers-text-data-types-timex-expression");
            /**
             * Return the previous viable date of a timex expression based on the current date and user's timezone.
             */
            class GetPreviousViableDate extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [GetPreviousViableDate](xref:adaptive-expressions.GetPreviousViableDate) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.GetPreviousViableDate, GetPreviousViableDate.evaluator, returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnaryOrBinaryString);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let parsed;
                    const currentTime = moment_1.default(new Date().toISOString());
                    let validYear = 0;
                    let validMonth = 0;
                    let validDay = 0;
                    let convertedDateTime;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        ({timexProperty: parsed, error: error} = functionUtils_internal_1.InternalFunctionUtils.parseTimexProperty(args[0]));
                    }
                    if (parsed && !error) {
                        if (parsed.year || !parsed.month || !parsed.dayOfMonth) {
                            error = `${args[0]} must be a timex string which only contains month and day-of-month, for example: 'XXXX-10-31'.`;
                        }
                    }
                    if (!error) {
                        if (args.length === 2 && typeof args[1] === 'string') {
                            const timeZone = timeZoneConverter_1.TimeZoneConverter.windowsToIana(args[1]);
                            if (!timeZoneConverter_1.TimeZoneConverter.verifyTimeZoneStr(timeZone)) {
                                error = `${args[1]} is not a valid timezone`;
                            }
                            if (!error) {
                                convertedDateTime = moment_timezone_1.tz(currentTime.utc(), timeZone);
                            }
                        }
                        else {
                            convertedDateTime = currentTime.utc();
                        }
                    }
                    if (!error) {
                        const year = convertedDateTime.year();
                        const month = convertedDateTime.month() + 1;
                        const dayOfMonth = convertedDateTime.date();
                        if (parsed.month < month || (parsed.month === month && parsed.dayOfMonth < dayOfMonth)) {
                            validYear = year;
                        }
                        else {
                            validYear = year - 1;
                        }
                        validMonth = parsed.month;
                        validDay = parsed.dayOfMonth;
                        if (validMonth === 2 && validDay === 29) {
                            while (!GetPreviousViableDate.leapYear(validYear)) {
                                validYear -= 1;
                            }
                        }
                    }
                    const value = recognizers_text_data_types_timex_expression_1.TimexProperty.fromDate(new Date(validYear, validMonth - 1, validDay)).timex;
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static leapYear(year)
                {
                    return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;
                }
            }
            exports.GetPreviousViableDate = GetPreviousViableDate;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "../timeZoneConverter": 205,
            "@microsoft/recognizers-text-data-types-timex-expression": 213,
            "moment": 514,
            "moment-timezone": 512
        }],
        57: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const returnType_1 = require("../returnType");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const timeZoneConverter_1 = require("../timeZoneConverter");
            const moment_timezone_1 = require("moment-timezone");
            const moment_1 = __importDefault(require("moment"));
            const recognizers_text_data_types_timex_expression_1 = require("@microsoft/recognizers-text-data-types-timex-expression");
            /**
             * Return the previous viable time of a timex expression based on the current time and user's timezone.
             */
            class GetPreviousViableTime extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [GetPreviousViableTime](xref:adaptive-expressions.GetPreviousViableTime) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.GetPreviousViableTime, GetPreviousViableTime.evaluator, returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnaryOrBinaryString);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let parsed;
                    const currentTime = moment_1.default(new Date().toISOString());
                    let validHour = 0;
                    let validMinute = 0;
                    let validSecond = 0;
                    let convertedDateTime;
                    const formatRegex = /TXX:[0-5][0-9]:[0-5][0-9]/g;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (!formatRegex.test(args[0])) {
                            error = `${args[0]}  must be a timex string which only contains minutes and seconds, for example: 'TXX:15:28'`;
                        }
                    }
                    if (!error) {
                        if (args.length === 2 && typeof args[1] === 'string') {
                            const timeZone = timeZoneConverter_1.TimeZoneConverter.windowsToIana(args[1]);
                            if (!timeZoneConverter_1.TimeZoneConverter.verifyTimeZoneStr(timeZone)) {
                                error = `${args[1]} is not a valid timezone`;
                            }
                            if (!error) {
                                convertedDateTime = moment_timezone_1.tz(currentTime.utc(), timeZone);
                            }
                        }
                        else {
                            convertedDateTime = currentTime.utc();
                        }
                    }
                    if (!error) {
                        ({timexProperty: parsed, error: error} = functionUtils_internal_1.InternalFunctionUtils.parseTimexProperty(args[0].replace('XX', '00')));
                    }
                    if (!error) {
                        const hour = convertedDateTime.hour();
                        const minute = convertedDateTime.minute();
                        const second = convertedDateTime.second();
                        if (parsed.minute < minute || (parsed.minute === minute && parsed.second < second)) {
                            validHour = hour;
                        }
                        else {
                            validHour = hour - 1;
                        }
                        if (validHour < 0) {
                            validHour += 24;
                        }
                        validMinute = parsed.minute;
                        validSecond = parsed.second;
                    }
                    const value = recognizers_text_data_types_timex_expression_1.TimexProperty.fromTime(new recognizers_text_data_types_timex_expression_1.Time(validHour, validMinute, validSecond)).timex;
                    return {
                        value,
                        error
                    };
                }
            }
            exports.GetPreviousViableTime = GetPreviousViableTime;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "../timeZoneConverter": 205,
            "@microsoft/recognizers-text-data-types-timex-expression": 213,
            "moment": 514,
            "moment-timezone": 512
        }],
        58: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const simpleObjectMemory_1 = require("../memory/simpleObjectMemory");
            const returnType_1 = require("../returnType");
            /**
             * Retrieve the value of the specified property from the JSON object.
             */
            class GetProperty extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [GetProperty](xref:adaptive-expressions.GetProperty) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.GetProperty, GetProperty.evaluator, returnType_1.ReturnType.Object, GetProperty.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let value;
                    let property;
                    const children = expression.children;
                    const {value: firstItem, error: childrenError} = children[0].tryEvaluate(state, options);
                    let error = childrenError;
                    if (!error) {
                        if (children.length === 1) {
                            // get root value from memory
                            if (typeof firstItem === 'string') {
                                value = functionUtils_internal_1.InternalFunctionUtils.wrapGetValue(state, firstItem, options);
                            }
                            else {
                                error = `"Single parameter ${children[0]} is not a string."`;
                            }
                        }
                        else {
                            // get the peoperty value from the instance
                            ({value: property, error} = children[1].tryEvaluate(state, options));
                            if (!error) {
                                value = functionUtils_internal_1.InternalFunctionUtils.wrapGetValue(new simpleObjectMemory_1.SimpleObjectMemory(firstItem), property.toString(), options);
                            }
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.String], returnType_1.ReturnType.Object);
                }
            }
            exports.GetProperty = GetProperty;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../memory/simpleObjectMemory": 193,
            "../returnType": 204
        }],
        59: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = require("moment");
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Returns time of day for a given timestamp.
             */
            class GetTimeOfDay extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [GetTimeOfDay](xref:adaptive-expressions.GetTimeOfDay) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.GetTimeOfDay, GetTimeOfDay.evaluator(), returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnaryString);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => {
                        let value;
                        const error = functionUtils_internal_1.InternalFunctionUtils.verifyISOTimestamp(args[0]);
                        if (!error) {
                            const thisTime = moment_1.parseZone(args[0]).hour() * 100 + moment_1.parseZone(args[0]).minute();
                            if (thisTime === 0) {
                                value = 'midnight';
                            }
                            else if (thisTime > 0 && thisTime < 1200) {
                                value = 'morning';
                            }
                            else if (thisTime === 1200) {
                                value = 'noon';
                            }
                            else if (thisTime > 1200 && thisTime < 1800) {
                                value = 'afternoon';
                            }
                            else if (thisTime >= 1800 && thisTime <= 2200) {
                                value = 'evening';
                            }
                            else if (thisTime > 2200 && thisTime <= 2359) {
                                value = 'night';
                            }
                        }
                        return {
                            value,
                            error
                        };
                    }, functionUtils_1.FunctionUtils.verifyString);
                }
            }
            exports.GetTimeOfDay = GetTimeOfDay;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "moment": 514
        }],
        60: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const comparisonEvaluator_1 = require("./comparisonEvaluator");
            /**
             * Check whether the first value is greater than the second value.
             * Return true if the first value is more, or return false if less.
             */
            class GreaterThan extends comparisonEvaluator_1.ComparisonEvaluator {
                /**
                     * Initializes a new instance of the [GreaterThan](xref:adaptive-expressions.GreaterThan) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.GreaterThan, GreaterThan.func, functionUtils_1.FunctionUtils.validateBinaryNumberOrString, functionUtils_1.FunctionUtils.verifyNumberOrString);
                }
                /**
                     * @private
                     */
                static func(args)
                {
                    return args[0] > args[1];
                }
            }
            exports.GreaterThan = GreaterThan;

        }, {
            "../expressionType": 183,
            "../functionUtils": 187,
            "./comparisonEvaluator": 20
        }],
        61: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const comparisonEvaluator_1 = require("./comparisonEvaluator");
            /**
             * Check whether the first value is greater than or equal to the second value. Return true when the first value is greater or equal,
             * or return false if the first value is less.
             */
            class GreaterThanOrEqual extends comparisonEvaluator_1.ComparisonEvaluator {
                /**
                     * Initializes a new instance of the [GreaterThanOrEqual](xref:adaptive-expressions.GreaterThanOrEqual) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.GreaterThanOrEqual, GreaterThanOrEqual.func, functionUtils_1.FunctionUtils.validateBinaryNumberOrString, functionUtils_1.FunctionUtils.verifyNumberOrString);
                }
                /**
                     * @private
                     */
                static func(args)
                {
                    return args[0] >= args[1];
                }
            }
            exports.GreaterThanOrEqual = GreaterThanOrEqual;

        }, {
            "../expressionType": 183,
            "../functionUtils": 187,
            "./comparisonEvaluator": 20
        }],
        62: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const options_1 = require("../options");
            const returnType_1 = require("../returnType");
            /**
             * Check whether an expression is true or false. Based on the result, return a specified value.
             */
            class If extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [If](xref:adaptive-expressions.If) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.If, If.evaluator, returnType_1.ReturnType.Object, If.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let result;
                    let error;
                    const newOptions = new options_1.Options(options);
                    newOptions.nullSubstitution = undefined;
                    ({value: result, error} = expression.children[0].tryEvaluate(state, newOptions));
                    if (!error && functionUtils_internal_1.InternalFunctionUtils.isLogicTrue(result)) {
                        ({value: result, error} = expression.children[1].tryEvaluate(state, options));
                    }
                    else {
                        ({value: result, error} = expression.children[2].tryEvaluate(state, options));
                    }
                    return {
                        value: result,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expr)
                {
                    functionUtils_1.FunctionUtils.validateArityAndAnyType(expr, 3, 3);
                }
            }
            exports.If = If;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../options": 195,
            "../returnType": 204
        }],
        63: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Mark a clause so that MostSpecificSelector will ignore it.
             * MostSpecificSelector considers A &amp; B to be more specific than A, but some clauses are unique and incomparable.
             *
             */
            class Ignore extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Ignore](xref:adaptive-expressions.Ignore) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Ignore, Ignore.evaluator, returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnaryBoolean);
                    this.negation = this;
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    return expression.children[0].tryEvaluate(state, options);
                }
            }
            exports.Ignore = Ignore;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        64: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            function __export(m) {
                for (var p in m)
                    if (!exports.hasOwnProperty(p))
                        exports[p] = m[p];
            }
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            __export(require("./accessor"));
            __export(require("./add"));
            __export(require("./addDays"));
            __export(require("./addHours"));
            __export(require("./addMinutes"));
            __export(require("./addOrdinal"));
            __export(require("./addProperty"));
            __export(require("./addSeconds"));
            __export(require("./addToTime"));
            __export(require("./and"));
            __export(require("./average"));
            __export(require("./base64"));
            __export(require("./base64ToBinary"));
            __export(require("./base64ToString"));
            __export(require("./binary"));
            __export(require("./bool"));
            __export(require("./ceiling"));
            __export(require("./coalesce"));
            __export(require("./comparisonEvaluator"));
            __export(require("./concat"));
            __export(require("./contains"));
            __export(require("./convertFromUTC"));
            __export(require("./convertToUTC"));
            __export(require("./count"));
            __export(require("./countWord"));
            __export(require("./createArray"));
            __export(require("./dataUri"));
            __export(require("./dataUriToBinary"));
            __export(require("./dataUriToString"));
            __export(require("./dateFunc"));
            __export(require("./dateReadBack"));
            __export(require("./dateTimeDiff"));
            __export(require("./dayOfMonth"));
            __export(require("./dayOfWeek"));
            __export(require("./dayOfYear"));
            __export(require("./divide"));
            __export(require("./element"));
            __export(require("./empty"));
            __export(require("./endsWith"));
            __export(require("./equal"));
            __export(require("./exists"));
            __export(require("./flatten"));
            __export(require("./first"));
            __export(require("./float"));
            __export(require("./floor"));
            __export(require("./foreach"));
            __export(require("./formatDateTime"));
            __export(require("./formatEpoch"));
            __export(require("./formatNumber"));
            __export(require("./formatTicks"));
            __export(require("./getFutureTime"));
            __export(require("./getNextViableDate"));
            __export(require("./getNextViableTime"));
            __export(require("./getPastTime"));
            __export(require("./getPreviousViableDate"));
            __export(require("./getPreviousViableTime"));
            __export(require("./getPastTime"));
            __export(require("./getProperty"));
            __export(require("./getTimeOfDay"));
            __export(require("./greaterThan"));
            __export(require("./greaterThanOrEqual"));
            __export(require("./if"));
            __export(require("./ignore"));
            __export(require("./indexOf"));
            __export(require("./indicesAndValues"));
            __export(require("./int"));
            __export(require("./intersection"));
            __export(require("./isArray"));
            __export(require("./isBoolean"));
            __export(require("./isDate"));
            __export(require("./isDateRange"));
            __export(require("./isDateTime"));
            __export(require("./isDefinite"));
            __export(require("./isDuration"));
            __export(require("./isFloat"));
            __export(require("./isInteger"));
            __export(require("./isMatch"));
            __export(require("./isObject"));
            __export(require("./isPresent"));
            __export(require("./isString"));
            __export(require("./isTime"));
            __export(require("./isTimeRange"));
            __export(require("./join"));
            __export(require("./jPath"));
            __export(require("./json"));
            __export(require("./jsonStringify"));
            __export(require("./last"));
            __export(require("./lastIndexOf"));
            __export(require("./length"));
            __export(require("./lessThan"));
            __export(require("./lessThanOrEqual"));
            __export(require("./max"));
            __export(require("./merge"));
            __export(require("./min"));
            __export(require("./mod"));
            __export(require("./month"));
            __export(require("./multiply"));
            __export(require("./multivariateNumericEvaluator"));
            __export(require("./newGuid"));
            __export(require("./not"));
            __export(require("./notEqual"));
            __export(require("./numberTransformEvaluator"));
            __export(require("./numericEvaluator"));
            __export(require("./optional"));
            __export(require("./or"));
            __export(require("./power"));
            __export(require("./rand"));
            __export(require("./range"));
            __export(require("./removeProperty"));
            __export(require("./replace"));
            __export(require("./replaceIgnoreCase"));
            __export(require("./reverse"));
            __export(require("./round"));
            __export(require("./select"));
            __export(require("./sentenceCase"));
            __export(require("./setPathToValue"));
            __export(require("./setProperty"));
            __export(require("./skip"));
            __export(require("./sortBy"));
            __export(require("./sortByDescending"));
            __export(require("./split"));
            __export(require("./startOfDay"));
            __export(require("./startOfHour"));
            __export(require("./startOfMonth"));
            __export(require("./startsWith"));
            __export(require("./string"));
            __export(require("./stringTransformEvaluator"));
            __export(require("./subArray"));
            __export(require("./substring"));
            __export(require("./subtract"));
            __export(require("./subtractFromTime"));
            __export(require("./sum"));
            __export(require("./take"));
            __export(require("./ticks"));
            __export(require("./ticksToDays"));
            __export(require("./ticksToHours"));
            __export(require("./ticksToMinutes"));
            __export(require("./timeTransformEvaluator"));
            __export(require("./titleCase"));
            __export(require("./toLower"));
            __export(require("./toUpper"));
            __export(require("./trim"));
            __export(require("./union"));
            __export(require("./unique"));
            __export(require("./uriComponent"));
            __export(require("./uriComponentToString"));
            __export(require("./uriHost"));
            __export(require("./uriPath"));
            __export(require("./uriPathAndQuery"));
            __export(require("./uriPort"));
            __export(require("./uriQuery"));
            __export(require("./uriScheme"));
            __export(require("./utcNow"));
            __export(require("./where"));
            __export(require("./year"));

        }, {
            "./accessor": 2,
            "./add": 3,
            "./addDays": 4,
            "./addHours": 5,
            "./addMinutes": 6,
            "./addOrdinal": 7,
            "./addProperty": 8,
            "./addSeconds": 9,
            "./addToTime": 10,
            "./and": 11,
            "./average": 12,
            "./base64": 13,
            "./base64ToBinary": 14,
            "./base64ToString": 15,
            "./binary": 16,
            "./bool": 17,
            "./ceiling": 18,
            "./coalesce": 19,
            "./comparisonEvaluator": 20,
            "./concat": 21,
            "./contains": 22,
            "./convertFromUTC": 23,
            "./convertToUTC": 24,
            "./count": 25,
            "./countWord": 26,
            "./createArray": 27,
            "./dataUri": 28,
            "./dataUriToBinary": 29,
            "./dataUriToString": 30,
            "./dateFunc": 31,
            "./dateReadBack": 32,
            "./dateTimeDiff": 33,
            "./dayOfMonth": 34,
            "./dayOfWeek": 35,
            "./dayOfYear": 36,
            "./divide": 37,
            "./element": 38,
            "./empty": 39,
            "./endsWith": 40,
            "./equal": 41,
            "./exists": 42,
            "./first": 43,
            "./flatten": 44,
            "./float": 45,
            "./floor": 46,
            "./foreach": 47,
            "./formatDateTime": 48,
            "./formatEpoch": 49,
            "./formatNumber": 50,
            "./formatTicks": 51,
            "./getFutureTime": 52,
            "./getNextViableDate": 53,
            "./getNextViableTime": 54,
            "./getPastTime": 55,
            "./getPreviousViableDate": 56,
            "./getPreviousViableTime": 57,
            "./getProperty": 58,
            "./getTimeOfDay": 59,
            "./greaterThan": 60,
            "./greaterThanOrEqual": 61,
            "./if": 62,
            "./ignore": 63,
            "./indexOf": 65,
            "./indicesAndValues": 66,
            "./int": 67,
            "./intersection": 68,
            "./isArray": 69,
            "./isBoolean": 70,
            "./isDate": 71,
            "./isDateRange": 72,
            "./isDateTime": 73,
            "./isDefinite": 74,
            "./isDuration": 75,
            "./isFloat": 76,
            "./isInteger": 77,
            "./isMatch": 78,
            "./isObject": 79,
            "./isPresent": 80,
            "./isString": 81,
            "./isTime": 82,
            "./isTimeRange": 83,
            "./jPath": 84,
            "./join": 85,
            "./json": 86,
            "./jsonStringify": 87,
            "./last": 88,
            "./lastIndexOf": 89,
            "./length": 90,
            "./lessThan": 91,
            "./lessThanOrEqual": 92,
            "./max": 93,
            "./merge": 94,
            "./min": 95,
            "./mod": 96,
            "./month": 97,
            "./multiply": 98,
            "./multivariateNumericEvaluator": 99,
            "./newGuid": 100,
            "./not": 101,
            "./notEqual": 102,
            "./numberTransformEvaluator": 103,
            "./numericEvaluator": 104,
            "./optional": 105,
            "./or": 106,
            "./power": 107,
            "./rand": 108,
            "./range": 109,
            "./removeProperty": 110,
            "./replace": 111,
            "./replaceIgnoreCase": 112,
            "./reverse": 113,
            "./round": 114,
            "./select": 115,
            "./sentenceCase": 116,
            "./setPathToValue": 117,
            "./setProperty": 118,
            "./skip": 119,
            "./sortBy": 120,
            "./sortByDescending": 121,
            "./split": 122,
            "./startOfDay": 123,
            "./startOfHour": 124,
            "./startOfMonth": 125,
            "./startsWith": 126,
            "./string": 127,
            "./stringTransformEvaluator": 128,
            "./subArray": 129,
            "./substring": 130,
            "./subtract": 131,
            "./subtractFromTime": 132,
            "./sum": 133,
            "./take": 134,
            "./ticks": 135,
            "./ticksToDays": 136,
            "./ticksToHours": 137,
            "./ticksToMinutes": 138,
            "./timeTransformEvaluator": 139,
            "./titleCase": 140,
            "./toLower": 141,
            "./toUpper": 142,
            "./trim": 143,
            "./union": 144,
            "./unique": 145,
            "./uriComponent": 146,
            "./uriComponentToString": 147,
            "./uriHost": 148,
            "./uriPath": 149,
            "./uriPathAndQuery": 150,
            "./uriPort": 151,
            "./uriQuery": 152,
            "./uriScheme": 153,
            "./utcNow": 154,
            "./where": 155,
            "./year": 156
        }],
        65: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Returns the index of the first occurrence of a value in an array.
             * The zero-based index position of value if that value is found, or -1 if it is not.
             */
            class IndexOf extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IndexOf](xref:adaptive-expressions.IndexOf) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IndexOf, IndexOf.evaluator, returnType_1.ReturnType.Number, IndexOf.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let value = -1;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expression, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (args[0] == undefined || typeof args[0] === 'string') {
                            if (args[1] === undefined || typeof args[1] === 'string') {
                                value = functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[0]).indexOf(functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[1]));
                            }
                            else {
                                error = `Can only look for indexof string in ${expression}`;
                            }
                        }
                        else if (Array.isArray(args[0])) {
                            value = args[0].indexOf(args[1]);
                        }
                        else {
                            error = `${expression} works only on string or list.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [], returnType_1.ReturnType.String | returnType_1.ReturnType.Array, returnType_1.ReturnType.Object);
                }
            }
            exports.IndexOf = IndexOf;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        66: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Turn an array or object into an array of objects with index and value properties.
             * For arrays, the index is the position in the array.
             * For objects, it is the key for the value.
             */
            class IndicesAndValues extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IndicesAndValues](xref:adaptive-expressions.IndicesAndValues) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IndicesAndValues, IndicesAndValues.evaluator, returnType_1.ReturnType.Array, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let result = undefined;
                    let error = undefined;
                    let value = undefined;
                    ({value, error} = expression.children[0].tryEvaluate(state, options));
                    if (error === undefined) {
                        if (Array.isArray(value)) {
                            const tempList = [];
                            for (let i = 0; i < value.length; i++) {
                                tempList.push({
                                    index: i,
                                    value: value[i]
                                });
                            }
                            result = tempList;
                        }
                        else if (typeof value === 'object') {
                            const tempList = [];
                            for (const [index, val] of Object.entries(value)) {
                                tempList.push({
                                    index: index,
                                    value: val
                                });
                            }
                            result = tempList;
                        }
                        else {
                            error = `${expression.children[0]} is not array or object.`;
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
            }
            exports.IndicesAndValues = IndicesAndValues;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        67: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return the integer version of a string.
             */
            class Int extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Int](xref:adaptive-expressions.Int) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Int, Int.evaluator(), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => {
                        let error;
                        const value = parseInt(args[0], 10);
                        if (!functionUtils_1.FunctionUtils.isNumber(value)) {
                            error = `parameter ${args[0]} is not a valid number string.`;
                        }
                        return {
                            value,
                            error
                        };
                    });
                }
            }
            exports.Int = Int;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        68: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return a collection that has only the common items across the specified collections.
             * To appear in the result, an item must appear in all the collections passed to this function.
             * If one or more items have the same name,
             * the last item with that name appears in the result.
             */
            class Intersection extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Intersection](xref:adaptive-expressions.Intersection) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Intersection, Intersection.evaluator(), returnType_1.ReturnType.Array, Intersection.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => {
                        let result = args[0];
                        for (const arg of args) {
                            result = result.filter((e) => arg.indexOf(e) > -1);
                        }
                        return Array.from(new Set(result));
                    }, functionUtils_1.FunctionUtils.verifyList);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateArityAndAnyType(expression, 1, Number.MAX_SAFE_INTEGER, returnType_1.ReturnType.Array);
                }
            }
            exports.Intersection = Intersection;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        69: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return true if a given input is an array.
             */
            class IsArray extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IsArray](xref:adaptive-expressions.IsArray) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IsArray, IsArray.evaluator(), returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => Array.isArray(args[0]));
                }
            }
            exports.IsArray = IsArray;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        70: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return true if a given input is a Boolean.
             */
            class IsBoolean extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IsBoolean](xref:adaptive-expressions.IsBoolean) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IsBoolean, IsBoolean.evaluator(), returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => typeof args[0] === 'boolean');
                }
            }
            exports.IsBoolean = IsBoolean;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        71: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return true if a given `TimexProperty` or timex string refers to a valid date.
             * Valid dates contain the month and dayOfMonth, or contain the dayOfWeek.
             */
            class IsDate extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IsDate](xref:adaptive-expressions.IsDate) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IsDate, IsDate.evaluator, returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let parsed;
                    let value = false;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        ({timexProperty: parsed, error: error} = functionUtils_internal_1.InternalFunctionUtils.parseTimexProperty(args[0]));
                    }
                    if (parsed && !error) {
                        value = (parsed.month !== undefined && parsed.dayOfMonth !== undefined) || parsed.dayOfWeek !== undefined;
                    }
                    return {
                        value,
                        error
                    };
                }
            }
            exports.IsDate = IsDate;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        72: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return true if a given TimexProperty or Timex expression refers to a valid date range.
             */
            class IsDateRange extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IsDateRange](xref:adaptive-expressions.IsDateRange) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IsDateRange, IsDateRange.evaluator, returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let parsed;
                    let value = false;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        ({timexProperty: parsed, error: error} = functionUtils_internal_1.InternalFunctionUtils.parseTimexProperty(args[0]));
                    }
                    if (parsed && !error) {
                        value =
                        (parsed.year !== undefined && parsed.dayOfMonth === undefined) ||
                        (parsed.year !== undefined && parsed.month !== undefined && parsed.dayOfMonth === undefined) ||
                        (parsed.month !== undefined && parsed.dayOfMonth === undefined) ||
                        parsed.season !== undefined ||
                        parsed.weekOfYear !== undefined ||
                        parsed.weekOfMonth !== undefined;
                    }
                    return {
                        value,
                        error
                    };
                }
            }
            exports.IsDateRange = IsDateRange;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        73: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return true if a given input is a UTC ISO format (YYYY-MM-DDTHH:mm:ss.fffZ) timestamp string.
             */
            class IsDateTime extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IsDateTime](xref:adaptive-expressions.IsDateTime) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IsDateTime, IsDateTime.evaluator(), returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => typeof args[0] === 'string' && functionUtils_internal_1.InternalFunctionUtils.verifyISOTimestamp(args[0]) === undefined);
                }
            }
            exports.IsDateTime = IsDateTime;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        74: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return true if a given TimexProperty or Timex expression refers to a valid date. Valid dates contain the year, month and dayOfMonth.
             */
            class IsDefinite extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IsDefinite](xref:adaptive-expressions.IsDefinite) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IsDefinite, IsDefinite.evaluator, returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let parsed;
                    let value = false;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        ({timexProperty: parsed, error: error} = functionUtils_internal_1.InternalFunctionUtils.parseTimexProperty(args[0]));
                    }
                    if (!error) {
                        value =
                        parsed != undefined &&
                        parsed.year !== undefined &&
                        parsed.month !== undefined &&
                        parsed.dayOfMonth !== undefined;
                    }
                    return {
                        value,
                        error
                    };
                }
            }
            exports.IsDefinite = IsDefinite;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        75: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return true if a given TimexProperty or Timex expression refers to a valid duration.
             */
            class IsDuration extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IsDuration](xref:adaptive-expressions.IsDuration) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IsDuration, IsDuration.evaluator, returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let parsed;
                    let value = false;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        ({timexProperty: parsed, error: error} = functionUtils_internal_1.InternalFunctionUtils.parseTimexProperty(args[0]));
                    }
                    if (parsed && !error) {
                        value =
                        parsed.years !== undefined ||
                        parsed.months !== undefined ||
                        parsed.weeks !== undefined ||
                        parsed.days !== undefined ||
                        parsed.hours !== undefined ||
                        parsed.minutes !== undefined ||
                        parsed.seconds !== undefined;
                    }
                    return {
                        value,
                        error
                    };
                }
            }
            exports.IsDuration = IsDuration;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        76: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return true if a given input is a floating-point number.
             * Due to the alignment between C# and JavaScript, a number with an non-zero residue of its modulo 1 will be treated as a floating-point number.
             */
            class IsFloat extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IsFloat](xref:adaptive-expressions.IsFloat) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IsFloat, IsFloat.evaluator(), returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => functionUtils_1.FunctionUtils.isNumber(args[0]) && !Number.isInteger(args[0]));
                }
            }
            exports.IsFloat = IsFloat;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        77: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return true if a given input is an integer number. Due to the alignment between C# and JavaScript, a number with a zero residue of its modulo 1 will be treated as an integer number.
             */
            class IsInteger extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IsInteger](xref:adaptive-expressions.IsInteger) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IsInteger, IsInteger.evaluator(), returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => functionUtils_1.FunctionUtils.isNumber(args[0]) && Number.isInteger(args[0]));
                }
            }
            exports.IsInteger = IsInteger;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        78: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const commonRegex_1 = require("../commonRegex");
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return true if a given string matches a specified regular expression pattern.
             */
            class IsMatch extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IsMatch](xref:adaptive-expressions.IsMatch) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IsMatch, IsMatch.evaluator(), returnType_1.ReturnType.Boolean, IsMatch.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => {
                        let value = false;
                        let error;
                        if (args[0] === undefined || args[0] === '') {
                            value = false;
                            error = 'regular expression is empty.';
                        }
                        else {
                            const regex = commonRegex_1.CommonRegex.CreateRegex(args[1].toString());
                            value = regex.test(args[0].toString());
                        }
                        return {
                            value,
                            error
                        };
                    }, functionUtils_1.FunctionUtils.verifyStringOrNull);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateArityAndAnyType(expression, 2, 2, returnType_1.ReturnType.String);
                    const second = expression.children[1];
                    if (second.returnType === returnType_1.ReturnType.String && second.type === expressionType_1.ExpressionType.Constant) {
                        commonRegex_1.CommonRegex.CreateRegex(second.value.toString());
                    }
                }
            }
            exports.IsMatch = IsMatch;

        }, {
            "../commonRegex": 157,
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        79: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return true if a given input is a complex object or return false if it is a primitive object.
             * Primitive objects include strings, numbers, and Booleans;
             * complex types, contain properties.
             */
            class IsObject extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IsObject](xref:adaptive-expressions.IsObject) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IsObject, IsObject.evaluator(), returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => typeof args[0] === 'object');
                }
            }
            exports.IsObject = IsObject;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        80: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return true if a given TimexProperty or Timex expression refers to the present.
             */
            class IsPresent extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IsPresent](xref:adaptive-expressions.IsPresent) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IsPresent, IsPresent.evaluator, returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let parsed;
                    let value = false;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        ({timexProperty: parsed, error: error} = functionUtils_internal_1.InternalFunctionUtils.parseTimexProperty(args[0]));
                    }
                    if (parsed && !error) {
                        value = parsed.now !== undefined;
                    }
                    return {
                        value,
                        error
                    };
                }
            }
            exports.IsPresent = IsPresent;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        81: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return true if a given input is a string.
             */
            class IsString extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IsString](xref:adaptive-expressions.IsString) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IsString, IsString.evaluator(), returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => typeof args[0] === 'string');
                }
            }
            exports.IsString = IsString;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        82: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return true if a given TimexProperty or Timex expression refers to a valid time.
             * Valid time contains hours, minutes and seconds.
             */
            class IsTime extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IsTime](xref:adaptive-expressions.IsTime) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IsTime, IsTime.evaluator, returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let parsed;
                    let value = false;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        ({timexProperty: parsed, error: error} = functionUtils_internal_1.InternalFunctionUtils.parseTimexProperty(args[0]));
                    }
                    if (parsed && !error) {
                        value = parsed.hour !== undefined && parsed.minute !== undefined && parsed.second !== undefined;
                    }
                    return {
                        value,
                        error
                    };
                }
            }
            exports.IsTime = IsTime;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        83: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return true if a given `TimexProperty` or Timex string refers to a valid time range Valid time ranges contain partOfDay.
             */
            class IsTimeRange extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [IsTimeRange](xref:adaptive-expressions.IsTimeRange) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.IsTimeRange, IsTimeRange.evaluator, returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let parsed;
                    let value = false;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        ({timexProperty: parsed, error: error} = functionUtils_internal_1.InternalFunctionUtils.parseTimexProperty(args[0]));
                    }
                    if (parsed && !error) {
                        value = parsed.partOfDay !== undefined;
                    }
                    return {
                        value,
                        error
                    };
                }
            }
            exports.IsTimeRange = IsTimeRange;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        84: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importStar = (this && this.__importStar) || function(mod) {
                if (mod && mod.__esModule)
                    return mod;
                var result = {};
                if (mod != null)
                    for (var k in mod)
                        if (Object.hasOwnProperty.call(mod, k))
                            result[k] = mod[k];
                result["default"] = mod;
                return result;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const jsPath = __importStar(require("jspath"));
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Check JSON or a JSON string for nodes or values that match a path expression, and return the matching nodes.
             */
            class JPath extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [JPath](xref:adaptive-expressions.JPath) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.JPath, JPath.evaluator(), returnType_1.ReturnType.Object, JPath.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => JPath.evalJPath(args[0], args[1].toString()));
                }
                /**
                     * @private
                     */
                static evalJPath(jsonEntity, path)
                {
                    let error;
                    let evaled;
                    let json;
                    if (typeof jsonEntity === 'string') {
                        try {
                            json = JSON.parse(jsonEntity);
                        }
                        catch (e) {
                            error = `${jsonEntity} is not a valid json string`;
                        }
                    }
                    else if (typeof jsonEntity === 'object') {
                        json = jsonEntity;
                    }
                    else {
                        error = 'the first parameter should be either an object or a string';
                    }
                    if (!error) {
                        try {
                            evaled = jsPath.apply(path, json);
                        }
                        catch (e) {
                            error = `${path} is not a valid path + ${e}`;
                        }
                    }
                    return {
                        value: evaled,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expr)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expr, undefined, returnType_1.ReturnType.Object, returnType_1.ReturnType.String);
                }
            }
            exports.JPath = JPath;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204,
            "jspath": 372
        }],
        85: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return a string that has all the items from an array, with each character separated by a delimiter.
             */
            class Join extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the Join class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Join, Join.evaluator, returnType_1.ReturnType.String, Join.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expression, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (!Array.isArray(args[0])) {
                            error = `${expression.children[0]} evaluates to ${args[0]} which is not a list.`;
                        }
                        else {
                            if (args.length === 2) {
                                value = args[0].join(args[1]);
                            }
                            else {
                                if (args[0].length < 3) {
                                    value = args[0].join(args[2]);
                                }
                                else {
                                    const firstPart = args[0].slice(0, args[0].length - 1).join(args[1]);
                                    value = firstPart.concat(args[2], args[0][args[0].length - 1]);
                                }
                            }
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.String], returnType_1.ReturnType.Array, returnType_1.ReturnType.String);
                }
            }
            exports.Join = Join;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        86: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return the JavaScript Object Notation (JSON) type value or object of a string or XML.
             */
            class Json extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Json](xref:adaptive-expressions.Json) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Json, Json.evaluator(), returnType_1.ReturnType.Object, Json.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => JSON.parse(args[0].trim()));
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, undefined, returnType_1.ReturnType.String);
                }
            }
            exports.Json = Json;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        87: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return the string version of a value.
             */
            class JsonStringify extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [JsonStringify](xref:adaptive-expressions.JsonStringify) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.JsonStringify, JsonStringify.evaluator(), returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => {
                        return JSON.stringify(args[0]);
                    });
                }
            }
            exports.JsonStringify = JsonStringify;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        88: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the last item from a collection.
             */
            class Last extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Last](xref:adaptive-expressions.Last) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Last, Last.evaluator(), returnType_1.ReturnType.Object, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => {
                        let last;
                        if (typeof args[0] === 'string' && args[0].length > 0) {
                            last = args[0][args[0].length - 1];
                        }
                        if (Array.isArray(args[0]) && args[0].length > 0) {
                            last = functionUtils_internal_1.InternalFunctionUtils.accessIndex(args[0], args[0].length - 1).value;
                        }
                        return last;
                    });
                }
            }
            exports.Last = Last;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        89: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Returns the index of the last occurrence of a specified value in an array.
             * The zero-based index position of value if that value is found, or -1 if it is not.
             */
            class LastIndexOf extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [LastIndexOf](xref:adaptive-expressions.LastIndexOf) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.LastIndexOf, LastIndexOf.evaluator, returnType_1.ReturnType.Number, LastIndexOf.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let value = -1;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expression, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (args[0] == undefined || typeof args[0] === 'string') {
                            if (args[1] === undefined || typeof args[1] === 'string') {
                                const str = functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[0]);
                                const searchValue = functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[1]);
                                value = str.lastIndexOf(searchValue, str.length - 1);
                            }
                            else {
                                error = `Can only look for indexof string in ${expression}`;
                            }
                        }
                        else if (Array.isArray(args[0])) {
                            value = args[0].lastIndexOf(args[1]);
                        }
                        else {
                            error = `${expression} works only on string or list.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [], returnType_1.ReturnType.String | returnType_1.ReturnType.Array, returnType_1.ReturnType.Object);
                }
            }
            exports.LastIndexOf = LastIndexOf;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        90: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the length of a string.
             */
            class Length extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Length](xref:adaptive-expressions.Length) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Length, Length.evaluator(), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateUnaryString);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[0]).length, functionUtils_1.FunctionUtils.verifyStringOrNull);
                }
            }
            exports.Length = Length;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        91: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const comparisonEvaluator_1 = require("./comparisonEvaluator");
            /**
             * Check whether the first value is less than the second value.
             * Return true if the first value is less, or return false if the first value is more.
             */
            class LessThan extends comparisonEvaluator_1.ComparisonEvaluator {
                /**
                     * Initializes a new instance of the [LessThan](xref:adaptive-expressions.LessThan) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.LessThan, LessThan.func, functionUtils_1.FunctionUtils.validateBinaryNumberOrString, functionUtils_1.FunctionUtils.verifyNumberOrString);
                }
                /**
                     * @private
                     */
                static func(args)
                {
                    return args[0] < args[1];
                }
            }
            exports.LessThan = LessThan;

        }, {
            "../expressionType": 183,
            "../functionUtils": 187,
            "./comparisonEvaluator": 20
        }],
        92: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const comparisonEvaluator_1 = require("./comparisonEvaluator");
            /**
             * Check whether the first value is less than or equal to the second value.
             * Return true if the first value is less than or equal, or return false if the first value is more.
             */
            class LessThanOrEqual extends comparisonEvaluator_1.ComparisonEvaluator {
                /**
                     * Initializes a new instance of the [LessThanOrEqual](xref:adaptive-expressions.LessThanOrEqual) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.LessThanOrEqual, LessThanOrEqual.func, functionUtils_1.FunctionUtils.validateBinaryNumberOrString, functionUtils_1.FunctionUtils.verifyNumberOrString);
                }
                /**
                     * @private
                     */
                static func(args)
                {
                    return args[0] <= args[1];
                }
            }
            exports.LessThanOrEqual = LessThanOrEqual;

        }, {
            "../expressionType": 183,
            "../functionUtils": 187,
            "./comparisonEvaluator": 20
        }],
        93: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             *  Return the highest value from an array. The array is inclusive at both ends.
             */
            class Max extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Max](xref:adaptive-expressions.Max) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Max, Max.evaluator(), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateAtLeastOne);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => {
                        let result = Number.NEGATIVE_INFINITY;
                        if (args.length === 1) {
                            if (Array.isArray(args[0])) {
                                for (const value of args[0]) {
                                    result = Math.max(result, value);
                                }
                            }
                            else {
                                result = Math.max(result, args[0]);
                            }
                        }
                        else {
                            for (const arg of args) {
                                if (Array.isArray(arg)) {
                                    for (const value of arg) {
                                        result = Math.max(result, value);
                                    }
                                }
                                else {
                                    result = Math.max(result, arg);
                                }
                            }
                        }
                        return result;
                    }, functionUtils_1.FunctionUtils.verifyNumberOrNumericList);
                }
            }
            exports.Max = Max;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        94: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Merge two JSON objects into one JSON object.
             */
            class Merge extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Merge](xref:adaptive-expressions.Merge) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Merge, Merge.evaluator(), returnType_1.ReturnType.Object, Merge.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applySequenceWithError((args) => {
                        let value;
                        let error;
                        if (typeof args[0] === 'object' &&
                        !Array.isArray(args[0]) &&
                        typeof args[1] === 'object' &&
                        !Array.isArray(args[1])) {
                            Object.assign(args[0], args[1]);
                            value = args[0];
                        }
                        else {
                            error = `The argumets ${args[0]} and ${args[1]} must be JSON objects.`;
                        }
                        return {
                            value,
                            error
                        };
                    });
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateArityAndAnyType(expression, 2, Number.MAX_SAFE_INTEGER);
                }
            }
            exports.Merge = Merge;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        95: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return the lowest value from a set of numbers in an array.
             */
            class Min extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Min](xref:adaptive-expressions.Min) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Min, Min.evaluator(), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateAtLeastOne);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => {
                        let result = Number.POSITIVE_INFINITY;
                        if (args.length === 1) {
                            if (Array.isArray(args[0])) {
                                for (const value of args[0]) {
                                    result = Math.min(result, value);
                                }
                            }
                            else {
                                result = Math.min(result, args[0]);
                            }
                        }
                        else {
                            for (const arg of args) {
                                if (Array.isArray(arg)) {
                                    for (const value of arg) {
                                        result = Math.min(result, value);
                                    }
                                }
                                else {
                                    result = Math.min(result, arg);
                                }
                            }
                        }
                        return result;
                    }, functionUtils_1.FunctionUtils.verifyNumberOrNumericList);
                }
            }
            exports.Min = Min;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        96: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return the remainder from dividing two numbers.
             */
            class Mod extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Mod](xref:adaptive-expressions.Mod) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Mod, Mod.evaluator(), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateBinaryNumber);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => {
                        let error;
                        let value;
                        if (Number(args[1]) === 0) {
                            error = `Cannot mod by 0.`;
                        }
                        else {
                            value = args[0] % args[1];
                        }
                        return {
                            value,
                            error
                        };
                    }, functionUtils_1.FunctionUtils.verifyInteger);
                }
            }
            exports.Mod = Mod;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        97: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the month of the specified timestamp.
             */
            class Month extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Month](xref:adaptive-expressions.Month) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Month, Month.evaluator(), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateUnaryString);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => functionUtils_internal_1.InternalFunctionUtils.parseTimestamp(args[0], (timestamp) => timestamp.getUTCMonth() + 1), functionUtils_1.FunctionUtils.verifyString);
                }
            }
            exports.Month = Month;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        98: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const multivariateNumericEvaluator_1 = require("./multivariateNumericEvaluator");
            /**
             * Return the product from multiplying any number of numbers.
             */
            class Multiply extends multivariateNumericEvaluator_1.MultivariateNumericEvaluator {
                /**
                     * Initializes a new instance of the [Multiply](xref:adaptive-expressions.Multiply) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Multiply, Multiply.func);
                }
                /**
                     * @private
                     */
                static func(args)
                {
                    return Number(args[0]) * Number(args[1]);
                }
            }
            exports.Multiply = Multiply;

        }, {
            "../expressionType": 183,
            "./multivariateNumericEvaluator": 99
        }],
        99: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Numeric operators that can have 2 or more args.
             */
            class MultivariateNumericEvaluator extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [MultivariateNumericEvaluator](xref:adaptive-expressions.MultivariateNumericEvaluator) class.
                     * @param type Name of the built-in function.
                     * @param func The evaluation function, it takes a list of objects and returns a number.
                     * @param verify Optional. [VerifyExpression](xref:adaptive-expressions.VerifyExpression) function to verify each child's result.
                     */
                constructor(type, func, verify)
                {
                    super(type, MultivariateNumericEvaluator.evaluator(func, verify), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateTwoOrMoreThanTwoNumbers);
                }
                /**
                     * @private
                     */
                static evaluator(func, verify)
                {
                    return functionUtils_1.FunctionUtils.applySequence(func, verify || functionUtils_1.FunctionUtils.verifyNumber);
                }
            }
            exports.MultivariateNumericEvaluator = MultivariateNumericEvaluator;

        }, {
            "../expressionEvaluator": 171,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        100: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return a new Guid string.
             */
            class NewGuid extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [NewGuid](xref:adaptive-expressions.NewGuid) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.NewGuid, NewGuid.evaluator(), returnType_1.ReturnType.String, NewGuid.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply(() => NewGuid.evalNewGuid());
                }
                /**
                     * @private
                     */
                static evalNewGuid()
                {
                    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
                        const r = (Math.random() * 16) | 0;
                        const v = c === 'x' ? r : (r & 0x3) | 0x8;
                        return v.toString(16);
                    });
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateArityAndAnyType(expression, 0, 0);
                }
            }
            exports.NewGuid = NewGuid;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        101: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const options_1 = require("../options");
            const returnType_1 = require("../returnType");
            /**
             * Check whether an expression is false.
             * Return true if the expression is false, or return false if true.
             */
            class Not extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Not](xref:adaptive-expressions.Not) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Not, Not.evaluator, returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let result = false;
                    let error;
                    const newOptions = new options_1.Options(options);
                    newOptions.nullSubstitution = undefined;
                    ({value: result, error} = expression.children[0].tryEvaluate(state, newOptions));
                    if (!error) {
                        result = !functionUtils_internal_1.InternalFunctionUtils.isLogicTrue(result);
                    }
                    else {
                        error = undefined;
                        result = true;
                    }
                    return {
                        value: result,
                        error
                    };
                }
            }
            exports.Not = Not;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../options": 195,
            "../returnType": 204
        }],
        102: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const comparisonEvaluator_1 = require("./comparisonEvaluator");
            /**
             * Return true if the two items are not equal.
             */
            class NotEqual extends comparisonEvaluator_1.ComparisonEvaluator {
                /**
                     * Initializes a new instance of the [NotEqual](xref:adaptive-expressions.NotEqual) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.NotEqual, NotEqual.func, functionUtils_1.FunctionUtils.validateBinary);
                }
                /**
                     * @private
                     */
                static func(args)
                {
                    return !functionUtils_internal_1.InternalFunctionUtils.isEqual(args);
                }
            }
            exports.NotEqual = NotEqual;

        }, {
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "./comparisonEvaluator": 20
        }],
        103: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Evaluator that transforms a number to another number.
             */
            class NumberTransformEvaluator extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [NumberTransformEvaluator](xref:adaptive-expressions.NumberTransformEvaluator) class.
                     * @param type Name of the built-in function.
                     * @param func The evaluation function, it takes a list of objects and returns a number.
                     */
                constructor(type, func)
                {
                    super(type, NumberTransformEvaluator.evaluator(func), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateUnaryNumber);
                }
                /**
                     * @private
                     */
                static evaluator(func)
                {
                    return functionUtils_1.FunctionUtils.apply(func, functionUtils_1.FunctionUtils.verifyNumber);
                }
            }
            exports.NumberTransformEvaluator = NumberTransformEvaluator;

        }, {
            "../expressionEvaluator": 171,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        104: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Numeric operators that can have 1 or more args.
             */
            class NumericEvaluator extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [NumericEvaluator](xref:adaptive-expressions.NumericEvaluator) class.
                     * @param type Name of the built-in function.
                     * @param func The evaluation function, it takes a list of objects and returns a number.
                     */
                constructor(type, func)
                {
                    super(type, NumericEvaluator.evaluator(func), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateNumber);
                }
                /**
                     * @private
                     */
                static evaluator(func)
                {
                    return functionUtils_1.FunctionUtils.applySequence(func, functionUtils_1.FunctionUtils.verifyNumber);
                }
            }
            exports.NumericEvaluator = NumericEvaluator;

        }, {
            "../expressionEvaluator": 171,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        105: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * For the MostSpecificSelector, this is a short hand so that instead of having to do A &amp; B || A you can do A &amp; optional(B) to mean the same thing.
             */
            class Optional extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Optional](xref:adaptive-expressions.Optional) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Optional, Optional.evaluator(), returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateUnaryBoolean);
                    this.negation = this;
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return undefined;
                }
            }
            exports.Optional = Optional;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        106: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const options_1 = require("../options");
            const returnType_1 = require("../returnType");
            /**
             * Check whether at least one expression is true.
             * Return true if at least one expression is true, or return false if all are false.
             */
            class Or extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Or](xref:adaptive-expressions.Or) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Or, Or.evaluator, returnType_1.ReturnType.Boolean, functionUtils_1.FunctionUtils.validateAtLeastOne);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let result = false;
                    let error;
                    for (const child of expression.children) {
                        const newOptions = new options_1.Options(options);
                        newOptions.nullSubstitution = undefined;
                        ({value: result, error} = child.tryEvaluate(state, newOptions));
                        if (!error) {
                            if (functionUtils_internal_1.InternalFunctionUtils.isLogicTrue(result)) {
                                result = true;
                                break;
                            }
                        }
                        else {
                            error = undefined;
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
            }
            exports.Or = Or;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../options": 195,
            "../returnType": 204
        }],
        107: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const multivariateNumericEvaluator_1 = require("./multivariateNumericEvaluator");
            /**
             * Return exponentiation of one number to another.
             */
            class Power extends multivariateNumericEvaluator_1.MultivariateNumericEvaluator {
                /**
                     * Initializes a new instance of the [Power](xref:adaptive-expressions.Power) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Power, Power.func, functionUtils_1.FunctionUtils.verifyNumberOrNumericList);
                }
                /**
                     * @private
                     */
                static func(args)
                {
                    return Math.pow(args[0], args[1]);
                }
            }
            exports.Power = Power;

        }, {
            "../expressionType": 183,
            "../functionUtils": 187,
            "./multivariateNumericEvaluator": 99
        }],
        108: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return a random integer from a specified range, which is inclusive only at the starting end.
             */
            class Rand extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Rand](xref:adaptive-expressions.Rand) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Rand, Rand.evaluator(), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateBinaryNumber);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => {
                        let error;
                        if (args[0] > args[1]) {
                            error = `Min value ${args[0]} cannot be greater than max value ${args[1]}.`;
                        }
                        const value = Math.floor(Math.random() * (Number(args[1]) - Number(args[0])) + Number(args[0]));
                        return {
                            value,
                            error
                        };
                    }, functionUtils_1.FunctionUtils.verifyInteger);
                }
            }
            exports.Rand = Rand;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        109: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return an integer array that starts from a specified integer with the given length.
             */
            class Range extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Range](xref:adaptive-expressions.Range) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Range, Range.evaluator(), returnType_1.ReturnType.Array, functionUtils_1.FunctionUtils.validateBinaryNumber);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => {
                        let error;
                        if (args[1] <= 0) {
                            error = 'Second paramter must be more than zero';
                        }
                        const result = [...Array(args[1]).keys()].map((u) => u + Number(args[0]));
                        return {
                            value: result,
                            error
                        };
                    }, functionUtils_1.FunctionUtils.verifyInteger);
                }
            }
            exports.Range = Range;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        110: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Remove a property from an object and return the updated object.
             */
            class RemoveProperty extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [RemoveProperty](xref:adaptive-expressions.RemoveProperty) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.RemoveProperty, RemoveProperty.evaluator(), returnType_1.ReturnType.Object, RemoveProperty.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => {
                        const temp = args[0];
                        delete temp[String(args[1])];
                        return temp;
                    });
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, undefined, returnType_1.ReturnType.Object, returnType_1.ReturnType.String);
                }
            }
            exports.RemoveProperty = RemoveProperty;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        111: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Replace a substring with the specified string, and return the result string.
             * This function is case-sensitive.
             */
            class Replace extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Replace](xref:adaptive-expressions.Replace) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Replace, Replace.evaluator(), returnType_1.ReturnType.String, Replace.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => {
                        let error = undefined;
                        let result = undefined;
                        if (functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[1]).length === 0) {
                            error = `${args[1]} should be a string with length at least 1`;
                        }
                        if (!error) {
                            result = functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[0])
                            .split(functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[1]))
                            .join(functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[2]));
                        }
                        return {
                            value: result,
                            error
                        };
                    }, functionUtils_1.FunctionUtils.verifyStringOrNull);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateArityAndAnyType(expression, 3, 3, returnType_1.ReturnType.String);
                }
            }
            exports.Replace = Replace;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        112: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Replace a substring with the specified string, and return the result string.
             * This function is case-insensitive.
             */
            class ReplaceIgnoreCase extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [ReplaceIgnoreCase](xref:adaptive-expressions.ReplaceIgnoreCase) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.ReplaceIgnoreCase, ReplaceIgnoreCase.evaluator(), returnType_1.ReturnType.String, ReplaceIgnoreCase.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => {
                        let error = undefined;
                        let result = undefined;
                        if (functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[1]).length === 0) {
                            error = `${args[1]} should be a string with length at least 1`;
                        }
                        if (!error) {
                            result = functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[0]).replace(new RegExp(functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[1]), 'gi'), functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[2]));
                        }
                        return {
                            value: result,
                            error
                        };
                    }, functionUtils_1.FunctionUtils.verifyStringOrNull);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateArityAndAnyType(expression, 3, 3, returnType_1.ReturnType.String);
                }
            }
            exports.ReplaceIgnoreCase = ReplaceIgnoreCase;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        113: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Reverses the order of the elements in a String or Array.
             */
            class Reverse extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the `Reverse` class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Reverse, Reverse.evaluator(), returnType_1.ReturnType.String | returnType_1.ReturnType.Array, Reverse.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => {
                        let value = undefined;
                        let error = undefined;
                        if (typeof args[0] === 'string') {
                            value = args[0].split('').reverse().join('');
                        }
                        else if (Array.isArray(args[0])) {
                            value = args[0].reverse();
                        }
                        else {
                            error = `${args[0]} is not a string or list.`;
                        }
                        return {
                            value,
                            error
                        };
                    }, functionUtils_1.FunctionUtils.verifyContainer);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [], returnType_1.ReturnType.String | returnType_1.ReturnType.Array);
                }
            }
            exports.Reverse = Reverse;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        114: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Rounds a number value to the nearest integer.
             */
            class Round extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Round](xref:adaptive-expressions.Round) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Round, Round.evaluator(), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateUnaryOrBinaryNumber);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => {
                        let result;
                        let error;
                        if (args.length === 2 && !Number.isInteger(args[1])) {
                            error = `The second parameter ${args[1]} must be an integer.`;
                        }
                        if (!error) {
                            const digits = args.length === 2 ? args[1] : 0;
                            if (digits < 0 || digits > 15) {
                                error = `The second parameter ${args[1]} must be an integer between 0 and 15;`;
                            }
                            else {
                                result = Round.roundToPrecision(args[0], digits);
                            }
                        }
                        return {
                            value: result,
                            error
                        };
                    }, functionUtils_1.FunctionUtils.verifyNumber);
                }
            }
            Round.roundToPrecision = (num, digits) => Math.round(num * Math.pow(10, digits)) / Math.pow(10, digits);
            exports.Round = Round;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        115: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Operate on each element and return the new collection of transformed elements.
             */
            class Select extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Select](xref:adaptive-expressions.Select) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Select, functionUtils_internal_1.InternalFunctionUtils.foreach, returnType_1.ReturnType.Array, functionUtils_internal_1.InternalFunctionUtils.validateForeach);
                }
            }
            exports.Select = Select;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        116: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const stringTransformEvaluator_1 = require("./stringTransformEvaluator");
            /**
             * Capitalizing only the first word and leave others lowercase.
             */
            class SentenceCase extends stringTransformEvaluator_1.StringTransformEvaluator {
                /**
                     * Initializes a new instance of the [SentenceCase](xref:adaptive-expressions.SentenceCase) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.SentenceCase, SentenceCase.evaluator);
                }
                /**
                     * @private
                     */
                static evaluator(args)
                {
                    const inputStr = String(functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[0])).toLowerCase();
                    if (inputStr === '') {
                        return inputStr;
                    }
                    else {
                        return inputStr.charAt(0).toUpperCase() + inputStr.substr(1).toLowerCase();
                    }
                }
            }
            exports.SentenceCase = SentenceCase;

        }, {
            "../expressionType": 183,
            "../functionUtils.internal": 186,
            "./stringTransformEvaluator": 128
        }],
        117: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Set path in a JSON object to value.
             */
            class SetPathToValue extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [SetPathToValue](xref:adaptive-expressions.SetPathToValue) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.SetPathToValue, SetPathToValue.evaluator, returnType_1.ReturnType.Object, functionUtils_1.FunctionUtils.validateBinary);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    const {path, left, error} = functionUtils_1.FunctionUtils.tryAccumulatePath(expression.children[0], state, options);
                    if (error !== undefined) {
                        return {
                            value: undefined,
                            error
                        };
                    }
                    if (left) {
                        // the expression can't be fully merged as a path
                        return {
                            value: undefined,
                            error: `${expression.children[0].toString()} is not a valid path to set value`
                        };
                    }
                    const {value, error: err} = expression.children[1].tryEvaluate(state, options);
                    if (err) {
                        return {
                            value: undefined,
                            error: err
                        };
                    }
                    state.setValue(path, value);
                    return {
                        value,
                        error: undefined
                    };
                }
            }
            exports.SetPathToValue = SetPathToValue;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        118: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Set the value of an object's property and return the updated object.
             */
            class SetProperty extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [SetProperty](xref:adaptive-expressions.SetProperty) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.SetProperty, SetProperty.evaluator(), returnType_1.ReturnType.Object, SetProperty.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => {
                        const temp = args[0];
                        temp[String(args[1])] = args[2];
                        return temp;
                    });
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, undefined, returnType_1.ReturnType.Object, returnType_1.ReturnType.String, returnType_1.ReturnType.Object);
                }
            }
            exports.SetProperty = SetProperty;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        119: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Remove items from the front of a collection, and return all the other items.
             */
            class Skip extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Skip](xref:adaptive-expressions.Skip) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Skip, Skip.evaluator, returnType_1.ReturnType.Array, Skip.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let result;
                    const {value: arr, error: childrenError} = expression.children[0].tryEvaluate(state, options);
                    let error = childrenError;
                    if (!error) {
                        if (Array.isArray(arr)) {
                            let start;
                            const startExpr = expression.children[1];
                            ({value: start, error} = startExpr.tryEvaluate(state, options));
                            if (!error && !Number.isInteger(start)) {
                                error = `${startExpr} is not an integer.`;
                            }
                            else if (start < 0 || start >= arr.length) {
                                error = `${startExpr}=${start} which is out of range for ${arr}`;
                            }
                            if (!error) {
                                result = arr.slice(start);
                            }
                        }
                        else {
                            error = `${expression.children[0]} is not array.`;
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [], returnType_1.ReturnType.Array, returnType_1.ReturnType.Number);
                }
            }
            exports.Skip = Skip;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        120: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Sort elements in the collection in ascending order and return the sorted collection.
             */
            class SortBy extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [SortBy](xref:adaptive-expressions.SortBy) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.SortBy, functionUtils_internal_1.InternalFunctionUtils.sortBy(false), returnType_1.ReturnType.Array, SortBy.validator);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.String], returnType_1.ReturnType.Array);
                }
            }
            exports.SortBy = SortBy;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        121: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Sort elements in the collection in descending order, and return the sorted collection.
             */
            class SortByDescending extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [SortByDescending](xref:adaptive-expressions.SortByDescending) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.SortByDescending, functionUtils_internal_1.InternalFunctionUtils.sortBy(true), returnType_1.ReturnType.Array, SortByDescending.validator);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.String], returnType_1.ReturnType.Array);
                }
            }
            exports.SortByDescending = SortByDescending;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        122: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return an array that contains substrings, separated by commas, based on the specified delimiter character in the original string.
             */
            class Split extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Split](xref:adaptive-expressions.Split) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Split, Split.evaluator(), returnType_1.ReturnType.Array, Split.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[0]).split(functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[1] || '')), functionUtils_1.FunctionUtils.verifyStringOrNull);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateArityAndAnyType(expression, 1, 2, returnType_1.ReturnType.String);
                }
            }
            exports.Split = Split;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        123: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the start of the day for a timestamp.
             */
            class StartOfDay extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [StartOfDay](xref:adaptive-expressions.StartOfDay) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.StartOfDay, StartOfDay.evaluator, returnType_1.ReturnType.String, StartOfDay.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expression, state, options);
                    let error = childrenError;
                    if (!error) {
                        const format = args.length === 2 ? functionUtils_1.FunctionUtils.timestampFormatter(args[1]) : functionUtils_1.FunctionUtils.DefaultDateTimeFormat;
                        if (typeof args[0] === 'string') {
                            ({value, error} = StartOfDay.evalStartOfDay(args[0], format));
                        }
                        else {
                            error = `${expression} should contain an ISO format timestamp and an optional output format string.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static evalStartOfDay(timeStamp, format)
                {
                    let result;
                    const {value: parsed, error: parseError} = functionUtils_internal_1.InternalFunctionUtils.parseTimestamp(timeStamp);
                    let error = parseError;
                    if (!error) {
                        const startOfDay = moment_1.default(parsed).utc().hours(0).minutes(0).second(0).millisecond(0);
                        ({value: result, error} = functionUtils_internal_1.InternalFunctionUtils.returnFormattedTimeStampStr(startOfDay, format));
                    }
                    return {
                        value: result,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.String], returnType_1.ReturnType.String);
                }
            }
            exports.StartOfDay = StartOfDay;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "moment": 514
        }],
        124: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the start of the hour for a timestamp.
             */
            class StartOfHour extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [StartOfHour](xref:adaptive-expressions.StartOfHour) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.StartOfHour, StartOfHour.evaluator, returnType_1.ReturnType.String, StartOfHour.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        const format = args.length === 2 ? functionUtils_1.FunctionUtils.timestampFormatter(args[1]) : functionUtils_1.FunctionUtils.DefaultDateTimeFormat;
                        if (typeof args[0] === 'string') {
                            ({value, error} = StartOfHour.evalStartOfHour(args[0], format));
                        }
                        else {
                            error = `${expr} should contain an ISO format timestamp and an optional output format string.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static evalStartOfHour(timeStamp, format)
                {
                    let result;
                    const {value: parsed, error: parseError} = functionUtils_internal_1.InternalFunctionUtils.parseTimestamp(timeStamp);
                    let error = parseError;
                    if (!error) {
                        const startofHour = moment_1.default(parsed).utc().minutes(0).second(0).millisecond(0);
                        ({value: result, error} = functionUtils_internal_1.InternalFunctionUtils.returnFormattedTimeStampStr(startofHour, format));
                    }
                    return {
                        value: result,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expr)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expr, [returnType_1.ReturnType.String], returnType_1.ReturnType.String);
                }
            }
            exports.StartOfHour = StartOfHour;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "moment": 514
        }],
        125: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the start of the month for a timestamp.
             */
            class StartOfMonth extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [StartOfMonth](xref:adaptive-expressions.StartOfMonth) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.StartOfMonth, StartOfMonth.evaluator, returnType_1.ReturnType.String, StartOfMonth.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        const format = args.length === 2 ? functionUtils_1.FunctionUtils.timestampFormatter(args[1]) : functionUtils_1.FunctionUtils.DefaultDateTimeFormat;
                        if (typeof args[0] === 'string') {
                            ({value, error} = StartOfMonth.evalStartOfMonth(args[0], format));
                        }
                        else {
                            error = `${expr} should contain an ISO format timestamp and an optional output format string.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static evalStartOfMonth(timeStamp, format)
                {
                    let result;
                    const {value: parsed, error: parseError} = functionUtils_internal_1.InternalFunctionUtils.parseTimestamp(timeStamp);
                    let error = parseError;
                    if (!error) {
                        const startofMonth = moment_1.default(parsed).utc().date(1).hours(0).minutes(0).second(0).millisecond(0);
                        ({value: result, error} = functionUtils_internal_1.InternalFunctionUtils.returnFormattedTimeStampStr(startofMonth, format));
                    }
                    return {
                        value: result,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expr)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expr, [returnType_1.ReturnType.String], returnType_1.ReturnType.String);
                }
            }
            exports.StartOfMonth = StartOfMonth;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "moment": 514
        }],
        126: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Check whether a string starts with a specific substring. Return true if the substring is found, or return false if not found.
             * This function is case-insensitive.
             */
            class StartsWith extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [StartsWith](xref:adaptive-expressions.StartsWith) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.StartsWith, StartsWith.evaluator(), returnType_1.ReturnType.Boolean, StartsWith.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[0]).startsWith(functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[1])), functionUtils_1.FunctionUtils.verifyStringOrNull);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateArityAndAnyType(expression, 2, 2, returnType_1.ReturnType.String);
                }
            }
            exports.StartsWith = StartsWith;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        127: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return the string version of a value.
             */
            class String extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [String](xref:adaptive-expressions.String) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.String, String.evaluator(), returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => {
                        if (typeof args[0] === 'string') {
                            return args[0];
                        }
                        return JSON.stringify(args[0])
                        .replace(/(^\'*)/g, '')
                        .replace(/(\'*$)/g, '')
                        .replace(/(^\"*)/g, '')
                        .replace(/(\"*$)/g, '');
                    });
                }
            }
            exports.String = String;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        128: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Evaluator that transforms a string to another string.
             */
            class StringTransformEvaluator extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [StringTransformEvaluator](xref:adaptive-expressions.StringTransformEvaluator) class.
                     * @param type Name of the built-in function.
                     * @param func The string transformation function, it takes a list of objects and returns an string.
                     */
                constructor(type, func)
                {
                    super(type, functionUtils_1.FunctionUtils.apply(func, functionUtils_1.FunctionUtils.verifyStringOrNull), returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnaryString);
                }
            }
            exports.StringTransformEvaluator = StringTransformEvaluator;

        }, {
            "../expressionEvaluator": 171,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        129: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Returns a subarray from specified start and end positions. Index values start with the number 0.
             */
            class SubArray extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [SubArray](xref:adaptive-expressions.SubArray) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.SubArray, SubArray.evaluator, returnType_1.ReturnType.Array, SubArray.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let result;
                    const {value: arr, error: childrenError} = expression.children[0].tryEvaluate(state, options);
                    let error = childrenError;
                    if (!error) {
                        if (Array.isArray(arr)) {
                            let start;
                            const startExpr = expression.children[1];
                            ({value: start, error} = startExpr.tryEvaluate(state, options));
                            if (!error && !Number.isInteger(start)) {
                                error = `${startExpr} is not an integer.`;
                            }
                            else if (start < 0 || start >= arr.length) {
                                error = `${startExpr}=${start} which is out of range for ${arr}`;
                            }
                            if (!error) {
                                let end;
                                if (expression.children.length === 2) {
                                    end = arr.length;
                                }
                                else {
                                    const endExpr = expression.children[2];
                                    ({value: end, error} = endExpr.tryEvaluate(state, options));
                                    if (!error && !Number.isInteger(end)) {
                                        error = `${endExpr} is not an integer`;
                                    }
                                    else if (end < 0 || end > arr.length) {
                                        error = `${endExpr}=${end} which is out of range for ${arr}`;
                                    }
                                }
                                if (!error) {
                                    result = arr.slice(start, end);
                                }
                            }
                        }
                        else {
                            error = `${expression.children[0]} is not array.`;
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.Number], returnType_1.ReturnType.Array, returnType_1.ReturnType.Number);
                }
            }
            exports.SubArray = SubArray;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        130: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return characters from a string, starting from the specified position or index. Index values start with the number 0.
             */
            class Substring extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Substring](xref:adaptive-expressions.Substring) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Substring, Substring.evaluator, returnType_1.ReturnType.String, Substring.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let result;
                    const {value: str, error: childrenError} = expression.children[0].tryEvaluate(state, options);
                    let error = childrenError;
                    if (!error) {
                        if (typeof str === 'string') {
                            let start;
                            const startExpr = expression.children[1];
                            ({value: start, error} = startExpr.tryEvaluate(state, options));
                            if (!error && !Number.isInteger(start)) {
                                error = `${startExpr} is not an integer.`;
                            }
                            else if (start < 0 || start >= str.length) {
                                error = `${startExpr}=${start} which is out of range for ${str}`;
                            }
                            if (!error) {
                                let length;
                                if (expression.children.length === 2) {
                                    // Without length, compute to end
                                    length = str.length - start;
                                }
                                else {
                                    const lengthExpr = expression.children[2];
                                    ({value: length, error} = lengthExpr.tryEvaluate(state, options));
                                    if (!error && !Number.isInteger(length)) {
                                        error = `${lengthExpr} is not an integer`;
                                    }
                                    else if (length < 0 || Number(start) + Number(length) > str.length) {
                                        error = `${lengthExpr}=${length} which is out of range for ${str}`;
                                    }
                                }
                                if (!error) {
                                    result = str.substr(start, length);
                                }
                            }
                        }
                        else if (str === undefined) {
                            result = '';
                        }
                        else {
                            error = `${expression.children[0]} is neither a string nor a null object.`;
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.Number], returnType_1.ReturnType.String, returnType_1.ReturnType.Number);
                }
            }
            exports.Substring = Substring;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        131: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const multivariateNumericEvaluator_1 = require("./multivariateNumericEvaluator");
            /**
             * Return the result from subtracting the next number from the previous number.
             */
            class Subtract extends multivariateNumericEvaluator_1.MultivariateNumericEvaluator {
                /**
                     * Initializes a new instance of the [Subtract](xref:adaptive-expressions.Subtract) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Subtract, Subtract.func);
                }
                /**
                     * @private
                     */
                static func(args)
                {
                    return Number(args[0]) - Number(args[1]);
                }
            }
            exports.Subtract = Subtract;

        }, {
            "../expressionType": 183,
            "./multivariateNumericEvaluator": 99
        }],
        132: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Subtract a number of time units from a timestamp.
             */
            class SubtractFromTime extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [SubtractFromTime](xref:adaptive-expressions.SubtractFromTime) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.SubtractFromTime, SubtractFromTime.evaluator, returnType_1.ReturnType.String, SubtractFromTime.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expression, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (typeof args[0] === 'string' && Number.isInteger(args[1]) && typeof args[2] === 'string') {
                            const format = args.length === 4 ? functionUtils_1.FunctionUtils.timestampFormatter(args[3]) : functionUtils_1.FunctionUtils.DefaultDateTimeFormat;
                            const {duration, tsStr} = functionUtils_internal_1.InternalFunctionUtils.timeUnitTransformer(args[1], args[2]);
                            if (tsStr === undefined) {
                                error = `${args[2]} is not a valid time unit.`;
                            }
                            else {
                                const dur = duration;
                                ({value, error} = functionUtils_internal_1.InternalFunctionUtils.parseTimestamp(args[0], (dt) => {
                                    return args.length === 4
                                    ? moment_1.default(dt).utc().subtract(dur, tsStr).format(format)
                                    : moment_1.default(dt).utc().subtract(dur, tsStr).toISOString();
                                }));
                            }
                        }
                        else {
                            error = `${expression} should contain an ISO format timestamp, a time interval integer, a string unit of time and an optional output format string.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.String], returnType_1.ReturnType.String, returnType_1.ReturnType.Number, returnType_1.ReturnType.String);
                }
            }
            exports.SubtractFromTime = SubtractFromTime;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "moment": 514
        }],
        133: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return the result from adding numbers in an array.
             */
            class Sum extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Sum](xref:adaptive-expressions.Sum) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Sum, Sum.evaluator(), returnType_1.ReturnType.Number, Sum.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => args[0].reduce((x, y) => x + y), functionUtils_1.FunctionUtils.verifyNumericList);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [], returnType_1.ReturnType.Array);
                }
            }
            exports.Sum = Sum;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        134: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return items from the front of an array.
             */
            class Take extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Take](xref:adaptive-expressions.Take) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Take, Take.evaluator, returnType_1.ReturnType.Array, Take.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let result;
                    const {value: arr, error: childrenError} = expression.children[0].tryEvaluate(state, options);
                    let error = childrenError;
                    if (!error) {
                        if (Array.isArray(arr) || typeof arr === 'string') {
                            let start;
                            const startExpr = expression.children[1];
                            ({value: start, error} = startExpr.tryEvaluate(state, options));
                            if (!error && !Number.isInteger(start)) {
                                error = `${startExpr} is not an integer.`;
                            }
                            else if (start < 0 || start >= arr.length) {
                                error = `${startExpr}=${start} which is out of range for ${arr}`;
                            }
                            if (!error) {
                                result = arr.slice(0, start);
                            }
                        }
                        else {
                            error = `${expression.children[0]} is not array or string.`;
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [], returnType_1.ReturnType.Array, returnType_1.ReturnType.Number);
                }
            }
            exports.Take = Take;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        135: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the ticks property value of a specified timestamp. A tick is 100-nanosecond interval.
             */
            class Ticks extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Ticks](xref:adaptive-expressions.Ticks) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Ticks, Ticks.evaluator, returnType_1.ReturnType.Number, Ticks.validator);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (typeof args[0] === 'string') {
                            ({value, error} = functionUtils_internal_1.InternalFunctionUtils.ticks(args[0]));
                        }
                        else {
                            error = `${expr} should contain an ISO format timestamp.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateArityAndAnyType(expression, 1, 1, returnType_1.ReturnType.String);
                }
            }
            exports.Ticks = Ticks;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        136: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Convert ticks to number of days.
             */
            class TicksToDays extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [TicksToDays](xref:adaptive-expressions.TicksToDays) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.TicksToDays, TicksToDays.evaluator, returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateUnaryNumber);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (Number.isInteger(args[0])) {
                            value = args[0] / TicksToDays.TicksPerDay;
                        }
                        else {
                            error = `${expr} should contain an integer of ticks`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
            }
            TicksToDays.TicksPerDay = 24 * 60 * 60 * 10000000;
            exports.TicksToDays = TicksToDays;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        137: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Convert ticks to number of hours.
             */
            class TicksToHours extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [TicksToHours](xref:adaptive-expressions.TicksToHours) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.TicksToHours, TicksToHours.evaluator, returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateUnaryNumber);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (Number.isInteger(args[0])) {
                            value = args[0] / TicksToHours.TicksPerHour;
                        }
                        else {
                            error = `${expr} should contain an integer of ticks`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
            }
            TicksToHours.TicksPerHour = 60 * 60 * 10000000;
            exports.TicksToHours = TicksToHours;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        138: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Convert ticks to number of minutes.
             */
            class TicksToMinutes extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [TicksToMinutes](xref:adaptive-expressions.TicksToMinutes) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.TicksToMinutes, TicksToMinutes.evaluator, returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateUnaryNumber);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (Number.isInteger(args[0])) {
                            value = args[0] / TicksToMinutes.TicksPerMinute;
                        }
                        else {
                            error = `${expr} should contain an integer of ticks`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
            }
            TicksToMinutes.TicksPerMinute = 60 * 10000000;
            exports.TicksToMinutes = TicksToMinutes;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        139: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Evaluator that transforms a datetime to another datetime.
             */
            class TimeTransformEvaluator extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [TimeTransformEvaluator](xref:adaptive-expressions.TimeTransformEvaluator) class.
                     * @param type Name of the built-in function.
                     * @param func The evaluation function, it takes a timestamp and the number of transformation, and returns a `Date`.
                     */
                constructor(type, func)
                {
                    super(type, TimeTransformEvaluator.evaluator(func), returnType_1.ReturnType.String, TimeTransformEvaluator.validator);
                }
                /**
                     * @private
                     */
                static evaluator(func)
                {
                    return (expression, state, options) => {
                        let result;
                        let value;
                        const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expression, state, options);
                        let error = childrenError;
                        if (!error) {
                            if (typeof args[0] === 'string' && typeof args[1] === 'number') {
                                ({value, error} = functionUtils_internal_1.InternalFunctionUtils.parseTimestamp(args[0]));
                                if (!error) {
                                    if (args.length === 3 && typeof args[2] === 'string') {
                                        result = moment_1.default(func(value, args[1]))
                                        .utc()
                                        .format(functionUtils_1.FunctionUtils.timestampFormatter(args[2]));
                                    }
                                    else {
                                        result = func(value, args[1]).toISOString();
                                    }
                                }
                            }
                            else {
                                error = `${expression} should contain an ISO format timestamp and a time interval integer.`;
                            }
                        }
                        return {
                            value: result,
                            error
                        };
                    };
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.String], returnType_1.ReturnType.String, returnType_1.ReturnType.Number);
                }
            }
            exports.TimeTransformEvaluator = TimeTransformEvaluator;

        }, {
            "../expressionEvaluator": 171,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204,
            "moment": 514
        }],
        140: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const stringTransformEvaluator_1 = require("./stringTransformEvaluator");
            /**
             * Converts the specified string to title case.
             */
            class TitleCase extends stringTransformEvaluator_1.StringTransformEvaluator {
                /**
                     * Initializes a new instance of the [TitleCase](xref:adaptive-expressions.TitleCase) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.TitleCase, TitleCase.evaluator);
                }
                /**
                     * @private
                     */
                static evaluator(args)
                {
                    const inputStr = String(functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[0])).toLowerCase();
                    if (inputStr === '') {
                        return inputStr;
                    }
                    else {
                        return inputStr.replace(/\w\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());
                    }
                }
            }
            exports.TitleCase = TitleCase;

        }, {
            "../expressionType": 183,
            "../functionUtils.internal": 186,
            "./stringTransformEvaluator": 128
        }],
        141: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const stringTransformEvaluator_1 = require("./stringTransformEvaluator");
            /**
             * Return a string in lowercase format.
             * If a character in the string doesn't have a lowercase version, that character stays unchanged in the returned string.
             */
            class ToLower extends stringTransformEvaluator_1.StringTransformEvaluator {
                /**
                     * Initializes a new instance of the [ToLower](xref:adaptive-expressions.ToLower) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.ToLower, ToLower.evaluator);
                }
                /**
                     * @private
                     */
                static evaluator(args)
                {
                    return String(functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[0])).toLowerCase();
                }
            }
            exports.ToLower = ToLower;

        }, {
            "../expressionType": 183,
            "../functionUtils.internal": 186,
            "./stringTransformEvaluator": 128
        }],
        142: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const stringTransformEvaluator_1 = require("./stringTransformEvaluator");
            /**
             * Return a string in uppercase format.
             * If a character in the string doesn't have an uppercase version, that character stays unchanged in the returned string.
             */
            class ToUpper extends stringTransformEvaluator_1.StringTransformEvaluator {
                /**
                     * Initializes a new instance of the [ToUpper](xref:adaptive-expressions.ToUpper) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.ToUpper, ToUpper.evaluator);
                }
                /**
                     * @private
                     */
                static evaluator(args)
                {
                    return String(functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[0])).toUpperCase();
                }
            }
            exports.ToUpper = ToUpper;

        }, {
            "../expressionType": 183,
            "../functionUtils.internal": 186,
            "./stringTransformEvaluator": 128
        }],
        143: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionType_1 = require("../expressionType");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const stringTransformEvaluator_1 = require("./stringTransformEvaluator");
            /**
             * Remove leading and trailing whitespace from a string, and return the updated string.
             */
            class Trim extends stringTransformEvaluator_1.StringTransformEvaluator {
                /**
                     * Initializes a new instance of the [Trim](xref:adaptive-expressions.Trim) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Trim, Trim.evaluator);
                }
                /**
                     * @private
                     */
                static evaluator(args)
                {
                    return String(functionUtils_internal_1.InternalFunctionUtils.parseStringOrUndefined(args[0])).trim();
                }
            }
            exports.Trim = Trim;

        }, {
            "../expressionType": 183,
            "../functionUtils.internal": 186,
            "./stringTransformEvaluator": 128
        }],
        144: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return a collection that has all the items from the specified collections.
             * To appear in the result, an item can appear in any collection passed to this function.
             * If one or more items have the same name, the last item with that name appears in the result.
             */
            class Union extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Union](xref:adaptive-expressions.Union) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Union, Union.evaluator(), returnType_1.ReturnType.Array, Union.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => {
                        let result = [];
                        for (const arg of args) {
                            result = result.concat(arg);
                        }
                        return Array.from(new Set(result));
                    }, functionUtils_1.FunctionUtils.verifyList);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateArityAndAnyType(expression, 1, Number.MAX_SAFE_INTEGER, returnType_1.ReturnType.Array);
                }
            }
            exports.Union = Union;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        145: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Remove all duplicates from an array.
             */
            class Unique extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Unique](xref:adaptive-expressions.Unique) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Unique, Unique.evaluator(), returnType_1.ReturnType.Array, Unique.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => [...new Set(args[0])]);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [], returnType_1.ReturnType.Array);
                }
            }
            exports.Unique = Unique;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        146: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return the binary version of a uniform resource identifier (URI) component.
             */
            class UriComponent extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [UriComponent](xref:adaptive-expressions.UriComponent) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.UriComponent, UriComponent.evaluator(), returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => encodeURIComponent(args[0]), functionUtils_1.FunctionUtils.verifyString);
                }
            }
            exports.UriComponent = UriComponent;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        147: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return the string version of a uniform resource identifier (URI) encoded string, effectively decoding the URI-encoded string.
             */
            class UriComponentToString extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [UriComponentToString](xref:adaptive-expressions.UriComponentToString) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.UriComponentToString, UriComponentToString.evaluator(), returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => decodeURIComponent(args[0]), functionUtils_1.FunctionUtils.verifyString);
                }
            }
            exports.UriComponentToString = UriComponentToString;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204
        }],
        148: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the host value of a unified resource identifier (URI).
             */
            class UriHost extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [UriHost](xref:adaptive-expressions.UriHost) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.UriHost, UriHost.evaluator, returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (typeof args[0] === 'string') {
                            ({value, error} = UriHost.evalUriHost(args[0]));
                        }
                        else {
                            error = `${expr} should contain a URI string.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static evalUriHost(uri)
                {
                    let result;
                    const {value: parsed, error: parseError} = functionUtils_internal_1.InternalFunctionUtils.parseUri(uri);
                    let error = parseError;
                    if (!error) {
                        try {
                            result = parsed.hostname;
                        }
                        catch (e) {
                            error = 'invalid operation, input uri should be an absolute URI';
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
            }
            exports.UriHost = UriHost;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        149: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the path value of a unified resource identifier (URI).
             */
            class UriPath extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [UriPath](xref:adaptive-expressions.UriPath) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.UriPath, UriPath.evaluator, returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (typeof args[0] === 'string') {
                            ({value, error} = UriPath.evalUriPath(args[0]));
                        }
                        else {
                            error = `${expr} should contain a URI string.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static evalUriPath(uri)
                {
                    let result;
                    let error = functionUtils_internal_1.InternalFunctionUtils.parseUri(uri).error;
                    if (!error) {
                        try {
                            const uriObj = new URL(uri);
                            result = uriObj.pathname;
                        }
                        catch (e) {
                            error = 'invalid operation, input uri should be an absolute URI';
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
            }
            exports.UriPath = UriPath;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        150: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the path and query value of a unified resource identifier (URI).
             */
            class UriPathAndQuery extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [UriPathAndQuery](xref:adaptive-expressions.UriPathAndQuery) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.UriPathAndQuery, UriPathAndQuery.evaluator, returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (typeof args[0] === 'string') {
                            ({value, error} = UriPathAndQuery.evalUriPathAndQuery(args[0]));
                        }
                        else {
                            error = `${expr} should contain a URI string.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static evalUriPathAndQuery(uri)
                {
                    let result;
                    const {value: parsed, error: parseError} = functionUtils_internal_1.InternalFunctionUtils.parseUri(uri);
                    let error = parseError;
                    if (!error) {
                        try {
                            result = parsed.pathname + parsed.search;
                        }
                        catch (e) {
                            error = 'invalid operation, input uri should be an absolute URI';
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
            }
            exports.UriPathAndQuery = UriPathAndQuery;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        151: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the port value of a unified resource identifier (URI).
             */
            class UriPort extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [UriPort](xref:adaptive-expressions.UriPort) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.UriPort, UriPort.evaluator, returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (typeof args[0] === 'string') {
                            ({value, error} = UriPort.evalUriPort(args[0]));
                        }
                        else {
                            error = `${expr} should contain a URI string.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static evalUriPort(uri)
                {
                    let result;
                    const {value: parsed, error: parseError} = functionUtils_internal_1.InternalFunctionUtils.parseUri(uri);
                    let error = parseError;
                    if (!error) {
                        try {
                            result = parsed.port;
                        }
                        catch (e) {
                            error = 'invalid operation, input uri should be an absolute URI';
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
            }
            exports.UriPort = UriPort;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        152: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the query value of a unified resource identifier (URI).
             */
            class UriQuery extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [UriQuery](xref:adaptive-expressions.UriQuery) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.UriQuery, UriQuery.evaluator, returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (typeof args[0] === 'string') {
                            ({value, error} = UriQuery.evalUriQuery(args[0]));
                        }
                        else {
                            error = `${expr} should contain a URI string.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static evalUriQuery(uri)
                {
                    let result;
                    const {value: parsed, error: parseError} = functionUtils_internal_1.InternalFunctionUtils.parseUri(uri);
                    let error = parseError;
                    if (!error) {
                        try {
                            result = parsed.search;
                        }
                        catch (e) {
                            error = 'invalid operation, input uri should be an absolute URI';
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
            }
            exports.UriQuery = UriQuery;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        153: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the scheme value of a unified resource identifier (URI).
             */
            class UriScheme extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [UriScheme](xref:adaptive-expressions.UriScheme) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.UriScheme, UriScheme.evaluator, returnType_1.ReturnType.String, functionUtils_1.FunctionUtils.validateUnary);
                }
                /**
                     * @private
                     */
                static evaluator(expr, state, options)
                {
                    let value;
                    const {args, error: childrenError} = functionUtils_1.FunctionUtils.evaluateChildren(expr, state, options);
                    let error = childrenError;
                    if (!error) {
                        if (typeof args[0] === 'string') {
                            ({value, error} = UriScheme.evalUriScheme(args[0]));
                        }
                        else {
                            error = `${expr} should contain a URI string.`;
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * @private
                     */
                static evalUriScheme(uri)
                {
                    let result;
                    const {value: parsed, error: parseError} = functionUtils_internal_1.InternalFunctionUtils.parseUri(uri);
                    let error = parseError;
                    if (!error) {
                        try {
                            result = parsed.protocol.replace(':', '');
                        }
                        catch (e) {
                            error = 'invalid operation, input uri should be an absolute URI';
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
            }
            exports.UriScheme = UriScheme;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        154: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const moment_1 = __importDefault(require("moment"));
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const returnType_1 = require("../returnType");
            /**
             * Return the current timestamp.
             */
            class UtcNow extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [UtcNow](xref:adaptive-expressions.UtcNow) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.UtcNow, UtcNow.evaluator(), returnType_1.ReturnType.String, UtcNow.validator);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.apply((args) => args.length === 1 ? moment_1.default(new Date()).utc().format(args[0]) : new Date().toISOString(), functionUtils_1.FunctionUtils.verifyString);
                }
                /**
                     * @private
                     */
                static validator(expression)
                {
                    functionUtils_1.FunctionUtils.validateOrder(expression, [returnType_1.ReturnType.String]);
                }
            }
            exports.UtcNow = UtcNow;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../returnType": 204,
            "moment": 514
        }],
        155: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const simpleObjectMemory_1 = require("../memory/simpleObjectMemory");
            const stackedMemory_1 = require("../memory/stackedMemory");
            const options_1 = require("../options");
            const returnType_1 = require("../returnType");
            /**
             * Filter on each element and return the new collection of filtered elements which match a specific condition.
             */
            class Where extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Where](xref:adaptive-expressions.Where) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Where, Where.evaluator, returnType_1.ReturnType.Array, functionUtils_internal_1.InternalFunctionUtils.validateForeach);
                }
                /**
                     * @private
                     */
                static evaluator(expression, state, options)
                {
                    let result;
                    const {value: instance, error: childrenError} = expression.children[0].tryEvaluate(state, options);
                    let error = childrenError;
                    if (!error) {
                        const iteratorName = expression.children[1].children[0].value;
                        let arr = [];
                        let isInstanceArray = false;
                        if (Array.isArray(instance)) {
                            arr = instance;
                            isInstanceArray = true;
                        }
                        else if (typeof instance === 'object') {
                            Object.keys(instance).forEach((u) => arr.push({
                                key: u,
                                value: instance[u]
                            }));
                        }
                        else {
                            error = `${expression.children[0]} is not a collection or structure object to run foreach`;
                        }
                        if (!error) {
                            const stackedMemory = stackedMemory_1.StackedMemory.wrap(state);
                            const arrResult = [];
                            for (const item of arr) {
                                const local = new Map([[iteratorName, item]]);
                                stackedMemory.push(simpleObjectMemory_1.SimpleObjectMemory.wrap(local));
                                const newOptions = new options_1.Options(options);
                                newOptions.nullSubstitution = undefined;
                                const {value: r, error: e} = expression.children[2].tryEvaluate(stackedMemory, newOptions);
                                stackedMemory.pop();
                                if (e !== undefined) {
                                    return {
                                        value: undefined,
                                        error: e
                                    };
                                }
                                if (r) {
                                    arrResult.push(local.get(iteratorName));
                                }
                            }
                            //reconstruct object if instance is object, otherwise, return array result
                            if (!isInstanceArray) {
                                const objResult = {};
                                for (const item of arrResult) {
                                    objResult[item.key] = item.value;
                                }
                                result = objResult;
                            }
                            else {
                                result = arrResult;
                            }
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
            }
            exports.Where = Where;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils.internal": 186,
            "../memory/simpleObjectMemory": 193,
            "../memory/stackedMemory": 194,
            "../options": 195,
            "../returnType": 204
        }],
        156: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("../expressionEvaluator");
            const expressionType_1 = require("../expressionType");
            const functionUtils_1 = require("../functionUtils");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            const returnType_1 = require("../returnType");
            /**
             * Return the year of the specified timestamp.
             */
            class Year extends expressionEvaluator_1.ExpressionEvaluator {
                /**
                     * Initializes a new instance of the [Year](xref:adaptive-expressions.Year) class.
                     */
                constructor()
                {
                    super(expressionType_1.ExpressionType.Year, Year.evaluator(), returnType_1.ReturnType.Number, functionUtils_1.FunctionUtils.validateUnaryString);
                }
                /**
                     * @private
                     */
                static evaluator()
                {
                    return functionUtils_1.FunctionUtils.applyWithError((args) => functionUtils_internal_1.InternalFunctionUtils.parseTimestamp(args[0], (timestamp) => timestamp.getUTCFullYear()), functionUtils_1.FunctionUtils.verifyString);
                }
            }
            exports.Year = Year;

        }, {
            "../expressionEvaluator": 171,
            "../expressionType": 183,
            "../functionUtils": 187,
            "../functionUtils.internal": 186,
            "../returnType": 204
        }],
        157: [function(require, module, exports) {
            "use strict";
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            const antlr4ts_1 = require("antlr4ts");
            const lru_cache_1 = __importDefault(require("lru-cache"));
            const generated_1 = require("./generated");
            const regexErrorListener_1 = require("./regexErrorListener");
            // tslint:disable-next-line: completed-docs
            /**
             * Convert PCRE regex string to RegExp
             * PCRE ref: http://www.pcre.org/.
             * PCRE antlr g4 file: CommonRegex.g4.
             */
            class CommonRegex {
                /**
                     * Create RegExp object from PCRE pattern string.
                     * @param pattern PCRE pattern string.
                     * @returns RegExp object.
                     */
                static CreateRegex(pattern)
                {
                    let result;
                    if (pattern && this.regexCache.has(pattern)) {
                        result = this.regexCache.get(pattern);
                    }
                    else {
                        if (!pattern || !this.isCommonRegex(pattern)) {
                            throw new Error(`'${pattern}' is not a valid regex.`);
                        }
                        result = this.getRegExpFromString(pattern);
                        this.regexCache.set(pattern, result);
                    }
                    return result;
                }
                /**
                     * @private
                     */
                static getRegExpFromString(pattern)
                {
                    const flags = ['(?i)', '(?m)', '(?s)'];
                    let flag = '';
                    flags.forEach((e) => {
                        if (pattern.includes(e)) {
                            flag += e.substr(2, 1);
                            pattern = pattern.replace(e, '');
                        }
                    });
                    let regexp;
                    if (flag) {
                        regexp = new RegExp(`${pattern}`, flag);
                    }
                    else {
                        regexp = new RegExp(`${pattern}`);
                    }
                    return regexp;
                }
                /**
                     * @private
                     */
                static isCommonRegex(pattern)
                {
                    try {
                        this.antlrParse(pattern);
                    }
                    catch (Exception) {
                        return false;
                    }
                    return true;
                }
                /**
                     * @private
                     */
                static antlrParse(pattern)
                {
                    const inputStream = new antlr4ts_1.ANTLRInputStream(pattern);
                    const lexer = new generated_1.CommonRegexLexer(inputStream);
                    lexer.removeErrorListeners();
                    const tokenStream = new antlr4ts_1.CommonTokenStream(lexer);
                    const parser = new generated_1.CommonRegexParser(tokenStream);
                    parser.removeErrorListeners();
                    // tslint:disable-next-line: no-use-before-declare
                    parser.addErrorListener(regexErrorListener_1.RegexErrorListener.Instance);
                    parser.buildParseTree = true;
                    return parser.parse();
                }
            }
            CommonRegex.regexCache = new lru_cache_1.default(15);
            exports.CommonRegex = CommonRegex;

        }, {
            "./generated": 190,
            "./regexErrorListener": 203,
            "antlr4ts": 320,
            "lru-cache": 510
        }],
        158: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            const expression_1 = require("./expression");
            const returnType_1 = require("./returnType");
            const expressionEvaluator_1 = require("./expressionEvaluator");
            const expressionType_1 = require("./expressionType");
            /**
             * Construct an expression constant.
             */
            class Constant extends expression_1.Expression {
                /**
                     * Initializes a new instance of the [Constant](xref:adaptive-expressions.Constant) class.
                     * Constructs an expression constant.
                     * @param value Constant value.
                     */
                constructor(value)
                {
                    super(expressionType_1.ExpressionType.Constant, new expressionEvaluator_1.ExpressionEvaluator(expressionType_1.ExpressionType.Constant, (expression) => {
                        return {
                            value: expression.value,
                            error: undefined
                        };
                    }));
                    // original regex: (?<!\\)'
                    this.singleQuotRegex = new RegExp(/'(?!\\)/g);
                    this.value = value;
                }
                /**
                     * Constant value.
                     */
                get value()
                {
                    return this._value;
                }
                /**
                     * Sets constant value.
                     */
                set value(theValue)
                {
                    this.evaluator.returnType =
                    typeof theValue === 'string'
                    ? returnType_1.ReturnType.String
                    : typeof theValue === 'boolean'
                    ? returnType_1.ReturnType.Boolean
                    : typeof theValue === 'number' && !Number.isNaN(theValue)
                    ? returnType_1.ReturnType.Number
                    : Array.isArray(theValue)
                    ? returnType_1.ReturnType.Array
                    : returnType_1.ReturnType.Object;
                    this._value = theValue;
                }
                /**
                     * Determines if the current [Expression](xref:adaptive-expressions.Expression) instance is deep equal to another one.
                     * @param other The other [Expression](xref:adaptive-expressions.Expression) instance to compare.
                     * @returns A boolean value indicating whether the two expressions are deep equal (`true`) or not (`false`).
                     */
                deepEquals(other)
                {
                    let eq;
                    if (!other || other.type !== this.type) {
                        eq = false;
                    }
                    else {
                        const otherVal = other.value;
                        eq = this.value === otherVal;
                    }
                    return eq;
                }
                /**
                     * Returns a string that represents the current constant object.
                     * @returns A string that represents the current constant object.
                     */
                toString()
                {
                    if (this.value === undefined) {
                        return 'undefined';
                    }
                    else if (this.value === null) {
                        return 'null';
                    }
                    else if (typeof this.value === 'string') {
                        let result = this.value;
                        result = result.replace(/\\/g, '\\\\');
                        result = this.reverseString(this.reverseString(result).replace(this.singleQuotRegex, () => "'\\"));
                        return `'${result}'`;
                    }
                    else if (typeof this.value === 'number') {
                        return this.value.toString();
                    }
                    else if (typeof this.value === 'object') {
                        return JSON.stringify(this.value);
                    }
                    return this.value.toString();
                }
                /**
                     * @private
                     */
                reverseString(str)
                {
                    if (!str) {
                        return str;
                    }
                    return str.split('').reverse().join('');
                }
            }
            exports.Constant = Constant;

        }, {
            "./expression": 170,
            "./expressionEvaluator": 171,
            "./expressionType": 183,
            "./returnType": 204
        }],
        159: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionProperties_1 = require("../expressionProperties");
            /**
             * `array` to json [ArrayExpression](xref:adaptive-expressions.ArrayExpression) converter.
             * @typeparam T The type of the items of the array.
             */
            class ArrayExpressionConverter {
                /**
                     * Converts an array into an [ArrayExpression](xref:adaptive-expressions.ArrayExpression).
                     * @param value `array` to convert.
                     * @returns The [ArrayExpression](xref:adaptive-expressions.ArrayExpression).
                     */
                convert(value)
                {
                    return value instanceof expressionProperties_1.ArrayExpression ? value : new expressionProperties_1.ArrayExpression(value);
                }
            }
            exports.ArrayExpressionConverter = ArrayExpressionConverter;

        }, {
            "../expressionProperties": 177
        }],
        160: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionProperties_1 = require("../expressionProperties");
            /**
             * `any` value to json [BoolExpression](xref:adaptive-expressions.BoolExpression) converter.
             */
            class BoolExpressionConverter {
                /**
                     * Converts `any` value into a [BoolExpression](xref:adaptive-expressions.BoolExpression).
                     * @param value `any` value to convert.
                     * @returns The [BoolExpression](xref:adaptive-expressions.BoolExpression).
                     */
                convert(value)
                {
                    return value instanceof expressionProperties_1.BoolExpression ? value : new expressionProperties_1.BoolExpression(value);
                }
            }
            exports.BoolExpressionConverter = BoolExpressionConverter;

        }, {
            "../expressionProperties": 177
        }],
        161: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionProperties_1 = require("../expressionProperties");
            /**
             * `string` to json [EnumExpression](xref:adaptive-expressions.EnumExpression) converter.
             */
            class EnumExpressionConverter {
                /**
                     * Initializes a new instance of the [EnumExpressionConverter](xref:adaptive-expressions.EnumExpressionConverter) class.
                     * @param enumValue The enum value of the `string` to convert.
                     */
                constructor(enumValue)
                {
                    this._enumValue = enumValue;
                }
                /**
                     * Converts a `string` into an [EnumExpression](xref:adaptive-expressions.EnumExpression).
                     * @param value `string` to convert.
                     * @returns The [EnumExpression](xref:adaptive-expressions.EnumExpression).
                     */
                convert(value)
                {
                    if (value instanceof expressionProperties_1.EnumExpression) {
                        return value;
                    }
                    if (typeof value == 'string') {
                        if (Object.prototype.hasOwnProperty.call(this._enumValue, value)) {
                            return new expressionProperties_1.EnumExpression(this._enumValue[value]);
                        }
                        return new expressionProperties_1.EnumExpression(`=${value}`);
                    }
                    return new expressionProperties_1.EnumExpression(value);
                }
            }
            exports.EnumExpressionConverter = EnumExpressionConverter;

        }, {
            "../expressionProperties": 177
        }],
        162: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expression_1 = require("../expression");
            /**
             * `string` to json [Expression](xref:adaptive-expressions.Expression) converter.
             */
            class ExpressionConverter {
                /**
                     * Converts a `string` into an [Expression](xref:adaptive-expressions.Expression).
                     * @param value `string` to convert.
                     * @returns The [Expression](xref:adaptive-expressions.Expression).
                     */
                convert(value)
                {
                    return value instanceof expression_1.Expression ? value : expression_1.Expression.parse(value);
                }
            }
            exports.ExpressionConverter = ExpressionConverter;

        }, {
            "../expression": 170
        }],
        163: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            function __export(m) {
                for (var p in m)
                    if (!exports.hasOwnProperty(p))
                        exports[p] = m[p];
            }
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            __export(require("./arrayExpressionConverter"));
            __export(require("./boolExpressionConverter"));
            __export(require("./enumExpressionConverter"));
            __export(require("./expressionConverter"));
            __export(require("./intExpressionConverter"));
            __export(require("./numberExpressionConverter"));
            __export(require("./objectExpressionConverter"));
            __export(require("./stringExpressionConveter"));
            __export(require("./valueExpressionConverter"));

        }, {
            "./arrayExpressionConverter": 159,
            "./boolExpressionConverter": 160,
            "./enumExpressionConverter": 161,
            "./expressionConverter": 162,
            "./intExpressionConverter": 164,
            "./numberExpressionConverter": 165,
            "./objectExpressionConverter": 166,
            "./stringExpressionConveter": 167,
            "./valueExpressionConverter": 168
        }],
        164: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionProperties_1 = require("../expressionProperties");
            /**
             * `string` or `number` to json [IntExpression](xref:adaptive-expressions.IntExpression) converter.
             */
            class IntExpressionConverter {
                /**
                     * Converts a `string` or `number` into an [IntExpression](xref:adaptive-expressions.IntExpression).
                     * @param value `string` or `number` to convert.
                     * @returns The [IntExpression](xref:adaptive-expressions.IntExpression).
                     */
                convert(value)
                {
                    return value instanceof expressionProperties_1.IntExpression ? value : new expressionProperties_1.IntExpression(value);
                }
            }
            exports.IntExpressionConverter = IntExpressionConverter;

        }, {
            "../expressionProperties": 177
        }],
        165: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionProperties_1 = require("../expressionProperties");
            /**
             * `string` or `number` to json [NumberExpression](xref:adaptive-expressions.NumberExpression) converter.
             */
            class NumberExpressionConverter {
                /**
                     * Converts a `string` or `number` into a [NumberExpression](xref:adaptive-expressions.NumberExpression).
                     * @param value `string` or `number` to convert.
                     * @returns The [NumberExpression](xref:adaptive-expressions.NumberExpression).
                     */
                convert(value)
                {
                    return value instanceof expressionProperties_1.NumberExpression ? value : new expressionProperties_1.NumberExpression(value);
                }
            }
            exports.NumberExpressionConverter = NumberExpressionConverter;

        }, {
            "../expressionProperties": 177
        }],
        166: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionProperties_1 = require("../expressionProperties");
            /**
             * `any` value to json [ObjectExpressionConverter](xref:adaptive-expressions.ObjectExpressionConverter) converter.
             * @typeparam T The type of the value.
             */
            class ObjectExpressionConverter {
                /**
                     * Converts value of type `T` into an [ObjectExpression](xref:adaptive-expressions.ObjectExpression).
                     * @param value Value of type `T` to convert.
                     * @returns The [ObjectExpression](xref:adaptive-expressions.ObjectExpression).
                     */
                convert(value)
                {
                    return value instanceof expressionProperties_1.ObjectExpression ? value : new expressionProperties_1.ObjectExpression(value);
                }
            }
            exports.ObjectExpressionConverter = ObjectExpressionConverter;

        }, {
            "../expressionProperties": 177
        }],
        167: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionProperties_1 = require("../expressionProperties");
            /**
             * `string` to json [StringExpression](xref:adaptive-expressions.StringExpression) converter.
             */
            class StringExpressionConverter {
                /**
                     * Converts a string into an [StringExpression](xref:adaptive-expressions.StringExpression).
                     * @param value `string` to convert.
                     * @returns The [StringExpression](xref:adaptive-expressions.StringExpression).
                     */
                convert(value)
                {
                    return value instanceof expressionProperties_1.StringExpression ? value : new expressionProperties_1.StringExpression(value);
                }
            }
            exports.StringExpressionConverter = StringExpressionConverter;

        }, {
            "../expressionProperties": 177
        }],
        168: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionProperties_1 = require("../expressionProperties");
            /**
             * `any` value to json [ValueExpression](xref:adaptive-expressions.ValueExpression) converter.
             */
            class ValueExpressionConverter {
                /**
                     * Converts `any` value into a [ValueExpression](xref:adaptive-expressions.ValueExpression).
                     * @param value `any` value to convert.
                     * @returns The [ValueExpression](xref:adaptive-expressions.ValueExpression).
                     */
                convert(value)
                {
                    return value instanceof expressionProperties_1.ValueExpression ? value : new expressionProperties_1.ValueExpression(value);
                }
            }
            exports.ValueExpressionConverter = ValueExpressionConverter;

        }, {
            "../expressionProperties": 177
        }],
        169: [function(require, module, exports) {
            "use strict";
            /* eslint-disable @typescript-eslint/no-unused-vars */
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var State;
            (function(State) {
                State[State["None"] = 0] = "None";
                State[State["LowerD1"] = 1] = "LowerD1";
                State[State["LowerD2"] = 2] = "LowerD2";
                State[State["LowerD3"] = 3] = "LowerD3";
                State[State["LowerD4"] = 4] = "LowerD4";
                State[State["LowerF1"] = 5] = "LowerF1";
                State[State["LowerF2"] = 6] = "LowerF2";
                State[State["LowerF3"] = 7] = "LowerF3";
                State[State["LowerF4"] = 8] = "LowerF4";
                State[State["LowerF5"] = 9] = "LowerF5";
                State[State["LowerF6"] = 10] = "LowerF6";
                State[State["LowerF7"] = 11] = "LowerF7";
                State[State["CapitalF1"] = 12] = "CapitalF1";
                State[State["CapitalF2"] = 13] = "CapitalF2";
                State[State["CapitalF3"] = 14] = "CapitalF3";
                State[State["CapitalF4"] = 15] = "CapitalF4";
                State[State["CapitalF5"] = 16] = "CapitalF5";
                State[State["CapitalF6"] = 17] = "CapitalF6";
                State[State["CapitalF7"] = 18] = "CapitalF7";
                State[State["LowerG"] = 19] = "LowerG";
                State[State["LowerH1"] = 20] = "LowerH1";
                State[State["LowerH2"] = 21] = "LowerH2";
                State[State["CapitalH1"] = 22] = "CapitalH1";
                State[State["CapitalH2"] = 23] = "CapitalH2";
                State[State["CapitalK"] = 24] = "CapitalK";
                State[State["LowerM1"] = 25] = "LowerM1";
                State[State["LowerM2"] = 26] = "LowerM2";
                State[State["CapitalM1"] = 27] = "CapitalM1";
                State[State["CapitalM2"] = 28] = "CapitalM2";
                State[State["CapitalM3"] = 29] = "CapitalM3";
                State[State["CapitalM4"] = 30] = "CapitalM4";
                State[State["LowerS1"] = 31] = "LowerS1";
                State[State["LowerS2"] = 32] = "LowerS2";
                State[State["LowerT1"] = 33] = "LowerT1";
                State[State["LowerT2"] = 34] = "LowerT2";
                State[State["LowerY1"] = 35] = "LowerY1";
                State[State["LowerY2"] = 36] = "LowerY2";
                State[State["LowerY3"] = 37] = "LowerY3";
                State[State["LowerY4"] = 38] = "LowerY4";
                State[State["LowerY5"] = 39] = "LowerY5";
                State[State["LowerZ1"] = 40] = "LowerZ1";
                State[State["LowerZ2"] = 41] = "LowerZ2";
                State[State["LowerZ3"] = 42] = "LowerZ3";
                State[State["InSingleQuoteLiteral"] = 43] = "InSingleQuoteLiteral";
                State[State["InDoubleQuoteLiteral"] = 44] = "InDoubleQuoteLiteral";
                State[State["EscapeSequence"] = 45] = "EscapeSequence";
            })(State || (State = {}));
            /**
             * Convert a CSharp style datetime format string to a Moment.js style datetime format string. Ref: https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings
             * @param fmtString A CSharp style datetime format string. Ref: https://devhints.io/moment
             * @returns A Momengt.js style datetime format string.
             */
            function convertCSharpDateTimeToMomentJS(fmtString) {
                let fmtResult = '';
                let fmtState = State.None;
                let lTokenBuffer = '';
                if (fmtString.length === 0) {
                    return fmtResult;
                }
                if (fmtString.length === 1) {
                    switch (fmtString) {
                    case 'R':
                    case 'r':
                        throw Error(`RFC 1123 not supported  in MomentJS`);
                    case 'O':
                    case 'o':
                        fmtString = 'YYYY-MM-DDTHH:mm:ss.SSSSSSSZ';
                        break;
                    case 'U':
                        throw new Error(`Universal Fulll Format not supported in MomentJS`);
                    case 'u':
                        throw new Error(`Universal Sortable Format not supported in MomentJS`);
                    }
                }
                const changeState = (newState) => {
                    switch (fmtState) {
                    case State.LowerD1:
                        fmtResult += 'D';
                        break;
                    case State.LowerD2:
                        fmtResult += 'DD';
                        break;
                    case State.LowerD3:
                        fmtResult += 'ddd';
                        break;
                    case State.LowerD4:
                        fmtResult += 'dddd';
                        break;
                    case State.LowerF1:
                    case State.CapitalF1:
                        fmtResult += 'S';
                        break;
                    case State.LowerF2:
                    case State.CapitalF2:
                        fmtResult += 'SS';
                        break;
                    case State.LowerF3:
                    case State.CapitalF3:
                        fmtResult += 'SSS';
                        break;
                    case State.LowerF4:
                    case State.CapitalF4:
                        fmtResult += 'SSSS';
                        break;
                    case State.LowerF5:
                    case State.CapitalF5:
                        fmtResult += 'SSSSS';
                        break;
                    case State.LowerF6:
                    case State.CapitalF6:
                        fmtResult += 'SSSSSS';
                        break;
                    case State.LowerF7:
                    case State.CapitalF7:
                        fmtResult += 'SSSSSSS';
                        break;
                    case State.LowerG:
                        throw Error('Era not supported in MomentJS');
                    case State.LowerH1:
                        fmtResult += 'h';
                        break;
                    case State.LowerH2:
                        fmtResult += 'hh';
                        break;
                    case State.CapitalH1:
                        fmtResult += 'H';
                        break;
                    case State.CapitalH2:
                        fmtResult += 'HH';
                        break;
                    case State.LowerM1:
                        fmtResult += 'm';
                        break;
                    case State.LowerM2:
                        fmtResult += 'mm';
                        break;
                    case State.CapitalM1:
                        fmtResult += 'M';
                        break;
                    case State.CapitalM2:
                        fmtResult += 'MM';
                        break;
                    case State.CapitalM3:
                        fmtResult += 'MMM';
                        break;
                    case State.CapitalM4:
                        fmtResult += 'MMMM';
                        break;
                    case State.LowerS1:
                        fmtResult += 's';
                        break;
                    case State.LowerS2:
                        fmtResult += 'ss';
                        break;
                    case State.LowerT1:
                        fmtResult += 'A';
                        break;
                    case State.LowerT2:
                        fmtResult += 'A';
                        break;
                    case State.LowerY1:
                        fmtResult += 'YY';
                        break;
                    case State.LowerY2:
                        fmtResult += 'YY';
                        break;
                    case State.LowerY3:
                        fmtResult += 'YYYY';
                        break;
                    case State.LowerY4:
                        fmtResult += 'YYYY';
                        break;
                    case State.LowerY5:
                        fmtResult += 'Y';
                        break;
                    case State.LowerZ1:
                    case State.LowerZ2:
                        fmtResult += 'ZZ';
                        break;
                    case State.LowerZ3:
                        fmtResult += 'Z';
                        break;
                    case State.InSingleQuoteLiteral:
                    case State.InDoubleQuoteLiteral:
                    case State.EscapeSequence:
                        for (const lCharacter of lTokenBuffer) {
                            fmtResult += lCharacter;
                        }
                        break;
                    }
                    lTokenBuffer = '';
                    fmtState = newState;
                };
                for (const character of fmtString) {
                    if (fmtState === State.EscapeSequence) {
                        lTokenBuffer += character;
                        changeState(State.None);
                    }
                    else if (fmtState === State.InDoubleQuoteLiteral) {
                        if (character == '`') {
                            changeState(State.None);
                        }
                        else {
                            lTokenBuffer += character;
                        }
                    }
                    else if (fmtState == State.InSingleQuoteLiteral) {
                        if (character == "'") {
                            changeState(State.None);
                        }
                        else {
                            lTokenBuffer += character;
                        }
                    }
                    else {
                        switch (character) {
                        case 'd':
                            switch (fmtState) {
                            case State.LowerD1:
                                fmtState = State.LowerD2;
                                break;
                            case State.LowerD2:
                                fmtState = State.LowerD3;
                                break;
                            case State.LowerD3:
                                fmtState = State.LowerD4;
                                break;
                            case State.LowerD4:
                                break;
                            default:
                                changeState(State.LowerD1);
                                break;
                            }
                            break;
                        case 'f':
                            switch (fmtState) {
                            case State.LowerF1:
                                fmtState = State.LowerF2;
                                break;
                            case State.LowerF2:
                                fmtState = State.LowerF3;
                                break;
                            case State.LowerF3:
                                fmtState = State.LowerF4;
                                break;
                            case State.LowerF4:
                                fmtState = State.LowerF5;
                                break;
                            case State.LowerF5:
                                fmtState = State.LowerF6;
                                break;
                            case State.LowerF6:
                                fmtState = State.LowerF7;
                                break;
                            case State.LowerF7:
                                break;
                            default:
                                changeState(State.LowerF1);
                                break;
                            }
                            break;
                        case 'F':
                            switch (fmtState) {
                            case State.CapitalF1:
                                fmtState = State.CapitalF2;
                                break;
                            case State.CapitalF2:
                                fmtState = State.CapitalF3;
                                break;
                            case State.CapitalF3:
                                fmtState = State.CapitalF4;
                                break;
                            case State.CapitalF4:
                                fmtState = State.CapitalF5;
                                break;
                            case State.CapitalF5:
                                fmtState = State.CapitalF6;
                                break;
                            case State.CapitalF6:
                                fmtState = State.CapitalF7;
                                break;
                            case State.CapitalF7:
                                break;
                            default:
                                changeState(State.CapitalF1);
                                break;
                            }
                            break;
                        case 'g':
                            switch (fmtState) {
                            case State.LowerG:
                                break;
                            default:
                                changeState(State.LowerG);
                                break;
                            }
                            break;
                        case 'h':
                            switch (fmtState) {
                            case State.LowerH1:
                                fmtState = State.LowerH2;
                                break;
                            case State.LowerH2:
                                break;
                            default:
                                changeState(State.LowerH1);
                                break;
                            }
                            break;
                        case 'H':
                            switch (fmtState) {
                            case State.CapitalH1:
                                fmtState = State.CapitalH2;
                                break;
                            case State.CapitalH2:
                                break;
                            default:
                                changeState(State.CapitalH1);
                                break;
                            }
                            break;
                        case 'K':
                            changeState(State.None);
                            fmtResult += 'Z';
                            break;
                        case 'm':
                            switch (fmtState) {
                            case State.LowerM1:
                                fmtState = State.LowerM2;
                                break;
                            case State.LowerM2:
                                break;
                            default:
                                changeState(State.LowerM1);
                                break;
                            }
                            break;
                        case 'M':
                            switch (fmtState) {
                            case State.CapitalM1:
                                fmtState = State.CapitalM2;
                                break;
                            case State.CapitalM2:
                                fmtState = State.CapitalM3;
                                break;
                            case State.CapitalM3:
                                fmtState = State.CapitalM4;
                                break;
                            case State.CapitalM4:
                                break;
                            default:
                                changeState(State.CapitalM1);
                                break;
                            }
                            break;
                        case 's':
                            switch (fmtState) {
                            case State.LowerS1:
                                fmtState = State.LowerS2;
                                break;
                            case State.LowerS2:
                                break;
                            default:
                                changeState(State.LowerS1);
                                break;
                            }
                            break;
                        case 't':
                            switch (fmtState) {
                            case State.LowerT1:
                                fmtState = State.LowerT2;
                                break;
                            case State.LowerT2:
                                break;
                            default:
                                changeState(State.LowerT1);
                                break;
                            }
                            break;
                        case 'y':
                            switch (fmtState) {
                            case State.LowerY1:
                                fmtState = State.LowerY2;
                                break;
                            case State.LowerY2:
                                fmtState = State.LowerY3;
                                break;
                            case State.LowerY3:
                                fmtState = State.LowerY4;
                                break;
                            case State.LowerY4:
                                fmtState = State.LowerY5;
                                break;
                            case State.LowerY5:
                                break;
                            default:
                                changeState(State.LowerY1);
                                break;
                            }
                            break;
                        case 'z':
                            switch (fmtState) {
                            case State.LowerZ1:
                                fmtState = State.LowerZ2;
                                break;
                            case State.LowerZ2:
                                fmtState = State.LowerZ3;
                                break;
                            case State.LowerZ3:
                                break;
                            default:
                                changeState(State.LowerZ1);
                                break;
                            }
                            break;
                        case ':':
                            changeState(State.None);
                            fmtResult += ':';
                            break;
                        case '/':
                            changeState(State.None);
                            fmtResult += '/';
                            break;
                        case '`':
                            changeState(State.InDoubleQuoteLiteral);
                            break;
                        case "'":
                            changeState(State.InSingleQuoteLiteral);
                            break;
                        case '%':
                            changeState(State.None);
                            break;
                        case '\\':
                            changeState(State.EscapeSequence);
                            break;
                        default:
                            changeState(State.None);
                            fmtResult += character;
                            break;
                        }
                    }
                }
                if (fmtState == State.EscapeSequence ||
                fmtState == State.InDoubleQuoteLiteral ||
                fmtState == State.InSingleQuoteLiteral) {
                    throw Error(`Invalid Format String`);
                }
                changeState(State.None);
                return fmtResult;
            }
            exports.convertCSharpDateTimeToMomentJS = convertCSharpDateTimeToMomentJS;

        }, {}],
        170: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            const constant_1 = require("./constant");
            const expressionEvaluator_1 = require("./expressionEvaluator");
            const expressionType_1 = require("./expressionType");
            const extensions_1 = require("./extensions");
            const functionTable_1 = require("./functionTable");
            const memory_1 = require("./memory");
            const options_1 = require("./options");
            const parser_1 = require("./parser");
            const returnType_1 = require("./returnType");
            /**
             * An expression which can be analyzed or evaluated to produce a value.
             * This provides an open-ended wrapper that supports a number of built-in functions and can also be extended at runtime.
             * It also supports validation of the correctness of an expression and evaluation that should be exception free.
             */
            class Expression {
                /**
                     * expression constructor.
                     * @param type Type of expression from ExpressionType
                     * @param evaluator Information about how to validate and evaluate expression.
                     * @param children Child expressions.
                     */
                constructor(type, evaluator, ...children)
                {
                    /**
                             * Validate immediate expression.
                             */
                    // tslint:disable-next-line: no-void-expression
                    this.validate = () => this.evaluator.validateExpression(this);
                    if (evaluator) {
                        this.evaluator = evaluator;
                        this.children = children;
                    }
                    else if (type !== undefined) {
                        if (!Expression.functions.get(type)) {
                            throw Error(`${type} does not have an evaluator, it's not a built-in function or a custom function.`);
                        }
                        this.evaluator = Expression.functions.get(type);
                        this.children = children;
                    }
                }
                /**
                     * Expected result of evaluating expression.
                     */
                get returnType()
                {
                    return this.evaluator.returnType;
                }
                /**
                     * Type of expression.
                     */
                get type()
                {
                    return this.evaluator.type;
                }
                /**
                     * Do a deep equality between expressions.
                     * @param other Other expression.
                     * @returns True if expressions are the same.
                     */
                deepEquals(other)
                {
                    let eq = false;
                    if (other) {
                        eq = this.type === other.type;
                        if (eq) {
                            eq = this.children.length === other.children.length;
                            if (this.type === expressionType_1.ExpressionType.And || this.type === expressionType_1.ExpressionType.Or) {
                                // And/Or do not depand on order
                                for (let i = 0; eq && i < this.children.length; i++) {
                                    const primary = this.children[0];
                                    let found = false;
                                    for (let j = 0; j < this.children.length; j++) {
                                        if (primary.deepEquals(other.children[j])) {
                                            found = true;
                                            break;
                                        }
                                    }
                                    eq = found;
                                }
                            }
                            else {
                                for (let i = 0; eq && i < this.children.length; i++) {
                                    eq = this.children[i].deepEquals(other.children[i]);
                                }
                            }
                        }
                    }
                    return eq;
                }
                /**
                     * Return the static reference paths to memory.
                     * Return all static paths to memory.  If there is a computed element index, then the path is terminated there,
                     * but you might get other paths from the computed part as well.
                     * @param expression Expression to get references from.
                     * @returns List of the static reference paths.
                     */
                references()
                {
                    const {path, refs} = this.referenceWalk(this);
                    if (path !== undefined) {
                        refs.add(path);
                    }
                    return Array.from(refs);
                }
                /**
                     * Walking function for identifying static memory references in an expression.
                     * @param expression Expression to analyze.
                     * @param references Tracking for references found.
                     * @param extension If present, called to override lookup for things like template expansion.
                     * @returns Accessor path of expression.
                     */
                referenceWalk(expression, extension)
                {
                    let path;
                    let refs = new Set();
                    if (extension === undefined || !extension(expression)) {
                        const children = expression.children;
                        if (expression.type === expressionType_1.ExpressionType.Accessor) {
                            const prop = children[0].value;
                            if (children.length === 1) {
                                path = prop;
                            }
                            if (children.length === 2) {
                                ({path, refs} = this.referenceWalk(children[1], extension));
                                if (path !== undefined) {
                                    path = path.concat('.', prop);
                                }


                            }
                        }
                        else // if path is null we still keep it null, won't append prop
                        // because for example, first(items).x should not return x as refs
                        if (expression.type === expressionType_1.ExpressionType.Element) {
                            ({path, refs} = this.referenceWalk(children[0], extension));
                            if (path !== undefined) {
                                if (children[1] instanceof constant_1.Constant) {
                                    const cnst = children[1];
                                    if (cnst.returnType === returnType_1.ReturnType.String) {
                                        path += `.${cnst.value}`;
                                    }
                                    else {
                                        path += `[${cnst.value}]`;
                                    }
                                }
                                else {
                                    refs.add(path);
                                }
                            }
                            const result = this.referenceWalk(children[1], extension);
                            const idxPath = result.path;
                            const refs1 = result.refs;
                            refs = new Set([...refs, ...refs1]);
                            if (idxPath !== undefined) {
                                refs.add(idxPath);
                            }
                        }
                        else if (expression.type === expressionType_1.ExpressionType.Foreach ||
                        expression.type === expressionType_1.ExpressionType.Where ||
                        expression.type === expressionType_1.ExpressionType.Select) {
                            let result = this.referenceWalk(children[0], extension);
                            const child0Path = result.path;
                            const refs0 = result.refs;
                            if (child0Path !== undefined) {
                                refs0.add(child0Path);
                            }
                            result = this.referenceWalk(children[2], extension);
                            const child2Path = result.path;
                            const refs2 = result.refs;
                            if (child2Path !== undefined) {
                                refs2.add(child2Path);
                            }
                            const iteratorName = children[1].children[0].value;
                            const nonLocalRefs2 = Array.from(refs2).filter((x) => !(x === iteratorName || x.startsWith(iteratorName + '.') || x.startsWith(iteratorName + '[')));
                            refs = new Set([...refs, ...refs0, ...nonLocalRefs2]);
                        }
                        else {
                            for (const child of expression.children) {
                                const result = this.referenceWalk(child, extension);
                                const childPath = result.path;
                                const refs0 = result.refs;
                                refs = new Set([...refs, ...refs0]);
                                if (childPath !== undefined) {
                                    refs.add(childPath);
                                }
                            }
                        }
                    }
                    return {
                        path,
                        refs
                    };
                }
                /**
                     * Parse an expression string into an [Expression](xref:adaptive-expressions.Expression) object.
                     * @param expression Expression string.
                     * @param lookup Optional. [EvaluatorLookup](xref:adaptive-expressions.EvaluatorLookup) function lookup when parsing the expression. Default is [Expression.lookup](xref:adaptive-expressions.Expression.lookup) which uses [Expression.functions](xref:adaptive-expressions.Expression.functions) table.
                     * @returns The expression object.
                     */
                static parse(expression, lookup)
                {
                    return new parser_1.ExpressionParser(lookup || Expression.lookup).parse(expression);
                }
                /**
                     * Lookup an [ExpressionEvaluator](xref:adaptive-expressions.ExpressionEvaluator) function by name.
                     * @param functionName Name of function to lookup.
                     * @returns An [ExpressionEvaluator](xref:adaptive-expressions.ExpressionEvaluator) corresponding to the function name.
                     */
                static lookup(functionName)
                {
                    const exprEvaluator = Expression.functions.get(functionName);
                    if (!exprEvaluator) {
                        return undefined;
                    }
                    return exprEvaluator;
                }
                /**
                     * Make an expression and validate it.
                     * @param type Type of expression from ExpressionType.
                     * @param evaluator Information about how to validate and evaluate expression.
                     * @param children Child expressions.
                     */
                static makeExpression(type, evaluator, ...children)
                {
                    const expr = new Expression(type, evaluator, ...children);
                    expr.validate();
                    return expr;
                }
                /**
                     * Construct an expression from a EvaluateExpressionDelegate
                     * @param func Function to create an expression from.
                     */
                static lambaExpression(func)
                {
                    return new Expression(expressionType_1.ExpressionType.Lambda, new expressionEvaluator_1.ExpressionEvaluator(expressionType_1.ExpressionType.Lambda, func));
                }
                /**
                     * Construct an expression from a lamba expression over the state.
                     * Exceptions will be caught and surfaced as an error string.
                     * @param func ambda expression to evaluate.
                     * @returns New expression.
                     */
                static lambda(func)
                {
                    return new Expression(expressionType_1.ExpressionType.Lambda, new expressionEvaluator_1.ExpressionEvaluator(expressionType_1.ExpressionType.Lambda, // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    (_expression, state, _) => {
                        let value;
                        let error;
                        try {
                            value = func(state);
                        }
                        catch (funcError) {
                            error = funcError;
                        }
                        return {
                            value,
                            error
                        };
                    }));
                }
                /**
                     * Construct and validate an Set a property expression to a value expression.
                     * @param property property expression.
                     * @param value value expression.
                     * @returns New expression.
                     */
                static setPathToValue(property, value)
                {
                    if (value instanceof Expression) {
                        return Expression.makeExpression(expressionType_1.ExpressionType.SetPathToValue, undefined, property, value);
                    }
                    else {
                        return Expression.makeExpression(expressionType_1.ExpressionType.SetPathToValue, undefined, property, new constant_1.Constant(value));
                    }
                }
                /**
                     * Construct and validate an Equals expression.
                     * @param children Child clauses.
                     * @returns New expression.
                     */
                static equalsExpression(...children)
                {
                    return Expression.makeExpression(expressionType_1.ExpressionType.Equal, undefined, ...children);
                }
                /**
                     * Construct and validate an And expression.
                     * @param children Child clauses.
                     * @returns New expression.
                     */
                static andExpression(...children)
                {
                    if (children.length > 1) {
                        return Expression.makeExpression(expressionType_1.ExpressionType.And, undefined, ...children);
                    }
                    else {
                        return children[0];
                    }
                }
                /**
                     * Construct and validate an Or expression.
                     * @param children Child clauses.
                     * @returns New expression.
                     */
                static orExpression(...children)
                {
                    if (children.length > 1) {
                        return Expression.makeExpression(expressionType_1.ExpressionType.Or, undefined, ...children);
                    }
                    else {
                        return children[0];
                    }
                }
                /**
                     * Construct and validate an Not expression.
                     * @param children Child clauses.
                     * @returns New expression.
                     */
                static notExpression(child)
                {
                    return Expression.makeExpression(expressionType_1.ExpressionType.Not, undefined, child);
                }
                /**
                     * Recursively validate the expression tree.
                     */
                validateTree()
                {
                    this.validate();
                    for (const child of this.children) {
                        child.validateTree();
                    }
                }
                /**
                     * Evaluate the expression.
                     * Global state to evaluate accessor expressions against.  Can Dictionary be otherwise reflection is used to access property and then indexer.
                     * @param state
                     */
                tryEvaluate(state, options=undefined)
                {
                    if (!extensions_1.Extensions.isMemoryInterface(state)) {
                        state = memory_1.SimpleObjectMemory.wrap(state);
                    }
                    options = options ? options : new options_1.Options();
                    return this.evaluator.tryEvaluate(this, state, options);
                }
                /**
                     * Returns a string that represents the current [Expression](xref:adaptive-expressions.Expression) object.
                     * @returns A string that represents the current [Expression](xref:adaptive-expressions.Expression) object.
                     */
                toString()
                {
                    let builder = '';
                    let valid = false;
                    // Special support for memory paths
                    if (this.type === expressionType_1.ExpressionType.Accessor && this.children.length >= 1) {
                        if (this.children[0] instanceof constant_1.Constant) {
                            const prop = this.children[0].value;
                            if (typeof prop === 'string') {
                                if (this.children.length === 1) {
                                    valid = true;
                                    builder = builder.concat(prop);
                                }
                                else if (this.children.length === 2) {
                                    valid = true;
                                    builder = builder.concat(this.children[1].toString(), '.', prop);
                                }
                            }
                        }
                    }
                    else if (this.type === expressionType_1.ExpressionType.Element && this.children.length === 2) {
                        valid = true;
                        builder = builder.concat(this.children[0].toString(), '[', this.children[1].toString(), ']');
                    }
                    if (!valid) {
                        const infix = this.type.length > 0 && !new RegExp(/[a-z]/i).test(this.type[0]) && this.children.length >= 2;
                        if (!infix) {
                            builder = builder.concat(this.type);
                        }
                        builder = builder.concat('(');
                        let first = true;
                        for (const child of this.children) {
                            if (first) {
                                first = false;
                            }
                            else {
                                if (infix) {
                                    builder = builder.concat(' ', this.type, ' ');
                                }
                                else {
                                    builder = builder.concat(', ');
                                }
                            }
                            builder = builder.concat(child.toString());
                        }
                        builder = builder.concat(')');
                    }
                    return builder;
                }
            }
            /**
             * Dictionary of function => ExpressionEvaluator.
             * This is all available functions, you can add custom functions to it, but you cannot
             * replace builtin functions.  If you clear the dictionary, it will be reset to the built in functions.
             */
            Expression.functions = new functionTable_1.FunctionTable();
            exports.Expression = Expression;

        }, {
            "./constant": 158,
            "./expressionEvaluator": 171,
            "./expressionType": 183,
            "./extensions": 184,
            "./functionTable": 185,
            "./memory": 192,
            "./options": 195,
            "./parser": 200,
            "./returnType": 204
        }],
        171: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const returnType_1 = require("./returnType");
            /**
             * Information on how to evaluate an expression.
             */
            class ExpressionEvaluator {
                /**
                     * Initializes a new instance of the <see cref="ExpressionEvaluator"/> class.
                     * @param type Expression type.
                     * @param evaluator Delegate to evaluate an expression.
                     * @param returnType Type expected from evaluation.
                     * @param validator Static validation of expression.
                     */
                constructor(type, evaluator, returnType=returnType_1.ReturnType.Object, validator)
                {
                    /**
                             * Evaluate an expression.
                             * @param expression Expression to evaluate.
                             * @param state Global state information.
                             */
                    this.tryEvaluate = (expression, state, options) => this._evaluator(expression, state, options);
                    /**
                             * Validate an expression.
                             * @param expression Expression to validate.
                             */
                    this.validateExpression = (expression) => this._validator(expression);
                    this.type = type;
                    this._evaluator = evaluator;
                    this.returnType = returnType;
                    this._validator =
                    validator ||

                    (// eslint-disable-next-line @typescript-eslint/no-unused-vars
                    (_expr) => {

                    });
                }
                /**
                     * Gets the evaluator that is a negation of this one.
                     */
                get negation()
                {
                    return this._negation;
                }
                /**
                     * Sets the evaluator that is a negation of this one.
                     */
                set negation(value)
                {
                    value._negation = this;
                    this._negation = value;
                }
            }
            exports.ExpressionEvaluator = ExpressionEvaluator;

        }, {
            "./returnType": 204
        }],
        172: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            var __importStar = (this && this.__importStar) || function(mod) {
                if (mod && mod.__esModule)
                    return mod;
                var result = {};
                if (mod != null)
                    for (var k in mod)
                        if (Object.hasOwnProperty.call(mod, k))
                            result[k] = mod[k];
                result["default"] = mod;
                return result;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            const BuiltinFunctions = __importStar(require("./builtinFunctions"));
            const expressionType_1 = require("./expressionType");
            /**
             *  <summary>
             *  Definition of default built-in functions for expressions.
             *  </summary>
             *  <remarks>
             *  These functions are largely from WDL https://docs.microsoft.com/en-us/azure/logic-apps/workflow-definition-language-functions-reference
             *  with a few extensions like infix operators for math, logic and comparisons.
             *  This class also has some methods that are useful to use when defining custom functions.
             *  You can always construct a <see cref="ExpressionEvaluator"/> directly which gives the maximum amount of control over validation and evaluation.
             *  Validators are static checkers that should throw an exception if something is not valid statically.
             *  Evaluators are called to evaluate an expression and should try not to throw.
             *  There are some evaluators in this file that take in a verifier that is called at runtime to verify arguments are proper.
             *  </remarks>
             */
            class ExpressionFunctions {
                /**
                     * @private
                     */
                static getStandardFunctions()
                {
                    const functions = [
                    new BuiltinFunctions.Accessor(),
                    new BuiltinFunctions.Add(),
                    new BuiltinFunctions.AddDays(),
                    new BuiltinFunctions.AddHours(),
                    new BuiltinFunctions.AddMinutes(),
                    new BuiltinFunctions.AddOrdinal(),
                    new BuiltinFunctions.AddProperty(),
                    new BuiltinFunctions.AddSeconds(),
                    new BuiltinFunctions.AddToTime(),
                    new BuiltinFunctions.And(),
                    new BuiltinFunctions.Average(),
                    new BuiltinFunctions.Base64(),
                    new BuiltinFunctions.Base64ToBinary(),
                    new BuiltinFunctions.Base64ToString(),
                    new BuiltinFunctions.Binary(),
                    new BuiltinFunctions.Bool(),
                    new BuiltinFunctions.Ceiling(),
                    new BuiltinFunctions.Coalesce(),
                    new BuiltinFunctions.Concat(),
                    new BuiltinFunctions.Contains(),
                    new BuiltinFunctions.ConvertFromUTC(),
                    new BuiltinFunctions.ConvertToUTC(),
                    new BuiltinFunctions.Count(),
                    new BuiltinFunctions.CountWord(),
                    new BuiltinFunctions.CreateArray(),
                    new BuiltinFunctions.DataUri(),
                    new BuiltinFunctions.DataUriToBinary(),
                    new BuiltinFunctions.DataUriToString(),
                    new BuiltinFunctions.DateFunc(),
                    new BuiltinFunctions.DateReadBack(),
                    new BuiltinFunctions.DateTimeDiff(),
                    new BuiltinFunctions.DayOfMonth(),
                    new BuiltinFunctions.DayOfWeek(),
                    new BuiltinFunctions.DayOfYear(),
                    new BuiltinFunctions.Divide(),
                    new BuiltinFunctions.Element(),
                    new BuiltinFunctions.Empty(),
                    new BuiltinFunctions.EndsWith(),
                    new BuiltinFunctions.Equal(),
                    new BuiltinFunctions.Exists(),
                    new BuiltinFunctions.Flatten(),
                    new BuiltinFunctions.First(),
                    new BuiltinFunctions.Float(),
                    new BuiltinFunctions.Floor(),
                    new BuiltinFunctions.Foreach(),
                    new BuiltinFunctions.FormatDateTime(),
                    new BuiltinFunctions.FormatEpoch(),
                    new BuiltinFunctions.FormatNumber(),
                    new BuiltinFunctions.FormatTicks(),
                    new BuiltinFunctions.GetFutureTime(),
                    new BuiltinFunctions.GetNextViableDate(),
                    new BuiltinFunctions.GetNextViableTime(),
                    new BuiltinFunctions.GetPastTime(),
                    new BuiltinFunctions.GetPreviousViableDate(),
                    new BuiltinFunctions.GetPreviousViableTime(),
                    new BuiltinFunctions.GetPastTime(),
                    new BuiltinFunctions.GetProperty(),
                    new BuiltinFunctions.GetTimeOfDay(),
                    new BuiltinFunctions.GreaterThan(),
                    new BuiltinFunctions.GreaterThanOrEqual(),
                    new BuiltinFunctions.If(),
                    new BuiltinFunctions.Ignore(),
                    new BuiltinFunctions.IndexOf(),
                    new BuiltinFunctions.IndicesAndValues(),
                    new BuiltinFunctions.Int(),
                    new BuiltinFunctions.Intersection(),
                    new BuiltinFunctions.IsArray(),
                    new BuiltinFunctions.IsBoolean(),
                    new BuiltinFunctions.IsDate(),
                    new BuiltinFunctions.IsDateRange(),
                    new BuiltinFunctions.IsDateTime(),
                    new BuiltinFunctions.IsDefinite(),
                    new BuiltinFunctions.IsDuration(),
                    new BuiltinFunctions.IsFloat(),
                    new BuiltinFunctions.IsInteger(),
                    new BuiltinFunctions.IsMatch(),
                    new BuiltinFunctions.IsObject(),
                    new BuiltinFunctions.IsPresent(),
                    new BuiltinFunctions.IsString(),
                    new BuiltinFunctions.IsTime(),
                    new BuiltinFunctions.IsTimeRange(),
                    new BuiltinFunctions.Join(),
                    new BuiltinFunctions.JPath(),
                    new BuiltinFunctions.Json(),
                    new BuiltinFunctions.JsonStringify(),
                    new BuiltinFunctions.Last(),
                    new BuiltinFunctions.LastIndexOf(),
                    new BuiltinFunctions.Length(),
                    new BuiltinFunctions.LessThan(),
                    new BuiltinFunctions.LessThanOrEqual(),
                    new BuiltinFunctions.Max(),
                    new BuiltinFunctions.Merge(),
                    new BuiltinFunctions.Min(),
                    new BuiltinFunctions.Mod(),
                    new BuiltinFunctions.Month(),
                    new BuiltinFunctions.Multiply(),
                    new BuiltinFunctions.NewGuid(),
                    new BuiltinFunctions.Not(),
                    new BuiltinFunctions.NotEqual(),
                    new BuiltinFunctions.Optional(),
                    new BuiltinFunctions.Or(),
                    new BuiltinFunctions.Power(),
                    new BuiltinFunctions.Rand(),
                    new BuiltinFunctions.Range(),
                    new BuiltinFunctions.RemoveProperty(),
                    new BuiltinFunctions.Replace(),
                    new BuiltinFunctions.ReplaceIgnoreCase(),
                    new BuiltinFunctions.Reverse(),
                    new BuiltinFunctions.Round(),
                    new BuiltinFunctions.Select(),
                    new BuiltinFunctions.SentenceCase(),
                    new BuiltinFunctions.SetPathToValue(),
                    new BuiltinFunctions.SetProperty(),
                    new BuiltinFunctions.Skip(),
                    new BuiltinFunctions.SortBy(),
                    new BuiltinFunctions.SortByDescending(),
                    new BuiltinFunctions.Split(),
                    new BuiltinFunctions.StartOfDay(),
                    new BuiltinFunctions.StartOfHour(),
                    new BuiltinFunctions.StartOfMonth(),
                    new BuiltinFunctions.StartsWith(),
                    new BuiltinFunctions.String(),
                    new BuiltinFunctions.SubArray(),
                    new BuiltinFunctions.Substring(),
                    new BuiltinFunctions.Subtract(),
                    new BuiltinFunctions.SubtractFromTime(),
                    new BuiltinFunctions.Sum(),
                    new BuiltinFunctions.Take(),
                    new BuiltinFunctions.Ticks(),
                    new BuiltinFunctions.TicksToDays(),
                    new BuiltinFunctions.TicksToHours(),
                    new BuiltinFunctions.TicksToMinutes(),
                    new BuiltinFunctions.TitleCase(),
                    new BuiltinFunctions.ToLower(),
                    new BuiltinFunctions.ToUpper(),
                    new BuiltinFunctions.Trim(),
                    new BuiltinFunctions.Union(),
                    new BuiltinFunctions.Unique(),
                    new BuiltinFunctions.UriComponent(),
                    new BuiltinFunctions.UriComponentToString(),
                    new BuiltinFunctions.UriHost(),
                    new BuiltinFunctions.UriPath(),
                    new BuiltinFunctions.UriPathAndQuery(),
                    new BuiltinFunctions.UriPort(),
                    new BuiltinFunctions.UriQuery(),
                    new BuiltinFunctions.UriScheme(),
                    new BuiltinFunctions.UtcNow(),
                    new BuiltinFunctions.Where(),
                    new BuiltinFunctions.Year(),
                    ];
                    const lookup = new Map();
                    functions.forEach((func) => {
                        lookup.set(func.type, func);
                    });
                    // Attach negations
                    lookup.get(expressionType_1.ExpressionType.LessThan).negation = lookup.get(expressionType_1.ExpressionType.GreaterThanOrEqual);
                    lookup.get(expressionType_1.ExpressionType.LessThanOrEqual).negation = lookup.get(expressionType_1.ExpressionType.GreaterThan);
                    lookup.get(expressionType_1.ExpressionType.Equal).negation = lookup.get(expressionType_1.ExpressionType.NotEqual);
                    // Math aliases
                    lookup.set('add', lookup.get(expressionType_1.ExpressionType.Add)); // more than 1 param
                    lookup.set('mul', lookup.get(expressionType_1.ExpressionType.Multiply)); // more than 1 param
                    lookup.set('div', lookup.get(expressionType_1.ExpressionType.Divide)); // more than 1 param
                    lookup.set('sub', lookup.get(expressionType_1.ExpressionType.Subtract)); // more than 1 param
                    lookup.set('exp', lookup.get(expressionType_1.ExpressionType.Power)); // more than 1 param
                    lookup.set('mod', lookup.get(expressionType_1.ExpressionType.Mod));
                    // Comparison aliases
                    lookup.set('and', lookup.get(expressionType_1.ExpressionType.And));
                    lookup.set('equals', lookup.get(expressionType_1.ExpressionType.Equal));
                    lookup.set('greater', lookup.get(expressionType_1.ExpressionType.GreaterThan));
                    lookup.set('greaterOrEquals', lookup.get(expressionType_1.ExpressionType.GreaterThanOrEqual));
                    lookup.set('less', lookup.get(expressionType_1.ExpressionType.LessThan));
                    lookup.set('lessOrEquals', lookup.get(expressionType_1.ExpressionType.LessThanOrEqual));
                    lookup.set('not', lookup.get(expressionType_1.ExpressionType.Not));
                    lookup.set('or', lookup.get(expressionType_1.ExpressionType.Or));
                    lookup.set('&', lookup.get(expressionType_1.ExpressionType.Concat));
                    lookup.set('??', lookup.get(expressionType_1.ExpressionType.Coalesce));
                    return lookup;
                }
            }
            /**
             * Read only Dictionary of built in functions.
             */
            ExpressionFunctions.standardFunctions = ExpressionFunctions.getStandardFunctions();
            exports.ExpressionFunctions = ExpressionFunctions;

        }, {
            "./builtinFunctions": 64,
            "./expressionType": 183
        }],
        173: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            const expressionProperty_1 = require("./expressionProperty");
            /**
             * Represents a property which is either a value of array of T or a string expression to bind to a
             * array of T.
             * @remarks
             * String values are always interpreted as an expression, whether it has '=' prefix or not.
             * @param T Type of object in the array.
             */
            class ArrayExpression extends expressionProperty_1.ExpressionProperty {
                /**
                     * Initializes a new instance of the [ArrayExpression<T>](xref:adaptive-expressions.ArrayExpression) class.
                     * @param value Value of `T[]` or a `string` expression to bind to a `T[]`.
                     */
                constructor(value)
                {
                    super(value);
                }
            }
            exports.ArrayExpression = ArrayExpression;

        }, {
            "./expressionProperty": 176
        }],
        174: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            const expressionProperty_1 = require("./expressionProperty");
            /**
             * Represents a property which is either a boolean or a string expression which resolves to a boolean.
             * @remarks
             * String values are always interpreted as an expression, whether it has '=' prefix or not.
             */
            class BoolExpression extends expressionProperty_1.ExpressionProperty {
                /**
                     * Initializes a new instance of the [BoolExpression](xref:adaptive-expressions.BoolExpression) class.
                     * @param value A `boolean` or a `string` expression which resolves to a `boolean`.
                     */
                constructor(value)
                {
                    super(value, false);
                }
            }
            exports.BoolExpression = BoolExpression;

        }, {
            "./expressionProperty": 176
        }],
        175: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionProperty_1 = require("./expressionProperty");
            /**
             * EnumExpression - represents a property which is either an enum of T or a string expression which resolves to an enum.
             * @remarks
             * String values are always interpreted as an expression whether it has '=' prefix or not, as string values cannot be parsed to enum values.
             */
            class EnumExpression extends expressionProperty_1.ExpressionProperty {
                /**
                     * Initializes a new instance of the [EnumExpression<T>](xref:adaptive-expressions.EnumExpression) class.
                     * @param value An enum of `T` or a `string` expression which resolves to an `enum`.
                     */
                constructor(value)
                {
                    super(value);
                }
                /**
                     * Set an enum value.
                     * @param value value to set.
                     */
                setValue(value)
                {
                    super.setValue(undefined);
                    if (typeof value == 'string' && !value.startsWith('=')) {
                        // Initialize value
                        this.value = value;
                        return;
                    }
                    super.setValue(value);
                }
            }
            exports.EnumExpression = EnumExpression;

        }, {
            "./expressionProperty": 176
        }],
        176: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            const expression_1 = require("../expression");
            /**
             * Base class which defines an Expression or value for a property.
             * @typeparam T Type of value of the expression property.
             */
            class ExpressionProperty {
                /**
                     * Initializes a new instance of the [ExpressionProperty<T>](xref:adaptive-expressions.ExpressionProperty) class.
                     * @param value Optional. Raw value of the expression property.
                     * @param defaultValue Optional. Default value for the property.
                     */
                constructor(value, defaultValue)
                {
                    this.defaultValue = defaultValue;
                    this.setValue(value);
                }
                /**
                     * Convert an expression property to string.
                     */
                toString()
                {
                    if (this.expressionText) {
                        return `=${this.expressionText.replace(/^=/, '')}`;
                    }
                    return this.value ? this.value.toString() : '';
                }
                /**
                     * This will return the existing expression if the value is non-complex type.
                     */
                toExpression()
                {
                    if (this.expression) {
                        return this.expression;
                    }
                    if (this.expressionText) {
                        this.expression = expression_1.Expression.parse(this.expressionText.replace(/^=/, ''));
                        return this.expression;
                    }
                    // Generate expression
                    switch (typeof this.value) {
                    case 'string':
                    case 'number':
                    case 'boolean':
                        this.expression = expression_1.Expression.parse(this.value.toString());
                        break;
                    default:
                        if (this.value === undefined) {
                            this.expression = expression_1.Expression.parse('undefined');
                        }
                        else if (this.value === null) {
                            this.expression = expression_1.Expression.parse('null');
                        }
                        else {
                            this.expression = expression_1.Expression.parse(`json(${JSON.stringify(this.value)})`);
                        }
                        break;
                    }
                    return this.expression;
                }
                /**
                     * Get the value.
                     * @remarks
                     * An error will be thrown if value is an invalid expression.
                     * @param data Data to use for expression binding.
                     * @returns The value.
                     */
                getValue(data)
                {
                    const {value, error} = this.tryGetValue(data);
                    if (error) {
                        throw error;
                    }
                    return value;
                }
                /**
                     * Try to Get the value.
                     * @param data Data to use for expression binding.
                     * @returns the value or an error.
                     */
                tryGetValue(data)
                {
                    if (!this.expression && this.expressionText) {
                        this.expression = expression_1.Expression.parse(this.expressionText.replace(/^=/, ''));
                    }
                    if (this.expression) {
                        return this.expression.tryEvaluate(data);
                    }
                    return {
                        value: this.value,
                        error: undefined
                    };
                }
                /**
                     * Set the value.
                     * @param value Value to set.
                     */
                setValue(value)
                {
                    this.value = this.defaultValue;
                    this.expression = undefined;
                    this.expressionText = undefined;
                    if (typeof value == 'string') {
                        this.expressionText = value.replace(/^=/, '');
                    }
                    else if (value instanceof expression_1.Expression) {
                        this.expression = value;
                        this.expressionText = value.toString();
                    }
                    else if (value !== undefined) {
                        this.value = value;
                    }
                }
            }
            exports.ExpressionProperty = ExpressionProperty;

        }, {
            "../expression": 170
        }],
        177: [function(require, module, exports) {
            "use strict";
            function __export(m) {
                for (var p in m)
                    if (!exports.hasOwnProperty(p))
                        exports[p] = m[p];
            }
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            __export(require("./arrayExpression"));
            __export(require("./boolExpression"));
            __export(require("./enumExpression"));
            __export(require("./expressionProperty"));
            __export(require("./intExpression"));
            __export(require("./numberExpression"));
            __export(require("./objectExpression"));
            __export(require("./stringExpression"));
            __export(require("./valueExpression"));

        }, {
            "./arrayExpression": 173,
            "./boolExpression": 174,
            "./enumExpression": 175,
            "./expressionProperty": 176,
            "./intExpression": 178,
            "./numberExpression": 179,
            "./objectExpression": 180,
            "./stringExpression": 181,
            "./valueExpression": 182
        }],
        178: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            const expressionProperty_1 = require("./expressionProperty");
            /**
             * Represents a property which is either a int or a string expression which resolves to a int.
             * @remarks
             * String values are always interpreted as an expression, whether it has '=' prefix or not.
             */
            class IntExpression extends expressionProperty_1.ExpressionProperty {
                /**
                     * Initializes a new instance of the [IntExpression](xref:adaptive-expressions.IntExpression) class.
                     * @param value An int `number` or `string` expression which resolves to an int `number`.
                     */
                constructor(value)
                {
                    super(value, 0);
                }
                /**
                     * Try to get the value.
                     * @param data Data to use for expression binding.
                     * @returns Value of int number
                     */
                tryGetValue(data)
                {
                    const result = super.tryGetValue(data);
                    if (typeof result.value == 'number') {
                        // Ensure returned value is an int.
                        result.value = Math.trunc(result.value);
                    }
                    return result;
                }
            }
            exports.IntExpression = IntExpression;

        }, {
            "./expressionProperty": 176
        }],
        179: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            const expressionProperty_1 = require("./expressionProperty");
            /**
             * Represents a property which is either a float or a string expression which resolves to a float.
             * @remarks
             * String values are always interpreted as an expression, whether it has '=' prefix or not.
             */
            class NumberExpression extends expressionProperty_1.ExpressionProperty {
                /**
                     * Initializes a new instance of the [NumberExpression](xref:adaptive-expressions.NumberExpression) class.
                     * @param value A float `number` or `string` expression which resolves to a float `number`.
                     */
                constructor(value)
                {
                    super(value, 0);
                }
            }
            exports.NumberExpression = NumberExpression;

        }, {
            "./expressionProperty": 176
        }],
        180: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            const expressionProperty_1 = require("./expressionProperty");
            /**
             * Represents a property which is either an object of type T or a string expression which resolves
             * to a object of type T.
             * @remarks
             * String values are always interpreted as an expression, whether it has '=' prefix or not.
             * @param T The type of object.
             */
            class ObjectExpression extends expressionProperty_1.ExpressionProperty {
                /**
                     * Initializes a new instance of the [ObjectExpression<T>](xref:adaptive-expressions.ObjectExpression) class.
                     * @param value An object of type `T` or a `string` expression which resolves to a object of type `T`.
                     */
                constructor(value)
                {
                    super(value);
                }
            }
            exports.ObjectExpression = ObjectExpression;

        }, {
            "./expressionProperty": 176
        }],
        181: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            const expressionProperty_1 = require("./expressionProperty");
            const expression_1 = require("../expression");
            /**
             * Represents a property which is either a string value or a string expression.
             * @remarks
             * If the value is
             * - a string with '=' prefix then the string is treated as an expression to resolve to a string.
             * - a string without '=' then value is treated as string with string interpolation.
             * - You can escape the '=' prefix by putting a backslash.
             * Examples:
             *     prop = "Hello @{user.name}" => "Hello Joe"
             *     prop = "=length(user.name)" => "3"
             *     prop = "=user.name" => "Joe"
             *     prop = "\=user" => "=user".
             */
            class StringExpression extends expressionProperty_1.ExpressionProperty {
                /**
                     * Initializes a new instance of the [StringExpression](xref:adaptive-expressions.StringExpression) class.
                     * @param value A `string` value or a `string` expression.
                     */
                constructor(value)
                {
                    super(value);
                }
                /**
                     * Set a string value.
                     * @param value Value to set.
                     */
                setValue(value)
                {
                    // reset state to no value or expression
                    super.setValue(undefined);
                    if (value instanceof expression_1.Expression) {
                        super.setValue(value);
                        return;
                    }
                    if (typeof value == 'string') {
                        if (value.startsWith('=')) {
                            this.expressionText = value;
                            return;
                        }
                        else if (value.startsWith('\\=')) {
                            // Trim off the escape char for equals (\=foo) should simply be the string (=foo).
                            value = value.substr(1);
                        }
                        // keep the string as quoted expression, which will be literal unless string interpolation is used.
                        this.expressionText = `=\`${value.replace(/\\/g, '\\\\').replace('`', '\\`')}\``;
                        return;
                    }
                }
            }
            exports.StringExpression = StringExpression;

        }, {
            "../expression": 170,
            "./expressionProperty": 176
        }],
        182: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            const expressionProperty_1 = require("./expressionProperty");
            /**
             * Represents a property which is an object of any kind or a string expression.
             * @remarks
             * If the value is
             * - a string with '=' prefix then the string is treated as an expression to resolve to a string.
             * - a string without '=' then value is treated as string with string interpolation.
             * - You can escape the '=' prefix by putting a backslash.
             * Examples:
             *     prop = "Hello @{user.name}" => "Hello Joe"
             *     prop = "=length(user.name)" => "3"
             *     prop = "=user.name" => "Joe"
             *     prop = "\=user" => "=user".
             */
            class ValueExpression extends expressionProperty_1.ExpressionProperty {
                /**
                     * Initializes a new instance of the [ValueExpression](xref:adaptive-expressions.ValueExpression) class.
                     * @param value An object of `any` kind or a `string` expression.
                     */
                constructor(value)
                {
                    super(value);
                }
                /**
                     * Set value as value expression.
                     * @param value Value to set.
                     */
                setValue(value)
                {
                    super.setValue(undefined);
                    if (typeof value == 'string') {
                        if (value.startsWith('=')) {
                            this.expressionText = value;
                            return;
                        }
                        else if (value.startsWith('\\=')) {
                            // Trim off the escape char for equals (\=foo) should simply be the string (=foo).
                            value = value.substr(1);
                        }
                        // keep the string as quoted expression, which will be literal unless string interpolation is used.
                        this.expressionText = `=\`${value.replace(/\\/g, '\\\\').replace('`', '\\`')}\``;
                        return;
                    }
                    super.setValue(value);
                }
            }
            exports.ValueExpression = ValueExpression;

        }, {
            "./expressionProperty": 176
        }],
        183: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * Built-in expression types.
             */
            class ExpressionType {
            }
            // Math
            ExpressionType.Add = '+';
            ExpressionType.Subtract = '-';
            ExpressionType.Multiply = '*';
            ExpressionType.Divide = '/';
            ExpressionType.Min = 'min';
            ExpressionType.Max = 'max';
            ExpressionType.Power = '^';
            ExpressionType.Mod = '%';
            ExpressionType.Average = 'average';
            ExpressionType.Sum = 'sum';
            ExpressionType.Count = 'count';
            ExpressionType.Range = 'range';
            ExpressionType.Floor = 'floor';
            ExpressionType.Ceiling = 'ceiling';
            ExpressionType.Round = 'round';
            // Comparisons
            ExpressionType.LessThan = '<';
            ExpressionType.LessThanOrEqual = '<=';
            ExpressionType.Equal = '==';
            ExpressionType.NotEqual = '!=';
            ExpressionType.GreaterThan = '>';
            ExpressionType.GreaterThanOrEqual = '>=';
            ExpressionType.Exists = 'exists';
            ExpressionType.Contains = 'contains';
            ExpressionType.Empty = 'empty';
            // Logic
            ExpressionType.And = '&&';
            ExpressionType.Or = '||';
            ExpressionType.Not = '!';
            // String
            ExpressionType.Concat = 'concat';
            ExpressionType.Length = 'length';
            ExpressionType.Replace = 'replace';
            ExpressionType.ReplaceIgnoreCase = 'replaceIgnoreCase';
            ExpressionType.Split = 'split';
            ExpressionType.Substring = 'substring';
            ExpressionType.ToLower = 'toLower';
            ExpressionType.ToUpper = 'toUpper';
            ExpressionType.Trim = 'trim';
            ExpressionType.Join = 'join';
            ExpressionType.EndsWith = 'endsWith';
            ExpressionType.StartsWith = 'startsWith';
            ExpressionType.CountWord = 'countWord';
            ExpressionType.AddOrdinal = 'addOrdinal';
            ExpressionType.NewGuid = 'newGuid';
            ExpressionType.IndexOf = 'indexOf';
            ExpressionType.LastIndexOf = 'lastIndexOf';
            ExpressionType.SentenceCase = 'sentenceCase';
            ExpressionType.TitleCase = 'titleCase';
            // DateTime
            ExpressionType.AddDays = 'addDays';
            ExpressionType.AddHours = 'addHours';
            ExpressionType.AddMinutes = 'addMinutes';
            ExpressionType.AddSeconds = 'addSeconds';
            ExpressionType.DayOfMonth = 'dayOfMonth';
            ExpressionType.DayOfWeek = 'dayOfWeek';
            ExpressionType.DayOfYear = 'dayOfYear';
            ExpressionType.Month = 'month';
            ExpressionType.Date = 'date';
            ExpressionType.Year = 'year';
            ExpressionType.UtcNow = 'utcNow';
            ExpressionType.FormatDateTime = 'formatDateTime';
            ExpressionType.FormatEpoch = 'formatEpoch';
            ExpressionType.FormatTicks = 'formatTicks';
            ExpressionType.SubtractFromTime = 'subtractFromTime';
            ExpressionType.DateReadBack = 'dateReadBack';
            ExpressionType.GetTimeOfDay = 'getTimeOfDay';
            ExpressionType.GetFutureTime = 'getFutureTime';
            ExpressionType.GetPastTime = 'getPastTime';
            ExpressionType.ConvertFromUTC = 'convertFromUTC';
            ExpressionType.ConvertToUTC = 'convertToUTC';
            ExpressionType.AddToTime = 'addToTime';
            ExpressionType.StartOfDay = 'startOfDay';
            ExpressionType.StartOfHour = 'startOfHour';
            ExpressionType.StartOfMonth = 'startOfMonth';
            ExpressionType.Ticks = 'ticks';
            ExpressionType.TicksToDays = 'ticksToDays';
            ExpressionType.TicksToHours = 'ticksToHours';
            ExpressionType.TicksToMinutes = 'ticksToMinutes';
            ExpressionType.DateTimeDiff = 'dateTimeDiff';
            // timex
            ExpressionType.IsDefinite = 'isDefinite';
            ExpressionType.IsTime = 'isTime';
            ExpressionType.IsDuration = 'isDuration';
            ExpressionType.IsDate = 'isDate';
            ExpressionType.IsTimeRange = 'isTimeRange';
            ExpressionType.IsDateRange = 'isDateRange';
            ExpressionType.IsPresent = 'isPresent';
            ExpressionType.GetNextViableDate = 'getNextViableDate';
            ExpressionType.GetPreviousViableDate = 'getPreviousViableDate';
            ExpressionType.GetNextViableTime = 'getNextViableTime';
            ExpressionType.GetPreviousViableTime = 'getPreviousViableTime';
            // Conversions
            ExpressionType.Float = 'float';
            ExpressionType.Int = 'int';
            ExpressionType.String = 'string';
            ExpressionType.Bool = 'bool';
            ExpressionType.Binary = 'binary';
            ExpressionType.Base64 = 'base64';
            ExpressionType.Base64ToBinary = 'base64ToBinary';
            ExpressionType.Base64ToString = 'base64ToString';
            ExpressionType.DataUri = 'dataUri';
            ExpressionType.DataUriToBinary = 'dataUriToBinary';
            ExpressionType.DataUriToString = 'dataUriToString';
            ExpressionType.UriComponent = 'uriComponent';
            ExpressionType.UriComponentToString = 'uriComponentToString';
            ExpressionType.FormatNumber = 'formatNumber';
            ExpressionType.JsonStringify = 'jsonStringify';
            // Memory
            ExpressionType.Accessor = 'Accessor';
            ExpressionType.Element = 'Element';
            ExpressionType.CreateArray = 'createArray';
            // Collection
            ExpressionType.First = 'first';
            ExpressionType.Last = 'last';
            ExpressionType.Foreach = 'foreach';
            ExpressionType.Select = 'select';
            ExpressionType.Where = 'where';
            ExpressionType.Union = 'union';
            ExpressionType.Intersection = 'intersection';
            ExpressionType.Skip = 'skip';
            ExpressionType.Take = 'take';
            ExpressionType.FilterNotEqual = 'filterNotEqual';
            ExpressionType.SubArray = 'subArray';
            ExpressionType.SortBy = 'sortBy';
            ExpressionType.SortByDescending = 'sortByDescending';
            ExpressionType.IndicesAndValues = 'indicesAndValues';
            ExpressionType.Flatten = 'flatten';
            ExpressionType.Unique = 'unique';
            ExpressionType.Reverse = 'reverse';
            // Misc
            ExpressionType.Constant = 'Constant';
            ExpressionType.Lambda = 'Lambda';
            ExpressionType.If = 'if';
            ExpressionType.Rand = 'rand';
            // Object manipulation and construction functions
            ExpressionType.Json = 'json';
            ExpressionType.AddProperty = 'addProperty';
            ExpressionType.RemoveProperty = 'removeProperty';
            ExpressionType.SetProperty = 'setProperty';
            ExpressionType.GetProperty = 'getProperty';
            ExpressionType.Coalesce = 'coalesce';
            ExpressionType.JPath = 'jPath';
            ExpressionType.SetPathToValue = 'setPathToValue';
            ExpressionType.Merge = 'merge';
            // URI parsing functions
            ExpressionType.UriHost = 'uriHost';
            ExpressionType.UriPath = 'uriPath';
            ExpressionType.UriPathAndQuery = 'uriPathAndQuery';
            ExpressionType.UriPort = 'uriPort';
            ExpressionType.UriQuery = 'uriQuery';
            ExpressionType.UriScheme = 'uriScheme';
            // Regar expression
            ExpressionType.IsMatch = 'isMatch';
            //Type Checking
            ExpressionType.IsString = 'isString';
            ExpressionType.IsInteger = 'isInteger';
            ExpressionType.IsArray = 'isArray';
            ExpressionType.IsObject = 'isObject';
            ExpressionType.IsFloat = 'isFloat';
            ExpressionType.IsDateTime = 'isDateTime';
            ExpressionType.IsBoolean = 'isBoolean';
            ExpressionType.Ignore = 'ignore';
            ExpressionType.Optional = 'optional';
            exports.ExpressionType = ExpressionType;

        }, {}],
        184: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * Some util and extension functions
             */
            class Extensions {
                /**
                     * Patch method
                     * TODO: is there any better solution?
                     * To judge if an object is implements MemoryInterface. Same with 'is MemoryInterface' in C#
                     */
                static isMemoryInterface(obj)
                {
                    if (obj === undefined) {
                        return false;
                    }
                    if (typeof obj !== 'object') {
                        return false;
                    }
                    return ( 'getValue' in obj &&
                        'setValue' in obj &&
                        'version' in obj &&
                        typeof obj.getValue === 'function' &&
                        typeof obj.setValue === 'function' &&
                        typeof obj.version === 'function') ;
                }
            }
            exports.Extensions = Extensions;

        }, {}],
        185: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expressionEvaluator_1 = require("./expressionEvaluator");
            const expressionFunctions_1 = require("./expressionFunctions");
            const functionUtils_1 = require("./functionUtils");
            /**
             * FunctionTable is a dictionary which merges BuiltinFunctions.Functions with a CustomDictionary.
             */
            class FunctionTable {
                constructor()
                {
                    this.customFunctions = new Map();
                }
                /**
                     * Gets a collection of string values that represent the keys of the [ExpressionFunctions.standardFunctions](xref:adaptive-expressions.ExpressionFunctions.standardFunctions).
                     * @returns A list of string values.
                     */
                keys()
                {
                    const keysOfAllFunctions = Array.from(expressionFunctions_1.ExpressionFunctions.standardFunctions.keys()).concat(Array.from(this.customFunctions.keys()));
                    return keysOfAllFunctions[Symbol.iterator]();
                }
                /**
                     * Gets a collection of [ExpressionEvaluator](xref:adaptive-expressions.ExpressionEvaluator) which is the value of the StandardFunctions.
                     * @returns A list of [ExpressionEvaluator](xref:adaptive-expressions.ExpressionEvaluator).
                     */
                values()
                {
                    const valuesOfAllFunctions = Array.from(expressionFunctions_1.ExpressionFunctions.standardFunctions.values()).concat(Array.from(this.customFunctions.values()));
                    return valuesOfAllFunctions[Symbol.iterator]();
                }
                /**
                     * Gets the total number of [ExpressionFunctions.standardFunctions](xref:adaptive-expressions.ExpressionFunctions.standardFunctions) and user [customFunctions](xref:adaptive-expressions.FunctionTable.customFunctions).
                     * @returns An integer value.
                     */
                get size()
                {
                    return expressionFunctions_1.ExpressionFunctions.standardFunctions.size + this.customFunctions.size;
                }
                /**
                     * Gets a value indicating whether the [FunctionTable](xref:adaptive-expressions.FunctionTable) is readonly.
                     * @returns A boolean value indicating whether the [FunctionTable](xref:adaptive-expressions.FunctionTable) is readonly.
                     */
                get isReadOnly()
                {
                    return false;
                }
                /**
                     * Gets a value of [ExpressionEvaluator](xref:adaptive-expressions.ExpressionEvaluator) corresponding to the given key.
                     * @param key A string value of function name.
                     * @returns An [ExpressionEvaluator](xref:adaptive-expressions.ExpressionEvaluator).
                     */
                get(key)
                {
                    if (expressionFunctions_1.ExpressionFunctions.standardFunctions.get(key)) {
                        return expressionFunctions_1.ExpressionFunctions.standardFunctions.get(key);
                    }
                    if (this.customFunctions.get(key)) {
                        return this.customFunctions.get(key);
                    }
                    return undefined;
                }
                /**
                     * Sets a value of [ExpressionEvaluator](xref:adaptive-expressions.ExpressionEvaluator) corresponding to the given key.
                     * @param key A string value of function name.
                     * @param value The value to set for the [ExpressionEvaluator](xref:adaptive-expressions.ExpressionEvaluator).
                     */
                set(key, value)
                {
                    if (expressionFunctions_1.ExpressionFunctions.standardFunctions.get(key)) {
                        throw Error(`You can't overwrite a built in function.`);
                    }
                    this.customFunctions.set(key, value);
                    return this;
                }
                /**
                     * Inserts a mapping of a string key to [ExpressionEvaluator](xref:adaptive-expressions.ExpressionEvaluator) into [FunctionTable](xref:adaptive-expressions.FunctionTable).
                     * @param param1 Key-Value pair for the [ExpressionEvaluator](xref:adaptive-expressions.ExpressionEvaluator) or the function name to be added.
                     * @param param2 Value of the [ExpressionEvaluator](xref:adaptive-expressions.ExpressionEvaluator) to be added or value of the user customized function to be added.
                     */
                add(param1, param2)
                {
                    if (arguments.length === 1) {
                        if (param1 instanceof Object) {
                            this.set(param1.key, param1.value);
                        }
                    }
                    else {
                        if (typeof param1 === 'string') {
                            if (param2 instanceof expressionEvaluator_1.ExpressionEvaluator) {
                                this.set(param1, param2);
                            }
                            else {
                                this.set(param1, new expressionEvaluator_1.ExpressionEvaluator(param1, functionUtils_1.FunctionUtils.apply(param2)));
                            }
                        }
                    }
                }
                /**
                     * Clears the user [customFunctions](xref:adaptive-expressions.FunctionTable.customFunctions).
                     */
                clear()
                {
                    this.customFunctions.clear();
                }
                /**
                     * Determines if the [FunctionTable](xref:adaptive-expressions.FunctionTable) has a given string key.
                     * @param key A string key.
                     * @returns `True` if the key is contained, otherwise returns `False`.
                     */
                has(key)
                {
                    return expressionFunctions_1.ExpressionFunctions.standardFunctions.has(key) || this.customFunctions.has(key);
                }
                /**
                     * Deletes a specified key from user [customFunctions](xref:adaptive-expressions.FunctionTable.customFunctions).
                     * @param key A string key of function name.
                     * @returns A boolean value indicating whether the key is successfully deleted.
                     */
                delete(key)
                {
                    return this.customFunctions.delete(key);
                }
                /**
                     * Operates on each element of the [ExpressionFunctions.standardFunctions](xref:adaptive-expressions.ExpressionFunctions.standardFunctions).
                     * Not implemented.
                     * @param _callbackfn Callback function.
                     * @param thisArg Optional. This args.
                     */
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                forEach(_callbackfn, thisArg)
                {
                    throw Error(`forEach function not implemented`);
                }
                /**
                     * Returns an iterable of key, value pairs for every entry in the map.
                     * Not implemented.
                     */
                entries()
                {
                    throw Error(`entries function not implemented`);
                }
                /**
                     * Returns an iterable of key, value pairs.
                     * Not implemented.
                     */
                get [Symbol.iterator]()
                {
                    throw Error(`Symbol.iterator function not implemented`);
                }
                /**
                     * Returns a string value.
                     * Not implemented.
                     */
                get [Symbol.toStringTag]()
                {
                    throw Error(`Symbol.toStringTag function not implemented`);
                }
            }
            exports.FunctionTable = FunctionTable;

        }, {
            "./expressionEvaluator": 171,
            "./expressionFunctions": 172,
            "./functionUtils": 187
        }],
        186: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            var __importDefault = (this && this.__importDefault) || function(mod) {
                return (mod && mod.__esModule) ? mod : {
                    "default": mod
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const sortBy_1 = __importDefault(require("lodash/sortBy"));
            const moment_1 = __importDefault(require("moment"));
            const expressionType_1 = require("./expressionType");
            const memory_1 = require("./memory");
            const recognizers_text_data_types_timex_expression_1 = require("@microsoft/recognizers-text-data-types-timex-expression");
            const bigInt = require("big-integer");
            /**
             * Utility functions only used internal
             */
            class InternalFunctionUtils {
                /**
                     * Parse timex funcition.
                     * @param timexExpr String or TimexProperty input.
                     * @returns TimexProperty and error.
                     */
                static parseTimexProperty(timexExpr)
                {
                    let parsed;
                    if (timexExpr instanceof recognizers_text_data_types_timex_expression_1.TimexProperty) {
                        parsed = timexExpr;
                    }
                    else if (typeof timexExpr === 'string') {
                        parsed = new recognizers_text_data_types_timex_expression_1.TimexProperty(timexExpr);
                    }
                    else {
                        parsed = new recognizers_text_data_types_timex_expression_1.TimexProperty(timexExpr);
                        if (parsed === undefined || Object.keys(parsed).length === 0) {
                            return {
                                timexProperty: parsed,
                                error: `${timexExpr} requires a TimexProperty or a string as a argument`,
                            };
                        }
                    }
                    return {
                        timexProperty: parsed,
                        error: undefined
                    };
                }
                /**
                     * Convert string into Uint8Array object.
                     * @param stringToConvert Input string.
                     */
                static toBinary(stringToConvert)
                {
                    const result = new ArrayBuffer(stringToConvert.length);
                    const bufferView = new Uint8Array(result);
                    for (let i = 0; i < stringToConvert.length; i++) {
                        bufferView[i] = stringToConvert.charCodeAt(i);
                    }
                    return bufferView;
                }
                /**
                     * Sort helper function.
                     * @param isDescending Descending flag.
                     */
                static sortBy(isDescending)
                {
                    return (expression, state, options) => {
                        let result;
                        const {value: oriArr, error: childrenError} = expression.children[0].tryEvaluate(state, options);
                        let error = childrenError;
                        if (!error) {
                            if (Array.isArray(oriArr)) {
                                const arr = oriArr.slice(0);
                                if (expression.children.length === 1) {
                                    if (isDescending) {
                                        result = arr.sort().reverse();
                                    }
                                    else {
                                        result = arr.sort();
                                    }
                                }
                                else {
                                    let propertyName;
                                    ({value: propertyName, error} = expression.children[1].tryEvaluate(state, options));
                                    if (!error) {
                                        propertyName = propertyName || '';
                                    }
                                    if (isDescending) {
                                        result = sortBy_1.default(arr, propertyName).reverse();
                                    }
                                    else {
                                        result = sortBy_1.default(arr, propertyName);
                                    }
                                }
                            }
                            else {
                                error = `${expression.children[0]} is not an array`;
                            }
                        }
                        return {
                            value: result,
                            error
                        };
                    };
                }
                /**
                     * Lookup a string or number index of an Object.
                     * @param instance Instance with property.
                     * @param property Property to lookup.
                     * @returns Value and error information if any.
                     */
                static accessIndex(instance, index)
                {
                    // NOTE: This returns undefined rather than an error if property is not present
                    if (instance === null || instance === undefined) {
                        return {
                            value: undefined,
                            error: undefined
                        };
                    }
                    let value;
                    let error;
                    if (Array.isArray(instance)) {
                        if (index >= 0 && index < instance.length) {
                            value = instance[index];
                        }
                        else {
                            error = `${index} is out of range for ${instance}`;
                        }
                    }
                    else {
                        error = `${instance} is not a collection.`;
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * Verify a timestamp string is valid timestamp format.
                     * @param value Timestamp string to check.
                     * @returns Error or undefined if invalid.
                     */
                static verifyTimestamp(value)
                {
                    let error;
                    try {
                        const parsedData = new Date(value);
                        if (Number.isNaN(parsedData.getTime())) {
                            error = `${value} is not a valid datetime string.`;
                        }
                    }
                    catch (e) {
                        error = `${value} is not a valid datetime string.`;
                    }
                    return error;
                }
                /**
                     * Verify a timestamp string is valid ISO timestamp format.
                     * @param value Timestamp string to check.
                     * @returns Error or undefined if invalid.
                     */
                static verifyISOTimestamp(value)
                {
                    let error;
                    try {
                        const parsedData = new Date(value);
                        if (Number.isNaN(parsedData.getTime())) {
                            error = `${value} is not a valid datetime string.`;
                        }
                        else if (parsedData.toISOString() !== value) {
                            error = `${value} is not a ISO format datetime string.`;
                        }
                    }
                    catch (e) {
                        error = `${value} is not a valid datetime string.`;
                    }
                    return error;
                }
                /**
                     * Transform a timestamp into another with customized function.
                     * @param timeStamp Original time stamp.
                     * @param transform Transform function.
                     * @returns New timestamp and error.
                     */
                static parseTimestamp(timeStamp, transform)
                {
                    let value;
                    const error = this.verifyISOTimestamp(timeStamp);
                    if (!error) {
                        value = transform !== undefined ? transform(new Date(timeStamp)) : timeStamp;
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * Convert a string input to ticks number.
                     * @param timeStamp String timestamp input.
                     */
                static ticks(timeStamp)
                {
                    let result;
                    const {value: parsed, error} = this.parseTimestamp(timeStamp);
                    if (!error) {
                        const unixMilliSec = parseInt(moment_1.default(parsed).utc().format('x'), 10);
                        result = this.UnixMilliSecondToTicksConstant.add(bigInt(unixMilliSec).times(this.MillisecondToTickConstant));
                    }
                    return {
                        value: result,
                        error
                    };
                }
                /**
                     * Lookup a property in Map or Object.
                     * @param instance Instance with property.
                     * @param property Property to lookup.
                     * @returns Value and error information if any.
                     */
                static accessProperty(instance, property)
                {
                    // NOTE: This returns undefined rather than an error if property is not present
                    if (!instance) {
                        return {
                            value: undefined,
                            error: undefined
                        };
                    }
                    let value;
                    let error;
                    if (instance instanceof Map && instance !== undefined) {
                        const instanceMap = instance;
                        value = instanceMap.get(property);
                        if (value === undefined) {
                            const prop = Array.from(instanceMap.keys()).find((k) => k.toLowerCase() === property.toLowerCase());
                            if (prop !== undefined) {
                                value = instanceMap.get(prop);
                            }
                        }
                    }
                    else {
                        const prop = Object.keys(instance).find((k) => k.toLowerCase() === property.toLowerCase());
                        if (prop !== undefined) {
                            value = instance[prop];
                        }
                    }
                    return {
                        value,
                        error
                    };
                }
                /**
                     * Get the value of a path from a memory
                     * @param state Memory.
                     * @param path Path string.
                     * @param options Options.
                     */
                static wrapGetValue(state, path, options)
                {
                    const result = state.getValue(path);
                    if (result !== undefined && result !== null) {
                        return result;
                    }
                    if (options.nullSubstitution !== undefined) {
                        return options.nullSubstitution(path);
                    }
                    return undefined;
                }
                /**
                     * Wrap string or undefined into string. Default to empty string.
                     * @param input Input string
                     */
                static parseStringOrUndefined(input)
                {
                    if (typeof input === 'string') {
                        return input;
                    }
                    else {
                        return '';
                    }
                }
                /**
                     * Test result to see if True in logical comparison functions.
                     * @param instance Computed value.
                     * @returns True if boolean true or non-null.
                     */
                static isLogicTrue(instance)
                {
                    let result = true;
                    if (typeof instance === 'boolean') {
                        result = instance;
                    }
                    else if (instance === undefined || instance === null) {
                        result = false;
                    }
                    return result;
                }
                /**
                     * Evaluator for foreach and select functions.
                     * @param expression Expression.
                     * @param state Memory scope.
                     * @param options Options.
                     */
                static foreach(expression, state, options)
                {
                    let result;
                    const {value: instance, error: childrenError} = expression.children[0].tryEvaluate(state, options);
                    let error = childrenError;
                    if (!instance) {
                        error = `'${expression.children[0]}' evaluated to null.`;
                    }
                    if (!error) {
                        const iteratorName = expression.children[1].children[0].value;
                        let arr = [];
                        if (Array.isArray(instance)) {
                            arr = instance;
                        }
                        else if (typeof instance === 'object') {
                            Object.keys(instance).forEach((u) => arr.push({
                                key: u,
                                value: instance[u]
                            }));
                        }
                        else {
                            error = `${expression.children[0]} is not a collection or structure object to run foreach`;
                        }
                        if (!error) {
                            const stackedMemory = memory_1.StackedMemory.wrap(state);
                            result = [];
                            for (const item of arr) {
                                const local = new Map([[iteratorName, item]]);
                                stackedMemory.push(memory_1.SimpleObjectMemory.wrap(local));
                                const {value: r, error: e} = expression.children[2].tryEvaluate(stackedMemory, options);
                                stackedMemory.pop();
                                if (e !== undefined) {
                                    return {
                                        value: undefined,
                                        error: e
                                    };
                                }
                                result.push(r);
                            }
                        }
                    }
                    return {
                        value: result,
                        error
                    };
                }
                /**
                     * Validator for foreach, select, and where functions.
                     * @param expression
                     */
                static validateForeach(expression)
                {
                    if (expression.children.length !== 3) {
                        throw new Error(`foreach expect 3 parameters, found ${expression.children.length}`);
                    }
                    const second = expression.children[1];
                    if (!(second.type === expressionType_1.ExpressionType.Accessor && second.children.length === 1)) {
                        throw new Error(`Second parameter of foreach is not an identifier : ${second}`);
                    }
                }
                /**
                     * Parse string into URL object.
                     * @param uri Input string uri.
                     */
                static parseUri(uri)
                {
                    let result;
                    let error;
                    try {
                        result = new URL(uri);
                    }
                    catch (e) {
                        error = `Invalid URI: ${uri}`;
                    }
                    return {
                        value: result,
                        error
                    };
                }
                /**
                     * Transform C# period and unit into js period and unit
                     * @param duration C# duration
                     * @param cSharpStr C# unit.
                     */
                static timeUnitTransformer(duration, cSharpStr)
                {
                    switch (cSharpStr) {
                    case 'Day':
                        return {
                            duration,
                            tsStr: 'days'
                        };
                    case 'Week':
                        return {
                            duration: duration * 7,
                            tsStr: 'days'
                        };
                    case 'Second':
                        return {
                            duration,
                            tsStr: 'seconds'
                        };
                    case 'Minute':
                        return {
                            duration,
                            tsStr: 'minutes'
                        };
                    case 'Hour':
                        return {
                            duration,
                            tsStr: 'hours'
                        };
                    case 'Month':
                        return {
                            duration,
                            tsStr: 'months'
                        };
                    case 'Year':
                        return {
                            duration,
                            tsStr: 'years'
                        };
                    default:
                        return {
                            duration,
                            tsStr: undefined
                        };
                    }
                }
                /**
                     * Format datetime.
                     * @param timedata Input date time.
                     * @param format Format flag.
                     */
                static returnFormattedTimeStampStr(timedata, format)
                {
                    let result;
                    let error;
                    try {
                        result = timedata.format(format);
                    }
                    catch (e) {
                        error = `${format} is not a valid timestamp format`;
                    }
                    return {
                        value: result,
                        error
                    };
                }
                /**
                     * Equal helper function.
                     * @param args Input args. Compare the first param and second param.
                     */
                static isEqual(args)
                {
                    if (args.length === 0) {
                        return false;
                    }
                    if (args[0] === undefined || args[0] === null || args[1] === undefined || args[1] === null) {
                        return (args[0] === undefined || args[0] === null) && (args[1] === undefined || args[1] === null);
                    }
                    if (Array.isArray(args[0]) && args[0].length === 0 && Array.isArray(args[1]) && args[1].length === 0) {
                        return true;
                    }
                    if (InternalFunctionUtils.getPropertyCount(args[0]) === 0 &&
                    InternalFunctionUtils.getPropertyCount(args[1]) === 0) {
                        return true;
                    }
                    try {
                        return args[0] === args[1];
                    }
                    catch (_a) {
                        return false;
                    }
                }
                /**
                     * Helper function of get the number of properties of an object.
                     * @param obj An object.
                     */
                static getPropertyCount(obj)
                {
                    let count = -1;
                    if (!Array.isArray(obj)) {
                        if (obj instanceof Map) {
                            count = obj.size;
                        }
                        else if (typeof obj === 'object') {
                            count = Object.keys(obj).length;
                        }
                    }
                    return count;
                }
            }
            /**
             * Constant for converting unix timestamp to ticks.
             */
            InternalFunctionUtils.UnixMilliSecondToTicksConstant = bigInt('621355968000000000');
            /**
             * Constant to convert between ticks and ms.
             */
            InternalFunctionUtils.MillisecondToTickConstant = bigInt('10000');
            exports.InternalFunctionUtils = InternalFunctionUtils;

        }, {
            "./expressionType": 183,
            "./memory": 192,
            "@microsoft/recognizers-text-data-types-timex-expression": 213,
            "big-integer": 367,
            "lodash/sortBy": 506,
            "moment": 514
        }],
        187: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const datetimeFormatConverter_1 = require("./datetimeFormatConverter");
            const expressionType_1 = require("./expressionType");
            const returnType_1 = require("./returnType");
            /**
             * Utility functions in AdaptiveExpression.
             */
            class FunctionUtils {
                /**
                     * Validate that expression has a certain number of children that are of any of the supported types.
                     * @param expression Expression to validate.
                     * @param minArity Minimum number of children.
                     * @param maxArity Maximum number of children.
                     * @param returnType Allowed return types for children.
                     * If a child has a return type of Object then validation will happen at runtime.
                     */
                static validateArityAndAnyType(expression, minArity, maxArity, returnType=returnType_1.ReturnType.Object)
                {
                    if (expression.children.length < minArity) {
                        throw new Error(`${expression} should have at least ${minArity} children.`);
                    }
                    if (expression.children.length > maxArity) {
                        throw new Error(`${expression} can't have more than ${maxArity} children.`);
                    }
                    if ((returnType & returnType_1.ReturnType.Object) === 0) {
                        for (const child of expression.children) {
                            if ((child.returnType & returnType_1.ReturnType.Object) === 0 && (returnType & child.returnType) === 0) {
                                throw new Error(FunctionUtils.buildTypeValidatorError(returnType, child, expression));
                            }
                        }
                    }
                }
                /**
                     * Validate the number and type of arguments to a function.
                     * @param expression Expression to validate.
                     * @param optional Optional types in order.
                     * @param types Expected types in order.
                     */
                static validateOrder(expression, optional, ...types)
                {
                    if (optional === undefined) {
                        optional = [];
                    }
                    if (expression.children.length < types.length || expression.children.length > types.length + optional.length) {
                        throw new Error(optional.length === 0
                        ? `${expression} should have ${types.length} children.`
                        : `${expression} should have between ${types.length} and ${types.length + optional.length} children.`);
                    }
                    for (let i = 0; i < types.length; i++) {
                        const child = expression.children[i];
                        const type = types[i];
                        if ((type & returnType_1.ReturnType.Object) == 0 &&
                        (child.returnType & returnType_1.ReturnType.Object) == 0 &&
                        (type & child.returnType) == 0) {
                            throw new Error(FunctionUtils.buildTypeValidatorError(type, child, expression));
                        }
                    }
                    for (let i = 0; i < optional.length; i++) {
                        const ic = i + types.length;
                        if (ic >= expression.children.length) {
                            break;
                        }
                        const child = expression.children[ic];
                        const type = optional[i];
                        if ((type & returnType_1.ReturnType.Object) == 0 &&
                        (child.returnType & returnType_1.ReturnType.Object) == 0 &&
                        (type & child.returnType) == 0) {
                            throw new Error(FunctionUtils.buildTypeValidatorError(type, child, expression));
                        }
                    }
                }
                /**
                     * Validate at least 1 argument of any type.
                     * @param expression Expression to validate.
                     */
                static validateAtLeastOne(expression)
                {
                    FunctionUtils.validateArityAndAnyType(expression, 1, Number.MAX_SAFE_INTEGER);
                }
                /**
                     * Validate 1 or more numeric arguments.
                     * @param expression Expression to validate.
                     */
                static validateNumber(expression)
                {
                    FunctionUtils.validateArityAndAnyType(expression, 1, Number.MAX_SAFE_INTEGER, returnType_1.ReturnType.Number);
                }
                /**
                     * Validate 1 or more string arguments.
                     * @param expression Expression to validate.
                     */
                static validateString(expression)
                {
                    FunctionUtils.validateArityAndAnyType(expression, 1, Number.MAX_SAFE_INTEGER, returnType_1.ReturnType.String);
                }
                /**
                     * Validate there are two children.
                     * @param expression Expression to validate.
                     */
                static validateBinary(expression)
                {
                    FunctionUtils.validateArityAndAnyType(expression, 2, 2);
                }
                /**
                     * Validate 2 numeric arguments.
                     * @param expression Expression to validate.
                     */
                static validateBinaryNumber(expression)
                {
                    FunctionUtils.validateArityAndAnyType(expression, 2, 2, returnType_1.ReturnType.Number);
                }
                /**
                     * Validate 1 or 2 numeric arguments.
                     * @param expression Expression to validate.
                     */
                static validateUnaryOrBinaryNumber(expression)
                {
                    FunctionUtils.validateArityAndAnyType(expression, 1, 2, returnType_1.ReturnType.Number);
                }
                /**
                     * Validate 2 or more than 2 numeric arguments.
                     * @param expression Expression to validate.
                     */
                static validateTwoOrMoreThanTwoNumbers(expression)
                {
                    FunctionUtils.validateArityAndAnyType(expression, 2, Number.MAX_VALUE, returnType_1.ReturnType.Number);
                }
                /**
                     * Validate there are 2 numeric or string arguments.
                     * @param expression Expression to validate.
                     */
                static validateBinaryNumberOrString(expression)
                {
                    FunctionUtils.validateArityAndAnyType(expression, 2, 2, returnType_1.ReturnType.Number | returnType_1.ReturnType.String);
                }
                /**
                     * Validate there is a single argument.
                     * @param expression Expression to validate.
                     */
                static validateUnary(expression)
                {
                    FunctionUtils.validateArityAndAnyType(expression, 1, 1);
                }
                /**
                     * Validate there is a single argument.
                     * @param expression Expression to validate.
                     */
                static validateUnaryNumber(expression)
                {
                    FunctionUtils.validateArityAndAnyType(expression, 1, 1, returnType_1.ReturnType.Number);
                }
                /**
                     * Validate there is a single string argument.
                     * @param expression Expression to validate.
                     */
                static validateUnaryString(expression)
                {
                    FunctionUtils.validateArityAndAnyType(expression, 1, 1, returnType_1.ReturnType.String);
                }
                /**
                     * Validate there is one or two string arguments.
                     * @param expression Expression to validate.
                     */
                static validateUnaryOrBinaryString(expression)
                {
                    FunctionUtils.validateArityAndAnyType(expression, 1, 2, returnType_1.ReturnType.String);
                }
                /**
                     * Validate there is a single boolean argument.
                     * @param expression Expression to validate.
                     */
                static validateUnaryBoolean(expression)
                {
                    FunctionUtils.validateOrder(expression, undefined, returnType_1.ReturnType.Boolean);
                }
                /**
                     * Verify value is numeric.
                     * @param value Value to check.
                     * @param expression Expression that led to value.
                     * @returns Error or undefined if invalid.
                     */
                static verifyNumber(value, expression, _)
                {
                    let error;
                    if (!FunctionUtils.isNumber(value)) {
                        error = `${expression} is not a number.`;
                    }
                    return error;
                }
                /**
                     * Verify value is numeric.
                     * @param value Value to check.
                     * @param expression Expression that led to value.
                     * @returns Error or undefined if invalid.
                     */
                static verifyNumberOrNumericList(value, expression, _)
                {
                    let error;
                    if (FunctionUtils.isNumber(value)) {
                        return error;
                    }
                    if (!Array.isArray(value)) {
                        error = `${expression} is neither a list nor a number.`;
                    }
                    else {
                        for (const elt of value) {
                            if (!FunctionUtils.isNumber(elt)) {
                                error = `${elt} is not a number in ${expression}.`;
                                break;
                            }
                        }
                    }
                    return error;
                }
                /**
                     * Verify value is numeric list.
                     * @param value Value to check.
                     * @param expression Expression that led to value.
                     * @returns Error or undefined if invalid.
                     */
                static verifyNumericList(value, expression, _)
                {
                    let error;
                    if (!Array.isArray(value)) {
                        error = `${expression} is not a list.`;
                    }
                    else {
                        for (const elt of value) {
                            if (!FunctionUtils.isNumber(elt)) {
                                error = `${elt} is not a number in ${expression}.`;
                                break;
                            }
                        }
                    }
                    return error;
                }
                /**
                     * Verify value contains elements.
                     * @param value Value to check.
                     * @param expression Expression that led to value.
                     * @returns Error or undefined if invalid.
                     */
                static verifyContainer(value, expression, _)
                {
                    let error;
                    if (!(typeof value === 'string') &&
                    !Array.isArray(value) &&
                    !(value instanceof Map) &&
                    !(typeof value === 'object')) {
                        error = `${expression} must be a string, list, map or object.`;
                    }
                    return error;
                }
                /**
                     * Verify value is not null or undefined.
                     * @param value Value to check.
                     * @param expression Expression that led to value.
                     * @returns Error or undefined if valid.
                     */
                static verifyNotNull(value, expression, _)
                {
                    let error;
                    if (value === undefined || value === null) {
                        error = `${expression} is null.`;
                    }
                    return error;
                }
                /**
                     * Verify value is an integer.
                     * @param value Value to check.
                     * @param expression Expression that led to value.
                     * @returns Error or undefined if invalid.
                     */
                static verifyInteger(value, expression, _)
                {
                    let error;
                    if (!Number.isInteger(value)) {
                        error = `${expression} is not a integer.`;
                    }
                    return error;
                }
                /**
                     * Verify value is an list.
                     * @param value Value to check.
                     * @param expression Expression that led to value.
                     * @returns Error or undefined if invalid.
                     */
                static verifyList(value, expression)
                {
                    let error;
                    if (!Array.isArray(value)) {
                        error = `${expression} is not a list or array.`;
                    }
                    return error;
                }
                /**
                     * Verify value is a string.
                     * @param value Value to check.
                     * @param expression Expression that led to value.
                     * @returns Error or undefined if invalid.
                     */
                static verifyString(value, expression, _)
                {
                    let error;
                    if (typeof value !== 'string') {
                        error = `${expression} is not a string.`;
                    }
                    return error;
                }
                /**
                     * Verify an object is neither a string nor null.
                     * @param value Value to check.
                     * @param expression Expression that led to value.
                     * @returns Error or undefined if invalid.
                     */
                static verifyStringOrNull(value, expression, _)
                {
                    let error;
                    if (typeof value !== 'string' && value !== undefined) {
                        error = `${expression} is neither a string nor a null object.`;
                    }
                    return error;
                }
                /**
                     * Verify value is a number or string or null.
                     * @param value Value to check.
                     * @param expression Expression that led to value.
                     * @returns Error or undefined if invalid.
                     */
                static verifyNumberOrStringOrNull(value, expression, _)
                {
                    let error;
                    if (typeof value !== 'string' && value !== undefined && !FunctionUtils.isNumber(value)) {
                        error = `${expression} is neither a number nor string`;
                    }
                    return error;
                }
                /**
                     * Verify value is a number or string.
                     * @param value Value to check.
                     * @param expression Expression that led to value.
                     * @returns Error or undefined if invalid.
                     */
                static verifyNumberOrString(value, expression, _)
                {
                    let error;
                    if (value === undefined || (!FunctionUtils.isNumber(value) && typeof value !== 'string')) {
                        error = `${expression} is not string or number.`;
                    }
                    return error;
                }
                /**
                     * Verify value is boolean.
                     * @param value Value to check.
                     * @param expression Expression that led to value.
                     * @returns Error or undefined if invalid.
                     */
                static verifyBoolean(value, expression, _)
                {
                    let error;
                    if (typeof value !== 'boolean') {
                        error = `${expression} is not a boolean.`;
                    }
                    return error;
                }
                /**
                     * Evaluate expression children and return them.
                     * @param expression Expression with children.
                     * @param state Global state.
                     * @param verify Optional function to verify each child's result.
                     * @returns List of child values or error message.
                     */
                static evaluateChildren(expression, state, options, verify)
                {
                    const args = [];
                    let value;
                    let error;
                    let pos = 0;
                    for (const child of expression.children) {
                        ({value, error} = child.tryEvaluate(state, options));
                        if (error) {
                            break;
                        }
                        if (verify !== undefined) {
                            error = verify(value, child, pos);
                        }
                        if (error) {
                            break;
                        }
                        args.push(value);
                        ++pos;
                    }
                    return {
                        args,
                        error
                    };
                }
                /**
                     * Generate an expression delegate that applies function after verifying all children.
                     * @param func Function to apply.
                     * @param verify Function to check each arg for validity.
                     * @returns Delegate for evaluating an expression.
                     */
                static apply(func, verify)
                {
                    return (expression, state, options) => {
                        let value;
                        const {args, error: childrenError} = FunctionUtils.evaluateChildren(expression, state, options, verify);
                        let error = childrenError;
                        if (!error) {
                            try {
                                value = func(args);
                            }
                            catch (e) {
                                error = e.message;
                            }
                        }
                        return {
                            value,
                            error
                        };
                    };
                }
                /**
                     * Generate an expression delegate that applies function after verifying all children.
                     * @param func Function to apply.
                     * @param verify Function to check each arg for validity.
                     * @returns Delegate for evaluating an expression.
                     */
                static applyWithError(func, verify)
                {
                    return (expression, state, options) => {
                        let value;
                        const {args, error: childrenError} = FunctionUtils.evaluateChildren(expression, state, options, verify);
                        let error = childrenError;
                        if (!error) {
                            try {
                                ({value, error} = func(args));
                            }
                            catch (e) {
                                error = e.message;
                            }
                        }
                        return {
                            value,
                            error
                        };
                    };
                }
                /**
                     * Generate an expression delegate that applies function after verifying all children.
                     * @param func Function to apply.
                     * @param verify Function to check each arg for validity.
                     * @returns Delegate for evaluating an expression.
                     */
                static applyWithOptionsAndError(func, verify)
                {
                    return (expression, state, options) => {
                        let value;
                        let error;
                        let args;
                        ({args, error} = FunctionUtils.evaluateChildren(expression, state, options, verify));
                        if (!error) {
                            try {
                                ({value, error} = func(args, options));
                            }
                            catch (e) {
                                error = e.message;
                            }
                        }
                        return {
                            value,
                            error
                        };
                    };
                }
                /**
                     * Generate an expression delegate that applies function on the accumulated value after verifying all children.
                     * @param func Function to apply.
                     * @param verify Function to check each arg for validity.
                     * @returns Delegate for evaluating an expression.
                     */
                static applySequence(func, verify)
                {
                    return FunctionUtils.apply((args) => {
                        const binaryArgs = [undefined, undefined];
                        let soFar = args[0];
                        for (let i = 1; i < args.length; i++) {
                            binaryArgs[0] = soFar;
                            binaryArgs[1] = args[i];
                            soFar = func(binaryArgs);
                        }
                        return soFar;
                    }, verify);
                }
                /**
                     * Generate an expression delegate that applies function on the accumulated value after verifying all children.
                     * @param func Function to apply.
                     * @param verify Function to check each arg for validity.
                     * @returns Delegate for evaluating an expression.
                     */
                static applySequenceWithError(func, verify)
                {
                    return FunctionUtils.applyWithError((args) => {
                        const binaryArgs = [undefined, undefined];
                        let soFar = args[0];
                        let value;
                        let error;
                        for (let i = 1; i < args.length; i++) {
                            binaryArgs[0] = soFar;
                            binaryArgs[1] = args[i];
                            ({value, error} = func(binaryArgs));
                            if (error) {
                                return {
                                    value,
                                    error
                                };
                            }
                            else {
                                soFar = value;
                            }
                        }
                        return {
                            value: soFar,
                            error: undefined
                        };
                    }, verify);
                }
                /**
                     *
                     * @param args An array of arguments.
                     * @param locale A locale string
                     * @param maxArgsLength The max length of a given function.
                     */
                static determineLocale(args, maxArgsLength, locale='en-us')
                {
                    if (args.length === maxArgsLength && typeof args[maxArgsLength - 1] === 'string') {
                        locale = args[maxArgsLength - 1];
                    }
                    return locale;
                }
                /**
                     * Timestamp formatter, convert C# datetime to moment js format.
                     * @param formatter C# datetime format
                     */
                static timestampFormatter(formatter)
                {
                    let result = formatter;
                    try {
                        result = datetimeFormatConverter_1.convertCSharpDateTimeToMomentJS(formatter);
                    }
                    catch (e) {

                    }
                    return result;
                }
                /**
                     * State object for resolving memory paths.
                     * @param expression Expression.
                     * @param state Scope.
                     * @param options Options used in evaluation.
                     * @returns Return the accumulated path and the expression left unable to accumulate.
                     */
                static tryAccumulatePath(expression, state, options)
                {
                    let path = '';
                    let left = expression;
                    while (left !== undefined) {
                        if (left.type === expressionType_1.ExpressionType.Accessor) {
                            path = left.children[0].value + '.' + path;
                            left = left.children.length === 2 ? left.children[1] : undefined;
                        }
                        else if (left.type === expressionType_1.ExpressionType.Element) {
                            const {value, error} = left.children[1].tryEvaluate(state, options);
                            if (error !== undefined) {
                                return {
                                    path: undefined,
                                    left: undefined,
                                    error
                                };
                            }
                            if (FunctionUtils.isNumber(parseInt(value))) {
                                path = `[${value}].${path}`;
                            }
                            else if (typeof value === 'string') {
                                path = `['${value}'].${path}`;
                            }
                            else {
                                return {
                                    path: undefined,
                                    left: undefined,
                                    error: `${left.children[1].toString()} doesn't return an int or string`,
                                };
                            }
                            left = left.children[0];
                        }
                        else {
                            break;
                        }
                    }
                    // make sure we generated a valid path
                    path = path.replace(/(\.*$)/g, '').replace(/(\.\[)/g, '[');
                    if (path === '') {
                        path = undefined;
                    }
                    return {
                        path,
                        left,
                        error: undefined
                    };
                }
                /**
                     * Is number helper function.
                     * @param instance Input.
                     * @returns True if the input is a number.
                     */
                static isNumber(instance)
                {
                    return instance !== undefined && instance !== null && typeof instance === 'number' && !Number.isNaN(instance);
                }
                /**
                     * @private
                     */
                static buildTypeValidatorError(returnType, childExpr, expr)
                {
                    const names = Object.keys(returnType_1.ReturnType).filter((x) => !(parseInt(x) >= 0));
                    const types = [];
                    for (const name of names) {
                        const value = returnType_1.ReturnType[name];
                        if ((returnType & value) !== 0) {
                            types.push(name);
                        }
                    }
                    if (types.length === 1) {
                        return `${childExpr} is not a ${types[0]} expression in ${expr}.`;
                    }
                    else {
                        const typesStr = types.join(', ');
                        return `${childExpr} in ${expr} is not any of [${typesStr}].`;
                    }
                }
            }
            /**
             * The default date time format string.
             */
            FunctionUtils.DefaultDateTimeFormat = 'YYYY-MM-DDTHH:mm:ss.SSS[Z]';
            exports.FunctionUtils = FunctionUtils;

        }, {
            "./datetimeFormatConverter": 169,
            "./expressionType": 183,
            "./returnType": 204
        }],
        188: [function(require, module, exports) {
            "use strict";
            // Generated from src/CommonRegex.g4 by ANTLR 4.7.3-SNAPSHOT
            var __importStar = (this && this.__importStar) || function(mod) {
                if (mod && mod.__esModule)
                    return mod;
                var result = {};
                if (mod != null)
                    for (var k in mod)
                        if (Object.hasOwnProperty.call(mod, k))
                            result[k] = mod[k];
                result["default"] = mod;
                return result;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
            const Lexer_1 = require("antlr4ts/Lexer");
            const LexerATNSimulator_1 = require("antlr4ts/atn/LexerATNSimulator");
            const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
            const Utils = __importStar(require("antlr4ts/misc/Utils"));
            class CommonRegexLexer extends Lexer_1.Lexer {
                // tslint:enable:no-trailing-whitespace
                constructor(input)
                {
                    super(input);
                    this._interp = new LexerATNSimulator_1.LexerATNSimulator(CommonRegexLexer._ATN, this);
                }
                // @Override
                // @NotNull
                get vocabulary()
                {
                    return CommonRegexLexer.VOCABULARY;
                }
                // @Override
                get grammarFileName()
                {
                    return "CommonRegex.g4";
                }
                // @Override
                get ruleNames()
                {
                    return CommonRegexLexer.ruleNames;
                }
                // @Override
                get serializedATN()
                {
                    return CommonRegexLexer._serializedATN;
                }
                // @Override
                get channelNames()
                {
                    return CommonRegexLexer.channelNames;
                }
                // @Override
                get modeNames()
                {
                    return CommonRegexLexer.modeNames;
                }
                static get _ATN()
                {
                    if (!CommonRegexLexer.__ATN) {
                        CommonRegexLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(CommonRegexLexer._serializedATN));
                    }
                    return CommonRegexLexer.__ATN;
                }
            }
            CommonRegexLexer.Quoted = 1;
            CommonRegexLexer.BlockQuoted = 2;
            CommonRegexLexer.BellChar = 3;
            CommonRegexLexer.ControlChar = 4;
            CommonRegexLexer.EscapeChar = 5;
            CommonRegexLexer.FormFeed = 6;
            CommonRegexLexer.NewLine = 7;
            CommonRegexLexer.CarriageReturn = 8;
            CommonRegexLexer.Tab = 9;
            CommonRegexLexer.Backslash = 10;
            CommonRegexLexer.HexChar = 11;
            CommonRegexLexer.Dot = 12;
            CommonRegexLexer.DecimalDigit = 13;
            CommonRegexLexer.NotDecimalDigit = 14;
            CommonRegexLexer.CharWithProperty = 15;
            CommonRegexLexer.CharWithoutProperty = 16;
            CommonRegexLexer.WhiteSpace = 17;
            CommonRegexLexer.NotWhiteSpace = 18;
            CommonRegexLexer.WordChar = 19;
            CommonRegexLexer.NotWordChar = 20;
            CommonRegexLexer.CharacterClassStart = 21;
            CommonRegexLexer.CharacterClassEnd = 22;
            CommonRegexLexer.Caret = 23;
            CommonRegexLexer.Hyphen = 24;
            CommonRegexLexer.QuestionMark = 25;
            CommonRegexLexer.Plus = 26;
            CommonRegexLexer.Star = 27;
            CommonRegexLexer.OpenBrace = 28;
            CommonRegexLexer.CloseBrace = 29;
            CommonRegexLexer.Comma = 30;
            CommonRegexLexer.EndOfSubject = 31;
            CommonRegexLexer.Pipe = 32;
            CommonRegexLexer.OpenParen = 33;
            CommonRegexLexer.CloseParen = 34;
            CommonRegexLexer.LessThan = 35;
            CommonRegexLexer.GreaterThan = 36;
            CommonRegexLexer.SingleQuote = 37;
            CommonRegexLexer.Underscore = 38;
            CommonRegexLexer.Colon = 39;
            CommonRegexLexer.Hash = 40;
            CommonRegexLexer.Equals = 41;
            CommonRegexLexer.Exclamation = 42;
            CommonRegexLexer.Ampersand = 43;
            CommonRegexLexer.ALC = 44;
            CommonRegexLexer.BLC = 45;
            CommonRegexLexer.CLC = 46;
            CommonRegexLexer.DLC = 47;
            CommonRegexLexer.ELC = 48;
            CommonRegexLexer.FLC = 49;
            CommonRegexLexer.GLC = 50;
            CommonRegexLexer.HLC = 51;
            CommonRegexLexer.ILC = 52;
            CommonRegexLexer.JLC = 53;
            CommonRegexLexer.KLC = 54;
            CommonRegexLexer.LLC = 55;
            CommonRegexLexer.MLC = 56;
            CommonRegexLexer.NLC = 57;
            CommonRegexLexer.OLC = 58;
            CommonRegexLexer.PLC = 59;
            CommonRegexLexer.QLC = 60;
            CommonRegexLexer.RLC = 61;
            CommonRegexLexer.SLC = 62;
            CommonRegexLexer.TLC = 63;
            CommonRegexLexer.ULC = 64;
            CommonRegexLexer.VLC = 65;
            CommonRegexLexer.WLC = 66;
            CommonRegexLexer.XLC = 67;
            CommonRegexLexer.YLC = 68;
            CommonRegexLexer.ZLC = 69;
            CommonRegexLexer.AUC = 70;
            CommonRegexLexer.BUC = 71;
            CommonRegexLexer.CUC = 72;
            CommonRegexLexer.DUC = 73;
            CommonRegexLexer.EUC = 74;
            CommonRegexLexer.FUC = 75;
            CommonRegexLexer.GUC = 76;
            CommonRegexLexer.HUC = 77;
            CommonRegexLexer.IUC = 78;
            CommonRegexLexer.JUC = 79;
            CommonRegexLexer.KUC = 80;
            CommonRegexLexer.LUC = 81;
            CommonRegexLexer.MUC = 82;
            CommonRegexLexer.NUC = 83;
            CommonRegexLexer.OUC = 84;
            CommonRegexLexer.PUC = 85;
            CommonRegexLexer.QUC = 86;
            CommonRegexLexer.RUC = 87;
            CommonRegexLexer.SUC = 88;
            CommonRegexLexer.TUC = 89;
            CommonRegexLexer.UUC = 90;
            CommonRegexLexer.VUC = 91;
            CommonRegexLexer.WUC = 92;
            CommonRegexLexer.XUC = 93;
            CommonRegexLexer.YUC = 94;
            CommonRegexLexer.ZUC = 95;
            CommonRegexLexer.D1 = 96;
            CommonRegexLexer.D2 = 97;
            CommonRegexLexer.D3 = 98;
            CommonRegexLexer.D4 = 99;
            CommonRegexLexer.D5 = 100;
            CommonRegexLexer.D6 = 101;
            CommonRegexLexer.D7 = 102;
            CommonRegexLexer.D8 = 103;
            CommonRegexLexer.D9 = 104;
            CommonRegexLexer.D0 = 105;
            CommonRegexLexer.OtherChar = 106;
            // tslint:disable:no-trailing-whitespace
            CommonRegexLexer.channelNames = [
            "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
            ];
            // tslint:disable:no-trailing-whitespace
            CommonRegexLexer.modeNames = [
            "DEFAULT_MODE",
            ];
            CommonRegexLexer.ruleNames = [
            "Quoted", "BlockQuoted", "BellChar", "ControlChar", "EscapeChar", "FormFeed",
            "NewLine", "CarriageReturn", "Tab", "Backslash", "HexChar", "Dot", "DecimalDigit",
            "NotDecimalDigit", "CharWithProperty", "CharWithoutProperty", "WhiteSpace",
            "NotWhiteSpace", "WordChar", "NotWordChar", "CharacterClassStart", "CharacterClassEnd",
            "Caret", "Hyphen", "QuestionMark", "Plus", "Star", "OpenBrace", "CloseBrace",
            "Comma", "EndOfSubject", "Pipe", "OpenParen", "CloseParen", "LessThan",
            "GreaterThan", "SingleQuote", "Underscore", "Colon", "Hash", "Equals",
            "Exclamation", "Ampersand", "ALC", "BLC", "CLC", "DLC", "ELC", "FLC",
            "GLC", "HLC", "ILC", "JLC", "KLC", "LLC", "MLC", "NLC", "OLC", "PLC",
            "QLC", "RLC", "SLC", "TLC", "ULC", "VLC", "WLC", "XLC", "YLC", "ZLC",
            "AUC", "BUC", "CUC", "DUC", "EUC", "FUC", "GUC", "HUC", "IUC", "JUC",
            "KUC", "LUC", "MUC", "NUC", "OUC", "PUC", "QUC", "RUC", "SUC", "TUC",
            "UUC", "VUC", "WUC", "XUC", "YUC", "ZUC", "D1", "D2", "D3", "D4", "D5",
            "D6", "D7", "D8", "D9", "D0", "OtherChar", "UnderscoreAlphaNumerics",
            "AlphaNumerics", "AlphaNumeric", "NonAlphaNumeric", "HexDigit", "ASCII",
            ];
            CommonRegexLexer._LITERAL_NAMES = [
            undefined, undefined, undefined, "'\\'", "'\\'", "'\\'", "'\\'", "'\\'",
            "'\\'", "'\\'", "'\\'", undefined, "'.'", "'\\'", "'\\'", undefined, undefined,
            "'\\'", "'\\'", "'\\'", "'\\'", "'['", "']'", "'^'", "'-'", "'?'", "'+'",
            "'*'", "'{'", "'}'", "','", "'$'", "'|'", "'('", "')'", "'<'", "'>'",
            "'''", "'_'", "':'", "'#'", "'='", "'!'", "'&'", "'a'", "'b'", "'c'",
            "'d'", "'e'", "'f'", "'g'", "'h'", "'i'", "'j'", "'k'", "'l'", "'m'",
            "'n'", "'o'", "'p'", "'q'", "'r'", "'s'", "'t'", "'u'", "'v'", "'w'",
            "'x'", "'y'", "'z'", "'A'", "'B'", "'C'", "'D'", "'E'", "'F'", "'G'",
            "'H'", "'I'", "'J'", "'K'", "'L'", "'M'", "'N'", "'O'", "'P'", "'Q'",
            "'R'", "'S'", "'T'", "'U'", "'V'", "'W'", "'X'", "'Y'", "'Z'", "'1'",
            "'2'", "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "'0'",
            ];
            CommonRegexLexer._SYMBOLIC_NAMES = [
            undefined, "Quoted", "BlockQuoted", "BellChar", "ControlChar", "EscapeChar",
            "FormFeed", "NewLine", "CarriageReturn", "Tab", "Backslash", "HexChar",
            "Dot", "DecimalDigit", "NotDecimalDigit", "CharWithProperty", "CharWithoutProperty",
            "WhiteSpace", "NotWhiteSpace", "WordChar", "NotWordChar", "CharacterClassStart",
            "CharacterClassEnd", "Caret", "Hyphen", "QuestionMark", "Plus", "Star",
            "OpenBrace", "CloseBrace", "Comma", "EndOfSubject", "Pipe", "OpenParen",
            "CloseParen", "LessThan", "GreaterThan", "SingleQuote", "Underscore",
            "Colon", "Hash", "Equals", "Exclamation", "Ampersand", "ALC", "BLC", "CLC",
            "DLC", "ELC", "FLC", "GLC", "HLC", "ILC", "JLC", "KLC", "LLC", "MLC",
            "NLC", "OLC", "PLC", "QLC", "RLC", "SLC", "TLC", "ULC", "VLC", "WLC",
            "XLC", "YLC", "ZLC", "AUC", "BUC", "CUC", "DUC", "EUC", "FUC", "GUC",
            "HUC", "IUC", "JUC", "KUC", "LUC", "MUC", "NUC", "OUC", "PUC", "QUC",
            "RUC", "SUC", "TUC", "UUC", "VUC", "WUC", "XUC", "YUC", "ZUC", "D1", "D2",
            "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D0", "OtherChar",
            ];
            CommonRegexLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(CommonRegexLexer._LITERAL_NAMES, CommonRegexLexer._SYMBOLIC_NAMES, []);
            CommonRegexLexer._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02l\u01FC\b\x01" +
            "\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
            "\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
            "\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
            "\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
            "\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
            "\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
            "\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
            "+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
            "4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
            "=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
            "F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
            "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
            "X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
            "`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
            "i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x03" +
            "\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x07\x03\xEB\n\x03" +
            "\f\x03\x0E\x03\xEE\v\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04" +
            "\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07" +
            "\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03" +
            "\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x06\f\u0114\n" +
            "\f\r\f\x0E\f\u0115\x03\f\x03\f\x05\f\u011A\n\f\x03\r\x03\r\x03\x0E\x03" +
            "\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
            "\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03" +
            "\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03" +
            "\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03" +
            "\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03" +
            "\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"" +
            "\x03\"\x03#\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x03\'\x03\'\x03(\x03(\x03" +
            ")\x03)\x03*\x03*\x03+\x03+\x03,\x03,\x03-\x03-\x03.\x03.\x03/\x03/\x03" +
            "0\x030\x031\x031\x032\x032\x033\x033\x034\x034\x035\x035\x036\x036\x03" +
            "7\x037\x038\x038\x039\x039\x03:\x03:\x03;\x03;\x03<\x03<\x03=\x03=\x03" +
            ">\x03>\x03?\x03?\x03@\x03@\x03A\x03A\x03B\x03B\x03C\x03C\x03D\x03D\x03" +
            "E\x03E\x03F\x03F\x03G\x03G\x03H\x03H\x03I\x03I\x03J\x03J\x03K\x03K\x03" +
            "L\x03L\x03M\x03M\x03N\x03N\x03O\x03O\x03P\x03P\x03Q\x03Q\x03R\x03R\x03" +
            "S\x03S\x03T\x03T\x03U\x03U\x03V\x03V\x03W\x03W\x03X\x03X\x03Y\x03Y\x03" +
            "Z\x03Z\x03[\x03[\x03\\\x03\\\x03]\x03]\x03^\x03^\x03_\x03_\x03`\x03`\x03" +
            "a\x03a\x03b\x03b\x03c\x03c\x03d\x03d\x03e\x03e\x03f\x03f\x03g\x03g\x03" +
            "h\x03h\x03i\x03i\x03j\x03j\x03k\x03k\x03l\x03l\x06l\u01EC\nl\rl\x0El\u01ED" +
            "\x03m\x06m\u01F1\nm\rm\x0Em\u01F2\x03n\x03n\x03o\x03o\x03p\x03p\x03q\x03" +
            "q\x03\xEC\x02\x02r\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02" +
            "\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02" +
            "\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'" +
            "\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C" +
            "7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%I\x02" +
            "&K\x02\'M\x02(O\x02)Q\x02*S\x02+U\x02,W\x02-Y\x02.[\x02/]\x020_\x021a" +
            "\x022c\x023e\x024g\x025i\x026k\x027m\x028o\x029q\x02:s\x02;u\x02<w\x02" +
            "=y\x02>{\x02?}\x02@\x7F\x02A\x81\x02B\x83\x02C\x85\x02D\x87\x02E\x89\x02" +
            "F\x8B\x02G\x8D\x02H\x8F\x02I\x91\x02J\x93\x02K\x95\x02L\x97\x02M\x99\x02" +
            "N\x9B\x02O\x9D\x02P\x9F\x02Q\xA1\x02R\xA3\x02S\xA5\x02T\xA7\x02U\xA9\x02" +
            "V\xAB\x02W\xAD\x02X\xAF\x02Y\xB1\x02Z\xB3\x02[\xB5\x02\\\xB7\x02]\xB9" +
            "\x02^\xBB\x02_\xBD\x02`\xBF\x02a\xC1\x02b\xC3\x02c\xC5\x02d\xC7\x02e\xC9" +
            "\x02f\xCB\x02g\xCD\x02h\xCF\x02i\xD1\x02j\xD3\x02k\xD5\x02l\xD7\x02\x02" +
            "\xD9\x02\x02\xDB\x02\x02\xDD\x02\x02\xDF\x02\x02\xE1\x02\x02\x03\x02\x05" +
            "\x05\x022;C\\c|\x05\x022;CHch\x03\x02\x02\x81\x02\u01FB\x02\x03\x03\x02" +
            "\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02" +
            "\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02" +
            "\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02" +
            "\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02" +
            "\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02" +
            "\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02" +
            ")\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02" +
            "\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02" +
            "\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03" +
            "\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02" +
            "\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02" +
            "K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02" +
            "\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02" +
            "\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03" +
            "\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02\x02" +
            "\x02\x02g\x03\x02\x02\x02\x02i\x03\x02\x02\x02\x02k\x03\x02\x02\x02\x02" +
            "m\x03\x02\x02\x02\x02o\x03\x02\x02\x02\x02q\x03\x02\x02\x02\x02s\x03\x02" +
            "\x02\x02\x02u\x03\x02\x02\x02\x02w\x03\x02\x02\x02\x02y\x03\x02\x02\x02" +
            "\x02{\x03\x02\x02\x02\x02}\x03\x02\x02\x02\x02\x7F\x03\x02\x02\x02\x02" +
            "\x81\x03\x02\x02\x02\x02\x83\x03\x02\x02\x02\x02\x85\x03\x02\x02\x02\x02" +
            "\x87\x03\x02\x02\x02\x02\x89\x03\x02\x02\x02\x02\x8B\x03\x02\x02\x02\x02" +
            "\x8D\x03\x02\x02\x02\x02\x8F\x03\x02\x02\x02\x02\x91\x03\x02\x02\x02\x02" +
            "\x93\x03\x02\x02\x02\x02\x95\x03\x02\x02\x02\x02\x97\x03\x02\x02\x02\x02" +
            "\x99\x03\x02\x02\x02\x02\x9B\x03\x02\x02\x02\x02\x9D\x03\x02\x02\x02\x02" +
            "\x9F\x03\x02\x02\x02\x02\xA1\x03\x02\x02\x02\x02\xA3\x03\x02\x02\x02\x02" +
            "\xA5\x03\x02\x02\x02\x02\xA7\x03\x02\x02\x02\x02\xA9\x03\x02\x02\x02\x02" +
            "\xAB\x03\x02\x02\x02\x02\xAD\x03\x02\x02\x02\x02\xAF\x03\x02\x02\x02\x02" +
            "\xB1\x03\x02\x02\x02\x02\xB3\x03\x02\x02\x02\x02\xB5\x03\x02\x02\x02\x02" +
            "\xB7\x03\x02\x02\x02\x02\xB9\x03\x02\x02\x02\x02\xBB\x03\x02\x02\x02\x02" +
            "\xBD\x03\x02\x02\x02\x02\xBF\x03\x02\x02\x02\x02\xC1\x03\x02\x02\x02\x02" +
            "\xC3\x03\x02\x02\x02\x02\xC5\x03\x02\x02\x02\x02\xC7\x03\x02\x02\x02\x02" +
            "\xC9\x03\x02\x02\x02\x02\xCB\x03\x02\x02\x02\x02\xCD\x03\x02\x02\x02\x02" +
            "\xCF\x03\x02\x02\x02\x02\xD1\x03\x02\x02\x02\x02\xD3\x03\x02\x02\x02\x02" +
            "\xD5\x03\x02\x02\x02\x03\xE3\x03\x02\x02\x02\x05\xE6\x03\x02\x02\x02\x07" +
            "\xF2\x03\x02\x02\x02\t\xF5\x03\x02\x02\x02\v\xF8\x03\x02\x02\x02\r\xFB" +
            "\x03\x02\x02\x02\x0F\xFE\x03\x02\x02\x02\x11\u0101\x03\x02\x02\x02\x13" +
            "\u0104\x03\x02\x02\x02\x15\u0107\x03\x02\x02\x02\x17\u0109\x03\x02\x02" +
            "\x02\x19\u011B\x03\x02\x02\x02\x1B\u011D\x03\x02\x02\x02\x1D\u0120\x03" +
            "\x02\x02\x02\x1F\u0123\x03\x02\x02\x02!\u012A\x03\x02\x02\x02#\u0131\x03" +
            "\x02\x02\x02%\u0134\x03\x02\x02\x02\'\u0137\x03\x02\x02\x02)\u013A\x03" +
            "\x02\x02\x02+\u013D\x03\x02\x02\x02-\u013F\x03\x02\x02\x02/\u0141\x03" +
            "\x02\x02\x021\u0143\x03\x02\x02\x023\u0145\x03\x02\x02\x025\u0147\x03" +
            "\x02\x02\x027\u0149\x03\x02\x02\x029\u014B\x03\x02\x02\x02;\u014D\x03" +
            "\x02\x02\x02=\u014F\x03\x02\x02\x02?\u0151\x03\x02\x02\x02A\u0153\x03" +
            "\x02\x02\x02C\u0155\x03\x02\x02\x02E\u0157\x03\x02\x02\x02G\u0159\x03" +
            "\x02\x02\x02I\u015B\x03\x02\x02\x02K\u015D\x03\x02\x02\x02M\u015F\x03" +
            "\x02\x02\x02O\u0161\x03\x02\x02\x02Q\u0163\x03\x02\x02\x02S\u0165\x03" +
            "\x02\x02\x02U\u0167\x03\x02\x02\x02W\u0169\x03\x02\x02\x02Y\u016B\x03" +
            "\x02\x02\x02[\u016D\x03\x02\x02\x02]\u016F\x03\x02\x02\x02_\u0171\x03" +
            "\x02\x02\x02a\u0173\x03\x02\x02\x02c\u0175\x03\x02\x02\x02e\u0177\x03" +
            "\x02\x02\x02g\u0179\x03\x02\x02\x02i\u017B\x03\x02\x02\x02k\u017D\x03" +
            "\x02\x02\x02m\u017F\x03\x02\x02\x02o\u0181\x03\x02\x02\x02q\u0183\x03" +
            "\x02\x02\x02s\u0185\x03\x02\x02\x02u\u0187\x03\x02\x02\x02w\u0189\x03" +
            "\x02\x02\x02y\u018B\x03\x02\x02\x02{\u018D\x03\x02\x02\x02}\u018F\x03" +
            "\x02\x02\x02\x7F\u0191\x03\x02\x02\x02\x81\u0193\x03\x02\x02\x02\x83\u0195" +
            "\x03\x02\x02\x02\x85\u0197\x03\x02\x02\x02\x87\u0199\x03\x02\x02\x02\x89" +
            "\u019B\x03\x02\x02\x02\x8B\u019D\x03\x02\x02\x02\x8D\u019F\x03\x02\x02" +
            "\x02\x8F\u01A1\x03\x02\x02\x02\x91\u01A3\x03\x02\x02\x02\x93\u01A5\x03" +
            "\x02\x02\x02\x95\u01A7\x03\x02\x02\x02\x97\u01A9\x03\x02\x02\x02\x99\u01AB" +
            "\x03\x02\x02\x02\x9B\u01AD\x03\x02\x02\x02\x9D\u01AF\x03\x02\x02\x02\x9F" +
            "\u01B1\x03\x02\x02\x02\xA1\u01B3\x03\x02\x02\x02\xA3\u01B5\x03\x02\x02" +
            "\x02\xA5\u01B7\x03\x02\x02\x02\xA7\u01B9\x03\x02\x02\x02\xA9\u01BB\x03" +
            "\x02\x02\x02\xAB\u01BD\x03\x02\x02\x02\xAD\u01BF\x03\x02\x02\x02\xAF\u01C1" +
            "\x03\x02\x02\x02\xB1\u01C3\x03\x02\x02\x02\xB3\u01C5\x03\x02\x02\x02\xB5" +
            "\u01C7\x03\x02\x02\x02\xB7\u01C9\x03\x02\x02\x02\xB9\u01CB\x03\x02\x02" +
            "\x02\xBB\u01CD\x03\x02\x02\x02\xBD\u01CF\x03\x02\x02\x02\xBF\u01D1\x03" +
            "\x02\x02\x02\xC1\u01D3\x03\x02\x02\x02\xC3\u01D5\x03\x02\x02\x02\xC5\u01D7" +
            "\x03\x02\x02\x02\xC7\u01D9\x03\x02\x02\x02\xC9\u01DB\x03\x02\x02\x02\xCB" +
            "\u01DD\x03\x02\x02\x02\xCD\u01DF\x03\x02\x02\x02\xCF\u01E1\x03\x02\x02" +
            "\x02\xD1\u01E3\x03\x02\x02\x02\xD3\u01E5\x03\x02\x02\x02\xD5\u01E7\x03" +
            "\x02\x02\x02\xD7\u01EB\x03\x02\x02\x02\xD9\u01F0\x03\x02\x02\x02\xDB\u01F4" +
            "\x03\x02\x02\x02\xDD\u01F6\x03\x02\x02\x02\xDF\u01F8\x03\x02\x02\x02\xE1" +
            "\u01FA\x03\x02\x02\x02\xE3\xE4\x07^\x02\x02\xE4\xE5\x05\xDDo\x02\xE5\x04" +
            "\x03\x02\x02\x02\xE6\xE7\x07^\x02\x02\xE7\xE8\x07S\x02\x02\xE8\xEC\x03" +
            "\x02\x02\x02\xE9\xEB\v\x02\x02\x02\xEA\xE9\x03\x02\x02\x02\xEB\xEE\x03" +
            "\x02\x02\x02\xEC\xED\x03\x02\x02\x02\xEC\xEA\x03\x02\x02\x02\xED\xEF\x03" +
            "\x02\x02\x02\xEE\xEC\x03\x02\x02\x02\xEF\xF0\x07^\x02\x02\xF0\xF1\x07" +
            "G\x02\x02\xF1\x06\x03\x02\x02\x02\xF2\xF3\x07^\x02\x02\xF3\xF4\x07c\x02" +
            "\x02\xF4\b\x03\x02\x02\x02\xF5\xF6\x07^\x02\x02\xF6\xF7\x07e\x02\x02\xF7" +
            "\n\x03\x02\x02\x02\xF8\xF9\x07^\x02\x02\xF9\xFA\x07g\x02\x02\xFA\f\x03" +
            "\x02\x02\x02\xFB\xFC\x07^\x02\x02\xFC\xFD\x07h\x02\x02\xFD\x0E\x03\x02" +
            "\x02\x02\xFE\xFF\x07^\x02\x02\xFF\u0100\x07p\x02\x02\u0100\x10\x03\x02" +
            "\x02\x02\u0101\u0102\x07^\x02\x02\u0102\u0103\x07t\x02\x02\u0103\x12\x03" +
            "\x02\x02\x02\u0104\u0105\x07^\x02\x02\u0105\u0106\x07v\x02\x02\u0106\x14" +
            "\x03\x02\x02\x02\u0107\u0108\x07^\x02\x02\u0108\x16\x03\x02\x02\x02\u0109" +
            "\u010A\x07^\x02\x02\u010A\u010B\x07z\x02\x02\u010B\u0119\x03\x02\x02\x02" +
            "\u010C\u010D\x05\xDFp\x02\u010D\u010E\x05\xDFp\x02\u010E\u011A\x03\x02" +
            "\x02\x02\u010F\u0110\x07}\x02\x02\u0110\u0111\x05\xDFp\x02\u0111\u0113" +
            "\x05\xDFp\x02\u0112\u0114\x05\xDFp\x02\u0113\u0112\x03\x02\x02\x02\u0114" +
            "\u0115\x03\x02\x02\x02\u0115\u0113\x03\x02\x02\x02\u0115\u0116\x03\x02" +
            "\x02\x02\u0116\u0117\x03\x02\x02\x02\u0117\u0118\x07\x7F\x02\x02\u0118" +
            "\u011A\x03\x02\x02\x02\u0119\u010C\x03\x02\x02\x02\u0119\u010F\x03\x02" +
            "\x02\x02\u011A\x18\x03\x02\x02\x02\u011B\u011C\x070\x02\x02\u011C\x1A" +
            "\x03\x02\x02\x02\u011D\u011E\x07^\x02\x02\u011E\u011F\x07f\x02\x02\u011F" +
            "\x1C\x03\x02\x02\x02\u0120\u0121\x07^\x02\x02\u0121\u0122\x07F\x02\x02" +
            "\u0122\x1E\x03\x02\x02\x02\u0123\u0124\x07^\x02\x02\u0124\u0125\x07r\x02" +
            "\x02\u0125\u0126\x07}\x02\x02\u0126\u0127\x03\x02\x02\x02\u0127\u0128" +
            "\x05\xD7l\x02\u0128\u0129\x07\x7F\x02\x02\u0129 \x03\x02\x02\x02\u012A" +
            "\u012B\x07^\x02\x02\u012B\u012C\x07R\x02\x02\u012C\u012D\x07}\x02\x02" +
            "\u012D\u012E\x03\x02\x02\x02\u012E\u012F\x05\xD7l\x02\u012F\u0130\x07" +
            "\x7F\x02\x02\u0130\"\x03\x02\x02\x02\u0131\u0132\x07^\x02\x02\u0132\u0133" +
            "\x07u\x02\x02\u0133$\x03\x02\x02\x02\u0134\u0135\x07^\x02\x02\u0135\u0136" +
            "\x07U\x02\x02\u0136&\x03\x02\x02\x02\u0137\u0138\x07^\x02\x02\u0138\u0139" +
            "\x07y\x02\x02\u0139(\x03\x02\x02\x02\u013A\u013B\x07^\x02\x02\u013B\u013C" +
            "\x07Y\x02\x02\u013C*\x03\x02\x02\x02\u013D\u013E\x07]\x02\x02\u013E,\x03" +
            "\x02\x02\x02\u013F\u0140\x07_\x02\x02\u0140.\x03\x02\x02\x02\u0141\u0142" +
            "\x07`\x02\x02\u01420\x03\x02\x02\x02\u0143\u0144\x07/\x02\x02\u01442\x03" +
            "\x02\x02\x02\u0145\u0146\x07A\x02\x02\u01464\x03\x02\x02\x02\u0147\u0148" +
            "\x07-\x02\x02\u01486\x03\x02\x02\x02\u0149\u014A\x07,\x02\x02\u014A8\x03" +
            "\x02\x02\x02\u014B\u014C\x07}\x02\x02\u014C:\x03\x02\x02\x02\u014D\u014E" +
            "\x07\x7F\x02\x02\u014E<\x03\x02\x02\x02\u014F\u0150\x07.\x02\x02\u0150" +
            ">\x03\x02\x02\x02\u0151\u0152\x07&\x02\x02\u0152@\x03\x02\x02\x02\u0153" +
            "\u0154\x07~\x02\x02\u0154B\x03\x02\x02\x02\u0155\u0156\x07*\x02\x02\u0156" +
            "D\x03\x02\x02\x02\u0157\u0158\x07+\x02\x02\u0158F\x03\x02\x02\x02\u0159" +
            "\u015A\x07>\x02\x02\u015AH\x03\x02\x02\x02\u015B\u015C\x07@\x02\x02\u015C" +
            "J\x03\x02\x02\x02\u015D\u015E\x07)\x02\x02\u015EL\x03\x02\x02\x02\u015F" +
            "\u0160\x07a\x02\x02\u0160N\x03\x02\x02\x02\u0161\u0162\x07<\x02\x02\u0162" +
            "P\x03\x02\x02\x02\u0163\u0164\x07%\x02\x02\u0164R\x03\x02\x02\x02\u0165" +
            "\u0166\x07?\x02\x02\u0166T\x03\x02\x02\x02\u0167\u0168\x07#\x02\x02\u0168" +
            "V\x03\x02\x02\x02\u0169\u016A\x07(\x02\x02\u016AX\x03\x02\x02\x02\u016B" +
            "\u016C\x07c\x02\x02\u016CZ\x03\x02\x02\x02\u016D\u016E\x07d\x02\x02\u016E" +
            "\\\x03\x02\x02\x02\u016F\u0170\x07e\x02\x02\u0170^\x03\x02\x02\x02\u0171" +
            "\u0172\x07f\x02\x02\u0172`\x03\x02\x02\x02\u0173\u0174\x07g\x02\x02\u0174" +
            "b\x03\x02\x02\x02\u0175\u0176\x07h\x02\x02\u0176d\x03\x02\x02\x02\u0177" +
            "\u0178\x07i\x02\x02\u0178f\x03\x02\x02\x02\u0179\u017A\x07j\x02\x02\u017A" +
            "h\x03\x02\x02\x02\u017B\u017C\x07k\x02\x02\u017Cj\x03\x02\x02\x02\u017D" +
            "\u017E\x07l\x02\x02\u017El\x03\x02\x02\x02\u017F\u0180\x07m\x02\x02\u0180" +
            "n\x03\x02\x02\x02\u0181\u0182\x07n\x02\x02\u0182p\x03\x02\x02\x02\u0183" +
            "\u0184\x07o\x02\x02\u0184r\x03\x02\x02\x02\u0185\u0186\x07p\x02\x02\u0186" +
            "t\x03\x02\x02\x02\u0187\u0188\x07q\x02\x02\u0188v\x03\x02\x02\x02\u0189" +
            "\u018A\x07r\x02\x02\u018Ax\x03\x02\x02\x02\u018B\u018C\x07s\x02\x02\u018C" +
            "z\x03\x02\x02\x02\u018D\u018E\x07t\x02\x02\u018E|\x03\x02\x02\x02\u018F" +
            "\u0190\x07u\x02\x02\u0190~\x03\x02\x02\x02\u0191\u0192\x07v\x02\x02\u0192" +
            "\x80\x03\x02\x02\x02\u0193\u0194\x07w\x02\x02\u0194\x82\x03\x02\x02\x02" +
            "\u0195\u0196\x07x\x02\x02\u0196\x84\x03\x02\x02\x02\u0197\u0198\x07y\x02" +
            "\x02\u0198\x86\x03\x02\x02\x02\u0199\u019A\x07z\x02\x02\u019A\x88\x03" +
            "\x02\x02\x02\u019B\u019C\x07{\x02\x02\u019C\x8A\x03\x02\x02\x02\u019D" +
            "\u019E\x07|\x02\x02\u019E\x8C\x03\x02\x02\x02\u019F\u01A0\x07C\x02\x02" +
            "\u01A0\x8E\x03\x02\x02\x02\u01A1\u01A2\x07D\x02\x02\u01A2\x90\x03\x02" +
            "\x02\x02\u01A3\u01A4\x07E\x02\x02\u01A4\x92\x03\x02\x02\x02\u01A5\u01A6" +
            "\x07F\x02\x02\u01A6\x94\x03\x02\x02\x02\u01A7\u01A8\x07G\x02\x02\u01A8" +
            "\x96\x03\x02\x02\x02\u01A9\u01AA\x07H\x02\x02\u01AA\x98\x03\x02\x02\x02" +
            "\u01AB\u01AC\x07I\x02\x02\u01AC\x9A\x03\x02\x02\x02\u01AD\u01AE\x07J\x02" +
            "\x02\u01AE\x9C\x03\x02\x02\x02\u01AF\u01B0\x07K\x02\x02\u01B0\x9E\x03" +
            "\x02\x02\x02\u01B1\u01B2\x07L\x02\x02\u01B2\xA0\x03\x02\x02\x02\u01B3" +
            "\u01B4\x07M\x02\x02\u01B4\xA2\x03\x02\x02\x02\u01B5\u01B6\x07N\x02\x02" +
            "\u01B6\xA4\x03\x02\x02\x02\u01B7\u01B8\x07O\x02\x02\u01B8\xA6\x03\x02" +
            "\x02\x02\u01B9\u01BA\x07P\x02\x02\u01BA\xA8\x03\x02\x02\x02\u01BB\u01BC" +
            "\x07Q\x02\x02\u01BC\xAA\x03\x02\x02\x02\u01BD\u01BE\x07R\x02\x02\u01BE" +
            "\xAC\x03\x02\x02\x02\u01BF\u01C0\x07S\x02\x02\u01C0\xAE\x03\x02\x02\x02" +
            "\u01C1\u01C2\x07T\x02\x02\u01C2\xB0\x03\x02\x02\x02\u01C3\u01C4\x07U\x02" +
            "\x02\u01C4\xB2\x03\x02\x02\x02\u01C5\u01C6\x07V\x02\x02\u01C6\xB4\x03" +
            "\x02\x02\x02\u01C7\u01C8\x07W\x02\x02\u01C8\xB6\x03\x02\x02\x02\u01C9" +
            "\u01CA\x07X\x02\x02\u01CA\xB8\x03\x02\x02\x02\u01CB\u01CC\x07Y\x02\x02" +
            "\u01CC\xBA\x03\x02\x02\x02\u01CD\u01CE\x07Z\x02\x02\u01CE\xBC\x03\x02" +
            "\x02\x02\u01CF\u01D0\x07[\x02\x02\u01D0\xBE\x03\x02\x02\x02\u01D1\u01D2" +
            "\x07\\\x02\x02\u01D2\xC0\x03\x02\x02\x02\u01D3\u01D4\x073\x02\x02\u01D4" +
            "\xC2\x03\x02\x02\x02\u01D5\u01D6\x074\x02\x02\u01D6\xC4\x03\x02\x02\x02" +
            "\u01D7\u01D8\x075\x02\x02\u01D8\xC6\x03\x02\x02\x02\u01D9\u01DA\x076\x02" +
            "\x02\u01DA\xC8\x03\x02\x02\x02\u01DB\u01DC\x077\x02\x02\u01DC\xCA\x03" +
            "\x02\x02\x02\u01DD\u01DE\x078\x02\x02\u01DE\xCC\x03\x02\x02\x02\u01DF" +
            "\u01E0\x079\x02\x02\u01E0\xCE\x03\x02\x02\x02\u01E1\u01E2\x07:\x02\x02" +
            "\u01E2\xD0\x03\x02\x02\x02\u01E3\u01E4\x07;\x02\x02\u01E4\xD2\x03\x02" +
            "\x02\x02\u01E5\u01E6\x072\x02\x02\u01E6\xD4\x03\x02\x02\x02\u01E7\u01E8" +
            "\v\x02\x02\x02\u01E8\xD6\x03\x02\x02\x02\u01E9\u01EC\x07a\x02\x02\u01EA" +
            "\u01EC\x05\xDBn\x02\u01EB\u01E9\x03\x02\x02\x02\u01EB\u01EA\x03\x02\x02" +
            "\x02\u01EC\u01ED\x03\x02\x02\x02\u01ED\u01EB\x03\x02\x02\x02\u01ED\u01EE" +
            "\x03\x02\x02\x02\u01EE\xD8\x03\x02\x02\x02\u01EF\u01F1\x05\xDBn\x02\u01F0" +
            "\u01EF\x03\x02\x02\x02\u01F1\u01F2\x03\x02\x02\x02\u01F2\u01F0\x03\x02" +
            "\x02\x02\u01F2\u01F3\x03\x02\x02\x02\u01F3\xDA\x03\x02\x02\x02\u01F4\u01F5" +
            "\t\x02\x02\x02\u01F5\xDC\x03\x02\x02\x02\u01F6\u01F7\n\x02\x02\x02\u01F7" +
            "\xDE\x03\x02\x02\x02\u01F8\u01F9\t\x03\x02\x02\u01F9\xE0\x03\x02\x02\x02" +
            "\u01FA\u01FB\t\x04\x02\x02\u01FB\xE2\x03\x02\x02\x02\t\x02\xEC\u0115\u0119" +
            "\u01EB\u01ED\u01F2\x02";
            exports.CommonRegexLexer = CommonRegexLexer;

        }, {
            "antlr4ts/Lexer": 232,
            "antlr4ts/VocabularyImpl": 250,
            "antlr4ts/atn/ATNDeserializer": 255,
            "antlr4ts/atn/LexerATNSimulator": 276,
            "antlr4ts/misc/Utils": 337
        }],
        189: [function(require, module, exports) {
            "use strict";
            // Generated from src/CommonRegex.g4 by ANTLR 4.7.3-SNAPSHOT
            var __importStar = (this && this.__importStar) || function(mod) {
                if (mod && mod.__esModule)
                    return mod;
                var result = {};
                if (mod != null)
                    for (var k in mod)
                        if (Object.hasOwnProperty.call(mod, k))
                            result[k] = mod[k];
                result["default"] = mod;
                return result;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
            const NoViableAltException_1 = require("antlr4ts/NoViableAltException");
            const Parser_1 = require("antlr4ts/Parser");
            const ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
            const ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
            const RecognitionException_1 = require("antlr4ts/RecognitionException");
            const Token_1 = require("antlr4ts/Token");
            const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
            const Utils = __importStar(require("antlr4ts/misc/Utils"));
            class CommonRegexParser extends Parser_1.Parser {
                constructor(input)
                {
                    super(input);
                    this._interp = new ParserATNSimulator_1.ParserATNSimulator(CommonRegexParser._ATN, this);
                }
                // @Override
                // @NotNull
                get vocabulary()
                {
                    return CommonRegexParser.VOCABULARY;
                }
                // tslint:enable:no-trailing-whitespace
                // @Override
                get grammarFileName()
                {
                    return "CommonRegex.g4";
                }
                // @Override
                get ruleNames()
                {
                    return CommonRegexParser.ruleNames;
                }
                // @Override
                get serializedATN()
                {
                    return CommonRegexParser._serializedATN;
                }
                // @RuleVersion(0)
                parse()
                {
                    let _localctx = new ParseContext(this._ctx, this.state);
                    this.enterRule(_localctx, 0, CommonRegexParser.RULE_parse);
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 54;
                            this.alternation();
                            this.state = 55;
                            this.match(CommonRegexParser.EOF);
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                alternation()
                {
                    let _localctx = new AlternationContext(this._ctx, this.state);
                    this.enterRule(_localctx, 2, CommonRegexParser.RULE_alternation);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 57;
                            this.expr();
                            this.state = 62;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === CommonRegexParser.Pipe) {
                                {
                                    {
                                        this.state = 58;
                                        this.match(CommonRegexParser.Pipe);
                                        this.state = 59;
                                        this.expr();
                                    }
                                }
                                this.state = 64;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                expr()
                {
                    let _localctx = new ExprContext(this._ctx, this.state);
                    this.enterRule(_localctx, 4, CommonRegexParser.RULE_expr);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 68;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CommonRegexParser.Quoted) | (1 << CommonRegexParser.BlockQuoted) | (1 << CommonRegexParser.BellChar) | (1 << CommonRegexParser.ControlChar) | (1 << CommonRegexParser.EscapeChar) | (1 << CommonRegexParser.FormFeed) | (1 << CommonRegexParser.NewLine) | (1 << CommonRegexParser.CarriageReturn) | (1 << CommonRegexParser.Tab) | (1 << CommonRegexParser.Backslash) | (1 << CommonRegexParser.HexChar) | (1 << CommonRegexParser.Dot) | (1 << CommonRegexParser.DecimalDigit) | (1 << CommonRegexParser.NotDecimalDigit) | (1 << CommonRegexParser.CharWithProperty) | (1 << CommonRegexParser.CharWithoutProperty) | (1 << CommonRegexParser.WhiteSpace) | (1 << CommonRegexParser.NotWhiteSpace) | (1 << CommonRegexParser.WordChar) | (1 << CommonRegexParser.NotWordChar) | (1 << CommonRegexParser.CharacterClassStart) | (1 << CommonRegexParser.CharacterClassEnd) | (1 << CommonRegexParser.Caret) | (1 << CommonRegexParser.Hyphen) | (1 << CommonRegexParser.OpenBrace) | (1 << CommonRegexParser.CloseBrace) | (1 << CommonRegexParser.Comma) | (1 << CommonRegexParser.EndOfSubject))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (CommonRegexParser.OpenParen - 33)) | (1 << (CommonRegexParser.LessThan - 33)) | (1 << (CommonRegexParser.GreaterThan - 33)) | (1 << (CommonRegexParser.SingleQuote - 33)) | (1 << (CommonRegexParser.Underscore - 33)) | (1 << (CommonRegexParser.Colon - 33)) | (1 << (CommonRegexParser.Hash - 33)) | (1 << (CommonRegexParser.Equals - 33)) | (1 << (CommonRegexParser.Exclamation - 33)) | (1 << (CommonRegexParser.Ampersand - 33)) | (1 << (CommonRegexParser.ALC - 33)) | (1 << (CommonRegexParser.BLC - 33)) | (1 << (CommonRegexParser.CLC - 33)) | (1 << (CommonRegexParser.DLC - 33)) | (1 << (CommonRegexParser.ELC - 33)) | (1 << (CommonRegexParser.FLC - 33)) | (1 << (CommonRegexParser.GLC - 33)) | (1 << (CommonRegexParser.HLC - 33)) | (1 << (CommonRegexParser.ILC - 33)) | (1 << (CommonRegexParser.JLC - 33)) | (1 << (CommonRegexParser.KLC - 33)) | (1 << (CommonRegexParser.LLC - 33)) | (1 << (CommonRegexParser.MLC - 33)) | (1 << (CommonRegexParser.NLC - 33)) | (1 << (CommonRegexParser.OLC - 33)) | (1 << (CommonRegexParser.PLC - 33)) | (1 << (CommonRegexParser.QLC - 33)) | (1 << (CommonRegexParser.RLC - 33)) | (1 << (CommonRegexParser.SLC - 33)) | (1 << (CommonRegexParser.TLC - 33)) | (1 << (CommonRegexParser.ULC - 33)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (CommonRegexParser.VLC - 65)) | (1 << (CommonRegexParser.WLC - 65)) | (1 << (CommonRegexParser.XLC - 65)) | (1 << (CommonRegexParser.YLC - 65)) | (1 << (CommonRegexParser.ZLC - 65)) | (1 << (CommonRegexParser.AUC - 65)) | (1 << (CommonRegexParser.BUC - 65)) | (1 << (CommonRegexParser.CUC - 65)) | (1 << (CommonRegexParser.DUC - 65)) | (1 << (CommonRegexParser.EUC - 65)) | (1 << (CommonRegexParser.FUC - 65)) | (1 << (CommonRegexParser.GUC - 65)) | (1 << (CommonRegexParser.HUC - 65)) | (1 << (CommonRegexParser.IUC - 65)) | (1 << (CommonRegexParser.JUC - 65)) | (1 << (CommonRegexParser.KUC - 65)) | (1 << (CommonRegexParser.LUC - 65)) | (1 << (CommonRegexParser.MUC - 65)) | (1 << (CommonRegexParser.NUC - 65)) | (1 << (CommonRegexParser.OUC - 65)) | (1 << (CommonRegexParser.PUC - 65)) | (1 << (CommonRegexParser.QUC - 65)) | (1 << (CommonRegexParser.RUC - 65)) | (1 << (CommonRegexParser.SUC - 65)) | (1 << (CommonRegexParser.TUC - 65)) | (1 << (CommonRegexParser.UUC - 65)) | (1 << (CommonRegexParser.VUC - 65)) | (1 << (CommonRegexParser.WUC - 65)) | (1 << (CommonRegexParser.XUC - 65)) | (1 << (CommonRegexParser.YUC - 65)) | (1 << (CommonRegexParser.ZUC - 65)) | (1 << (CommonRegexParser.D1 - 65)))) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & ((1 << (CommonRegexParser.D2 - 97)) | (1 << (CommonRegexParser.D3 - 97)) | (1 << (CommonRegexParser.D4 - 97)) | (1 << (CommonRegexParser.D5 - 97)) | (1 << (CommonRegexParser.D6 - 97)) | (1 << (CommonRegexParser.D7 - 97)) | (1 << (CommonRegexParser.D8 - 97)) | (1 << (CommonRegexParser.D9 - 97)) | (1 << (CommonRegexParser.D0 - 97)) | (1 << (CommonRegexParser.OtherChar - 97)))) !== 0)) {
                                {
                                    {
                                        this.state = 65;
                                        this.element();
                                    }
                                }
                                this.state = 70;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                element()
                {
                    let _localctx = new ElementContext(this._ctx, this.state);
                    this.enterRule(_localctx, 6, CommonRegexParser.RULE_element);
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 71;
                            this.atom();
                            this.state = 73;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 2, this._ctx)) {
                            case 1:
                                {
                                    this.state = 72;
                                    this.quantifier();
                                }
                                break;
                            }
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                quantifier()
                {
                    let _localctx = new QuantifierContext(this._ctx, this.state);
                    this.enterRule(_localctx, 8, CommonRegexParser.RULE_quantifier);
                    try {
                        this.state = 99;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 3, this._ctx)) {
                        case 1:
                            this.enterOuterAlt(_localctx, 1);
                            {
                                this.state = 75;
                                this.match(CommonRegexParser.QuestionMark);
                                this.state = 76;
                                this.quantifier_type();
                            }
                            break;
                        case 2:
                            this.enterOuterAlt(_localctx, 2);
                            {
                                this.state = 77;
                                this.match(CommonRegexParser.Plus);
                                this.state = 78;
                                this.quantifier_type();
                            }
                            break;
                        case 3:
                            this.enterOuterAlt(_localctx, 3);
                            {
                                this.state = 79;
                                this.match(CommonRegexParser.Star);
                                this.state = 80;
                                this.quantifier_type();
                            }
                            break;
                        case 4:
                            this.enterOuterAlt(_localctx, 4);
                            {
                                this.state = 81;
                                this.match(CommonRegexParser.OpenBrace);
                                this.state = 82;
                                this.number();
                                this.state = 83;
                                this.match(CommonRegexParser.CloseBrace);
                                this.state = 84;
                                this.quantifier_type();
                            }
                            break;
                        case 5:
                            this.enterOuterAlt(_localctx, 5);
                            {
                                this.state = 86;
                                this.match(CommonRegexParser.OpenBrace);
                                this.state = 87;
                                this.number();
                                this.state = 88;
                                this.match(CommonRegexParser.Comma);
                                this.state = 89;
                                this.match(CommonRegexParser.CloseBrace);
                                this.state = 90;
                                this.quantifier_type();
                            }
                            break;
                        case 6:
                            this.enterOuterAlt(_localctx, 6);
                            {
                                this.state = 92;
                                this.match(CommonRegexParser.OpenBrace);
                                this.state = 93;
                                this.number();
                                this.state = 94;
                                this.match(CommonRegexParser.Comma);
                                this.state = 95;
                                this.number();
                                this.state = 96;
                                this.match(CommonRegexParser.CloseBrace);
                                this.state = 97;
                                this.quantifier_type();
                            }
                            break;
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                quantifier_type()
                {
                    let _localctx = new Quantifier_typeContext(this._ctx, this.state);
                    this.enterRule(_localctx, 10, CommonRegexParser.RULE_quantifier_type);
                    try {
                        this.state = 104;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                        case CommonRegexParser.Plus:
                            this.enterOuterAlt(_localctx, 1);
                            {
                                this.state = 101;
                                this.match(CommonRegexParser.Plus);
                            }
                            break;
                        case CommonRegexParser.QuestionMark:
                            this.enterOuterAlt(_localctx, 2);
                            {
                                this.state = 102;
                                this.match(CommonRegexParser.QuestionMark);
                            }
                            break;
                        case CommonRegexParser.EOF:
                        case CommonRegexParser.Quoted:
                        case CommonRegexParser.BlockQuoted:
                        case CommonRegexParser.BellChar:
                        case CommonRegexParser.ControlChar:
                        case CommonRegexParser.EscapeChar:
                        case CommonRegexParser.FormFeed:
                        case CommonRegexParser.NewLine:
                        case CommonRegexParser.CarriageReturn:
                        case CommonRegexParser.Tab:
                        case CommonRegexParser.Backslash:
                        case CommonRegexParser.HexChar:
                        case CommonRegexParser.Dot:
                        case CommonRegexParser.DecimalDigit:
                        case CommonRegexParser.NotDecimalDigit:
                        case CommonRegexParser.CharWithProperty:
                        case CommonRegexParser.CharWithoutProperty:
                        case CommonRegexParser.WhiteSpace:
                        case CommonRegexParser.NotWhiteSpace:
                        case CommonRegexParser.WordChar:
                        case CommonRegexParser.NotWordChar:
                        case CommonRegexParser.CharacterClassStart:
                        case CommonRegexParser.CharacterClassEnd:
                        case CommonRegexParser.Caret:
                        case CommonRegexParser.Hyphen:
                        case CommonRegexParser.OpenBrace:
                        case CommonRegexParser.CloseBrace:
                        case CommonRegexParser.Comma:
                        case CommonRegexParser.EndOfSubject:
                        case CommonRegexParser.Pipe:
                        case CommonRegexParser.OpenParen:
                        case CommonRegexParser.CloseParen:
                        case CommonRegexParser.LessThan:
                        case CommonRegexParser.GreaterThan:
                        case CommonRegexParser.SingleQuote:
                        case CommonRegexParser.Underscore:
                        case CommonRegexParser.Colon:
                        case CommonRegexParser.Hash:
                        case CommonRegexParser.Equals:
                        case CommonRegexParser.Exclamation:
                        case CommonRegexParser.Ampersand:
                        case CommonRegexParser.ALC:
                        case CommonRegexParser.BLC:
                        case CommonRegexParser.CLC:
                        case CommonRegexParser.DLC:
                        case CommonRegexParser.ELC:
                        case CommonRegexParser.FLC:
                        case CommonRegexParser.GLC:
                        case CommonRegexParser.HLC:
                        case CommonRegexParser.ILC:
                        case CommonRegexParser.JLC:
                        case CommonRegexParser.KLC:
                        case CommonRegexParser.LLC:
                        case CommonRegexParser.MLC:
                        case CommonRegexParser.NLC:
                        case CommonRegexParser.OLC:
                        case CommonRegexParser.PLC:
                        case CommonRegexParser.QLC:
                        case CommonRegexParser.RLC:
                        case CommonRegexParser.SLC:
                        case CommonRegexParser.TLC:
                        case CommonRegexParser.ULC:
                        case CommonRegexParser.VLC:
                        case CommonRegexParser.WLC:
                        case CommonRegexParser.XLC:
                        case CommonRegexParser.YLC:
                        case CommonRegexParser.ZLC:
                        case CommonRegexParser.AUC:
                        case CommonRegexParser.BUC:
                        case CommonRegexParser.CUC:
                        case CommonRegexParser.DUC:
                        case CommonRegexParser.EUC:
                        case CommonRegexParser.FUC:
                        case CommonRegexParser.GUC:
                        case CommonRegexParser.HUC:
                        case CommonRegexParser.IUC:
                        case CommonRegexParser.JUC:
                        case CommonRegexParser.KUC:
                        case CommonRegexParser.LUC:
                        case CommonRegexParser.MUC:
                        case CommonRegexParser.NUC:
                        case CommonRegexParser.OUC:
                        case CommonRegexParser.PUC:
                        case CommonRegexParser.QUC:
                        case CommonRegexParser.RUC:
                        case CommonRegexParser.SUC:
                        case CommonRegexParser.TUC:
                        case CommonRegexParser.UUC:
                        case CommonRegexParser.VUC:
                        case CommonRegexParser.WUC:
                        case CommonRegexParser.XUC:
                        case CommonRegexParser.YUC:
                        case CommonRegexParser.ZUC:
                        case CommonRegexParser.D1:
                        case CommonRegexParser.D2:
                        case CommonRegexParser.D3:
                        case CommonRegexParser.D4:
                        case CommonRegexParser.D5:
                        case CommonRegexParser.D6:
                        case CommonRegexParser.D7:
                        case CommonRegexParser.D8:
                        case CommonRegexParser.D9:
                        case CommonRegexParser.D0:
                        case CommonRegexParser.OtherChar:
                            this.enterOuterAlt(_localctx, 3);

                            {
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                character_class()
                {
                    let _localctx = new Character_classContext(this._ctx, this.state);
                    this.enterRule(_localctx, 12, CommonRegexParser.RULE_character_class);
                    let _la;
                    try {
                        this.state = 123;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 7, this._ctx)) {
                        case 1:
                            this.enterOuterAlt(_localctx, 1);
                            {
                                this.state = 106;
                                this.match(CommonRegexParser.CharacterClassStart);
                                this.state = 107;
                                this.match(CommonRegexParser.Caret);
                                this.state = 109;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                do {
                                    {
                                        {
                                            this.state = 108;
                                            this.cc_atom();
                                        }
                                    }
                                    this.state = 111;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CommonRegexParser.Quoted) | (1 << CommonRegexParser.BlockQuoted) | (1 << CommonRegexParser.BellChar) | (1 << CommonRegexParser.ControlChar) | (1 << CommonRegexParser.EscapeChar) | (1 << CommonRegexParser.FormFeed) | (1 << CommonRegexParser.NewLine) | (1 << CommonRegexParser.CarriageReturn) | (1 << CommonRegexParser.Tab) | (1 << CommonRegexParser.Backslash) | (1 << CommonRegexParser.HexChar) | (1 << CommonRegexParser.Dot) | (1 << CommonRegexParser.DecimalDigit) | (1 << CommonRegexParser.NotDecimalDigit) | (1 << CommonRegexParser.CharWithProperty) | (1 << CommonRegexParser.CharWithoutProperty) | (1 << CommonRegexParser.WhiteSpace) | (1 << CommonRegexParser.NotWhiteSpace) | (1 << CommonRegexParser.WordChar) | (1 << CommonRegexParser.NotWordChar) | (1 << CommonRegexParser.CharacterClassStart) | (1 << CommonRegexParser.Caret) | (1 << CommonRegexParser.Hyphen) | (1 << CommonRegexParser.QuestionMark) | (1 << CommonRegexParser.Plus) | (1 << CommonRegexParser.Star) | (1 << CommonRegexParser.OpenBrace) | (1 << CommonRegexParser.CloseBrace) | (1 << CommonRegexParser.Comma) | (1 << CommonRegexParser.EndOfSubject))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (CommonRegexParser.Pipe - 32)) | (1 << (CommonRegexParser.OpenParen - 32)) | (1 << (CommonRegexParser.CloseParen - 32)) | (1 << (CommonRegexParser.LessThan - 32)) | (1 << (CommonRegexParser.GreaterThan - 32)) | (1 << (CommonRegexParser.SingleQuote - 32)) | (1 << (CommonRegexParser.Underscore - 32)) | (1 << (CommonRegexParser.Colon - 32)) | (1 << (CommonRegexParser.Hash - 32)) | (1 << (CommonRegexParser.Equals - 32)) | (1 << (CommonRegexParser.Exclamation - 32)) | (1 << (CommonRegexParser.Ampersand - 32)) | (1 << (CommonRegexParser.ALC - 32)) | (1 << (CommonRegexParser.BLC - 32)) | (1 << (CommonRegexParser.CLC - 32)) | (1 << (CommonRegexParser.DLC - 32)) | (1 << (CommonRegexParser.ELC - 32)) | (1 << (CommonRegexParser.FLC - 32)) | (1 << (CommonRegexParser.GLC - 32)) | (1 << (CommonRegexParser.HLC - 32)) | (1 << (CommonRegexParser.ILC - 32)) | (1 << (CommonRegexParser.JLC - 32)) | (1 << (CommonRegexParser.KLC - 32)) | (1 << (CommonRegexParser.LLC - 32)) | (1 << (CommonRegexParser.MLC - 32)) | (1 << (CommonRegexParser.NLC - 32)) | (1 << (CommonRegexParser.OLC - 32)) | (1 << (CommonRegexParser.PLC - 32)) | (1 << (CommonRegexParser.QLC - 32)) | (1 << (CommonRegexParser.RLC - 32)) | (1 << (CommonRegexParser.SLC - 32)) | (1 << (CommonRegexParser.TLC - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (CommonRegexParser.ULC - 64)) | (1 << (CommonRegexParser.VLC - 64)) | (1 << (CommonRegexParser.WLC - 64)) | (1 << (CommonRegexParser.XLC - 64)) | (1 << (CommonRegexParser.YLC - 64)) | (1 << (CommonRegexParser.ZLC - 64)) | (1 << (CommonRegexParser.AUC - 64)) | (1 << (CommonRegexParser.BUC - 64)) | (1 << (CommonRegexParser.CUC - 64)) | (1 << (CommonRegexParser.DUC - 64)) | (1 << (CommonRegexParser.EUC - 64)) | (1 << (CommonRegexParser.FUC - 64)) | (1 << (CommonRegexParser.GUC - 64)) | (1 << (CommonRegexParser.HUC - 64)) | (1 << (CommonRegexParser.IUC - 64)) | (1 << (CommonRegexParser.JUC - 64)) | (1 << (CommonRegexParser.KUC - 64)) | (1 << (CommonRegexParser.LUC - 64)) | (1 << (CommonRegexParser.MUC - 64)) | (1 << (CommonRegexParser.NUC - 64)) | (1 << (CommonRegexParser.OUC - 64)) | (1 << (CommonRegexParser.PUC - 64)) | (1 << (CommonRegexParser.QUC - 64)) | (1 << (CommonRegexParser.RUC - 64)) | (1 << (CommonRegexParser.SUC - 64)) | (1 << (CommonRegexParser.TUC - 64)) | (1 << (CommonRegexParser.UUC - 64)) | (1 << (CommonRegexParser.VUC - 64)) | (1 << (CommonRegexParser.WUC - 64)) | (1 << (CommonRegexParser.XUC - 64)) | (1 << (CommonRegexParser.YUC - 64)) | (1 << (CommonRegexParser.ZUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (CommonRegexParser.D1 - 96)) | (1 << (CommonRegexParser.D2 - 96)) | (1 << (CommonRegexParser.D3 - 96)) | (1 << (CommonRegexParser.D4 - 96)) | (1 << (CommonRegexParser.D5 - 96)) | (1 << (CommonRegexParser.D6 - 96)) | (1 << (CommonRegexParser.D7 - 96)) | (1 << (CommonRegexParser.D8 - 96)) | (1 << (CommonRegexParser.D9 - 96)) | (1 << (CommonRegexParser.D0 - 96)) | (1 << (CommonRegexParser.OtherChar - 96)))) !== 0));
                                this.state = 113;
                                this.match(CommonRegexParser.CharacterClassEnd);
                            }
                            break;
                        case 2:
                            this.enterOuterAlt(_localctx, 2);
                            {
                                this.state = 115;
                                this.match(CommonRegexParser.CharacterClassStart);
                                this.state = 117;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                                do {
                                    {
                                        {
                                            this.state = 116;
                                            this.cc_atom();
                                        }
                                    }
                                    this.state = 119;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CommonRegexParser.Quoted) | (1 << CommonRegexParser.BlockQuoted) | (1 << CommonRegexParser.BellChar) | (1 << CommonRegexParser.ControlChar) | (1 << CommonRegexParser.EscapeChar) | (1 << CommonRegexParser.FormFeed) | (1 << CommonRegexParser.NewLine) | (1 << CommonRegexParser.CarriageReturn) | (1 << CommonRegexParser.Tab) | (1 << CommonRegexParser.Backslash) | (1 << CommonRegexParser.HexChar) | (1 << CommonRegexParser.Dot) | (1 << CommonRegexParser.DecimalDigit) | (1 << CommonRegexParser.NotDecimalDigit) | (1 << CommonRegexParser.CharWithProperty) | (1 << CommonRegexParser.CharWithoutProperty) | (1 << CommonRegexParser.WhiteSpace) | (1 << CommonRegexParser.NotWhiteSpace) | (1 << CommonRegexParser.WordChar) | (1 << CommonRegexParser.NotWordChar) | (1 << CommonRegexParser.CharacterClassStart) | (1 << CommonRegexParser.Caret) | (1 << CommonRegexParser.Hyphen) | (1 << CommonRegexParser.QuestionMark) | (1 << CommonRegexParser.Plus) | (1 << CommonRegexParser.Star) | (1 << CommonRegexParser.OpenBrace) | (1 << CommonRegexParser.CloseBrace) | (1 << CommonRegexParser.Comma) | (1 << CommonRegexParser.EndOfSubject))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (CommonRegexParser.Pipe - 32)) | (1 << (CommonRegexParser.OpenParen - 32)) | (1 << (CommonRegexParser.CloseParen - 32)) | (1 << (CommonRegexParser.LessThan - 32)) | (1 << (CommonRegexParser.GreaterThan - 32)) | (1 << (CommonRegexParser.SingleQuote - 32)) | (1 << (CommonRegexParser.Underscore - 32)) | (1 << (CommonRegexParser.Colon - 32)) | (1 << (CommonRegexParser.Hash - 32)) | (1 << (CommonRegexParser.Equals - 32)) | (1 << (CommonRegexParser.Exclamation - 32)) | (1 << (CommonRegexParser.Ampersand - 32)) | (1 << (CommonRegexParser.ALC - 32)) | (1 << (CommonRegexParser.BLC - 32)) | (1 << (CommonRegexParser.CLC - 32)) | (1 << (CommonRegexParser.DLC - 32)) | (1 << (CommonRegexParser.ELC - 32)) | (1 << (CommonRegexParser.FLC - 32)) | (1 << (CommonRegexParser.GLC - 32)) | (1 << (CommonRegexParser.HLC - 32)) | (1 << (CommonRegexParser.ILC - 32)) | (1 << (CommonRegexParser.JLC - 32)) | (1 << (CommonRegexParser.KLC - 32)) | (1 << (CommonRegexParser.LLC - 32)) | (1 << (CommonRegexParser.MLC - 32)) | (1 << (CommonRegexParser.NLC - 32)) | (1 << (CommonRegexParser.OLC - 32)) | (1 << (CommonRegexParser.PLC - 32)) | (1 << (CommonRegexParser.QLC - 32)) | (1 << (CommonRegexParser.RLC - 32)) | (1 << (CommonRegexParser.SLC - 32)) | (1 << (CommonRegexParser.TLC - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (CommonRegexParser.ULC - 64)) | (1 << (CommonRegexParser.VLC - 64)) | (1 << (CommonRegexParser.WLC - 64)) | (1 << (CommonRegexParser.XLC - 64)) | (1 << (CommonRegexParser.YLC - 64)) | (1 << (CommonRegexParser.ZLC - 64)) | (1 << (CommonRegexParser.AUC - 64)) | (1 << (CommonRegexParser.BUC - 64)) | (1 << (CommonRegexParser.CUC - 64)) | (1 << (CommonRegexParser.DUC - 64)) | (1 << (CommonRegexParser.EUC - 64)) | (1 << (CommonRegexParser.FUC - 64)) | (1 << (CommonRegexParser.GUC - 64)) | (1 << (CommonRegexParser.HUC - 64)) | (1 << (CommonRegexParser.IUC - 64)) | (1 << (CommonRegexParser.JUC - 64)) | (1 << (CommonRegexParser.KUC - 64)) | (1 << (CommonRegexParser.LUC - 64)) | (1 << (CommonRegexParser.MUC - 64)) | (1 << (CommonRegexParser.NUC - 64)) | (1 << (CommonRegexParser.OUC - 64)) | (1 << (CommonRegexParser.PUC - 64)) | (1 << (CommonRegexParser.QUC - 64)) | (1 << (CommonRegexParser.RUC - 64)) | (1 << (CommonRegexParser.SUC - 64)) | (1 << (CommonRegexParser.TUC - 64)) | (1 << (CommonRegexParser.UUC - 64)) | (1 << (CommonRegexParser.VUC - 64)) | (1 << (CommonRegexParser.WUC - 64)) | (1 << (CommonRegexParser.XUC - 64)) | (1 << (CommonRegexParser.YUC - 64)) | (1 << (CommonRegexParser.ZUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (CommonRegexParser.D1 - 96)) | (1 << (CommonRegexParser.D2 - 96)) | (1 << (CommonRegexParser.D3 - 96)) | (1 << (CommonRegexParser.D4 - 96)) | (1 << (CommonRegexParser.D5 - 96)) | (1 << (CommonRegexParser.D6 - 96)) | (1 << (CommonRegexParser.D7 - 96)) | (1 << (CommonRegexParser.D8 - 96)) | (1 << (CommonRegexParser.D9 - 96)) | (1 << (CommonRegexParser.D0 - 96)) | (1 << (CommonRegexParser.OtherChar - 96)))) !== 0));
                                this.state = 121;
                                this.match(CommonRegexParser.CharacterClassEnd);
                            }
                            break;
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                capture()
                {
                    let _localctx = new CaptureContext(this._ctx, this.state);
                    this.enterRule(_localctx, 14, CommonRegexParser.RULE_capture);
                    try {
                        this.state = 137;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 8, this._ctx)) {
                        case 1:
                            this.enterOuterAlt(_localctx, 1);
                            {
                                this.state = 125;
                                this.match(CommonRegexParser.OpenParen);
                                this.state = 126;
                                this.match(CommonRegexParser.QuestionMark);
                                this.state = 127;
                                this.match(CommonRegexParser.LessThan);
                                this.state = 128;
                                this.name();
                                this.state = 129;
                                this.match(CommonRegexParser.GreaterThan);
                                this.state = 130;
                                this.alternation();
                                this.state = 131;
                                this.match(CommonRegexParser.CloseParen);
                            }
                            break;
                        case 2:
                            this.enterOuterAlt(_localctx, 2);
                            {
                                this.state = 133;
                                this.match(CommonRegexParser.OpenParen);
                                this.state = 134;
                                this.alternation();
                                this.state = 135;
                                this.match(CommonRegexParser.CloseParen);
                            }
                            break;
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                non_capture()
                {
                    let _localctx = new Non_captureContext(this._ctx, this.state);
                    this.enterRule(_localctx, 16, CommonRegexParser.RULE_non_capture);
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 139;
                            this.match(CommonRegexParser.OpenParen);
                            this.state = 140;
                            this.match(CommonRegexParser.QuestionMark);
                            this.state = 141;
                            this.match(CommonRegexParser.Colon);
                            this.state = 142;
                            this.alternation();
                            this.state = 143;
                            this.match(CommonRegexParser.CloseParen);
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                option()
                {
                    let _localctx = new OptionContext(this._ctx, this.state);
                    this.enterRule(_localctx, 18, CommonRegexParser.RULE_option);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 145;
                            this.match(CommonRegexParser.OpenParen);
                            this.state = 146;
                            this.match(CommonRegexParser.QuestionMark);
                            this.state = 148;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            do {
                                {
                                    {
                                        this.state = 147;
                                        this.option_flag();
                                    }
                                }
                                this.state = 150;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while (((((_la - 52)) & ~0x1F) === 0 && ((1 << (_la - 52)) & ((1 << (CommonRegexParser.ILC - 52)) | (1 << (CommonRegexParser.MLC - 52)) | (1 << (CommonRegexParser.SLC - 52)))) !== 0));
                            this.state = 152;
                            this.match(CommonRegexParser.CloseParen);
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                option_flag()
                {
                    let _localctx = new Option_flagContext(this._ctx, this.state);
                    this.enterRule(_localctx, 20, CommonRegexParser.RULE_option_flag);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 154;
                            _la = this._input.LA(1);
                            if (!(((((_la - 52)) & ~0x1F) === 0 && ((1 << (_la - 52)) & ((1 << (CommonRegexParser.ILC - 52)) | (1 << (CommonRegexParser.MLC - 52)) | (1 << (CommonRegexParser.SLC - 52)))) !== 0))) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                atom()
                {
                    let _localctx = new AtomContext(this._ctx, this.state);
                    this.enterRule(_localctx, 22, CommonRegexParser.RULE_atom);
                    try {
                        this.state = 165;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 10, this._ctx)) {
                        case 1:
                            this.enterOuterAlt(_localctx, 1);
                            {
                                this.state = 156;
                                this.shared_atom();
                            }
                            break;
                        case 2:
                            this.enterOuterAlt(_localctx, 2);
                            {
                                this.state = 157;
                                this.literal();
                            }
                            break;
                        case 3:
                            this.enterOuterAlt(_localctx, 3);
                            {
                                this.state = 158;
                                this.character_class();
                            }
                            break;
                        case 4:
                            this.enterOuterAlt(_localctx, 4);
                            {
                                this.state = 159;
                                this.capture();
                            }
                            break;
                        case 5:
                            this.enterOuterAlt(_localctx, 5);
                            {
                                this.state = 160;
                                this.non_capture();
                            }
                            break;
                        case 6:
                            this.enterOuterAlt(_localctx, 6);
                            {
                                this.state = 161;
                                this.option();
                            }
                            break;
                        case 7:
                            this.enterOuterAlt(_localctx, 7);
                            {
                                this.state = 162;
                                this.match(CommonRegexParser.Dot);
                            }
                            break;
                        case 8:
                            this.enterOuterAlt(_localctx, 8);
                            {
                                this.state = 163;
                                this.match(CommonRegexParser.Caret);
                            }
                            break;
                        case 9:
                            this.enterOuterAlt(_localctx, 9);
                            {
                                this.state = 164;
                                this.match(CommonRegexParser.EndOfSubject);
                            }
                            break;
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                cc_atom()
                {
                    let _localctx = new Cc_atomContext(this._ctx, this.state);
                    this.enterRule(_localctx, 24, CommonRegexParser.RULE_cc_atom);
                    try {
                        this.state = 173;
                        this._errHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this._input, 11, this._ctx)) {
                        case 1:
                            this.enterOuterAlt(_localctx, 1);
                            {
                                this.state = 167;
                                this.cc_literal();
                                this.state = 168;
                                this.match(CommonRegexParser.Hyphen);
                                this.state = 169;
                                this.cc_literal();
                            }
                            break;
                        case 2:
                            this.enterOuterAlt(_localctx, 2);
                            {
                                this.state = 171;
                                this.shared_atom();
                            }
                            break;
                        case 3:
                            this.enterOuterAlt(_localctx, 3);
                            {
                                this.state = 172;
                                this.cc_literal();
                            }
                            break;
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                shared_atom()
                {
                    let _localctx = new Shared_atomContext(this._ctx, this.state);
                    this.enterRule(_localctx, 26, CommonRegexParser.RULE_shared_atom);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 175;
                            _la = this._input.LA(1);
                            if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CommonRegexParser.ControlChar) | (1 << CommonRegexParser.DecimalDigit) | (1 << CommonRegexParser.NotDecimalDigit) | (1 << CommonRegexParser.CharWithProperty) | (1 << CommonRegexParser.CharWithoutProperty) | (1 << CommonRegexParser.WhiteSpace) | (1 << CommonRegexParser.NotWhiteSpace) | (1 << CommonRegexParser.WordChar) | (1 << CommonRegexParser.NotWordChar))) !== 0))) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                literal()
                {
                    let _localctx = new LiteralContext(this._ctx, this.state);
                    this.enterRule(_localctx, 28, CommonRegexParser.RULE_literal);
                    try {
                        this.state = 179;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                        case CommonRegexParser.Quoted:
                        case CommonRegexParser.BlockQuoted:
                        case CommonRegexParser.BellChar:
                        case CommonRegexParser.EscapeChar:
                        case CommonRegexParser.FormFeed:
                        case CommonRegexParser.NewLine:
                        case CommonRegexParser.CarriageReturn:
                        case CommonRegexParser.Tab:
                        case CommonRegexParser.Backslash:
                        case CommonRegexParser.HexChar:
                        case CommonRegexParser.Hyphen:
                        case CommonRegexParser.OpenBrace:
                        case CommonRegexParser.CloseBrace:
                        case CommonRegexParser.Comma:
                        case CommonRegexParser.LessThan:
                        case CommonRegexParser.GreaterThan:
                        case CommonRegexParser.SingleQuote:
                        case CommonRegexParser.Underscore:
                        case CommonRegexParser.Colon:
                        case CommonRegexParser.Hash:
                        case CommonRegexParser.Equals:
                        case CommonRegexParser.Exclamation:
                        case CommonRegexParser.Ampersand:
                        case CommonRegexParser.ALC:
                        case CommonRegexParser.BLC:
                        case CommonRegexParser.CLC:
                        case CommonRegexParser.DLC:
                        case CommonRegexParser.ELC:
                        case CommonRegexParser.FLC:
                        case CommonRegexParser.GLC:
                        case CommonRegexParser.HLC:
                        case CommonRegexParser.ILC:
                        case CommonRegexParser.JLC:
                        case CommonRegexParser.KLC:
                        case CommonRegexParser.LLC:
                        case CommonRegexParser.MLC:
                        case CommonRegexParser.NLC:
                        case CommonRegexParser.OLC:
                        case CommonRegexParser.PLC:
                        case CommonRegexParser.QLC:
                        case CommonRegexParser.RLC:
                        case CommonRegexParser.SLC:
                        case CommonRegexParser.TLC:
                        case CommonRegexParser.ULC:
                        case CommonRegexParser.VLC:
                        case CommonRegexParser.WLC:
                        case CommonRegexParser.XLC:
                        case CommonRegexParser.YLC:
                        case CommonRegexParser.ZLC:
                        case CommonRegexParser.AUC:
                        case CommonRegexParser.BUC:
                        case CommonRegexParser.CUC:
                        case CommonRegexParser.DUC:
                        case CommonRegexParser.EUC:
                        case CommonRegexParser.FUC:
                        case CommonRegexParser.GUC:
                        case CommonRegexParser.HUC:
                        case CommonRegexParser.IUC:
                        case CommonRegexParser.JUC:
                        case CommonRegexParser.KUC:
                        case CommonRegexParser.LUC:
                        case CommonRegexParser.MUC:
                        case CommonRegexParser.NUC:
                        case CommonRegexParser.OUC:
                        case CommonRegexParser.PUC:
                        case CommonRegexParser.QUC:
                        case CommonRegexParser.RUC:
                        case CommonRegexParser.SUC:
                        case CommonRegexParser.TUC:
                        case CommonRegexParser.UUC:
                        case CommonRegexParser.VUC:
                        case CommonRegexParser.WUC:
                        case CommonRegexParser.XUC:
                        case CommonRegexParser.YUC:
                        case CommonRegexParser.ZUC:
                        case CommonRegexParser.D1:
                        case CommonRegexParser.D2:
                        case CommonRegexParser.D3:
                        case CommonRegexParser.D4:
                        case CommonRegexParser.D5:
                        case CommonRegexParser.D6:
                        case CommonRegexParser.D7:
                        case CommonRegexParser.D8:
                        case CommonRegexParser.D9:
                        case CommonRegexParser.D0:
                        case CommonRegexParser.OtherChar:
                            this.enterOuterAlt(_localctx, 1);
                            {
                                this.state = 177;
                                this.shared_literal();
                            }
                            break;
                        case CommonRegexParser.CharacterClassEnd:
                            this.enterOuterAlt(_localctx, 2);
                            {
                                this.state = 178;
                                this.match(CommonRegexParser.CharacterClassEnd);
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                cc_literal()
                {
                    let _localctx = new Cc_literalContext(this._ctx, this.state);
                    this.enterRule(_localctx, 30, CommonRegexParser.RULE_cc_literal);
                    try {
                        this.state = 192;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                        case CommonRegexParser.Quoted:
                        case CommonRegexParser.BlockQuoted:
                        case CommonRegexParser.BellChar:
                        case CommonRegexParser.EscapeChar:
                        case CommonRegexParser.FormFeed:
                        case CommonRegexParser.NewLine:
                        case CommonRegexParser.CarriageReturn:
                        case CommonRegexParser.Tab:
                        case CommonRegexParser.Backslash:
                        case CommonRegexParser.HexChar:
                        case CommonRegexParser.Hyphen:
                        case CommonRegexParser.OpenBrace:
                        case CommonRegexParser.CloseBrace:
                        case CommonRegexParser.Comma:
                        case CommonRegexParser.LessThan:
                        case CommonRegexParser.GreaterThan:
                        case CommonRegexParser.SingleQuote:
                        case CommonRegexParser.Underscore:
                        case CommonRegexParser.Colon:
                        case CommonRegexParser.Hash:
                        case CommonRegexParser.Equals:
                        case CommonRegexParser.Exclamation:
                        case CommonRegexParser.Ampersand:
                        case CommonRegexParser.ALC:
                        case CommonRegexParser.BLC:
                        case CommonRegexParser.CLC:
                        case CommonRegexParser.DLC:
                        case CommonRegexParser.ELC:
                        case CommonRegexParser.FLC:
                        case CommonRegexParser.GLC:
                        case CommonRegexParser.HLC:
                        case CommonRegexParser.ILC:
                        case CommonRegexParser.JLC:
                        case CommonRegexParser.KLC:
                        case CommonRegexParser.LLC:
                        case CommonRegexParser.MLC:
                        case CommonRegexParser.NLC:
                        case CommonRegexParser.OLC:
                        case CommonRegexParser.PLC:
                        case CommonRegexParser.QLC:
                        case CommonRegexParser.RLC:
                        case CommonRegexParser.SLC:
                        case CommonRegexParser.TLC:
                        case CommonRegexParser.ULC:
                        case CommonRegexParser.VLC:
                        case CommonRegexParser.WLC:
                        case CommonRegexParser.XLC:
                        case CommonRegexParser.YLC:
                        case CommonRegexParser.ZLC:
                        case CommonRegexParser.AUC:
                        case CommonRegexParser.BUC:
                        case CommonRegexParser.CUC:
                        case CommonRegexParser.DUC:
                        case CommonRegexParser.EUC:
                        case CommonRegexParser.FUC:
                        case CommonRegexParser.GUC:
                        case CommonRegexParser.HUC:
                        case CommonRegexParser.IUC:
                        case CommonRegexParser.JUC:
                        case CommonRegexParser.KUC:
                        case CommonRegexParser.LUC:
                        case CommonRegexParser.MUC:
                        case CommonRegexParser.NUC:
                        case CommonRegexParser.OUC:
                        case CommonRegexParser.PUC:
                        case CommonRegexParser.QUC:
                        case CommonRegexParser.RUC:
                        case CommonRegexParser.SUC:
                        case CommonRegexParser.TUC:
                        case CommonRegexParser.UUC:
                        case CommonRegexParser.VUC:
                        case CommonRegexParser.WUC:
                        case CommonRegexParser.XUC:
                        case CommonRegexParser.YUC:
                        case CommonRegexParser.ZUC:
                        case CommonRegexParser.D1:
                        case CommonRegexParser.D2:
                        case CommonRegexParser.D3:
                        case CommonRegexParser.D4:
                        case CommonRegexParser.D5:
                        case CommonRegexParser.D6:
                        case CommonRegexParser.D7:
                        case CommonRegexParser.D8:
                        case CommonRegexParser.D9:
                        case CommonRegexParser.D0:
                        case CommonRegexParser.OtherChar:
                            this.enterOuterAlt(_localctx, 1);
                            {
                                this.state = 181;
                                this.shared_literal();
                            }
                            break;
                        case CommonRegexParser.Dot:
                            this.enterOuterAlt(_localctx, 2);
                            {
                                this.state = 182;
                                this.match(CommonRegexParser.Dot);
                            }
                            break;
                        case CommonRegexParser.CharacterClassStart:
                            this.enterOuterAlt(_localctx, 3);
                            {
                                this.state = 183;
                                this.match(CommonRegexParser.CharacterClassStart);
                            }
                            break;
                        case CommonRegexParser.Caret:
                            this.enterOuterAlt(_localctx, 4);
                            {
                                this.state = 184;
                                this.match(CommonRegexParser.Caret);
                            }
                            break;
                        case CommonRegexParser.QuestionMark:
                            this.enterOuterAlt(_localctx, 5);
                            {
                                this.state = 185;
                                this.match(CommonRegexParser.QuestionMark);
                            }
                            break;
                        case CommonRegexParser.Plus:
                            this.enterOuterAlt(_localctx, 6);
                            {
                                this.state = 186;
                                this.match(CommonRegexParser.Plus);
                            }
                            break;
                        case CommonRegexParser.Star:
                            this.enterOuterAlt(_localctx, 7);
                            {
                                this.state = 187;
                                this.match(CommonRegexParser.Star);
                            }
                            break;
                        case CommonRegexParser.EndOfSubject:
                            this.enterOuterAlt(_localctx, 8);
                            {
                                this.state = 188;
                                this.match(CommonRegexParser.EndOfSubject);
                            }
                            break;
                        case CommonRegexParser.Pipe:
                            this.enterOuterAlt(_localctx, 9);
                            {
                                this.state = 189;
                                this.match(CommonRegexParser.Pipe);
                            }
                            break;
                        case CommonRegexParser.OpenParen:
                            this.enterOuterAlt(_localctx, 10);
                            {
                                this.state = 190;
                                this.match(CommonRegexParser.OpenParen);
                            }
                            break;
                        case CommonRegexParser.CloseParen:
                            this.enterOuterAlt(_localctx, 11);
                            {
                                this.state = 191;
                                this.match(CommonRegexParser.CloseParen);
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                shared_literal()
                {
                    let _localctx = new Shared_literalContext(this._ctx, this.state);
                    this.enterRule(_localctx, 32, CommonRegexParser.RULE_shared_literal);
                    try {
                        this.state = 220;
                        this._errHandler.sync(this);
                        switch (this._input.LA(1)) {
                        case CommonRegexParser.Backslash:
                            this.enterOuterAlt(_localctx, 1);
                            {
                                this.state = 194;
                                this.octal_char();
                            }
                            break;
                        case CommonRegexParser.ALC:
                        case CommonRegexParser.BLC:
                        case CommonRegexParser.CLC:
                        case CommonRegexParser.DLC:
                        case CommonRegexParser.ELC:
                        case CommonRegexParser.FLC:
                        case CommonRegexParser.GLC:
                        case CommonRegexParser.HLC:
                        case CommonRegexParser.ILC:
                        case CommonRegexParser.JLC:
                        case CommonRegexParser.KLC:
                        case CommonRegexParser.LLC:
                        case CommonRegexParser.MLC:
                        case CommonRegexParser.NLC:
                        case CommonRegexParser.OLC:
                        case CommonRegexParser.PLC:
                        case CommonRegexParser.QLC:
                        case CommonRegexParser.RLC:
                        case CommonRegexParser.SLC:
                        case CommonRegexParser.TLC:
                        case CommonRegexParser.ULC:
                        case CommonRegexParser.VLC:
                        case CommonRegexParser.WLC:
                        case CommonRegexParser.XLC:
                        case CommonRegexParser.YLC:
                        case CommonRegexParser.ZLC:
                        case CommonRegexParser.AUC:
                        case CommonRegexParser.BUC:
                        case CommonRegexParser.CUC:
                        case CommonRegexParser.DUC:
                        case CommonRegexParser.EUC:
                        case CommonRegexParser.FUC:
                        case CommonRegexParser.GUC:
                        case CommonRegexParser.HUC:
                        case CommonRegexParser.IUC:
                        case CommonRegexParser.JUC:
                        case CommonRegexParser.KUC:
                        case CommonRegexParser.LUC:
                        case CommonRegexParser.MUC:
                        case CommonRegexParser.NUC:
                        case CommonRegexParser.OUC:
                        case CommonRegexParser.PUC:
                        case CommonRegexParser.QUC:
                        case CommonRegexParser.RUC:
                        case CommonRegexParser.SUC:
                        case CommonRegexParser.TUC:
                        case CommonRegexParser.UUC:
                        case CommonRegexParser.VUC:
                        case CommonRegexParser.WUC:
                        case CommonRegexParser.XUC:
                        case CommonRegexParser.YUC:
                        case CommonRegexParser.ZUC:
                            this.enterOuterAlt(_localctx, 2);
                            {
                                this.state = 195;
                                this.letter();
                            }
                            break;
                        case CommonRegexParser.D1:
                        case CommonRegexParser.D2:
                        case CommonRegexParser.D3:
                        case CommonRegexParser.D4:
                        case CommonRegexParser.D5:
                        case CommonRegexParser.D6:
                        case CommonRegexParser.D7:
                        case CommonRegexParser.D8:
                        case CommonRegexParser.D9:
                        case CommonRegexParser.D0:
                            this.enterOuterAlt(_localctx, 3);
                            {
                                this.state = 196;
                                this.digit();
                            }
                            break;
                        case CommonRegexParser.BellChar:
                            this.enterOuterAlt(_localctx, 4);
                            {
                                this.state = 197;
                                this.match(CommonRegexParser.BellChar);
                            }
                            break;
                        case CommonRegexParser.EscapeChar:
                            this.enterOuterAlt(_localctx, 5);
                            {
                                this.state = 198;
                                this.match(CommonRegexParser.EscapeChar);
                            }
                            break;
                        case CommonRegexParser.FormFeed:
                            this.enterOuterAlt(_localctx, 6);
                            {
                                this.state = 199;
                                this.match(CommonRegexParser.FormFeed);
                            }
                            break;
                        case CommonRegexParser.NewLine:
                            this.enterOuterAlt(_localctx, 7);
                            {
                                this.state = 200;
                                this.match(CommonRegexParser.NewLine);
                            }
                            break;
                        case CommonRegexParser.CarriageReturn:
                            this.enterOuterAlt(_localctx, 8);
                            {
                                this.state = 201;
                                this.match(CommonRegexParser.CarriageReturn);
                            }
                            break;
                        case CommonRegexParser.Tab:
                            this.enterOuterAlt(_localctx, 9);
                            {
                                this.state = 202;
                                this.match(CommonRegexParser.Tab);
                            }
                            break;
                        case CommonRegexParser.HexChar:
                            this.enterOuterAlt(_localctx, 10);
                            {
                                this.state = 203;
                                this.match(CommonRegexParser.HexChar);
                            }
                            break;
                        case CommonRegexParser.Quoted:
                            this.enterOuterAlt(_localctx, 11);
                            {
                                this.state = 204;
                                this.match(CommonRegexParser.Quoted);
                            }
                            break;
                        case CommonRegexParser.BlockQuoted:
                            this.enterOuterAlt(_localctx, 12);
                            {
                                this.state = 205;
                                this.match(CommonRegexParser.BlockQuoted);
                            }
                            break;
                        case CommonRegexParser.OpenBrace:
                            this.enterOuterAlt(_localctx, 13);
                            {
                                this.state = 206;
                                this.match(CommonRegexParser.OpenBrace);
                            }
                            break;
                        case CommonRegexParser.CloseBrace:
                            this.enterOuterAlt(_localctx, 14);
                            {
                                this.state = 207;
                                this.match(CommonRegexParser.CloseBrace);
                            }
                            break;
                        case CommonRegexParser.Comma:
                            this.enterOuterAlt(_localctx, 15);
                            {
                                this.state = 208;
                                this.match(CommonRegexParser.Comma);
                            }
                            break;
                        case CommonRegexParser.Hyphen:
                            this.enterOuterAlt(_localctx, 16);
                            {
                                this.state = 209;
                                this.match(CommonRegexParser.Hyphen);
                            }
                            break;
                        case CommonRegexParser.LessThan:
                            this.enterOuterAlt(_localctx, 17);
                            {
                                this.state = 210;
                                this.match(CommonRegexParser.LessThan);
                            }
                            break;
                        case CommonRegexParser.GreaterThan:
                            this.enterOuterAlt(_localctx, 18);
                            {
                                this.state = 211;
                                this.match(CommonRegexParser.GreaterThan);
                            }
                            break;
                        case CommonRegexParser.SingleQuote:
                            this.enterOuterAlt(_localctx, 19);
                            {
                                this.state = 212;
                                this.match(CommonRegexParser.SingleQuote);
                            }
                            break;
                        case CommonRegexParser.Underscore:
                            this.enterOuterAlt(_localctx, 20);
                            {
                                this.state = 213;
                                this.match(CommonRegexParser.Underscore);
                            }
                            break;
                        case CommonRegexParser.Colon:
                            this.enterOuterAlt(_localctx, 21);
                            {
                                this.state = 214;
                                this.match(CommonRegexParser.Colon);
                            }
                            break;
                        case CommonRegexParser.Hash:
                            this.enterOuterAlt(_localctx, 22);
                            {
                                this.state = 215;
                                this.match(CommonRegexParser.Hash);
                            }
                            break;
                        case CommonRegexParser.Equals:
                            this.enterOuterAlt(_localctx, 23);
                            {
                                this.state = 216;
                                this.match(CommonRegexParser.Equals);
                            }
                            break;
                        case CommonRegexParser.Exclamation:
                            this.enterOuterAlt(_localctx, 24);
                            {
                                this.state = 217;
                                this.match(CommonRegexParser.Exclamation);
                            }
                            break;
                        case CommonRegexParser.Ampersand:
                            this.enterOuterAlt(_localctx, 25);
                            {
                                this.state = 218;
                                this.match(CommonRegexParser.Ampersand);
                            }
                            break;
                        case CommonRegexParser.OtherChar:
                            this.enterOuterAlt(_localctx, 26);
                            {
                                this.state = 219;
                                this.match(CommonRegexParser.OtherChar);
                            }
                            break;
                        default:
                            throw new NoViableAltException_1.NoViableAltException(this);
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                number()
                {
                    let _localctx = new NumberContext(this._ctx, this.state);
                    this.enterRule(_localctx, 34, CommonRegexParser.RULE_number);
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 222;
                            this.digits();
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                octal_char()
                {
                    let _localctx = new Octal_charContext(this._ctx, this.state);
                    this.enterRule(_localctx, 36, CommonRegexParser.RULE_octal_char);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 233;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 15, this._ctx)) {
                            case 1:
                                {
                                    this.state = 224;
                                    this.match(CommonRegexParser.Backslash);
                                    this.state = 225;
                                    _la = this._input.LA(1);
                                    if (!(((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (CommonRegexParser.D1 - 96)) | (1 << (CommonRegexParser.D2 - 96)) | (1 << (CommonRegexParser.D3 - 96)) | (1 << (CommonRegexParser.D0 - 96)))) !== 0))) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 226;
                                    this.octal_digit();
                                    this.state = 227;
                                    this.octal_digit();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 229;
                                    this.match(CommonRegexParser.Backslash);
                                    this.state = 230;
                                    this.octal_digit();
                                    this.state = 231;
                                    this.octal_digit();
                                }
                                break;
                            }
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                octal_digit()
                {
                    let _localctx = new Octal_digitContext(this._ctx, this.state);
                    this.enterRule(_localctx, 38, CommonRegexParser.RULE_octal_digit);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 235;
                            _la = this._input.LA(1);
                            if (!(((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (CommonRegexParser.D1 - 96)) | (1 << (CommonRegexParser.D2 - 96)) | (1 << (CommonRegexParser.D3 - 96)) | (1 << (CommonRegexParser.D4 - 96)) | (1 << (CommonRegexParser.D5 - 96)) | (1 << (CommonRegexParser.D6 - 96)) | (1 << (CommonRegexParser.D7 - 96)) | (1 << (CommonRegexParser.D0 - 96)))) !== 0))) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                digits()
                {
                    let _localctx = new DigitsContext(this._ctx, this.state);
                    this.enterRule(_localctx, 40, CommonRegexParser.RULE_digits);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 238;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            do {
                                {
                                    {
                                        this.state = 237;
                                        this.digit();
                                    }
                                }
                                this.state = 240;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while (((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (CommonRegexParser.D1 - 96)) | (1 << (CommonRegexParser.D2 - 96)) | (1 << (CommonRegexParser.D3 - 96)) | (1 << (CommonRegexParser.D4 - 96)) | (1 << (CommonRegexParser.D5 - 96)) | (1 << (CommonRegexParser.D6 - 96)) | (1 << (CommonRegexParser.D7 - 96)) | (1 << (CommonRegexParser.D8 - 96)) | (1 << (CommonRegexParser.D9 - 96)) | (1 << (CommonRegexParser.D0 - 96)))) !== 0));
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                digit()
                {
                    let _localctx = new DigitContext(this._ctx, this.state);
                    this.enterRule(_localctx, 42, CommonRegexParser.RULE_digit);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 242;
                            _la = this._input.LA(1);
                            if (!(((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (CommonRegexParser.D1 - 96)) | (1 << (CommonRegexParser.D2 - 96)) | (1 << (CommonRegexParser.D3 - 96)) | (1 << (CommonRegexParser.D4 - 96)) | (1 << (CommonRegexParser.D5 - 96)) | (1 << (CommonRegexParser.D6 - 96)) | (1 << (CommonRegexParser.D7 - 96)) | (1 << (CommonRegexParser.D8 - 96)) | (1 << (CommonRegexParser.D9 - 96)) | (1 << (CommonRegexParser.D0 - 96)))) !== 0))) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                name()
                {
                    let _localctx = new NameContext(this._ctx, this.state);
                    this.enterRule(_localctx, 44, CommonRegexParser.RULE_name);
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 244;
                            this.alpha_nums();
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                alpha_nums()
                {
                    let _localctx = new Alpha_numsContext(this._ctx, this.state);
                    this.enterRule(_localctx, 46, CommonRegexParser.RULE_alpha_nums);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 248;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                            case CommonRegexParser.ALC:
                            case CommonRegexParser.BLC:
                            case CommonRegexParser.CLC:
                            case CommonRegexParser.DLC:
                            case CommonRegexParser.ELC:
                            case CommonRegexParser.FLC:
                            case CommonRegexParser.GLC:
                            case CommonRegexParser.HLC:
                            case CommonRegexParser.ILC:
                            case CommonRegexParser.JLC:
                            case CommonRegexParser.KLC:
                            case CommonRegexParser.LLC:
                            case CommonRegexParser.MLC:
                            case CommonRegexParser.NLC:
                            case CommonRegexParser.OLC:
                            case CommonRegexParser.PLC:
                            case CommonRegexParser.QLC:
                            case CommonRegexParser.RLC:
                            case CommonRegexParser.SLC:
                            case CommonRegexParser.TLC:
                            case CommonRegexParser.ULC:
                            case CommonRegexParser.VLC:
                            case CommonRegexParser.WLC:
                            case CommonRegexParser.XLC:
                            case CommonRegexParser.YLC:
                            case CommonRegexParser.ZLC:
                            case CommonRegexParser.AUC:
                            case CommonRegexParser.BUC:
                            case CommonRegexParser.CUC:
                            case CommonRegexParser.DUC:
                            case CommonRegexParser.EUC:
                            case CommonRegexParser.FUC:
                            case CommonRegexParser.GUC:
                            case CommonRegexParser.HUC:
                            case CommonRegexParser.IUC:
                            case CommonRegexParser.JUC:
                            case CommonRegexParser.KUC:
                            case CommonRegexParser.LUC:
                            case CommonRegexParser.MUC:
                            case CommonRegexParser.NUC:
                            case CommonRegexParser.OUC:
                            case CommonRegexParser.PUC:
                            case CommonRegexParser.QUC:
                            case CommonRegexParser.RUC:
                            case CommonRegexParser.SUC:
                            case CommonRegexParser.TUC:
                            case CommonRegexParser.UUC:
                            case CommonRegexParser.VUC:
                            case CommonRegexParser.WUC:
                            case CommonRegexParser.XUC:
                            case CommonRegexParser.YUC:
                            case CommonRegexParser.ZUC:
                                {
                                    this.state = 246;
                                    this.letter();
                                }
                                break;
                            case CommonRegexParser.Underscore:
                                {
                                    this.state = 247;
                                    this.match(CommonRegexParser.Underscore);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                            }
                            this.state = 255;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (((((_la - 38)) & ~0x1F) === 0 && ((1 << (_la - 38)) & ((1 << (CommonRegexParser.Underscore - 38)) | (1 << (CommonRegexParser.ALC - 38)) | (1 << (CommonRegexParser.BLC - 38)) | (1 << (CommonRegexParser.CLC - 38)) | (1 << (CommonRegexParser.DLC - 38)) | (1 << (CommonRegexParser.ELC - 38)) | (1 << (CommonRegexParser.FLC - 38)) | (1 << (CommonRegexParser.GLC - 38)) | (1 << (CommonRegexParser.HLC - 38)) | (1 << (CommonRegexParser.ILC - 38)) | (1 << (CommonRegexParser.JLC - 38)) | (1 << (CommonRegexParser.KLC - 38)) | (1 << (CommonRegexParser.LLC - 38)) | (1 << (CommonRegexParser.MLC - 38)) | (1 << (CommonRegexParser.NLC - 38)) | (1 << (CommonRegexParser.OLC - 38)) | (1 << (CommonRegexParser.PLC - 38)) | (1 << (CommonRegexParser.QLC - 38)) | (1 << (CommonRegexParser.RLC - 38)) | (1 << (CommonRegexParser.SLC - 38)) | (1 << (CommonRegexParser.TLC - 38)) | (1 << (CommonRegexParser.ULC - 38)) | (1 << (CommonRegexParser.VLC - 38)) | (1 << (CommonRegexParser.WLC - 38)) | (1 << (CommonRegexParser.XLC - 38)) | (1 << (CommonRegexParser.YLC - 38)) | (1 << (CommonRegexParser.ZLC - 38)))) !== 0) || ((((_la - 70)) & ~0x1F) === 0 && ((1 << (_la - 70)) & ((1 << (CommonRegexParser.AUC - 70)) | (1 << (CommonRegexParser.BUC - 70)) | (1 << (CommonRegexParser.CUC - 70)) | (1 << (CommonRegexParser.DUC - 70)) | (1 << (CommonRegexParser.EUC - 70)) | (1 << (CommonRegexParser.FUC - 70)) | (1 << (CommonRegexParser.GUC - 70)) | (1 << (CommonRegexParser.HUC - 70)) | (1 << (CommonRegexParser.IUC - 70)) | (1 << (CommonRegexParser.JUC - 70)) | (1 << (CommonRegexParser.KUC - 70)) | (1 << (CommonRegexParser.LUC - 70)) | (1 << (CommonRegexParser.MUC - 70)) | (1 << (CommonRegexParser.NUC - 70)) | (1 << (CommonRegexParser.OUC - 70)) | (1 << (CommonRegexParser.PUC - 70)) | (1 << (CommonRegexParser.QUC - 70)) | (1 << (CommonRegexParser.RUC - 70)) | (1 << (CommonRegexParser.SUC - 70)) | (1 << (CommonRegexParser.TUC - 70)) | (1 << (CommonRegexParser.UUC - 70)) | (1 << (CommonRegexParser.VUC - 70)) | (1 << (CommonRegexParser.WUC - 70)) | (1 << (CommonRegexParser.XUC - 70)) | (1 << (CommonRegexParser.YUC - 70)) | (1 << (CommonRegexParser.ZUC - 70)) | (1 << (CommonRegexParser.D1 - 70)) | (1 << (CommonRegexParser.D2 - 70)) | (1 << (CommonRegexParser.D3 - 70)) | (1 << (CommonRegexParser.D4 - 70)) | (1 << (CommonRegexParser.D5 - 70)) | (1 << (CommonRegexParser.D6 - 70)))) !== 0) || ((((_la - 102)) & ~0x1F) === 0 && ((1 << (_la - 102)) & ((1 << (CommonRegexParser.D7 - 102)) | (1 << (CommonRegexParser.D8 - 102)) | (1 << (CommonRegexParser.D9 - 102)) | (1 << (CommonRegexParser.D0 - 102)))) !== 0)) {
                                {
                                    this.state = 253;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                    case CommonRegexParser.ALC:
                                    case CommonRegexParser.BLC:
                                    case CommonRegexParser.CLC:
                                    case CommonRegexParser.DLC:
                                    case CommonRegexParser.ELC:
                                    case CommonRegexParser.FLC:
                                    case CommonRegexParser.GLC:
                                    case CommonRegexParser.HLC:
                                    case CommonRegexParser.ILC:
                                    case CommonRegexParser.JLC:
                                    case CommonRegexParser.KLC:
                                    case CommonRegexParser.LLC:
                                    case CommonRegexParser.MLC:
                                    case CommonRegexParser.NLC:
                                    case CommonRegexParser.OLC:
                                    case CommonRegexParser.PLC:
                                    case CommonRegexParser.QLC:
                                    case CommonRegexParser.RLC:
                                    case CommonRegexParser.SLC:
                                    case CommonRegexParser.TLC:
                                    case CommonRegexParser.ULC:
                                    case CommonRegexParser.VLC:
                                    case CommonRegexParser.WLC:
                                    case CommonRegexParser.XLC:
                                    case CommonRegexParser.YLC:
                                    case CommonRegexParser.ZLC:
                                    case CommonRegexParser.AUC:
                                    case CommonRegexParser.BUC:
                                    case CommonRegexParser.CUC:
                                    case CommonRegexParser.DUC:
                                    case CommonRegexParser.EUC:
                                    case CommonRegexParser.FUC:
                                    case CommonRegexParser.GUC:
                                    case CommonRegexParser.HUC:
                                    case CommonRegexParser.IUC:
                                    case CommonRegexParser.JUC:
                                    case CommonRegexParser.KUC:
                                    case CommonRegexParser.LUC:
                                    case CommonRegexParser.MUC:
                                    case CommonRegexParser.NUC:
                                    case CommonRegexParser.OUC:
                                    case CommonRegexParser.PUC:
                                    case CommonRegexParser.QUC:
                                    case CommonRegexParser.RUC:
                                    case CommonRegexParser.SUC:
                                    case CommonRegexParser.TUC:
                                    case CommonRegexParser.UUC:
                                    case CommonRegexParser.VUC:
                                    case CommonRegexParser.WUC:
                                    case CommonRegexParser.XUC:
                                    case CommonRegexParser.YUC:
                                    case CommonRegexParser.ZUC:
                                        {
                                            this.state = 250;
                                            this.letter();
                                        }
                                        break;
                                    case CommonRegexParser.Underscore:
                                        {
                                            this.state = 251;
                                            this.match(CommonRegexParser.Underscore);
                                        }
                                        break;
                                    case CommonRegexParser.D1:
                                    case CommonRegexParser.D2:
                                    case CommonRegexParser.D3:
                                    case CommonRegexParser.D4:
                                    case CommonRegexParser.D5:
                                    case CommonRegexParser.D6:
                                    case CommonRegexParser.D7:
                                    case CommonRegexParser.D8:
                                    case CommonRegexParser.D9:
                                    case CommonRegexParser.D0:
                                        {
                                            this.state = 252;
                                            this.digit();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                    }
                                }
                                this.state = 257;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                non_close_parens()
                {
                    let _localctx = new Non_close_parensContext(this._ctx, this.state);
                    this.enterRule(_localctx, 48, CommonRegexParser.RULE_non_close_parens);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 259;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            do {
                                {
                                    {
                                        this.state = 258;
                                        this.non_close_paren();
                                    }
                                }
                                this.state = 261;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CommonRegexParser.Quoted) | (1 << CommonRegexParser.BlockQuoted) | (1 << CommonRegexParser.BellChar) | (1 << CommonRegexParser.ControlChar) | (1 << CommonRegexParser.EscapeChar) | (1 << CommonRegexParser.FormFeed) | (1 << CommonRegexParser.NewLine) | (1 << CommonRegexParser.CarriageReturn) | (1 << CommonRegexParser.Tab) | (1 << CommonRegexParser.Backslash) | (1 << CommonRegexParser.HexChar) | (1 << CommonRegexParser.Dot) | (1 << CommonRegexParser.DecimalDigit) | (1 << CommonRegexParser.NotDecimalDigit) | (1 << CommonRegexParser.CharWithProperty) | (1 << CommonRegexParser.CharWithoutProperty) | (1 << CommonRegexParser.WhiteSpace) | (1 << CommonRegexParser.NotWhiteSpace) | (1 << CommonRegexParser.WordChar) | (1 << CommonRegexParser.NotWordChar) | (1 << CommonRegexParser.CharacterClassStart) | (1 << CommonRegexParser.CharacterClassEnd) | (1 << CommonRegexParser.Caret) | (1 << CommonRegexParser.Hyphen) | (1 << CommonRegexParser.QuestionMark) | (1 << CommonRegexParser.Plus) | (1 << CommonRegexParser.Star) | (1 << CommonRegexParser.OpenBrace) | (1 << CommonRegexParser.CloseBrace) | (1 << CommonRegexParser.Comma) | (1 << CommonRegexParser.EndOfSubject))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (CommonRegexParser.Pipe - 32)) | (1 << (CommonRegexParser.OpenParen - 32)) | (1 << (CommonRegexParser.LessThan - 32)) | (1 << (CommonRegexParser.GreaterThan - 32)) | (1 << (CommonRegexParser.SingleQuote - 32)) | (1 << (CommonRegexParser.Underscore - 32)) | (1 << (CommonRegexParser.Colon - 32)) | (1 << (CommonRegexParser.Hash - 32)) | (1 << (CommonRegexParser.Equals - 32)) | (1 << (CommonRegexParser.Exclamation - 32)) | (1 << (CommonRegexParser.Ampersand - 32)) | (1 << (CommonRegexParser.ALC - 32)) | (1 << (CommonRegexParser.BLC - 32)) | (1 << (CommonRegexParser.CLC - 32)) | (1 << (CommonRegexParser.DLC - 32)) | (1 << (CommonRegexParser.ELC - 32)) | (1 << (CommonRegexParser.FLC - 32)) | (1 << (CommonRegexParser.GLC - 32)) | (1 << (CommonRegexParser.HLC - 32)) | (1 << (CommonRegexParser.ILC - 32)) | (1 << (CommonRegexParser.JLC - 32)) | (1 << (CommonRegexParser.KLC - 32)) | (1 << (CommonRegexParser.LLC - 32)) | (1 << (CommonRegexParser.MLC - 32)) | (1 << (CommonRegexParser.NLC - 32)) | (1 << (CommonRegexParser.OLC - 32)) | (1 << (CommonRegexParser.PLC - 32)) | (1 << (CommonRegexParser.QLC - 32)) | (1 << (CommonRegexParser.RLC - 32)) | (1 << (CommonRegexParser.SLC - 32)) | (1 << (CommonRegexParser.TLC - 32)))) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & ((1 << (CommonRegexParser.ULC - 64)) | (1 << (CommonRegexParser.VLC - 64)) | (1 << (CommonRegexParser.WLC - 64)) | (1 << (CommonRegexParser.XLC - 64)) | (1 << (CommonRegexParser.YLC - 64)) | (1 << (CommonRegexParser.ZLC - 64)) | (1 << (CommonRegexParser.AUC - 64)) | (1 << (CommonRegexParser.BUC - 64)) | (1 << (CommonRegexParser.CUC - 64)) | (1 << (CommonRegexParser.DUC - 64)) | (1 << (CommonRegexParser.EUC - 64)) | (1 << (CommonRegexParser.FUC - 64)) | (1 << (CommonRegexParser.GUC - 64)) | (1 << (CommonRegexParser.HUC - 64)) | (1 << (CommonRegexParser.IUC - 64)) | (1 << (CommonRegexParser.JUC - 64)) | (1 << (CommonRegexParser.KUC - 64)) | (1 << (CommonRegexParser.LUC - 64)) | (1 << (CommonRegexParser.MUC - 64)) | (1 << (CommonRegexParser.NUC - 64)) | (1 << (CommonRegexParser.OUC - 64)) | (1 << (CommonRegexParser.PUC - 64)) | (1 << (CommonRegexParser.QUC - 64)) | (1 << (CommonRegexParser.RUC - 64)) | (1 << (CommonRegexParser.SUC - 64)) | (1 << (CommonRegexParser.TUC - 64)) | (1 << (CommonRegexParser.UUC - 64)) | (1 << (CommonRegexParser.VUC - 64)) | (1 << (CommonRegexParser.WUC - 64)) | (1 << (CommonRegexParser.XUC - 64)) | (1 << (CommonRegexParser.YUC - 64)) | (1 << (CommonRegexParser.ZUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & ((1 << (CommonRegexParser.D1 - 96)) | (1 << (CommonRegexParser.D2 - 96)) | (1 << (CommonRegexParser.D3 - 96)) | (1 << (CommonRegexParser.D4 - 96)) | (1 << (CommonRegexParser.D5 - 96)) | (1 << (CommonRegexParser.D6 - 96)) | (1 << (CommonRegexParser.D7 - 96)) | (1 << (CommonRegexParser.D8 - 96)) | (1 << (CommonRegexParser.D9 - 96)) | (1 << (CommonRegexParser.D0 - 96)) | (1 << (CommonRegexParser.OtherChar - 96)))) !== 0));
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                non_close_paren()
                {
                    let _localctx = new Non_close_parenContext(this._ctx, this.state);
                    this.enterRule(_localctx, 50, CommonRegexParser.RULE_non_close_paren);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 263;
                            _la = this._input.LA(1);
                            if (_la <= 0 || (_la === CommonRegexParser.CloseParen)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                letter()
                {
                    let _localctx = new LetterContext(this._ctx, this.state);
                    this.enterRule(_localctx, 52, CommonRegexParser.RULE_letter);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 265;
                            _la = this._input.LA(1);
                            if (!(((((_la - 44)) & ~0x1F) === 0 && ((1 << (_la - 44)) & ((1 << (CommonRegexParser.ALC - 44)) | (1 << (CommonRegexParser.BLC - 44)) | (1 << (CommonRegexParser.CLC - 44)) | (1 << (CommonRegexParser.DLC - 44)) | (1 << (CommonRegexParser.ELC - 44)) | (1 << (CommonRegexParser.FLC - 44)) | (1 << (CommonRegexParser.GLC - 44)) | (1 << (CommonRegexParser.HLC - 44)) | (1 << (CommonRegexParser.ILC - 44)) | (1 << (CommonRegexParser.JLC - 44)) | (1 << (CommonRegexParser.KLC - 44)) | (1 << (CommonRegexParser.LLC - 44)) | (1 << (CommonRegexParser.MLC - 44)) | (1 << (CommonRegexParser.NLC - 44)) | (1 << (CommonRegexParser.OLC - 44)) | (1 << (CommonRegexParser.PLC - 44)) | (1 << (CommonRegexParser.QLC - 44)) | (1 << (CommonRegexParser.RLC - 44)) | (1 << (CommonRegexParser.SLC - 44)) | (1 << (CommonRegexParser.TLC - 44)) | (1 << (CommonRegexParser.ULC - 44)) | (1 << (CommonRegexParser.VLC - 44)) | (1 << (CommonRegexParser.WLC - 44)) | (1 << (CommonRegexParser.XLC - 44)) | (1 << (CommonRegexParser.YLC - 44)) | (1 << (CommonRegexParser.ZLC - 44)) | (1 << (CommonRegexParser.AUC - 44)) | (1 << (CommonRegexParser.BUC - 44)) | (1 << (CommonRegexParser.CUC - 44)) | (1 << (CommonRegexParser.DUC - 44)) | (1 << (CommonRegexParser.EUC - 44)) | (1 << (CommonRegexParser.FUC - 44)))) !== 0) || ((((_la - 76)) & ~0x1F) === 0 && ((1 << (_la - 76)) & ((1 << (CommonRegexParser.GUC - 76)) | (1 << (CommonRegexParser.HUC - 76)) | (1 << (CommonRegexParser.IUC - 76)) | (1 << (CommonRegexParser.JUC - 76)) | (1 << (CommonRegexParser.KUC - 76)) | (1 << (CommonRegexParser.LUC - 76)) | (1 << (CommonRegexParser.MUC - 76)) | (1 << (CommonRegexParser.NUC - 76)) | (1 << (CommonRegexParser.OUC - 76)) | (1 << (CommonRegexParser.PUC - 76)) | (1 << (CommonRegexParser.QUC - 76)) | (1 << (CommonRegexParser.RUC - 76)) | (1 << (CommonRegexParser.SUC - 76)) | (1 << (CommonRegexParser.TUC - 76)) | (1 << (CommonRegexParser.UUC - 76)) | (1 << (CommonRegexParser.VUC - 76)) | (1 << (CommonRegexParser.WUC - 76)) | (1 << (CommonRegexParser.XUC - 76)) | (1 << (CommonRegexParser.YUC - 76)) | (1 << (CommonRegexParser.ZUC - 76)))) !== 0))) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                static get _ATN()
                {
                    if (!CommonRegexParser.__ATN) {
                        CommonRegexParser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(CommonRegexParser._serializedATN));
                    }
                    return CommonRegexParser.__ATN;
                }
            }
            CommonRegexParser.Quoted = 1;
            CommonRegexParser.BlockQuoted = 2;
            CommonRegexParser.BellChar = 3;
            CommonRegexParser.ControlChar = 4;
            CommonRegexParser.EscapeChar = 5;
            CommonRegexParser.FormFeed = 6;
            CommonRegexParser.NewLine = 7;
            CommonRegexParser.CarriageReturn = 8;
            CommonRegexParser.Tab = 9;
            CommonRegexParser.Backslash = 10;
            CommonRegexParser.HexChar = 11;
            CommonRegexParser.Dot = 12;
            CommonRegexParser.DecimalDigit = 13;
            CommonRegexParser.NotDecimalDigit = 14;
            CommonRegexParser.CharWithProperty = 15;
            CommonRegexParser.CharWithoutProperty = 16;
            CommonRegexParser.WhiteSpace = 17;
            CommonRegexParser.NotWhiteSpace = 18;
            CommonRegexParser.WordChar = 19;
            CommonRegexParser.NotWordChar = 20;
            CommonRegexParser.CharacterClassStart = 21;
            CommonRegexParser.CharacterClassEnd = 22;
            CommonRegexParser.Caret = 23;
            CommonRegexParser.Hyphen = 24;
            CommonRegexParser.QuestionMark = 25;
            CommonRegexParser.Plus = 26;
            CommonRegexParser.Star = 27;
            CommonRegexParser.OpenBrace = 28;
            CommonRegexParser.CloseBrace = 29;
            CommonRegexParser.Comma = 30;
            CommonRegexParser.EndOfSubject = 31;
            CommonRegexParser.Pipe = 32;
            CommonRegexParser.OpenParen = 33;
            CommonRegexParser.CloseParen = 34;
            CommonRegexParser.LessThan = 35;
            CommonRegexParser.GreaterThan = 36;
            CommonRegexParser.SingleQuote = 37;
            CommonRegexParser.Underscore = 38;
            CommonRegexParser.Colon = 39;
            CommonRegexParser.Hash = 40;
            CommonRegexParser.Equals = 41;
            CommonRegexParser.Exclamation = 42;
            CommonRegexParser.Ampersand = 43;
            CommonRegexParser.ALC = 44;
            CommonRegexParser.BLC = 45;
            CommonRegexParser.CLC = 46;
            CommonRegexParser.DLC = 47;
            CommonRegexParser.ELC = 48;
            CommonRegexParser.FLC = 49;
            CommonRegexParser.GLC = 50;
            CommonRegexParser.HLC = 51;
            CommonRegexParser.ILC = 52;
            CommonRegexParser.JLC = 53;
            CommonRegexParser.KLC = 54;
            CommonRegexParser.LLC = 55;
            CommonRegexParser.MLC = 56;
            CommonRegexParser.NLC = 57;
            CommonRegexParser.OLC = 58;
            CommonRegexParser.PLC = 59;
            CommonRegexParser.QLC = 60;
            CommonRegexParser.RLC = 61;
            CommonRegexParser.SLC = 62;
            CommonRegexParser.TLC = 63;
            CommonRegexParser.ULC = 64;
            CommonRegexParser.VLC = 65;
            CommonRegexParser.WLC = 66;
            CommonRegexParser.XLC = 67;
            CommonRegexParser.YLC = 68;
            CommonRegexParser.ZLC = 69;
            CommonRegexParser.AUC = 70;
            CommonRegexParser.BUC = 71;
            CommonRegexParser.CUC = 72;
            CommonRegexParser.DUC = 73;
            CommonRegexParser.EUC = 74;
            CommonRegexParser.FUC = 75;
            CommonRegexParser.GUC = 76;
            CommonRegexParser.HUC = 77;
            CommonRegexParser.IUC = 78;
            CommonRegexParser.JUC = 79;
            CommonRegexParser.KUC = 80;
            CommonRegexParser.LUC = 81;
            CommonRegexParser.MUC = 82;
            CommonRegexParser.NUC = 83;
            CommonRegexParser.OUC = 84;
            CommonRegexParser.PUC = 85;
            CommonRegexParser.QUC = 86;
            CommonRegexParser.RUC = 87;
            CommonRegexParser.SUC = 88;
            CommonRegexParser.TUC = 89;
            CommonRegexParser.UUC = 90;
            CommonRegexParser.VUC = 91;
            CommonRegexParser.WUC = 92;
            CommonRegexParser.XUC = 93;
            CommonRegexParser.YUC = 94;
            CommonRegexParser.ZUC = 95;
            CommonRegexParser.D1 = 96;
            CommonRegexParser.D2 = 97;
            CommonRegexParser.D3 = 98;
            CommonRegexParser.D4 = 99;
            CommonRegexParser.D5 = 100;
            CommonRegexParser.D6 = 101;
            CommonRegexParser.D7 = 102;
            CommonRegexParser.D8 = 103;
            CommonRegexParser.D9 = 104;
            CommonRegexParser.D0 = 105;
            CommonRegexParser.OtherChar = 106;
            CommonRegexParser.RULE_parse = 0;
            CommonRegexParser.RULE_alternation = 1;
            CommonRegexParser.RULE_expr = 2;
            CommonRegexParser.RULE_element = 3;
            CommonRegexParser.RULE_quantifier = 4;
            CommonRegexParser.RULE_quantifier_type = 5;
            CommonRegexParser.RULE_character_class = 6;
            CommonRegexParser.RULE_capture = 7;
            CommonRegexParser.RULE_non_capture = 8;
            CommonRegexParser.RULE_option = 9;
            CommonRegexParser.RULE_option_flag = 10;
            CommonRegexParser.RULE_atom = 11;
            CommonRegexParser.RULE_cc_atom = 12;
            CommonRegexParser.RULE_shared_atom = 13;
            CommonRegexParser.RULE_literal = 14;
            CommonRegexParser.RULE_cc_literal = 15;
            CommonRegexParser.RULE_shared_literal = 16;
            CommonRegexParser.RULE_number = 17;
            CommonRegexParser.RULE_octal_char = 18;
            CommonRegexParser.RULE_octal_digit = 19;
            CommonRegexParser.RULE_digits = 20;
            CommonRegexParser.RULE_digit = 21;
            CommonRegexParser.RULE_name = 22;
            CommonRegexParser.RULE_alpha_nums = 23;
            CommonRegexParser.RULE_non_close_parens = 24;
            CommonRegexParser.RULE_non_close_paren = 25;
            CommonRegexParser.RULE_letter = 26;
            // tslint:disable:no-trailing-whitespace
            CommonRegexParser.ruleNames = [
            "parse", "alternation", "expr", "element", "quantifier", "quantifier_type",
            "character_class", "capture", "non_capture", "option", "option_flag",
            "atom", "cc_atom", "shared_atom", "literal", "cc_literal", "shared_literal",
            "number", "octal_char", "octal_digit", "digits", "digit", "name", "alpha_nums",
            "non_close_parens", "non_close_paren", "letter",
            ];
            CommonRegexParser._LITERAL_NAMES = [
            undefined, undefined, undefined, "'\\'", "'\\'", "'\\'", "'\\'", "'\\'",
            "'\\'", "'\\'", "'\\'", undefined, "'.'", "'\\'", "'\\'", undefined, undefined,
            "'\\'", "'\\'", "'\\'", "'\\'", "'['", "']'", "'^'", "'-'", "'?'", "'+'",
            "'*'", "'{'", "'}'", "','", "'$'", "'|'", "'('", "')'", "'<'", "'>'",
            "'''", "'_'", "':'", "'#'", "'='", "'!'", "'&'", "'a'", "'b'", "'c'",
            "'d'", "'e'", "'f'", "'g'", "'h'", "'i'", "'j'", "'k'", "'l'", "'m'",
            "'n'", "'o'", "'p'", "'q'", "'r'", "'s'", "'t'", "'u'", "'v'", "'w'",
            "'x'", "'y'", "'z'", "'A'", "'B'", "'C'", "'D'", "'E'", "'F'", "'G'",
            "'H'", "'I'", "'J'", "'K'", "'L'", "'M'", "'N'", "'O'", "'P'", "'Q'",
            "'R'", "'S'", "'T'", "'U'", "'V'", "'W'", "'X'", "'Y'", "'Z'", "'1'",
            "'2'", "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "'0'",
            ];
            CommonRegexParser._SYMBOLIC_NAMES = [
            undefined, "Quoted", "BlockQuoted", "BellChar", "ControlChar", "EscapeChar",
            "FormFeed", "NewLine", "CarriageReturn", "Tab", "Backslash", "HexChar",
            "Dot", "DecimalDigit", "NotDecimalDigit", "CharWithProperty", "CharWithoutProperty",
            "WhiteSpace", "NotWhiteSpace", "WordChar", "NotWordChar", "CharacterClassStart",
            "CharacterClassEnd", "Caret", "Hyphen", "QuestionMark", "Plus", "Star",
            "OpenBrace", "CloseBrace", "Comma", "EndOfSubject", "Pipe", "OpenParen",
            "CloseParen", "LessThan", "GreaterThan", "SingleQuote", "Underscore",
            "Colon", "Hash", "Equals", "Exclamation", "Ampersand", "ALC", "BLC", "CLC",
            "DLC", "ELC", "FLC", "GLC", "HLC", "ILC", "JLC", "KLC", "LLC", "MLC",
            "NLC", "OLC", "PLC", "QLC", "RLC", "SLC", "TLC", "ULC", "VLC", "WLC",
            "XLC", "YLC", "ZLC", "AUC", "BUC", "CUC", "DUC", "EUC", "FUC", "GUC",
            "HUC", "IUC", "JUC", "KUC", "LUC", "MUC", "NUC", "OUC", "PUC", "QUC",
            "RUC", "SUC", "TUC", "UUC", "VUC", "WUC", "XUC", "YUC", "ZUC", "D1", "D2",
            "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D0", "OtherChar",
            ];
            CommonRegexParser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(CommonRegexParser._LITERAL_NAMES, CommonRegexParser._SYMBOLIC_NAMES, []);
            CommonRegexParser._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03l\u010E\x04\x02" +
            "\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07" +
            "\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r\x04" +
            "\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12\x04" +
            "\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04" +
            "\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C\x03" +
            "\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x07\x03?\n\x03\f\x03\x0E" +
            "\x03B\v\x03\x03\x04\x07\x04E\n\x04\f\x04\x0E\x04H\v\x04\x03\x05\x03\x05" +
            "\x05\x05L\n\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06" +
            "\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06" +
            "\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06" +
            "f\n\x06\x03\x07\x03\x07\x03\x07\x05\x07k\n\x07\x03\b\x03\b\x03\b\x06\b" +
            "p\n\b\r\b\x0E\bq\x03\b\x03\b\x03\b\x03\b\x06\bx\n\b\r\b\x0E\by\x03\b\x03" +
            "\b\x05\b~\n\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
            "\t\x03\t\x03\t\x05\t\x8C\n\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v" +
            "\x03\v\x03\v\x06\v\x97\n\v\r\v\x0E\v\x98\x03\v\x03\v\x03\f\x03\f\x03\r" +
            "\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x05\r\xA8\n\r\x03\x0E" +
            "\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E\xB0\n\x0E\x03\x0F\x03" +
            "\x0F\x03\x10\x03\x10\x05\x10\xB6\n\x10\x03\x11\x03\x11\x03\x11\x03\x11" +
            "\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11\xC3\n" +
            "\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03" +
            "\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03" +
            "\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x05" +
            "\x12\xDF\n\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14" +
            "\x03\x14\x03\x14\x03\x14\x03\x14\x05\x14\xEC\n\x14\x03\x15\x03\x15\x03" +
            "\x16\x06\x16\xF1\n\x16\r\x16\x0E\x16\xF2\x03\x17\x03\x17\x03\x18\x03\x18" +
            "\x03\x19\x03\x19\x05\x19\xFB\n\x19\x03\x19\x03\x19\x03\x19\x07\x19\u0100" +
            "\n\x19\f\x19\x0E\x19\u0103\v\x19\x03\x1A\x06\x1A\u0106\n\x1A\r\x1A\x0E" +
            "\x1A\u0107\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x02\x02\x02\x1D\x02" +
            "\x02\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02" +
            "\x16\x02\x18\x02\x1A\x02\x1C\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02" +
            ",\x02.\x020\x022\x024\x026\x02\x02\t\x05\x0266::@@\x04\x02\x06\x06\x0F" +
            "\x16\x04\x02bdkk\x04\x02bhkk\x03\x02bk\x03\x02$$\x03\x02.a\x02\u0136\x02" +
            "8\x03\x02\x02\x02\x04;\x03\x02\x02\x02\x06F\x03\x02\x02\x02\bI\x03\x02" +
            "\x02\x02\ne\x03\x02\x02\x02\fj\x03\x02\x02\x02\x0E}\x03\x02\x02\x02\x10" +
            "\x8B\x03\x02\x02\x02\x12\x8D\x03\x02\x02\x02\x14\x93\x03\x02\x02\x02\x16" +
            "\x9C\x03\x02\x02\x02\x18\xA7\x03\x02\x02\x02\x1A\xAF\x03\x02\x02\x02\x1C" +
            "\xB1\x03\x02\x02\x02\x1E\xB5\x03\x02\x02\x02 \xC2\x03\x02\x02\x02\"\xDE" +
            "\x03\x02\x02\x02$\xE0\x03\x02\x02\x02&\xEB\x03\x02\x02\x02(\xED\x03\x02" +
            "\x02\x02*\xF0\x03\x02\x02\x02,\xF4\x03\x02\x02\x02.\xF6\x03\x02\x02\x02" +
            "0\xFA\x03\x02\x02\x022\u0105\x03\x02\x02\x024\u0109\x03\x02\x02\x026\u010B" +
            "\x03\x02\x02\x0289\x05\x04\x03\x029:\x07\x02\x02\x03:\x03\x03\x02\x02" +
            "\x02;@\x05\x06\x04\x02<=\x07\"\x02\x02=?\x05\x06\x04\x02><\x03\x02\x02" +
            "\x02?B\x03\x02\x02\x02@>\x03\x02\x02\x02@A\x03\x02\x02\x02A\x05\x03\x02" +
            "\x02\x02B@\x03\x02\x02\x02CE\x05\b\x05\x02DC\x03\x02\x02\x02EH\x03\x02" +
            "\x02\x02FD\x03\x02\x02\x02FG\x03\x02\x02\x02G\x07\x03\x02\x02\x02HF\x03" +
            "\x02\x02\x02IK\x05\x18\r\x02JL\x05\n\x06\x02KJ\x03\x02\x02\x02KL\x03\x02" +
            "\x02\x02L\t\x03\x02\x02\x02MN\x07\x1B\x02\x02Nf\x05\f\x07\x02OP\x07\x1C" +
            "\x02\x02Pf\x05\f\x07\x02QR\x07\x1D\x02\x02Rf\x05\f\x07\x02ST\x07\x1E\x02" +
            "\x02TU\x05$\x13\x02UV\x07\x1F\x02\x02VW\x05\f\x07\x02Wf\x03\x02\x02\x02" +
            "XY\x07\x1E\x02\x02YZ\x05$\x13\x02Z[\x07 \x02\x02[\\\x07\x1F\x02\x02\\" +
            "]\x05\f\x07\x02]f\x03\x02\x02\x02^_\x07\x1E\x02\x02_`\x05$\x13\x02`a\x07" +
            " \x02\x02ab\x05$\x13\x02bc\x07\x1F\x02\x02cd\x05\f\x07\x02df\x03\x02\x02" +
            "\x02eM\x03\x02\x02\x02eO\x03\x02\x02\x02eQ\x03\x02\x02\x02eS\x03\x02\x02" +
            "\x02eX\x03\x02\x02\x02e^\x03\x02\x02\x02f\v\x03\x02\x02\x02gk\x07\x1C" +
            "\x02\x02hk\x07\x1B\x02\x02ik\x03\x02\x02\x02jg\x03\x02\x02\x02jh\x03\x02" +
            "\x02\x02ji\x03\x02\x02\x02k\r\x03\x02\x02\x02lm\x07\x17\x02\x02mo\x07" +
            "\x19\x02\x02np\x05\x1A\x0E\x02on\x03\x02\x02\x02pq\x03\x02\x02\x02qo\x03" +
            "\x02\x02\x02qr\x03\x02\x02\x02rs\x03\x02\x02\x02st\x07\x18\x02\x02t~\x03" +
            "\x02\x02\x02uw\x07\x17\x02\x02vx\x05\x1A\x0E\x02wv\x03\x02\x02\x02xy\x03" +
            "\x02\x02\x02yw\x03\x02\x02\x02yz\x03\x02\x02\x02z{\x03\x02\x02\x02{|\x07" +
            "\x18\x02\x02|~\x03\x02\x02\x02}l\x03\x02\x02\x02}u\x03\x02\x02\x02~\x0F" +
            "\x03\x02\x02\x02\x7F\x80\x07#\x02\x02\x80\x81\x07\x1B\x02\x02\x81\x82" +
            "\x07%\x02\x02\x82\x83\x05.\x18\x02\x83\x84\x07&\x02\x02\x84\x85\x05\x04" +
            "\x03\x02\x85\x86\x07$\x02\x02\x86\x8C\x03\x02\x02\x02\x87\x88\x07#\x02" +
            "\x02\x88\x89\x05\x04\x03\x02\x89\x8A\x07$\x02\x02\x8A\x8C\x03\x02\x02" +
            "\x02\x8B\x7F\x03\x02\x02\x02\x8B\x87\x03\x02\x02\x02\x8C\x11\x03\x02\x02" +
            "\x02\x8D\x8E\x07#\x02\x02\x8E\x8F\x07\x1B\x02\x02\x8F\x90\x07)\x02\x02" +
            "\x90\x91\x05\x04\x03\x02\x91\x92\x07$\x02\x02\x92\x13\x03\x02\x02\x02" +
            "\x93\x94\x07#\x02\x02\x94\x96\x07\x1B\x02\x02\x95\x97\x05\x16\f\x02\x96" +
            "\x95\x03\x02\x02\x02\x97\x98\x03\x02\x02\x02\x98\x96\x03\x02\x02\x02\x98" +
            "\x99\x03\x02\x02\x02\x99\x9A\x03\x02\x02\x02\x9A\x9B\x07$\x02\x02\x9B" +
            "\x15\x03\x02\x02\x02\x9C\x9D\t\x02\x02\x02\x9D\x17\x03\x02\x02\x02\x9E" +
            "\xA8\x05\x1C\x0F\x02\x9F\xA8\x05\x1E\x10\x02\xA0\xA8\x05\x0E\b\x02\xA1" +
            "\xA8\x05\x10\t\x02\xA2\xA8\x05\x12\n\x02\xA3\xA8\x05\x14\v\x02\xA4\xA8" +
            "\x07\x0E\x02\x02\xA5\xA8\x07\x19\x02\x02\xA6\xA8\x07!\x02\x02\xA7\x9E" +
            "\x03\x02\x02\x02\xA7\x9F\x03\x02\x02\x02\xA7\xA0\x03\x02\x02\x02\xA7\xA1" +
            "\x03\x02\x02\x02\xA7\xA2\x03\x02\x02\x02\xA7\xA3\x03\x02\x02\x02\xA7\xA4" +
            "\x03\x02\x02\x02\xA7\xA5\x03\x02\x02\x02\xA7\xA6\x03\x02\x02\x02\xA8\x19" +
            "\x03\x02\x02\x02\xA9\xAA\x05 \x11\x02\xAA\xAB\x07\x1A\x02\x02\xAB\xAC" +
            "\x05 \x11\x02\xAC\xB0\x03\x02\x02\x02\xAD\xB0\x05\x1C\x0F\x02\xAE\xB0" +
            "\x05 \x11\x02\xAF\xA9\x03\x02\x02\x02\xAF\xAD\x03\x02\x02\x02\xAF\xAE" +
            "\x03\x02\x02\x02\xB0\x1B\x03\x02\x02\x02\xB1\xB2\t\x03\x02\x02\xB2\x1D" +
            "\x03\x02\x02\x02\xB3\xB6\x05\"\x12\x02\xB4\xB6\x07\x18\x02\x02\xB5\xB3" +
            "\x03\x02\x02\x02\xB5\xB4\x03\x02\x02\x02\xB6\x1F\x03\x02\x02\x02\xB7\xC3" +
            "\x05\"\x12\x02\xB8\xC3\x07\x0E\x02\x02\xB9\xC3\x07\x17\x02\x02\xBA\xC3" +
            "\x07\x19\x02\x02\xBB\xC3\x07\x1B\x02\x02\xBC\xC3\x07\x1C\x02\x02\xBD\xC3" +
            "\x07\x1D\x02\x02\xBE\xC3\x07!\x02\x02\xBF\xC3\x07\"\x02\x02\xC0\xC3\x07" +
            "#\x02\x02\xC1\xC3\x07$\x02\x02\xC2\xB7\x03\x02\x02\x02\xC2\xB8\x03\x02" +
            "\x02\x02\xC2\xB9\x03\x02\x02\x02\xC2\xBA\x03\x02\x02\x02\xC2\xBB\x03\x02" +
            "\x02\x02\xC2\xBC\x03\x02\x02\x02\xC2\xBD\x03\x02\x02\x02\xC2\xBE\x03\x02" +
            "\x02\x02\xC2\xBF\x03\x02\x02\x02\xC2\xC0\x03\x02\x02\x02\xC2\xC1\x03\x02" +
            "\x02\x02\xC3!\x03\x02\x02\x02\xC4\xDF\x05&\x14\x02\xC5\xDF\x056\x1C\x02" +
            "\xC6\xDF\x05,\x17\x02\xC7\xDF\x07\x05\x02\x02\xC8\xDF\x07\x07\x02\x02" +
            "\xC9\xDF\x07\b\x02\x02\xCA\xDF\x07\t\x02\x02\xCB\xDF\x07\n\x02\x02\xCC" +
            "\xDF\x07\v\x02\x02\xCD\xDF\x07\r\x02\x02\xCE\xDF\x07\x03\x02\x02\xCF\xDF" +
            "\x07\x04\x02\x02\xD0\xDF\x07\x1E\x02\x02\xD1\xDF\x07\x1F\x02\x02\xD2\xDF" +
            "\x07 \x02\x02\xD3\xDF\x07\x1A\x02\x02\xD4\xDF\x07%\x02\x02\xD5\xDF\x07" +
            "&\x02\x02\xD6\xDF\x07\'\x02\x02\xD7\xDF\x07(\x02\x02\xD8\xDF\x07)\x02" +
            "\x02\xD9\xDF\x07*\x02\x02\xDA\xDF\x07+\x02\x02\xDB\xDF\x07,\x02\x02\xDC" +
            "\xDF\x07-\x02\x02\xDD\xDF\x07l\x02\x02\xDE\xC4\x03\x02\x02\x02\xDE\xC5" +
            "\x03\x02\x02\x02\xDE\xC6\x03\x02\x02\x02\xDE\xC7\x03\x02\x02\x02\xDE\xC8" +
            "\x03\x02\x02\x02\xDE\xC9\x03\x02\x02\x02\xDE\xCA\x03\x02\x02\x02\xDE\xCB" +
            "\x03\x02\x02\x02\xDE\xCC\x03\x02\x02\x02\xDE\xCD\x03\x02\x02\x02\xDE\xCE" +
            "\x03\x02\x02\x02\xDE\xCF\x03\x02\x02\x02\xDE\xD0\x03\x02\x02\x02\xDE\xD1" +
            "\x03\x02\x02\x02\xDE\xD2\x03\x02\x02\x02\xDE\xD3\x03\x02\x02\x02\xDE\xD4" +
            "\x03\x02\x02\x02\xDE\xD5\x03\x02\x02\x02\xDE\xD6\x03\x02\x02\x02\xDE\xD7" +
            "\x03\x02\x02\x02\xDE\xD8\x03\x02\x02\x02\xDE\xD9\x03\x02\x02\x02\xDE\xDA" +
            "\x03\x02\x02\x02\xDE\xDB\x03\x02\x02\x02\xDE\xDC\x03\x02\x02\x02\xDE\xDD" +
            "\x03\x02\x02\x02\xDF#\x03\x02\x02\x02\xE0\xE1\x05*\x16\x02\xE1%\x03\x02" +
            "\x02\x02\xE2\xE3\x07\f\x02\x02\xE3\xE4\t\x04\x02\x02\xE4\xE5\x05(\x15" +
            "\x02\xE5\xE6\x05(\x15\x02\xE6\xEC\x03\x02\x02\x02\xE7\xE8\x07\f\x02\x02" +
            "\xE8\xE9\x05(\x15\x02\xE9\xEA\x05(\x15\x02\xEA\xEC\x03\x02\x02\x02\xEB" +
            "\xE2\x03\x02\x02\x02\xEB\xE7\x03\x02\x02\x02\xEC\'\x03\x02\x02\x02\xED" +
            "\xEE\t\x05\x02\x02\xEE)\x03\x02\x02\x02\xEF\xF1\x05,\x17\x02\xF0\xEF\x03" +
            "\x02\x02\x02\xF1\xF2\x03\x02\x02\x02\xF2\xF0\x03\x02\x02\x02\xF2\xF3\x03" +
            "\x02\x02\x02\xF3+\x03\x02\x02\x02\xF4\xF5\t\x06\x02\x02\xF5-\x03\x02\x02" +
            "\x02\xF6\xF7\x050\x19\x02\xF7/\x03\x02\x02\x02\xF8\xFB\x056\x1C\x02\xF9" +
            "\xFB\x07(\x02\x02\xFA\xF8\x03\x02\x02\x02\xFA\xF9\x03\x02\x02\x02\xFB" +
            "\u0101\x03\x02\x02\x02\xFC\u0100\x056\x1C\x02\xFD\u0100\x07(\x02\x02\xFE" +
            "\u0100\x05,\x17\x02\xFF\xFC\x03\x02\x02\x02\xFF\xFD\x03\x02\x02\x02\xFF" +
            "\xFE\x03\x02\x02\x02\u0100\u0103\x03\x02\x02\x02\u0101\xFF\x03\x02\x02" +
            "\x02\u0101\u0102\x03\x02\x02\x02\u01021\x03\x02\x02\x02\u0103\u0101\x03" +
            "\x02\x02\x02\u0104\u0106\x054\x1B\x02\u0105\u0104\x03\x02\x02\x02\u0106" +
            "\u0107\x03\x02\x02\x02\u0107\u0105\x03\x02\x02\x02\u0107\u0108\x03\x02" +
            "\x02\x02\u01083\x03\x02\x02\x02\u0109\u010A\n\x07\x02\x02\u010A5\x03\x02" +
            "\x02\x02\u010B\u010C\t\b\x02\x02\u010C7\x03\x02\x02\x02\x17@FKejqy}\x8B" +
            "\x98\xA7\xAF\xB5\xC2\xDE\xEB\xF2\xFA\xFF\u0101\u0107";
            exports.CommonRegexParser = CommonRegexParser;
            class ParseContext extends ParserRuleContext_1.ParserRuleContext {
                alternation()
                {
                    return this.getRuleContext(0, AlternationContext);
                }
                EOF()
                {
                    return this.getToken(CommonRegexParser.EOF, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_parse;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterParse) {
                        listener.enterParse(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitParse) {
                        listener.exitParse(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitParse) {
                        return visitor.visitParse(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.ParseContext = ParseContext;
            class AlternationContext extends ParserRuleContext_1.ParserRuleContext {
                expr(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(ExprContext);
                    }
                    else {
                        return this.getRuleContext(i, ExprContext);
                    }
                }
                Pipe(i)
                {
                    if (i === undefined) {
                        return this.getTokens(CommonRegexParser.Pipe);
                    }
                    else {
                        return this.getToken(CommonRegexParser.Pipe, i);
                    }
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_alternation;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterAlternation) {
                        listener.enterAlternation(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitAlternation) {
                        listener.exitAlternation(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitAlternation) {
                        return visitor.visitAlternation(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.AlternationContext = AlternationContext;
            class ExprContext extends ParserRuleContext_1.ParserRuleContext {
                element(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(ElementContext);
                    }
                    else {
                        return this.getRuleContext(i, ElementContext);
                    }
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_expr;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterExpr) {
                        listener.enterExpr(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitExpr) {
                        listener.exitExpr(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitExpr) {
                        return visitor.visitExpr(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.ExprContext = ExprContext;
            class ElementContext extends ParserRuleContext_1.ParserRuleContext {
                atom()
                {
                    return this.getRuleContext(0, AtomContext);
                }
                quantifier()
                {
                    return this.tryGetRuleContext(0, QuantifierContext);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_element;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterElement) {
                        listener.enterElement(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitElement) {
                        listener.exitElement(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitElement) {
                        return visitor.visitElement(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.ElementContext = ElementContext;
            class QuantifierContext extends ParserRuleContext_1.ParserRuleContext {
                QuestionMark()
                {
                    return this.tryGetToken(CommonRegexParser.QuestionMark, 0);
                }
                quantifier_type()
                {
                    return this.getRuleContext(0, Quantifier_typeContext);
                }
                Plus()
                {
                    return this.tryGetToken(CommonRegexParser.Plus, 0);
                }
                Star()
                {
                    return this.tryGetToken(CommonRegexParser.Star, 0);
                }
                OpenBrace()
                {
                    return this.tryGetToken(CommonRegexParser.OpenBrace, 0);
                }
                number(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(NumberContext);
                    }
                    else {
                        return this.getRuleContext(i, NumberContext);
                    }
                }
                CloseBrace()
                {
                    return this.tryGetToken(CommonRegexParser.CloseBrace, 0);
                }
                Comma()
                {
                    return this.tryGetToken(CommonRegexParser.Comma, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_quantifier;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterQuantifier) {
                        listener.enterQuantifier(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitQuantifier) {
                        listener.exitQuantifier(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitQuantifier) {
                        return visitor.visitQuantifier(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.QuantifierContext = QuantifierContext;
            class Quantifier_typeContext extends ParserRuleContext_1.ParserRuleContext {
                Plus()
                {
                    return this.tryGetToken(CommonRegexParser.Plus, 0);
                }
                QuestionMark()
                {
                    return this.tryGetToken(CommonRegexParser.QuestionMark, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_quantifier_type;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterQuantifier_type) {
                        listener.enterQuantifier_type(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitQuantifier_type) {
                        listener.exitQuantifier_type(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitQuantifier_type) {
                        return visitor.visitQuantifier_type(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.Quantifier_typeContext = Quantifier_typeContext;
            class Character_classContext extends ParserRuleContext_1.ParserRuleContext {
                CharacterClassStart()
                {
                    return this.getToken(CommonRegexParser.CharacterClassStart, 0);
                }
                Caret()
                {
                    return this.tryGetToken(CommonRegexParser.Caret, 0);
                }
                CharacterClassEnd()
                {
                    return this.getToken(CommonRegexParser.CharacterClassEnd, 0);
                }
                cc_atom(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(Cc_atomContext);
                    }
                    else {
                        return this.getRuleContext(i, Cc_atomContext);
                    }
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_character_class;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterCharacter_class) {
                        listener.enterCharacter_class(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitCharacter_class) {
                        listener.exitCharacter_class(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitCharacter_class) {
                        return visitor.visitCharacter_class(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.Character_classContext = Character_classContext;
            class CaptureContext extends ParserRuleContext_1.ParserRuleContext {
                OpenParen()
                {
                    return this.getToken(CommonRegexParser.OpenParen, 0);
                }
                QuestionMark()
                {
                    return this.tryGetToken(CommonRegexParser.QuestionMark, 0);
                }
                LessThan()
                {
                    return this.tryGetToken(CommonRegexParser.LessThan, 0);
                }
                name()
                {
                    return this.tryGetRuleContext(0, NameContext);
                }
                GreaterThan()
                {
                    return this.tryGetToken(CommonRegexParser.GreaterThan, 0);
                }
                alternation()
                {
                    return this.getRuleContext(0, AlternationContext);
                }
                CloseParen()
                {
                    return this.getToken(CommonRegexParser.CloseParen, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_capture;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterCapture) {
                        listener.enterCapture(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitCapture) {
                        listener.exitCapture(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitCapture) {
                        return visitor.visitCapture(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.CaptureContext = CaptureContext;
            class Non_captureContext extends ParserRuleContext_1.ParserRuleContext {
                OpenParen()
                {
                    return this.getToken(CommonRegexParser.OpenParen, 0);
                }
                QuestionMark()
                {
                    return this.getToken(CommonRegexParser.QuestionMark, 0);
                }
                Colon()
                {
                    return this.getToken(CommonRegexParser.Colon, 0);
                }
                alternation()
                {
                    return this.getRuleContext(0, AlternationContext);
                }
                CloseParen()
                {
                    return this.getToken(CommonRegexParser.CloseParen, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_non_capture;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterNon_capture) {
                        listener.enterNon_capture(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitNon_capture) {
                        listener.exitNon_capture(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitNon_capture) {
                        return visitor.visitNon_capture(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.Non_captureContext = Non_captureContext;
            class OptionContext extends ParserRuleContext_1.ParserRuleContext {
                OpenParen()
                {
                    return this.getToken(CommonRegexParser.OpenParen, 0);
                }
                QuestionMark()
                {
                    return this.getToken(CommonRegexParser.QuestionMark, 0);
                }
                CloseParen()
                {
                    return this.getToken(CommonRegexParser.CloseParen, 0);
                }
                option_flag(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(Option_flagContext);
                    }
                    else {
                        return this.getRuleContext(i, Option_flagContext);
                    }
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_option;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterOption) {
                        listener.enterOption(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitOption) {
                        listener.exitOption(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitOption) {
                        return visitor.visitOption(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.OptionContext = OptionContext;
            class Option_flagContext extends ParserRuleContext_1.ParserRuleContext {
                ILC()
                {
                    return this.tryGetToken(CommonRegexParser.ILC, 0);
                }
                MLC()
                {
                    return this.tryGetToken(CommonRegexParser.MLC, 0);
                }
                SLC()
                {
                    return this.tryGetToken(CommonRegexParser.SLC, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_option_flag;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterOption_flag) {
                        listener.enterOption_flag(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitOption_flag) {
                        listener.exitOption_flag(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitOption_flag) {
                        return visitor.visitOption_flag(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.Option_flagContext = Option_flagContext;
            class AtomContext extends ParserRuleContext_1.ParserRuleContext {
                shared_atom()
                {
                    return this.tryGetRuleContext(0, Shared_atomContext);
                }
                literal()
                {
                    return this.tryGetRuleContext(0, LiteralContext);
                }
                character_class()
                {
                    return this.tryGetRuleContext(0, Character_classContext);
                }
                capture()
                {
                    return this.tryGetRuleContext(0, CaptureContext);
                }
                non_capture()
                {
                    return this.tryGetRuleContext(0, Non_captureContext);
                }
                option()
                {
                    return this.tryGetRuleContext(0, OptionContext);
                }
                Dot()
                {
                    return this.tryGetToken(CommonRegexParser.Dot, 0);
                }
                Caret()
                {
                    return this.tryGetToken(CommonRegexParser.Caret, 0);
                }
                EndOfSubject()
                {
                    return this.tryGetToken(CommonRegexParser.EndOfSubject, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_atom;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterAtom) {
                        listener.enterAtom(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitAtom) {
                        listener.exitAtom(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitAtom) {
                        return visitor.visitAtom(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.AtomContext = AtomContext;
            class Cc_atomContext extends ParserRuleContext_1.ParserRuleContext {
                cc_literal(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(Cc_literalContext);
                    }
                    else {
                        return this.getRuleContext(i, Cc_literalContext);
                    }
                }
                Hyphen()
                {
                    return this.tryGetToken(CommonRegexParser.Hyphen, 0);
                }
                shared_atom()
                {
                    return this.tryGetRuleContext(0, Shared_atomContext);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_cc_atom;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterCc_atom) {
                        listener.enterCc_atom(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitCc_atom) {
                        listener.exitCc_atom(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitCc_atom) {
                        return visitor.visitCc_atom(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.Cc_atomContext = Cc_atomContext;
            class Shared_atomContext extends ParserRuleContext_1.ParserRuleContext {
                ControlChar()
                {
                    return this.tryGetToken(CommonRegexParser.ControlChar, 0);
                }
                DecimalDigit()
                {
                    return this.tryGetToken(CommonRegexParser.DecimalDigit, 0);
                }
                NotDecimalDigit()
                {
                    return this.tryGetToken(CommonRegexParser.NotDecimalDigit, 0);
                }
                CharWithProperty()
                {
                    return this.tryGetToken(CommonRegexParser.CharWithProperty, 0);
                }
                CharWithoutProperty()
                {
                    return this.tryGetToken(CommonRegexParser.CharWithoutProperty, 0);
                }
                WhiteSpace()
                {
                    return this.tryGetToken(CommonRegexParser.WhiteSpace, 0);
                }
                NotWhiteSpace()
                {
                    return this.tryGetToken(CommonRegexParser.NotWhiteSpace, 0);
                }
                WordChar()
                {
                    return this.tryGetToken(CommonRegexParser.WordChar, 0);
                }
                NotWordChar()
                {
                    return this.tryGetToken(CommonRegexParser.NotWordChar, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_shared_atom;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterShared_atom) {
                        listener.enterShared_atom(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitShared_atom) {
                        listener.exitShared_atom(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitShared_atom) {
                        return visitor.visitShared_atom(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.Shared_atomContext = Shared_atomContext;
            class LiteralContext extends ParserRuleContext_1.ParserRuleContext {
                shared_literal()
                {
                    return this.tryGetRuleContext(0, Shared_literalContext);
                }
                CharacterClassEnd()
                {
                    return this.tryGetToken(CommonRegexParser.CharacterClassEnd, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_literal;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterLiteral) {
                        listener.enterLiteral(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitLiteral) {
                        listener.exitLiteral(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitLiteral) {
                        return visitor.visitLiteral(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.LiteralContext = LiteralContext;
            class Cc_literalContext extends ParserRuleContext_1.ParserRuleContext {
                shared_literal()
                {
                    return this.tryGetRuleContext(0, Shared_literalContext);
                }
                Dot()
                {
                    return this.tryGetToken(CommonRegexParser.Dot, 0);
                }
                CharacterClassStart()
                {
                    return this.tryGetToken(CommonRegexParser.CharacterClassStart, 0);
                }
                Caret()
                {
                    return this.tryGetToken(CommonRegexParser.Caret, 0);
                }
                QuestionMark()
                {
                    return this.tryGetToken(CommonRegexParser.QuestionMark, 0);
                }
                Plus()
                {
                    return this.tryGetToken(CommonRegexParser.Plus, 0);
                }
                Star()
                {
                    return this.tryGetToken(CommonRegexParser.Star, 0);
                }
                EndOfSubject()
                {
                    return this.tryGetToken(CommonRegexParser.EndOfSubject, 0);
                }
                Pipe()
                {
                    return this.tryGetToken(CommonRegexParser.Pipe, 0);
                }
                OpenParen()
                {
                    return this.tryGetToken(CommonRegexParser.OpenParen, 0);
                }
                CloseParen()
                {
                    return this.tryGetToken(CommonRegexParser.CloseParen, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_cc_literal;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterCc_literal) {
                        listener.enterCc_literal(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitCc_literal) {
                        listener.exitCc_literal(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitCc_literal) {
                        return visitor.visitCc_literal(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.Cc_literalContext = Cc_literalContext;
            class Shared_literalContext extends ParserRuleContext_1.ParserRuleContext {
                octal_char()
                {
                    return this.tryGetRuleContext(0, Octal_charContext);
                }
                letter()
                {
                    return this.tryGetRuleContext(0, LetterContext);
                }
                digit()
                {
                    return this.tryGetRuleContext(0, DigitContext);
                }
                BellChar()
                {
                    return this.tryGetToken(CommonRegexParser.BellChar, 0);
                }
                EscapeChar()
                {
                    return this.tryGetToken(CommonRegexParser.EscapeChar, 0);
                }
                FormFeed()
                {
                    return this.tryGetToken(CommonRegexParser.FormFeed, 0);
                }
                NewLine()
                {
                    return this.tryGetToken(CommonRegexParser.NewLine, 0);
                }
                CarriageReturn()
                {
                    return this.tryGetToken(CommonRegexParser.CarriageReturn, 0);
                }
                Tab()
                {
                    return this.tryGetToken(CommonRegexParser.Tab, 0);
                }
                HexChar()
                {
                    return this.tryGetToken(CommonRegexParser.HexChar, 0);
                }
                Quoted()
                {
                    return this.tryGetToken(CommonRegexParser.Quoted, 0);
                }
                BlockQuoted()
                {
                    return this.tryGetToken(CommonRegexParser.BlockQuoted, 0);
                }
                OpenBrace()
                {
                    return this.tryGetToken(CommonRegexParser.OpenBrace, 0);
                }
                CloseBrace()
                {
                    return this.tryGetToken(CommonRegexParser.CloseBrace, 0);
                }
                Comma()
                {
                    return this.tryGetToken(CommonRegexParser.Comma, 0);
                }
                Hyphen()
                {
                    return this.tryGetToken(CommonRegexParser.Hyphen, 0);
                }
                LessThan()
                {
                    return this.tryGetToken(CommonRegexParser.LessThan, 0);
                }
                GreaterThan()
                {
                    return this.tryGetToken(CommonRegexParser.GreaterThan, 0);
                }
                SingleQuote()
                {
                    return this.tryGetToken(CommonRegexParser.SingleQuote, 0);
                }
                Underscore()
                {
                    return this.tryGetToken(CommonRegexParser.Underscore, 0);
                }
                Colon()
                {
                    return this.tryGetToken(CommonRegexParser.Colon, 0);
                }
                Hash()
                {
                    return this.tryGetToken(CommonRegexParser.Hash, 0);
                }
                Equals()
                {
                    return this.tryGetToken(CommonRegexParser.Equals, 0);
                }
                Exclamation()
                {
                    return this.tryGetToken(CommonRegexParser.Exclamation, 0);
                }
                Ampersand()
                {
                    return this.tryGetToken(CommonRegexParser.Ampersand, 0);
                }
                OtherChar()
                {
                    return this.tryGetToken(CommonRegexParser.OtherChar, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_shared_literal;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterShared_literal) {
                        listener.enterShared_literal(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitShared_literal) {
                        listener.exitShared_literal(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitShared_literal) {
                        return visitor.visitShared_literal(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.Shared_literalContext = Shared_literalContext;
            class NumberContext extends ParserRuleContext_1.ParserRuleContext {
                digits()
                {
                    return this.getRuleContext(0, DigitsContext);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_number;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterNumber) {
                        listener.enterNumber(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitNumber) {
                        listener.exitNumber(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitNumber) {
                        return visitor.visitNumber(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.NumberContext = NumberContext;
            class Octal_charContext extends ParserRuleContext_1.ParserRuleContext {
                Backslash()
                {
                    return this.tryGetToken(CommonRegexParser.Backslash, 0);
                }
                octal_digit(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(Octal_digitContext);
                    }
                    else {
                        return this.getRuleContext(i, Octal_digitContext);
                    }
                }
                D0()
                {
                    return this.tryGetToken(CommonRegexParser.D0, 0);
                }
                D1()
                {
                    return this.tryGetToken(CommonRegexParser.D1, 0);
                }
                D2()
                {
                    return this.tryGetToken(CommonRegexParser.D2, 0);
                }
                D3()
                {
                    return this.tryGetToken(CommonRegexParser.D3, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_octal_char;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterOctal_char) {
                        listener.enterOctal_char(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitOctal_char) {
                        listener.exitOctal_char(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitOctal_char) {
                        return visitor.visitOctal_char(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.Octal_charContext = Octal_charContext;
            class Octal_digitContext extends ParserRuleContext_1.ParserRuleContext {
                D0()
                {
                    return this.tryGetToken(CommonRegexParser.D0, 0);
                }
                D1()
                {
                    return this.tryGetToken(CommonRegexParser.D1, 0);
                }
                D2()
                {
                    return this.tryGetToken(CommonRegexParser.D2, 0);
                }
                D3()
                {
                    return this.tryGetToken(CommonRegexParser.D3, 0);
                }
                D4()
                {
                    return this.tryGetToken(CommonRegexParser.D4, 0);
                }
                D5()
                {
                    return this.tryGetToken(CommonRegexParser.D5, 0);
                }
                D6()
                {
                    return this.tryGetToken(CommonRegexParser.D6, 0);
                }
                D7()
                {
                    return this.tryGetToken(CommonRegexParser.D7, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_octal_digit;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterOctal_digit) {
                        listener.enterOctal_digit(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitOctal_digit) {
                        listener.exitOctal_digit(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitOctal_digit) {
                        return visitor.visitOctal_digit(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.Octal_digitContext = Octal_digitContext;
            class DigitsContext extends ParserRuleContext_1.ParserRuleContext {
                digit(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(DigitContext);
                    }
                    else {
                        return this.getRuleContext(i, DigitContext);
                    }
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_digits;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterDigits) {
                        listener.enterDigits(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitDigits) {
                        listener.exitDigits(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitDigits) {
                        return visitor.visitDigits(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.DigitsContext = DigitsContext;
            class DigitContext extends ParserRuleContext_1.ParserRuleContext {
                D0()
                {
                    return this.tryGetToken(CommonRegexParser.D0, 0);
                }
                D1()
                {
                    return this.tryGetToken(CommonRegexParser.D1, 0);
                }
                D2()
                {
                    return this.tryGetToken(CommonRegexParser.D2, 0);
                }
                D3()
                {
                    return this.tryGetToken(CommonRegexParser.D3, 0);
                }
                D4()
                {
                    return this.tryGetToken(CommonRegexParser.D4, 0);
                }
                D5()
                {
                    return this.tryGetToken(CommonRegexParser.D5, 0);
                }
                D6()
                {
                    return this.tryGetToken(CommonRegexParser.D6, 0);
                }
                D7()
                {
                    return this.tryGetToken(CommonRegexParser.D7, 0);
                }
                D8()
                {
                    return this.tryGetToken(CommonRegexParser.D8, 0);
                }
                D9()
                {
                    return this.tryGetToken(CommonRegexParser.D9, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_digit;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterDigit) {
                        listener.enterDigit(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitDigit) {
                        listener.exitDigit(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitDigit) {
                        return visitor.visitDigit(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.DigitContext = DigitContext;
            class NameContext extends ParserRuleContext_1.ParserRuleContext {
                alpha_nums()
                {
                    return this.getRuleContext(0, Alpha_numsContext);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_name;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterName) {
                        listener.enterName(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitName) {
                        listener.exitName(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitName) {
                        return visitor.visitName(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.NameContext = NameContext;
            class Alpha_numsContext extends ParserRuleContext_1.ParserRuleContext {
                letter(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(LetterContext);
                    }
                    else {
                        return this.getRuleContext(i, LetterContext);
                    }
                }
                Underscore(i)
                {
                    if (i === undefined) {
                        return this.getTokens(CommonRegexParser.Underscore);
                    }
                    else {
                        return this.getToken(CommonRegexParser.Underscore, i);
                    }
                }
                digit(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(DigitContext);
                    }
                    else {
                        return this.getRuleContext(i, DigitContext);
                    }
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_alpha_nums;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterAlpha_nums) {
                        listener.enterAlpha_nums(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitAlpha_nums) {
                        listener.exitAlpha_nums(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitAlpha_nums) {
                        return visitor.visitAlpha_nums(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.Alpha_numsContext = Alpha_numsContext;
            class Non_close_parensContext extends ParserRuleContext_1.ParserRuleContext {
                non_close_paren(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(Non_close_parenContext);
                    }
                    else {
                        return this.getRuleContext(i, Non_close_parenContext);
                    }
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_non_close_parens;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterNon_close_parens) {
                        listener.enterNon_close_parens(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitNon_close_parens) {
                        listener.exitNon_close_parens(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitNon_close_parens) {
                        return visitor.visitNon_close_parens(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.Non_close_parensContext = Non_close_parensContext;
            class Non_close_parenContext extends ParserRuleContext_1.ParserRuleContext {
                CloseParen()
                {
                    return this.getToken(CommonRegexParser.CloseParen, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_non_close_paren;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterNon_close_paren) {
                        listener.enterNon_close_paren(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitNon_close_paren) {
                        listener.exitNon_close_paren(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitNon_close_paren) {
                        return visitor.visitNon_close_paren(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.Non_close_parenContext = Non_close_parenContext;
            class LetterContext extends ParserRuleContext_1.ParserRuleContext {
                ALC()
                {
                    return this.tryGetToken(CommonRegexParser.ALC, 0);
                }
                BLC()
                {
                    return this.tryGetToken(CommonRegexParser.BLC, 0);
                }
                CLC()
                {
                    return this.tryGetToken(CommonRegexParser.CLC, 0);
                }
                DLC()
                {
                    return this.tryGetToken(CommonRegexParser.DLC, 0);
                }
                ELC()
                {
                    return this.tryGetToken(CommonRegexParser.ELC, 0);
                }
                FLC()
                {
                    return this.tryGetToken(CommonRegexParser.FLC, 0);
                }
                GLC()
                {
                    return this.tryGetToken(CommonRegexParser.GLC, 0);
                }
                HLC()
                {
                    return this.tryGetToken(CommonRegexParser.HLC, 0);
                }
                ILC()
                {
                    return this.tryGetToken(CommonRegexParser.ILC, 0);
                }
                JLC()
                {
                    return this.tryGetToken(CommonRegexParser.JLC, 0);
                }
                KLC()
                {
                    return this.tryGetToken(CommonRegexParser.KLC, 0);
                }
                LLC()
                {
                    return this.tryGetToken(CommonRegexParser.LLC, 0);
                }
                MLC()
                {
                    return this.tryGetToken(CommonRegexParser.MLC, 0);
                }
                NLC()
                {
                    return this.tryGetToken(CommonRegexParser.NLC, 0);
                }
                OLC()
                {
                    return this.tryGetToken(CommonRegexParser.OLC, 0);
                }
                PLC()
                {
                    return this.tryGetToken(CommonRegexParser.PLC, 0);
                }
                QLC()
                {
                    return this.tryGetToken(CommonRegexParser.QLC, 0);
                }
                RLC()
                {
                    return this.tryGetToken(CommonRegexParser.RLC, 0);
                }
                SLC()
                {
                    return this.tryGetToken(CommonRegexParser.SLC, 0);
                }
                TLC()
                {
                    return this.tryGetToken(CommonRegexParser.TLC, 0);
                }
                ULC()
                {
                    return this.tryGetToken(CommonRegexParser.ULC, 0);
                }
                VLC()
                {
                    return this.tryGetToken(CommonRegexParser.VLC, 0);
                }
                WLC()
                {
                    return this.tryGetToken(CommonRegexParser.WLC, 0);
                }
                XLC()
                {
                    return this.tryGetToken(CommonRegexParser.XLC, 0);
                }
                YLC()
                {
                    return this.tryGetToken(CommonRegexParser.YLC, 0);
                }
                ZLC()
                {
                    return this.tryGetToken(CommonRegexParser.ZLC, 0);
                }
                AUC()
                {
                    return this.tryGetToken(CommonRegexParser.AUC, 0);
                }
                BUC()
                {
                    return this.tryGetToken(CommonRegexParser.BUC, 0);
                }
                CUC()
                {
                    return this.tryGetToken(CommonRegexParser.CUC, 0);
                }
                DUC()
                {
                    return this.tryGetToken(CommonRegexParser.DUC, 0);
                }
                EUC()
                {
                    return this.tryGetToken(CommonRegexParser.EUC, 0);
                }
                FUC()
                {
                    return this.tryGetToken(CommonRegexParser.FUC, 0);
                }
                GUC()
                {
                    return this.tryGetToken(CommonRegexParser.GUC, 0);
                }
                HUC()
                {
                    return this.tryGetToken(CommonRegexParser.HUC, 0);
                }
                IUC()
                {
                    return this.tryGetToken(CommonRegexParser.IUC, 0);
                }
                JUC()
                {
                    return this.tryGetToken(CommonRegexParser.JUC, 0);
                }
                KUC()
                {
                    return this.tryGetToken(CommonRegexParser.KUC, 0);
                }
                LUC()
                {
                    return this.tryGetToken(CommonRegexParser.LUC, 0);
                }
                MUC()
                {
                    return this.tryGetToken(CommonRegexParser.MUC, 0);
                }
                NUC()
                {
                    return this.tryGetToken(CommonRegexParser.NUC, 0);
                }
                OUC()
                {
                    return this.tryGetToken(CommonRegexParser.OUC, 0);
                }
                PUC()
                {
                    return this.tryGetToken(CommonRegexParser.PUC, 0);
                }
                QUC()
                {
                    return this.tryGetToken(CommonRegexParser.QUC, 0);
                }
                RUC()
                {
                    return this.tryGetToken(CommonRegexParser.RUC, 0);
                }
                SUC()
                {
                    return this.tryGetToken(CommonRegexParser.SUC, 0);
                }
                TUC()
                {
                    return this.tryGetToken(CommonRegexParser.TUC, 0);
                }
                UUC()
                {
                    return this.tryGetToken(CommonRegexParser.UUC, 0);
                }
                VUC()
                {
                    return this.tryGetToken(CommonRegexParser.VUC, 0);
                }
                WUC()
                {
                    return this.tryGetToken(CommonRegexParser.WUC, 0);
                }
                XUC()
                {
                    return this.tryGetToken(CommonRegexParser.XUC, 0);
                }
                YUC()
                {
                    return this.tryGetToken(CommonRegexParser.YUC, 0);
                }
                ZUC()
                {
                    return this.tryGetToken(CommonRegexParser.ZUC, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return CommonRegexParser.RULE_letter;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterLetter) {
                        listener.enterLetter(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitLetter) {
                        listener.exitLetter(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitLetter) {
                        return visitor.visitLetter(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.LetterContext = LetterContext;

        }, {
            "antlr4ts/NoViableAltException": 236,
            "antlr4ts/Parser": 237,
            "antlr4ts/ParserRuleContext": 239,
            "antlr4ts/RecognitionException": 242,
            "antlr4ts/Token": 248,
            "antlr4ts/VocabularyImpl": 250,
            "antlr4ts/atn/ATNDeserializer": 255,
            "antlr4ts/atn/ParserATNSimulator": 292,
            "antlr4ts/misc/Utils": 337
        }],
        190: [function(require, module, exports) {
            "use strict";
            function __export(m) {
                for (var p in m)
                    if (!exports.hasOwnProperty(p))
                        exports[p] = m[p];
            }
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            __export(require("./CommonRegexLexer"));
            __export(require("./CommonRegexParser"));

        }, {
            "./CommonRegexLexer": 188,
            "./CommonRegexParser": 189
        }],
        191: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * locale info of decimal, thousands, grouping and currency.
             */
            exports.localeInfo = {
                'ar-MA': {
                    currency: ['\u062f.\u0645. ', ''],
                    decimal: ',',
                    thousands: '.',
                    grouping: [3],
                },
                'en-IN': {
                    currency: ['\u20b9', ''],
                    decimal: '.',
                    thousands: ',',
                    grouping: [3, 2, 2, 2, 2, 2, 2, 2, 2, 2],
                },
                'ar-BH': {
                    currency: ['', ' \u062f.\u0628.'],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'ar-PS': {
                    currency: ['\u20aa ', ''],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'en-IE': {
                    currency: ['\u20ac', ''],
                    decimal: '.',
                    thousands: ',',
                    grouping: [3],
                },
                'it-IT': {
                    currency: ['\u20ac', ''],
                    decimal: ',',
                    thousands: '.',
                    grouping: [3],
                },
                'ar-EG': {
                    currency: ['', ' \u062c.\u0645.'],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'ar-IQ': {
                    currency: ['', ' \u062f.\u0639.'],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'ar-EH': {
                    currency: ['\u062f.\u0645. ', ''],
                    decimal: '.',
                    thousands: ',',
                    grouping: [3],
                },
                'ar-AE': {
                    currency: ['', ' \u062f.\u0625.'],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'ar-MR': {
                    currency: ['', ' \u0623.\u0645.'],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'uk-UA': {
                    currency: ['', '\u00a0\u20b4.'],
                    decimal: ',',
                    thousands: '\u00a0',
                    grouping: [3],
                },
                'ca-ES': {
                    currency: ['', '\u00a0\u20ac'],
                    decimal: ',',
                    thousands: '.',
                    grouping: [3],
                },
                'sv-SE': {
                    currency: ['', ' kr'],
                    decimal: ',',
                    thousands: '\u00a0',
                    grouping: [3],
                },
                'ja-JP': {
                    currency: ['', '\u5186'],
                    decimal: '.',
                    thousands: ',',
                    grouping: [3],
                },
                'es-ES': {
                    currency: ['', '\u00a0\u20ac'],
                    decimal: ',',
                    thousands: '.',
                    grouping: [3],
                },
                'fi-FI': {
                    currency: ['', '\u00a0\u20ac'],
                    decimal: ',',
                    thousands: '\u00a0',
                    grouping: [3],
                },
                'ar-DZ': {
                    currency: ['\u062f.\u062c. ', ''],
                    decimal: ',',
                    thousands: '.',
                    grouping: [3],
                },
                'en-GB': {
                    currency: ['\u00a3', ''],
                    decimal: '.',
                    thousands: ',',
                    grouping: [3],
                },
                'cs-CZ': {
                    currency: ['', '\u00a0K\u010d'],
                    decimal: ',',
                    thousands: '\u00a0',
                    grouping: [3],
                },
                'ar-TD': {
                    currency: ['\u200fFCFA ', ''],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'de-CH': {
                    currency: ['', '\u00a0CHF'],
                    decimal: ',',
                    thousands: "'",
                    grouping: [3],
                },
                'nl-NL': {
                    currency: ['\u20ac\u00a0', ''],
                    decimal: ',',
                    thousands: '.',
                    grouping: [3],
                },
                'es-BO': {
                    currency: ['Bs\u00a0', ''],
                    decimal: ',',
                    percent: '\u202f%',
                    thousands: '.',
                    grouping: [3],
                },
                'ar-SY': {
                    currency: ['', ' \u0644.\u0633.'],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'ar-JO': {
                    currency: ['', ' \u062f.\u0623.'],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'en-CA': {
                    currency: ['$', ''],
                    decimal: '.',
                    thousands: ',',
                    grouping: [3],
                },
                'ar-ER': {
                    currency: ['Nfk ', ''],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'ar-LB': {
                    currency: ['', ' \u0644.\u0644.'],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'fr-CA': {
                    currency: ['', '$'],
                    decimal: ',',
                    thousands: '\u00a0',
                    grouping: [3],
                },
                'ar-TN': {
                    currency: ['\u062f.\u062a. ', ''],
                    decimal: ',',
                    thousands: '.',
                    grouping: [3],
                },
                'ar-YE': {
                    currency: ['', ' \u0631.\u0649.'],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'ru-RU': {
                    currency: ['', '\u00a0\u0440\u0443\u0431.'],
                    decimal: ',',
                    thousands: '\u00a0',
                    grouping: [3],
                },
                'en-US': {
                    currency: ['$', ''],
                    decimal: '.',
                    thousands: ',',
                    grouping: [3],
                },
                'ar-SS': {
                    currency: ['\u00a3 ', ''],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'ar-SO': {
                    currency: ['\u200fS ', ''],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'hu-HU': {
                    currency: ['', '\u00a0Ft'],
                    decimal: ',',
                    thousands: '\u00a0',
                    grouping: [3],
                },
                'pt-BR': {
                    currency: ['R$', ''],
                    decimal: ',',
                    thousands: '.',
                    grouping: [3],
                },
                'ar-DJ': {
                    currency: ['\u200fFdj ', ''],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'ar-SD': {
                    currency: ['', ' \u062c.\u0633.'],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'ar-001': {
                    currency: ['', ''],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'ar-LY': {
                    currency: ['\u062f.\u0644. ', ''],
                    decimal: ',',
                    thousands: '.',
                    grouping: [3],
                },
                'ar-SA': {
                    currency: ['', ' \u0631.\u0633.'],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'ar-KW': {
                    currency: ['', ' \u062f.\u0643.'],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'pl-PL': {
                    currency: ['', 'z\u0142'],
                    decimal: ',',
                    thousands: '.',
                    grouping: [3],
                },
                'ar-QA': {
                    currency: ['', ' \u0631.\u0642.'],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'mk-MK': {
                    currency: ['', '\u00a0\u0434\u0435\u043d.'],
                    decimal: ',',
                    thousands: '.',
                    grouping: [3],
                },
                'ko-KR': {
                    currency: ['\u20a9', ''],
                    decimal: '.',
                    thousands: ',',
                    grouping: [3],
                },
                'es-MX': {
                    currency: ['$', ''],
                    decimal: '.',
                    thousands: ',',
                    grouping: [3],
                },
                'ar-IL': {
                    currency: ['\u20aa ', ''],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'zh-CN': {
                    currency: ['\u00a5', ''],
                    decimal: '.',
                    thousands: ',',
                    grouping: [3],
                },
                'de-DE': {
                    currency: ['', '\u00a0\u20ac'],
                    decimal: ',',
                    thousands: '.',
                    grouping: [3],
                },
                'ar-OM': {
                    currency: ['', ' \u0631.\u0639.'],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'fr-FR': {
                    currency: ['', '\u00a0\u20ac'],
                    decimal: ',',
                    percent: '\u202f%',
                    thousands: '\u00a0',
                    grouping: [3],
                },
                'ar-KM': {
                    currency: ['', ' \u0641.\u062c.\u0642.'],
                    decimal: '\u066b',
                    thousands: '\u066c',
                    numerals: ['\u0660', '\u0661', '\u0662', '\u0663', '\u0664', '\u0665', '\u0666', '\u0667', '\u0668', '\u0669'],
                    grouping: [3],
                },
                'he-IL': {
                    currency: ['\u20aa', ''],
                    decimal: '.',
                    thousands: ',',
                    grouping: [3],
                },
            };

        }, {}],
        192: [function(require, module, exports) {
            "use strict";
            function __export(m) {
                for (var p in m)
                    if (!exports.hasOwnProperty(p))
                        exports[p] = m[p];
            }
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            __export(require("./simpleObjectMemory"));
            __export(require("./stackedMemory"));

        }, {
            "./simpleObjectMemory": 193,
            "./stackedMemory": 194
        }],
        193: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const extensions_1 = require("../extensions");
            const functionUtils_internal_1 = require("../functionUtils.internal");
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            /**
             * Simple implement of MemoryInterface
             */
            class SimpleObjectMemory {
                /**
                     * Initializes a new instance of the [SimpleObjectMemory](xref:adaptive-expressions.SimpleObjectMemory) class.
                     * This wraps a simple object as [MemoryInterface](xref:adaptive-expressions.MemoryInterface).
                     * @param memory The object to wrap.
                     */
                constructor(memory)
                {
                    this.memory = undefined;
                    this.memory = memory;
                }
                /**
                     * Transfer an common object to simple memory.
                     * @param obj  Common object.
                     * @returns Simple memory instance.
                     */
                static wrap(obj)
                {
                    if (extensions_1.Extensions.isMemoryInterface(obj)) {
                        return obj;
                    }
                    return new SimpleObjectMemory(obj);
                }
                /**
                     * Gets the value from a given path.
                     * @param path Given path.
                     * @returns The value in the given path or undefined.
                     */
                getValue(path)
                {
                    if (this.memory === undefined || path.length === 0) {
                        return undefined;
                    }
                    const parts = path
                    .split(/[.\[\]]+/)
                    .filter((u) => u !== undefined && u !== '')
                    .map((u) => {
                        if ((u.startsWith('"') && u.endsWith('"')) || (u.startsWith("'") && u.endsWith("'"))) {
                            return u.substr(1, u.length - 2);
                        }
                        else {
                            return u;
                        }
                    });
                    let value;
                    let curScope = this.memory;
                    for (const part of parts) {
                        let error;
                        const idx = parseInt(part);
                        if (!isNaN(idx) && Array.isArray(curScope)) {
                            ({value, error} = functionUtils_internal_1.InternalFunctionUtils.accessIndex(curScope, idx));
                        }
                        else {
                            ({value, error} = functionUtils_internal_1.InternalFunctionUtils.accessProperty(curScope, part));
                        }
                        if (error) {
                            return undefined;
                        }
                        curScope = value;
                    }
                    return value;
                }
                /**
                     * In this simple object scope, we don't allow you to set a path in which some parts in middle don't exist
                     * for example
                     * if you set dialog.a.b = x, but dialog.a don't exist, this will result in an error
                     * because we can't and shouldn't smart create structure in the middle
                     * you can implement a customzied Scope that support such behavior
                     */
                setValue(path, input)
                {
                    if (this.memory === undefined) {
                        return;
                    }
                    const parts = path
                    .split(/[.\[\]]+/)
                    .filter((u) => u !== undefined && u !== '')
                    .map((u) => {
                        if ((u.startsWith('"') && u.endsWith('"')) || (u.startsWith("'") && u.endsWith("'"))) {
                            return u.substr(1, u.length - 2);
                        }
                        else {
                            return u;
                        }
                    });
                    let curScope = this.memory;
                    let curPath = '';
                    let error = undefined;
                    // find the 2nd last value, ie, the container
                    for (let i = 0; i < parts.length - 1; i++) {
                        const idx = parseInt(parts[i]);
                        if (!isNaN(idx) && Array.isArray(curScope)) {
                            curPath = `[${parts[i]}]`;
                            ({value: curScope, error} = functionUtils_internal_1.InternalFunctionUtils.accessIndex(curScope, idx));
                        }
                        else {
                            curPath = `.${parts[i]}`;
                            ({value: curScope, error} = functionUtils_internal_1.InternalFunctionUtils.accessProperty(curScope, parts[i]));
                        }
                        if (error) {
                            return;
                        }
                        if (curScope === undefined) {
                            curPath = curPath.replace(/(^\.*)/g, '');
                            return;
                        }
                    }
                    // set the last value
                    const idx = parseInt(parts[parts.length - 1]);
                    if (!isNaN(idx)) {
                        if (Array.isArray(curScope)) {
                            if (idx > curScope.length) {
                                error = `${idx} index out of range`;
                            }
                            else if (idx === curScope.length) {
                                curScope.push(input);
                            }
                            else {
                                curScope[idx] = input;
                            }
                        }
                        else {
                            error = `set value for an index to a non-list object`;
                        }
                        if (error) {
                            return;
                        }
                    }
                    else {
                        error = this.setProperty(curScope, parts[parts.length - 1], input).error;
                        if (error) {
                            return;
                        }
                    }
                    return;
                }
                /**
                     * Returns the version info of [SimpleObjectMemory](xref:adaptive-expressions.SimpleObjectMemory).
                     * @returns A string value representing the version info.
                     */
                version()
                {
                    return this.toString();
                }
                /**
                     * Returns a string that represents the current [SimpleObjectMemory](xref:adaptive-expressions.SimpleObjectMemory) object.
                     * @returns A string value representing the current [SimpleObjectMemory](xref:adaptive-expressions.SimpleObjectMemory) object.
                     */
                toString()
                {
                    return JSON.stringify(this.memory, this.getCircularReplacer());
                }
                /**
                     * @private
                     */
                getCircularReplacer()
                {
                    const seen = new WeakSet();
                    return (_key, value) => {
                        if (typeof value === 'object' && value) {
                            if (seen.has(value)) {
                                return;
                            }
                            seen.add(value);
                        }
                        return value;
                    };
                }
                /**
                     * @private
                     */
                setProperty(instance, property, value)
                {
                    const result = value;
                    if (instance instanceof Map) {
                        instance.set(property, value);
                    }
                    else {
                        instance[property] = value;
                    }
                    return {
                        value: result,
                        error: undefined
                    };
                }
            }
            exports.SimpleObjectMemory = SimpleObjectMemory;

        }, {
            "../extensions": 184,
            "../functionUtils.internal": 186
        }],
        194: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            /**
             * Stack implements of MemoryInterface.
             * Memory variables have a hierarchical relationship.
             */
            class StackedMemory extends Array {
                /**
                     * Wraps an object that implements [MemoryInterface](xref:adaptive-expressions.MemoryInterface) into a [StackedMemory](xref:adaptive-expressions.StackedMemory) object.
                     * @param memory An object that implements [MemoryInterface](xref:adaptive-expressions.MemoryInterface).
                     * @returns A [StackedMemory](xref:adaptive-expressions.StackedMemory) object.
                     */
                static wrap(memory)
                {
                    if (memory instanceof StackedMemory) {
                        return memory;
                    }
                    else {
                        const stackedMemory = new StackedMemory();
                        stackedMemory.push(memory);
                        return stackedMemory;
                    }
                }
                /**
                     * Gets the value from a given path.
                     * @param path Given path.
                     * @returns The value from the given path if found, otherwise, undefined.
                     */
                getValue(path)
                {
                    if (this.length === 0) {
                        return undefined;
                    }
                    else {
                        for (const memory of Array.from(this).reverse()) {
                            if (memory.getValue(path) !== undefined) {
                                return memory.getValue(path);
                            }
                        }
                        return undefined;
                    }
                }
                /**
                     * Sets value to a given path.
                     * @param _path Memory path.
                     * @param _value Value to set.
                     */
                setValue(_path, _value)
                {
                    throw new Error(`Can't set value to ${_path}, stacked memory is read-only`);
                }
                /**
                     * Gets the version of the current [StackedMemory](xref:adaptive-expressions.StackedMemory).
                     * @returns A string value representing the version.
                     */
                version()
                {
                    return '0';
                }
            }
            exports.StackedMemory = StackedMemory;

        }, {}],
        195: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * Options used to define evaluation behaviors.
             */
            class Options {
                /**
                     * Initializes a new instance of the [Options](xref:adaptive-expressions.Options) class.
                     * @param opt Optional. An [Options](xref:adaptive-expressions.Options) instance.
                     */
                constructor(opt)
                {
                    this.nullSubstitution = opt ? opt.nullSubstitution : undefined;
                    this.locale = opt ? opt.locale : undefined;
                }
            }
            exports.Options = Options;

        }, {}],
        196: [function(require, module, exports) {
            "use strict";
            var __importStar = (this && this.__importStar) || function(mod) {
                if (mod && mod.__esModule)
                    return mod;
                var result = {};
                if (mod != null)
                    for (var k in mod)
                        if (Object.hasOwnProperty.call(mod, k))
                            result[k] = mod[k];
                result["default"] = mod;
                return result;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            const antlr4ts_1 = require("antlr4ts");
            const tree_1 = require("antlr4ts/tree");
            const constant_1 = require("../constant");
            const expression_1 = require("../expression");
            const expressionType_1 = require("../expressionType");
            const generated_1 = require("./generated");
            const ep = __importStar(require("./generated/ExpressionAntlrParser"));
            const parseErrorListener_1 = require("./parseErrorListener");
            /**
             * Parser to turn strings into Expression
             */
            class ExpressionParser {
                /**
                     * Initializes a new instance of the [ExpressionParser](xref:adaptive-expressions.ExpressionParser) class.
                     * @param lookup [EvaluatorLookup](xref:adaptive-expressions.EvaluatorLookup) for information from type string.
                     */
                constructor(lookup)
                {
                    this.ExpressionTransformer = class  extends tree_1.AbstractParseTreeVisitor{
                        constructor(lookup)
                        {
                            super();
                            this.escapeRegex = new RegExp(/\\[^\r\n]?/g);
                            this._lookupFunction = undefined;
                            this.transform = (context) => this.visit(context);
                            this.visitParenthesisExp = (context) => this.visit(context.expression());
                            this.defaultResult = () => new constant_1.Constant('');
                            this.makeExpression = (functionType, ...children) => {
                                if (!this._lookupFunction(functionType)) {
                                    throw new Error(`${functionType} does not have an evaluator, it's not a built-in function or a custom function.`);
                                }
                                return expression_1.Expression.makeExpression(functionType, this._lookupFunction(functionType), ...children);
                            };
                            this._lookupFunction = lookup;
                        }
                        visitUnaryOpExp(context)
                        {
                            const unaryOperationName = context.getChild(0).text;
                            const operand = this.visit(context.expression());
                            if (unaryOperationName === expressionType_1.ExpressionType.Subtract || unaryOperationName === expressionType_1.ExpressionType.Add) {
                                return this.makeExpression(unaryOperationName, new constant_1.Constant(0), operand);
                            }
                            return this.makeExpression(unaryOperationName, operand);
                        }
                        visitBinaryOpExp(context)
                        {
                            const binaryOperationName = context.getChild(1).text;
                            const left = this.visit(context.expression(0));
                            const right = this.visit(context.expression(1));
                            return this.makeExpression(binaryOperationName, left, right);
                        }
                        visitTripleOpExp(context)
                        {
                            const conditionalExpression = this.visit(context.expression(0));
                            const left = this.visit(context.expression(1));
                            const right = this.visit(context.expression(2));
                            return this.makeExpression(expressionType_1.ExpressionType.If, conditionalExpression, left, right);
                        }
                        visitFuncInvokeExp(context)
                        {
                            const parameters = this.processArgsList(context.argsList());
                            // Remove the check to check primaryExpression is just an IDENTIFIER to support "." in template name
                            let functionName = context.primaryExpression().text;
                            if (context.NON() !== undefined) {
                                functionName += context.NON().text;
                            }
                            return this.makeExpression(functionName, ...parameters);
                        }
                        visitIdAtom(context)
                        {
                            let result;
                            const symbol = context.text;
                            if (symbol === 'false') {
                                result = new constant_1.Constant(false);
                            }
                            else if (symbol === 'true') {
                                result = new constant_1.Constant(true);
                            }
                            else if (symbol === 'null') {
                                result = new constant_1.Constant(null);
                            }
                            else if (symbol === 'undefined') {
                                result = new constant_1.Constant(undefined);
                            }
                            else {
                                result = this.makeExpression(expressionType_1.ExpressionType.Accessor, new constant_1.Constant(symbol));
                            }
                            return result;
                        }
                        visitIndexAccessExp(context)
                        {
                            const property = this.visit(context.expression());
                            const instance = this.visit(context.primaryExpression());
                            return this.makeExpression(expressionType_1.ExpressionType.Element, instance, property);
                        }
                        visitMemberAccessExp(context)
                        {
                            const property = context.IDENTIFIER().text;
                            const instance = this.visit(context.primaryExpression());
                            return this.makeExpression(expressionType_1.ExpressionType.Accessor, new constant_1.Constant(property), instance);
                        }
                        visitNumericAtom(context)
                        {
                            const numberValue = parseFloat(context.text);
                            if (typeof numberValue === 'number' && !Number.isNaN(numberValue)) {
                                return new constant_1.Constant(numberValue);
                            }
                            throw new Error(`${context.text} is not a number.`);
                        }
                        visitArrayCreationExp(context)
                        {
                            const parameters = this.processArgsList(context.argsList());
                            return this.makeExpression(expressionType_1.ExpressionType.CreateArray, ...parameters);
                        }
                        visitStringAtom(context)
                        {
                            let text = context.text;
                            if (text.startsWith("'") && text.endsWith("'")) {
                                text = text.substr(1, text.length - 2).replace(/\\'/g, "'");
                            }
                            else if (text.startsWith('"') && text.endsWith('"')) {
                                // start with ""
                                text = text.substr(1, text.length - 2).replace(/\\"/g, '"');
                            }
                            else {
                                throw new Error(`Invalid string ${text}`);
                            }
                            return new constant_1.Constant(this.evalEscape(text));
                        }
                        visitJsonCreationExp(context)
                        {
                            let expr = this.makeExpression(expressionType_1.ExpressionType.Json, new constant_1.Constant('{}'));
                            if (context.keyValuePairList()) {
                                for (const kvPair of context.keyValuePairList().keyValuePair()) {
                                    let key = '';
                                    const keyNode = kvPair.key().children[0];
                                    if (keyNode instanceof tree_1.TerminalNode) {
                                        if (keyNode.symbol.type === ep.ExpressionAntlrParser.IDENTIFIER) {
                                            key = keyNode.text;
                                        }
                                        else {
                                            key = keyNode.text.substring(1, keyNode.text.length - 1);
                                        }
                                    }
                                    expr = this.makeExpression(expressionType_1.ExpressionType.SetProperty, expr, new constant_1.Constant(key), this.visit(kvPair.expression()));
                                }
                            }
                            return expr;
                        }
                        visitStringInterpolationAtom(context)
                        {
                            const children = [new constant_1.Constant('')];
                            for (const node of context.stringInterpolation().children) {
                                if (node instanceof tree_1.TerminalNode) {
                                    switch (node.symbol.type) {
                                    case ep.ExpressionAntlrParser.TEMPLATE:
                                        {
                                            const expressionString = this.trimExpression(node.text);
                                            children.push(expression_1.Expression.parse(expressionString, this._lookupFunction));
                                            break;
                                        }
                                    case ep.ExpressionAntlrParser.ESCAPE_CHARACTER:
                                        {
                                            children.push(new constant_1.Constant(this.evalEscape(node.text).replace(/\\`/g, '`').replace(/\\\$/g, '$')));
                                            break;
                                        }
                                    default:
                                        break;
                                    }
                                }
                                else {
                                    const text = this.evalEscape(node.text);
                                    children.push(new constant_1.Constant(text));
                                }
                            }
                            return this.makeExpression(expressionType_1.ExpressionType.Concat, ...children);
                        }
                        processArgsList(context)
                        {
                            const result = [];
                            if (!context) {
                                return result;
                            }
                            for (const child of context.children) {
                                if (child instanceof ep.LambdaContext) {
                                    const evalParam = this.makeExpression(expressionType_1.ExpressionType.Accessor, new constant_1.Constant(child.IDENTIFIER().text));
                                    const evalFun = this.visit(child.expression());
                                    result.push(evalParam);
                                    result.push(evalFun);
                                }
                                else if (child instanceof ep.ExpressionContext) {
                                    result.push(this.visit(child));
                                }
                            }
                            return result;
                        }
                        trimExpression(expression)
                        {
                            let result = expression.trim();
                            if (result.startsWith('$')) {
                                result = result.substr(1);
                            }
                            result = result.trim();
                            if (result.startsWith('{') && result.endsWith('}')) {
                                result = result.substr(1, result.length - 2);
                            }
                            return result.trim();
                        }
                        evalEscape(text)
                        {
                            const validCharactersDict = {
                                '\\r': '\r',
                                '\\n': '\n',
                                '\\t': '\t',
                                '\\\\': '\\',
                            };
                            return text.replace(this.escapeRegex, (sub) => {
                                if (sub in validCharactersDict) {
                                    return validCharactersDict[sub];
                                }
                                else {
                                    return sub;
                                }
                            });
                        }
                    }
                    ;
                    this.EvaluatorLookup = lookup || expression_1.Expression.lookup;
                }
                /**
                     * @protected
                     * Parse the expression to ANTLR lexer and parser.
                     * @param expression The input string expression.
                     * @returns A ParseTree.
                     */
                static antlrParse(expression)
                {
                    if (ExpressionParser.expressionDict.has(expression)) {
                        return ExpressionParser.expressionDict.get(expression);
                    }
                    const inputStream = new antlr4ts_1.ANTLRInputStream(expression);
                    const lexer = new generated_1.ExpressionAntlrLexer(inputStream);
                    lexer.removeErrorListeners();
                    const tokenStream = new antlr4ts_1.CommonTokenStream(lexer);
                    const parser = new generated_1.ExpressionAntlrParser(tokenStream);
                    parser.removeErrorListeners();
                    parser.addErrorListener(parseErrorListener_1.ParseErrorListener.Instance);
                    parser.buildParseTree = true;
                    let expressionContext;
                    const file = parser.file();
                    if (file !== undefined) {
                        expressionContext = file.expression();
                    }
                    ExpressionParser.expressionDict.set(expression, expressionContext);
                    return expressionContext;
                }
                /**
                     * Parse the input into an expression.
                     * @param expression Expression to parse.
                     * @returns Expression tree.
                     */
                parse(expression)
                {
                    if (expression === undefined || expression === null || expression === '') {
                        return new constant_1.Constant('');
                    }
                    else {
                        return new this.ExpressionTransformer(this.EvaluatorLookup).transform(ExpressionParser.antlrParse(expression));
                    }
                }
            }
            ExpressionParser.expressionDict = new Map();
            exports.ExpressionParser = ExpressionParser;

        }, {
            "../constant": 158,
            "../expression": 170,
            "../expressionType": 183,
            "./generated": 199,
            "./generated/ExpressionAntlrParser": 198,
            "./parseErrorListener": 201,
            "antlr4ts": 320,
            "antlr4ts/tree": 345
        }],
        197: [function(require, module, exports) {
            "use strict";
            // Generated from src/parser/ExpressionAntlrLexer.g4 by ANTLR 4.7.3-SNAPSHOT
            var __importStar = (this && this.__importStar) || function(mod) {
                if (mod && mod.__esModule)
                    return mod;
                var result = {};
                if (mod != null)
                    for (var k in mod)
                        if (Object.hasOwnProperty.call(mod, k))
                            result[k] = mod[k];
                result["default"] = mod;
                return result;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
            const Lexer_1 = require("antlr4ts/Lexer");
            const LexerATNSimulator_1 = require("antlr4ts/atn/LexerATNSimulator");
            const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
            const Utils = __importStar(require("antlr4ts/misc/Utils"));
            class ExpressionAntlrLexer extends Lexer_1.Lexer {
                constructor(input)
                {
                    super(input);
                    // tslint:enable:no-trailing-whitespace
                    this.ignoreWS = true; // usually we ignore whitespace, but inside stringInterpolation, whitespace is significant
                    this._interp = new LexerATNSimulator_1.LexerATNSimulator(ExpressionAntlrLexer._ATN, this);
                }
                // @Override
                // @NotNull
                get vocabulary()
                {
                    return ExpressionAntlrLexer.VOCABULARY;
                }
                // @Override
                get grammarFileName()
                {
                    return "ExpressionAntlrLexer.g4";
                }
                // @Override
                get ruleNames()
                {
                    return ExpressionAntlrLexer.ruleNames;
                }
                // @Override
                get serializedATN()
                {
                    return ExpressionAntlrLexer._serializedATN;
                }
                // @Override
                get channelNames()
                {
                    return ExpressionAntlrLexer.channelNames;
                }
                // @Override
                get modeNames()
                {
                    return ExpressionAntlrLexer.modeNames;
                }
                // @Override
                action(_localctx, ruleIndex, actionIndex)
                {
                    switch (ruleIndex) {
                    case 3:
                        this.STRING_INTERPOLATION_START_action(_localctx, actionIndex);
                        break;
                    case 38:
                        this.STRING_INTERPOLATION_END_action(_localctx, actionIndex);
                        break;
                    }
                }
                STRING_INTERPOLATION_START_action(_localctx, actionIndex)
                {
                    switch (actionIndex) {
                    case 0:
                        this.ignoreWS = false;
                        break;
                    }
                }
                STRING_INTERPOLATION_END_action(_localctx, actionIndex)
                {
                    switch (actionIndex) {
                    case 1:
                        this.ignoreWS = true;
                        break;
                    }
                }
                // @Override
                sempred(_localctx, ruleIndex, predIndex)
                {
                    switch (ruleIndex) {
                    case 33:
                        return this.WHITESPACE_sempred(_localctx, predIndex);
                    }
                    return true;
                }
                WHITESPACE_sempred(_localctx, predIndex)
                {
                    switch (predIndex) {
                    case 0:
                        return this.ignoreWS;
                    }
                    return true;
                }
                static get _ATN()
                {
                    if (!ExpressionAntlrLexer.__ATN) {
                        ExpressionAntlrLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(ExpressionAntlrLexer._serializedATN));
                    }
                    return ExpressionAntlrLexer.__ATN;
                }
            }
            ExpressionAntlrLexer.STRING_INTERPOLATION_START = 1;
            ExpressionAntlrLexer.PLUS = 2;
            ExpressionAntlrLexer.SUBSTRACT = 3;
            ExpressionAntlrLexer.NON = 4;
            ExpressionAntlrLexer.XOR = 5;
            ExpressionAntlrLexer.ASTERISK = 6;
            ExpressionAntlrLexer.SLASH = 7;
            ExpressionAntlrLexer.PERCENT = 8;
            ExpressionAntlrLexer.DOUBLE_EQUAL = 9;
            ExpressionAntlrLexer.NOT_EQUAL = 10;
            ExpressionAntlrLexer.SINGLE_AND = 11;
            ExpressionAntlrLexer.DOUBLE_AND = 12;
            ExpressionAntlrLexer.DOUBLE_VERTICAL_CYLINDER = 13;
            ExpressionAntlrLexer.LESS_THAN = 14;
            ExpressionAntlrLexer.MORE_THAN = 15;
            ExpressionAntlrLexer.LESS_OR_EQUAl = 16;
            ExpressionAntlrLexer.MORE_OR_EQUAL = 17;
            ExpressionAntlrLexer.OPEN_BRACKET = 18;
            ExpressionAntlrLexer.CLOSE_BRACKET = 19;
            ExpressionAntlrLexer.DOT = 20;
            ExpressionAntlrLexer.OPEN_SQUARE_BRACKET = 21;
            ExpressionAntlrLexer.CLOSE_SQUARE_BRACKET = 22;
            ExpressionAntlrLexer.OPEN_CURLY_BRACKET = 23;
            ExpressionAntlrLexer.CLOSE_CURLY_BRACKET = 24;
            ExpressionAntlrLexer.COMMA = 25;
            ExpressionAntlrLexer.COLON = 26;
            ExpressionAntlrLexer.ARROW = 27;
            ExpressionAntlrLexer.NULL_COALESCE = 28;
            ExpressionAntlrLexer.QUESTION_MARK = 29;
            ExpressionAntlrLexer.NUMBER = 30;
            ExpressionAntlrLexer.WHITESPACE = 31;
            ExpressionAntlrLexer.IDENTIFIER = 32;
            ExpressionAntlrLexer.NEWLINE = 33;
            ExpressionAntlrLexer.STRING = 34;
            ExpressionAntlrLexer.INVALID_TOKEN_DEFAULT_MODE = 35;
            ExpressionAntlrLexer.TEMPLATE = 36;
            ExpressionAntlrLexer.ESCAPE_CHARACTER = 37;
            ExpressionAntlrLexer.TEXT_CONTENT = 38;
            ExpressionAntlrLexer.STRING_INTERPOLATION_MODE = 1;
            // tslint:disable:no-trailing-whitespace
            ExpressionAntlrLexer.channelNames = [
            "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
            ];
            // tslint:disable:no-trailing-whitespace
            ExpressionAntlrLexer.modeNames = [
            "DEFAULT_MODE", "STRING_INTERPOLATION_MODE",
            ];
            ExpressionAntlrLexer.ruleNames = [
            "LETTER", "DIGIT", "OBJECT_DEFINITION", "STRING_INTERPOLATION_START",
            "PLUS", "SUBSTRACT", "NON", "XOR", "ASTERISK", "SLASH", "PERCENT", "DOUBLE_EQUAL",
            "NOT_EQUAL", "SINGLE_AND", "DOUBLE_AND", "DOUBLE_VERTICAL_CYLINDER", "LESS_THAN",
            "MORE_THAN", "LESS_OR_EQUAl", "MORE_OR_EQUAL", "OPEN_BRACKET", "CLOSE_BRACKET",
            "DOT", "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", "OPEN_CURLY_BRACKET",
            "CLOSE_CURLY_BRACKET", "COMMA", "COLON", "ARROW", "NULL_COALESCE", "QUESTION_MARK",
            "NUMBER", "WHITESPACE", "IDENTIFIER", "NEWLINE", "STRING", "INVALID_TOKEN_DEFAULT_MODE",
            "STRING_INTERPOLATION_END", "TEMPLATE", "ESCAPE_CHARACTER", "TEXT_CONTENT",
            ];
            ExpressionAntlrLexer._LITERAL_NAMES = [
            undefined, undefined, "'+'", "'-'", "'!'", "'^'", "'*'", "'/'", "'%'",
            "'=='", undefined, "'&'", "'&&'", "'||'", "'<'", "'>'", "'<='", "'>='",
            "'('", "')'", "'.'", "'['", "']'", "'{'", "'}'", "','", "':'", "'=>'",
            "'??'", "'?'",
            ];
            ExpressionAntlrLexer._SYMBOLIC_NAMES = [
            undefined, "STRING_INTERPOLATION_START", "PLUS", "SUBSTRACT", "NON", "XOR",
            "ASTERISK", "SLASH", "PERCENT", "DOUBLE_EQUAL", "NOT_EQUAL", "SINGLE_AND",
            "DOUBLE_AND", "DOUBLE_VERTICAL_CYLINDER", "LESS_THAN", "MORE_THAN", "LESS_OR_EQUAl",
            "MORE_OR_EQUAL", "OPEN_BRACKET", "CLOSE_BRACKET", "DOT", "OPEN_SQUARE_BRACKET",
            "CLOSE_SQUARE_BRACKET", "OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "COMMA",
            "COLON", "ARROW", "NULL_COALESCE", "QUESTION_MARK", "NUMBER", "WHITESPACE",
            "IDENTIFIER", "NEWLINE", "STRING", "INVALID_TOKEN_DEFAULT_MODE", "TEMPLATE",
            "ESCAPE_CHARACTER", "TEXT_CONTENT",
            ];
            ExpressionAntlrLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(ExpressionAntlrLexer._LITERAL_NAMES, ExpressionAntlrLexer._SYMBOLIC_NAMES, []);
            ExpressionAntlrLexer._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02(\u0110\b\x01" +
            "\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06" +
            "\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f" +
            "\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04" +
            "\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04" +
            "\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04" +
            "\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04" +
            "\"\t\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*" +
            "\t*\x04+\t+\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03" +
            "\x04\x05\x04a\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x06\x04g\n\x04\r\x04" +
            "\x0E\x04h\x07\x04k\n\x04\f\x04\x0E\x04n\v\x04\x03\x04\x03\x04\x03\x05" +
            "\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b" +
            "\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03" +
            "\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05\x0E\x8C\n\x0E\x03\x0F\x03\x0F\x03" +
            "\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03" +
            "\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03" +
            "\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03" +
            "\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03" +
            "\x1F\x03 \x03 \x03 \x03!\x03!\x03\"\x06\"\xBB\n\"\r\"\x0E\"\xBC\x03\"" +
            "\x03\"\x06\"\xC1\n\"\r\"\x0E\"\xC2\x05\"\xC5\n\"\x03#\x03#\x03#\x03#\x03" +
            "#\x03$\x03$\x03$\x03$\x03$\x05$\xD1\n$\x03$\x03$\x03$\x07$\xD6\n$\f$\x0E" +
            "$\xD9\v$\x03%\x05%\xDC\n%\x03%\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x07" +
            "&\xE6\n&\f&\x0E&\xE9\v&\x03&\x03&\x03&\x03&\x03&\x07&\xF0\n&\f&\x0E&\xF3" +
            "\v&\x03&\x05&\xF6\n&\x03\'\x03\'\x03(\x03(\x03(\x03(\x03(\x03(\x03)\x03" +
            ")\x03)\x03)\x03)\x06)\u0105\n)\r)\x0E)\u0106\x03)\x03)\x03*\x03*\x05*" +
            "\u010D\n*\x03+\x03+\x04\xE7\xF1\x02\x02,\x04\x02\x02\x06\x02\x02\b\x02" +
            "\x02\n\x02\x03\f\x02\x04\x0E\x02\x05\x10\x02\x06\x12\x02\x07\x14\x02\b" +
            "\x16\x02\t\x18\x02\n\x1A\x02\v\x1C\x02\f\x1E\x02\r \x02\x0E\"\x02\x0F" +
            "$\x02\x10&\x02\x11(\x02\x12*\x02\x13,\x02\x14.\x02\x150\x02\x162\x02\x17" +
            "4\x02\x186\x02\x198\x02\x1A:\x02\x1B<\x02\x1C>\x02\x1D@\x02\x1EB\x02\x1F" +
            "D\x02 F\x02!H\x02\"J\x02#L\x02$N\x02%P\x02\x02R\x02&T\x02\'V\x02(\x04" +
            "\x02\x03\f\x04\x02C\\c|\x03\x022;\t\x02\f\f\x0F\x0F$$))bb}}\x7F\x7F\x06" +
            "\x02\v\v\"\"\xA2\xA2\uFF01\uFF01\x05\x02%%BBaa\x04\x02))^^\x03\x02))\x04" +
            "\x02$$^^\x03\x02$$\x04\x02\f\f\x0F\x0F\x02\u0125\x02\n\x03\x02\x02\x02" +
            "\x02\f\x03\x02\x02\x02\x02\x0E\x03\x02\x02\x02\x02\x10\x03\x02\x02\x02" +
            "\x02\x12\x03\x02\x02\x02\x02\x14\x03\x02\x02\x02\x02\x16\x03\x02\x02\x02" +
            "\x02\x18\x03\x02\x02\x02\x02\x1A\x03\x02\x02\x02\x02\x1C\x03\x02\x02\x02" +
            "\x02\x1E\x03\x02\x02\x02\x02 \x03\x02\x02\x02\x02\"\x03\x02\x02\x02\x02" +
            "$\x03\x02\x02\x02\x02&\x03\x02\x02\x02\x02(\x03\x02\x02\x02\x02*\x03\x02" +
            "\x02\x02\x02,\x03\x02\x02\x02\x02.\x03\x02\x02\x02\x020\x03\x02\x02\x02" +
            "\x022\x03\x02\x02\x02\x024\x03\x02\x02\x02\x026\x03\x02\x02\x02\x028\x03" +
            "\x02\x02\x02\x02:\x03\x02\x02\x02\x02<\x03\x02\x02\x02\x02>\x03\x02\x02" +
            "\x02\x02@\x03\x02\x02\x02\x02B\x03\x02\x02\x02\x02D\x03\x02\x02\x02\x02" +
            "F\x03\x02\x02\x02\x02H\x03\x02\x02\x02\x02J\x03\x02\x02\x02\x02L\x03\x02" +
            "\x02\x02\x02N\x03\x02\x02\x02\x03P\x03\x02\x02\x02\x03R\x03\x02\x02\x02" +
            "\x03T\x03\x02\x02\x02\x03V\x03\x02\x02\x02\x04X\x03\x02\x02\x02\x06Z\x03" +
            "\x02\x02\x02\b\\\x03\x02\x02\x02\nq\x03\x02\x02\x02\fv\x03\x02\x02\x02" +
            "\x0Ex\x03\x02\x02\x02\x10z\x03\x02\x02\x02\x12|\x03\x02\x02\x02\x14~\x03" +
            "\x02\x02\x02\x16\x80\x03\x02\x02\x02\x18\x82\x03\x02\x02\x02\x1A\x84\x03" +
            "\x02\x02\x02\x1C\x8B\x03\x02\x02\x02\x1E\x8D\x03\x02\x02\x02 \x8F\x03" +
            "\x02\x02\x02\"\x92\x03\x02\x02\x02$\x95\x03\x02\x02\x02&\x97\x03\x02\x02" +
            "\x02(\x99\x03\x02\x02\x02*\x9C\x03\x02\x02\x02,\x9F\x03\x02\x02\x02.\xA1" +
            "\x03\x02\x02\x020\xA3\x03\x02\x02\x022\xA5\x03\x02\x02\x024\xA7\x03\x02" +
            "\x02\x026\xA9\x03\x02\x02\x028\xAB\x03\x02\x02\x02:\xAD\x03\x02\x02\x02" +
            "<\xAF\x03\x02\x02\x02>\xB1\x03\x02\x02\x02@\xB4\x03\x02\x02\x02B\xB7\x03" +
            "\x02\x02\x02D\xBA\x03\x02\x02\x02F\xC6\x03\x02\x02\x02H\xD0\x03\x02\x02" +
            "\x02J\xDB\x03\x02\x02\x02L\xF5\x03\x02\x02\x02N\xF7\x03\x02\x02\x02P\xF9" +
            "\x03\x02\x02\x02R\xFF\x03\x02\x02\x02T\u010A\x03\x02\x02\x02V\u010E\x03" +
            "\x02\x02\x02XY\t\x02\x02\x02Y\x05\x03\x02\x02\x02Z[\t\x03\x02\x02[\x07" +
            "\x03\x02\x02\x02\\l\x07}\x02\x02]k\x05F#\x02^a\x05H$\x02_a\x05L&\x02`" +
            "^\x03\x02\x02\x02`_\x03\x02\x02\x02ab\x03\x02\x02\x02bf\x07<\x02\x02c" +
            "g\x05L&\x02dg\n\x04\x02\x02eg\x05\b\x04\x02fc\x03\x02\x02\x02fd\x03\x02" +
            "\x02\x02fe\x03\x02\x02\x02gh\x03\x02\x02\x02hf\x03\x02\x02\x02hi\x03\x02" +
            "\x02\x02ik\x03\x02\x02\x02j]\x03\x02\x02\x02j`\x03\x02\x02\x02kn\x03\x02" +
            "\x02\x02lj\x03\x02\x02\x02lm\x03\x02\x02\x02mo\x03\x02\x02\x02nl\x03\x02" +
            "\x02\x02op\x07\x7F\x02\x02p\t\x03\x02\x02\x02qr\x07b\x02\x02rs\b\x05\x02" +
            "\x02st\x03\x02\x02\x02tu\b\x05\x03\x02u\v\x03\x02\x02\x02vw\x07-\x02\x02" +
            "w\r\x03\x02\x02\x02xy\x07/\x02\x02y\x0F\x03\x02\x02\x02z{\x07#\x02\x02" +
            "{\x11\x03\x02\x02\x02|}\x07`\x02\x02}\x13\x03\x02\x02\x02~\x7F\x07,\x02" +
            "\x02\x7F\x15\x03\x02\x02\x02\x80\x81\x071\x02\x02\x81\x17\x03\x02\x02" +
            "\x02\x82\x83\x07\'\x02\x02\x83\x19\x03\x02\x02\x02\x84\x85\x07?\x02\x02" +
            "\x85\x86\x07?\x02\x02\x86\x1B\x03\x02\x02\x02\x87\x88\x07#\x02\x02\x88" +
            "\x8C\x07?\x02\x02\x89\x8A\x07>\x02\x02\x8A\x8C\x07@\x02\x02\x8B\x87\x03" +
            "\x02\x02\x02\x8B\x89\x03\x02\x02\x02\x8C\x1D\x03\x02\x02\x02\x8D\x8E\x07" +
            "(\x02\x02\x8E\x1F\x03\x02\x02\x02\x8F\x90\x07(\x02\x02\x90\x91\x07(\x02" +
            "\x02\x91!\x03\x02\x02\x02\x92\x93\x07~\x02\x02\x93\x94\x07~\x02\x02\x94" +
            "#\x03\x02\x02\x02\x95\x96\x07>\x02\x02\x96%\x03\x02\x02\x02\x97\x98\x07" +
            "@\x02\x02\x98\'\x03\x02\x02\x02\x99\x9A\x07>\x02\x02\x9A\x9B\x07?\x02" +
            "\x02\x9B)\x03\x02\x02\x02\x9C\x9D\x07@\x02\x02\x9D\x9E\x07?\x02\x02\x9E" +
            "+\x03\x02\x02\x02\x9F\xA0\x07*\x02\x02\xA0-\x03\x02\x02\x02\xA1\xA2\x07" +
            "+\x02\x02\xA2/\x03\x02\x02\x02\xA3\xA4\x070\x02\x02\xA41\x03\x02\x02\x02" +
            "\xA5\xA6\x07]\x02\x02\xA63\x03\x02\x02\x02\xA7\xA8\x07_\x02\x02\xA85\x03" +
            "\x02\x02\x02\xA9\xAA\x07}\x02\x02\xAA7\x03\x02\x02\x02\xAB\xAC\x07\x7F" +
            "\x02\x02\xAC9\x03\x02\x02\x02\xAD\xAE\x07.\x02\x02\xAE;\x03\x02\x02\x02" +
            "\xAF\xB0\x07<\x02\x02\xB0=\x03\x02\x02\x02\xB1\xB2\x07?\x02\x02\xB2\xB3" +
            "\x07@\x02\x02\xB3?\x03\x02\x02\x02\xB4\xB5\x07A\x02\x02\xB5\xB6\x07A\x02" +
            "\x02\xB6A\x03\x02\x02\x02\xB7\xB8\x07A\x02\x02\xB8C\x03\x02\x02\x02\xB9" +
            "\xBB\x05\x06\x03\x02\xBA\xB9\x03\x02\x02\x02\xBB\xBC\x03\x02\x02\x02\xBC" +
            "\xBA\x03\x02\x02\x02\xBC\xBD\x03\x02\x02\x02\xBD\xC4\x03\x02\x02\x02\xBE" +
            "\xC0\x070\x02\x02\xBF\xC1\x05\x06\x03\x02\xC0\xBF\x03\x02\x02\x02\xC1" +
            "\xC2\x03\x02\x02\x02\xC2\xC0\x03\x02\x02\x02\xC2\xC3\x03\x02\x02\x02\xC3" +
            "\xC5\x03\x02\x02\x02\xC4\xBE\x03\x02\x02\x02\xC4\xC5\x03\x02\x02\x02\xC5" +
            "E\x03\x02\x02\x02\xC6\xC7\t\x05\x02\x02\xC7\xC8\x06#\x02\x02\xC8\xC9\x03" +
            "\x02\x02\x02\xC9\xCA\b#\x04\x02\xCAG\x03\x02\x02\x02\xCB\xD1\x05\x04\x02" +
            "\x02\xCC\xD1\t\x06\x02\x02\xCD\xCE\x07B\x02\x02\xCE\xD1\x07B\x02\x02\xCF" +
            "\xD1\x04&\'\x02\xD0\xCB\x03\x02\x02\x02\xD0\xCC\x03\x02\x02\x02\xD0\xCD" +
            "\x03\x02\x02\x02\xD0\xCF\x03\x02\x02\x02\xD1\xD7\x03\x02\x02\x02\xD2\xD6" +
            "\x05\x04\x02\x02\xD3\xD6\x05\x06\x03\x02\xD4\xD6\x07a\x02\x02\xD5\xD2" +
            "\x03\x02\x02\x02\xD5\xD3\x03\x02\x02\x02\xD5\xD4\x03\x02\x02\x02\xD6\xD9" +
            "\x03\x02\x02\x02\xD7\xD5\x03\x02\x02\x02\xD7\xD8\x03\x02\x02\x02\xD8I" +
            "\x03\x02\x02\x02\xD9\xD7\x03\x02\x02\x02\xDA\xDC\x07\x0F\x02\x02\xDB\xDA" +
            "\x03\x02\x02\x02\xDB\xDC\x03\x02\x02\x02\xDC\xDD\x03\x02\x02\x02\xDD\xDE" +
            "\x07\f\x02\x02\xDE\xDF\x03\x02\x02\x02\xDF\xE0\b%\x04\x02\xE0K\x03\x02" +
            "\x02\x02\xE1\xE7\x07)\x02\x02\xE2\xE3\x07^\x02\x02\xE3\xE6\t\x07\x02\x02" +
            "\xE4\xE6\n\b\x02\x02\xE5\xE2\x03\x02\x02\x02\xE5\xE4\x03\x02\x02\x02\xE6" +
            "\xE9\x03\x02\x02\x02\xE7\xE8\x03\x02\x02\x02\xE7\xE5\x03\x02\x02\x02\xE8" +
            "\xEA\x03\x02\x02\x02\xE9\xE7\x03\x02\x02\x02\xEA\xF6\x07)\x02\x02\xEB" +
            "\xF1\x07$\x02\x02\xEC\xED\x07^\x02\x02\xED\xF0\t\t\x02\x02\xEE\xF0\n\n" +
            "\x02\x02\xEF\xEC\x03\x02\x02\x02\xEF\xEE\x03\x02\x02\x02\xF0\xF3\x03\x02" +
            "\x02\x02\xF1\xF2\x03\x02\x02\x02\xF1\xEF\x03\x02\x02\x02\xF2\xF4\x03\x02" +
            "\x02\x02\xF3\xF1\x03\x02\x02\x02\xF4\xF6\x07$\x02\x02\xF5\xE1\x03\x02" +
            "\x02\x02\xF5\xEB\x03\x02\x02\x02\xF6M\x03\x02\x02\x02\xF7\xF8\v\x02\x02" +
            "\x02\xF8O\x03\x02\x02\x02\xF9\xFA\x07b\x02\x02\xFA\xFB\b(\x05\x02\xFB" +
            "\xFC\x03\x02\x02\x02\xFC\xFD\b(\x06\x02\xFD\xFE\b(\x07\x02\xFEQ\x03\x02" +
            "\x02\x02\xFF\u0100\x07&\x02\x02\u0100\u0104\x07}\x02\x02\u0101\u0105\x05" +
            "L&\x02\u0102\u0105\x05\b\x04\x02\u0103\u0105\n\x04\x02\x02\u0104\u0101" +
            "\x03\x02\x02\x02\u0104\u0102\x03\x02\x02\x02\u0104\u0103\x03\x02\x02\x02" +
            "\u0105\u0106\x03\x02\x02\x02\u0106\u0104\x03\x02\x02\x02\u0106\u0107\x03" +
            "\x02\x02\x02\u0107\u0108\x03\x02\x02\x02\u0108\u0109\x07\x7F\x02\x02\u0109" +
            "S\x03\x02\x02\x02\u010A\u010C\x07^\x02\x02\u010B\u010D\n\v\x02\x02\u010C" +
            "\u010B\x03\x02\x02\x02\u010C\u010D\x03\x02\x02\x02\u010DU\x03\x02\x02" +
            "\x02\u010E\u010F\v\x02\x02\x02\u010FW\x03\x02\x02\x02\x19\x02\x03`fhj" +
            "l\x8B\xBC\xC2\xC4\xD0\xD5\xD7\xDB\xE5\xE7\xEF\xF1\xF5\u0104\u0106\u010C" +
            "\b\x03\x05\x02\x07\x03\x02\b\x02\x02\x03(\x03\t\x03\x02\x06\x02\x02";
            exports.ExpressionAntlrLexer = ExpressionAntlrLexer;

        }, {
            "antlr4ts/Lexer": 232,
            "antlr4ts/VocabularyImpl": 250,
            "antlr4ts/atn/ATNDeserializer": 255,
            "antlr4ts/atn/LexerATNSimulator": 276,
            "antlr4ts/misc/Utils": 337
        }],
        198: [function(require, module, exports) {
            "use strict";
            // Generated from src/parser/ExpressionAntlrParser.g4 by ANTLR 4.7.3-SNAPSHOT
            var __importStar = (this && this.__importStar) || function(mod) {
                if (mod && mod.__esModule)
                    return mod;
                var result = {};
                if (mod != null)
                    for (var k in mod)
                        if (Object.hasOwnProperty.call(mod, k))
                            result[k] = mod[k];
                result["default"] = mod;
                return result;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            const ATN_1 = require("antlr4ts/atn/ATN");
            const ATNDeserializer_1 = require("antlr4ts/atn/ATNDeserializer");
            const FailedPredicateException_1 = require("antlr4ts/FailedPredicateException");
            const NoViableAltException_1 = require("antlr4ts/NoViableAltException");
            const Parser_1 = require("antlr4ts/Parser");
            const ParserRuleContext_1 = require("antlr4ts/ParserRuleContext");
            const ParserATNSimulator_1 = require("antlr4ts/atn/ParserATNSimulator");
            const RecognitionException_1 = require("antlr4ts/RecognitionException");
            const Token_1 = require("antlr4ts/Token");
            const VocabularyImpl_1 = require("antlr4ts/VocabularyImpl");
            const Utils = __importStar(require("antlr4ts/misc/Utils"));
            class ExpressionAntlrParser extends Parser_1.Parser {
                constructor(input)
                {
                    super(input);
                    this._interp = new ParserATNSimulator_1.ParserATNSimulator(ExpressionAntlrParser._ATN, this);
                }
                // @Override
                // @NotNull
                get vocabulary()
                {
                    return ExpressionAntlrParser.VOCABULARY;
                }
                // tslint:enable:no-trailing-whitespace
                // @Override
                get grammarFileName()
                {
                    return "ExpressionAntlrParser.g4";
                }
                // @Override
                get ruleNames()
                {
                    return ExpressionAntlrParser.ruleNames;
                }
                // @Override
                get serializedATN()
                {
                    return ExpressionAntlrParser._serializedATN;
                }
                // @RuleVersion(0)
                file()
                {
                    let _localctx = new FileContext(this._ctx, this.state);
                    this.enterRule(_localctx, 0, ExpressionAntlrParser.RULE_file);
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 20;
                            this.expression(0);
                            this.state = 21;
                            this.match(ExpressionAntlrParser.EOF);
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                expression(_p)
                {
                    if (_p === undefined) {
                        _p = 0;
                    }
                    let _parentctx = this._ctx;
                    let _parentState = this.state;
                    let _localctx = new ExpressionContext(this._ctx, _parentState);
                    let _prevctx = _localctx;
                    let _startState = 2;
                    this.enterRecursionRule(_localctx, 2, ExpressionAntlrParser.RULE_expression, _p);
                    let _la;
                    try {
                        let _alt;
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 27;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                            case ExpressionAntlrParser.PLUS:
                            case ExpressionAntlrParser.SUBSTRACT:
                            case ExpressionAntlrParser.NON:
                                {
                                    _localctx = new UnaryOpExpContext(_localctx);
                                    this._ctx = _localctx;
                                    _prevctx = _localctx;
                                    this.state = 24;
                                    _la = this._input.LA(1);
                                    if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ExpressionAntlrParser.PLUS) | (1 << ExpressionAntlrParser.SUBSTRACT) | (1 << ExpressionAntlrParser.NON))) !== 0))) {
                                        this._errHandler.recoverInline(this);
                                    }
                                    else {
                                        if (this._input.LA(1) === Token_1.Token.EOF) {
                                            this.matchedEOF = true;
                                        }
                                        this._errHandler.reportMatch(this);
                                        this.consume();
                                    }
                                    this.state = 25;
                                    this.expression(12);
                                }
                                break;
                            case ExpressionAntlrParser.STRING_INTERPOLATION_START:
                            case ExpressionAntlrParser.OPEN_BRACKET:
                            case ExpressionAntlrParser.OPEN_SQUARE_BRACKET:
                            case ExpressionAntlrParser.OPEN_CURLY_BRACKET:
                            case ExpressionAntlrParser.NUMBER:
                            case ExpressionAntlrParser.IDENTIFIER:
                            case ExpressionAntlrParser.STRING:
                                {
                                    _localctx = new PrimaryExpContext(_localctx);
                                    this._ctx = _localctx;
                                    _prevctx = _localctx;
                                    this.state = 26;
                                    this.primaryExpression(0);
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                            }
                            this._ctx._stop = this._input.tryLT(-1);
                            this.state = 64;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 2, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    if (this._parseListeners != null) {
                                        this.triggerExitRuleEvent();
                                    }
                                    _prevctx = _localctx;
                                    {
                                        this.state = 62;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 1, this._ctx)) {
                                        case 1:
                                            {
                                                _localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
                                                this.pushNewRecursionContext(_localctx, _startState, ExpressionAntlrParser.RULE_expression);
                                                this.state = 29;
                                                if (!(this.precpred(this._ctx, 11))) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                                                }
                                                this.state = 30;
                                                this.match(ExpressionAntlrParser.XOR);
                                                this.state = 31;
                                                this.expression(11);
                                            }
                                            break;
                                        case 2:
                                            {
                                                _localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
                                                this.pushNewRecursionContext(_localctx, _startState, ExpressionAntlrParser.RULE_expression);
                                                this.state = 32;
                                                if (!(this.precpred(this._ctx, 10))) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                                                }
                                                this.state = 33;
                                                _la = this._input.LA(1);
                                                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ExpressionAntlrParser.ASTERISK) | (1 << ExpressionAntlrParser.SLASH) | (1 << ExpressionAntlrParser.PERCENT))) !== 0))) {
                                                    this._errHandler.recoverInline(this);
                                                }
                                                else {
                                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                                        this.matchedEOF = true;
                                                    }
                                                    this._errHandler.reportMatch(this);
                                                    this.consume();
                                                }
                                                this.state = 34;
                                                this.expression(11);
                                            }
                                            break;
                                        case 3:
                                            {
                                                _localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
                                                this.pushNewRecursionContext(_localctx, _startState, ExpressionAntlrParser.RULE_expression);
                                                this.state = 35;
                                                if (!(this.precpred(this._ctx, 9))) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                                                }
                                                this.state = 36;
                                                _la = this._input.LA(1);
                                                if (!(_la === ExpressionAntlrParser.PLUS || _la === ExpressionAntlrParser.SUBSTRACT)) {
                                                    this._errHandler.recoverInline(this);
                                                }
                                                else {
                                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                                        this.matchedEOF = true;
                                                    }
                                                    this._errHandler.reportMatch(this);
                                                    this.consume();
                                                }
                                                this.state = 37;
                                                this.expression(10);
                                            }
                                            break;
                                        case 4:
                                            {
                                                _localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
                                                this.pushNewRecursionContext(_localctx, _startState, ExpressionAntlrParser.RULE_expression);
                                                this.state = 38;
                                                if (!(this.precpred(this._ctx, 8))) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                                                }
                                                this.state = 39;
                                                _la = this._input.LA(1);
                                                if (!(_la === ExpressionAntlrParser.DOUBLE_EQUAL || _la === ExpressionAntlrParser.NOT_EQUAL)) {
                                                    this._errHandler.recoverInline(this);
                                                }
                                                else {
                                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                                        this.matchedEOF = true;
                                                    }
                                                    this._errHandler.reportMatch(this);
                                                    this.consume();
                                                }
                                                this.state = 40;
                                                this.expression(9);
                                            }
                                            break;
                                        case 5:
                                            {
                                                _localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
                                                this.pushNewRecursionContext(_localctx, _startState, ExpressionAntlrParser.RULE_expression);
                                                this.state = 41;
                                                if (!(this.precpred(this._ctx, 7))) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                                                }
                                                {
                                                    this.state = 42;
                                                    this.match(ExpressionAntlrParser.SINGLE_AND);
                                                }
                                                this.state = 43;
                                                this.expression(8);
                                            }
                                            break;
                                        case 6:
                                            {
                                                _localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
                                                this.pushNewRecursionContext(_localctx, _startState, ExpressionAntlrParser.RULE_expression);
                                                this.state = 44;
                                                if (!(this.precpred(this._ctx, 6))) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                                                }
                                                this.state = 45;
                                                _la = this._input.LA(1);
                                                if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ExpressionAntlrParser.LESS_THAN) | (1 << ExpressionAntlrParser.MORE_THAN) | (1 << ExpressionAntlrParser.LESS_OR_EQUAl) | (1 << ExpressionAntlrParser.MORE_OR_EQUAL))) !== 0))) {
                                                    this._errHandler.recoverInline(this);
                                                }
                                                else {
                                                    if (this._input.LA(1) === Token_1.Token.EOF) {
                                                        this.matchedEOF = true;
                                                    }
                                                    this._errHandler.reportMatch(this);
                                                    this.consume();
                                                }
                                                this.state = 46;
                                                this.expression(7);
                                            }
                                            break;
                                        case 7:
                                            {
                                                _localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
                                                this.pushNewRecursionContext(_localctx, _startState, ExpressionAntlrParser.RULE_expression);
                                                this.state = 47;
                                                if (!(this.precpred(this._ctx, 5))) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                                                }
                                                this.state = 48;
                                                this.match(ExpressionAntlrParser.DOUBLE_AND);
                                                this.state = 49;
                                                this.expression(6);
                                            }
                                            break;
                                        case 8:
                                            {
                                                _localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
                                                this.pushNewRecursionContext(_localctx, _startState, ExpressionAntlrParser.RULE_expression);
                                                this.state = 50;
                                                if (!(this.precpred(this._ctx, 4))) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                                                }
                                                this.state = 51;
                                                this.match(ExpressionAntlrParser.DOUBLE_VERTICAL_CYLINDER);
                                                this.state = 52;
                                                this.expression(5);
                                            }
                                            break;
                                        case 9:
                                            {
                                                _localctx = new BinaryOpExpContext(new ExpressionContext(_parentctx, _parentState));
                                                this.pushNewRecursionContext(_localctx, _startState, ExpressionAntlrParser.RULE_expression);
                                                this.state = 53;
                                                if (!(this.precpred(this._ctx, 3))) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                                                }
                                                this.state = 54;
                                                this.match(ExpressionAntlrParser.NULL_COALESCE);
                                                this.state = 55;
                                                this.expression(4);
                                            }
                                            break;
                                        case 10:
                                            {
                                                _localctx = new TripleOpExpContext(new ExpressionContext(_parentctx, _parentState));
                                                this.pushNewRecursionContext(_localctx, _startState, ExpressionAntlrParser.RULE_expression);
                                                this.state = 56;
                                                if (!(this.precpred(this._ctx, 2))) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                                                }
                                                this.state = 57;
                                                this.match(ExpressionAntlrParser.QUESTION_MARK);
                                                this.state = 58;
                                                this.expression(0);
                                                this.state = 59;
                                                this.match(ExpressionAntlrParser.COLON);
                                                this.state = 60;
                                                this.expression(3);
                                            }
                                            break;
                                        }
                                    }
                                }
                                this.state = 66;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 2, this._ctx);
                            }
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.unrollRecursionContexts(_parentctx);
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                primaryExpression(_p)
                {
                    if (_p === undefined) {
                        _p = 0;
                    }
                    let _parentctx = this._ctx;
                    let _parentState = this.state;
                    let _localctx = new PrimaryExpressionContext(this._ctx, _parentState);
                    let _prevctx = _localctx;
                    let _startState = 4;
                    this.enterRecursionRule(_localctx, 4, ExpressionAntlrParser.RULE_primaryExpression, _p);
                    let _la;
                    try {
                        let _alt;
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 86;
                            this._errHandler.sync(this);
                            switch (this._input.LA(1)) {
                            case ExpressionAntlrParser.OPEN_BRACKET:
                                {
                                    _localctx = new ParenthesisExpContext(_localctx);
                                    this._ctx = _localctx;
                                    _prevctx = _localctx;
                                    this.state = 68;
                                    this.match(ExpressionAntlrParser.OPEN_BRACKET);
                                    this.state = 69;
                                    this.expression(0);
                                    this.state = 70;
                                    this.match(ExpressionAntlrParser.CLOSE_BRACKET);
                                }
                                break;
                            case ExpressionAntlrParser.OPEN_SQUARE_BRACKET:
                                {
                                    _localctx = new ArrayCreationExpContext(_localctx);
                                    this._ctx = _localctx;
                                    _prevctx = _localctx;
                                    this.state = 72;
                                    this.match(ExpressionAntlrParser.OPEN_SQUARE_BRACKET);
                                    this.state = 74;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ExpressionAntlrParser.STRING_INTERPOLATION_START) | (1 << ExpressionAntlrParser.PLUS) | (1 << ExpressionAntlrParser.SUBSTRACT) | (1 << ExpressionAntlrParser.NON) | (1 << ExpressionAntlrParser.OPEN_BRACKET) | (1 << ExpressionAntlrParser.OPEN_SQUARE_BRACKET) | (1 << ExpressionAntlrParser.OPEN_CURLY_BRACKET) | (1 << ExpressionAntlrParser.NUMBER))) !== 0) || _la === ExpressionAntlrParser.IDENTIFIER || _la === ExpressionAntlrParser.STRING) {
                                        {
                                            this.state = 73;
                                            this.argsList();
                                        }
                                    }
                                    this.state = 76;
                                    this.match(ExpressionAntlrParser.CLOSE_SQUARE_BRACKET);
                                }
                                break;
                            case ExpressionAntlrParser.OPEN_CURLY_BRACKET:
                                {
                                    _localctx = new JsonCreationExpContext(_localctx);
                                    this._ctx = _localctx;
                                    _prevctx = _localctx;
                                    this.state = 77;
                                    this.match(ExpressionAntlrParser.OPEN_CURLY_BRACKET);
                                    this.state = 79;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === ExpressionAntlrParser.IDENTIFIER || _la === ExpressionAntlrParser.STRING) {
                                        {
                                            this.state = 78;
                                            this.keyValuePairList();
                                        }
                                    }
                                    this.state = 81;
                                    this.match(ExpressionAntlrParser.CLOSE_CURLY_BRACKET);
                                }
                                break;
                            case ExpressionAntlrParser.NUMBER:
                                {
                                    _localctx = new NumericAtomContext(_localctx);
                                    this._ctx = _localctx;
                                    _prevctx = _localctx;
                                    this.state = 82;
                                    this.match(ExpressionAntlrParser.NUMBER);
                                }
                                break;
                            case ExpressionAntlrParser.STRING:
                                {
                                    _localctx = new StringAtomContext(_localctx);
                                    this._ctx = _localctx;
                                    _prevctx = _localctx;
                                    this.state = 83;
                                    this.match(ExpressionAntlrParser.STRING);
                                }
                                break;
                            case ExpressionAntlrParser.IDENTIFIER:
                                {
                                    _localctx = new IdAtomContext(_localctx);
                                    this._ctx = _localctx;
                                    _prevctx = _localctx;
                                    this.state = 84;
                                    this.match(ExpressionAntlrParser.IDENTIFIER);
                                }
                                break;
                            case ExpressionAntlrParser.STRING_INTERPOLATION_START:
                                {
                                    _localctx = new StringInterpolationAtomContext(_localctx);
                                    this._ctx = _localctx;
                                    _prevctx = _localctx;
                                    this.state = 85;
                                    this.stringInterpolation();
                                }
                                break;
                            default:
                                throw new NoViableAltException_1.NoViableAltException(this);
                            }
                            this._ctx._stop = this._input.tryLT(-1);
                            this.state = 107;
                            this._errHandler.sync(this);
                            _alt = this.interpreter.adaptivePredict(this._input, 9, this._ctx);
                            while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (_alt === 1) {
                                    if (this._parseListeners != null) {
                                        this.triggerExitRuleEvent();
                                    }
                                    _prevctx = _localctx;
                                    {
                                        this.state = 105;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 8, this._ctx)) {
                                        case 1:
                                            {
                                                _localctx = new MemberAccessExpContext(new PrimaryExpressionContext(_parentctx, _parentState));
                                                this.pushNewRecursionContext(_localctx, _startState, ExpressionAntlrParser.RULE_primaryExpression);
                                                this.state = 88;
                                                if (!(this.precpred(this._ctx, 3))) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                                                }
                                                this.state = 89;
                                                this.match(ExpressionAntlrParser.DOT);
                                                this.state = 90;
                                                this.match(ExpressionAntlrParser.IDENTIFIER);
                                            }
                                            break;
                                        case 2:
                                            {
                                                _localctx = new FuncInvokeExpContext(new PrimaryExpressionContext(_parentctx, _parentState));
                                                this.pushNewRecursionContext(_localctx, _startState, ExpressionAntlrParser.RULE_primaryExpression);
                                                this.state = 91;
                                                if (!(this.precpred(this._ctx, 2))) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                                                }
                                                this.state = 93;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                if (_la === ExpressionAntlrParser.NON) {
                                                    {
                                                        this.state = 92;
                                                        this.match(ExpressionAntlrParser.NON);
                                                    }
                                                }
                                                this.state = 95;
                                                this.match(ExpressionAntlrParser.OPEN_BRACKET);
                                                this.state = 97;
                                                this._errHandler.sync(this);
                                                _la = this._input.LA(1);
                                                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << ExpressionAntlrParser.STRING_INTERPOLATION_START) | (1 << ExpressionAntlrParser.PLUS) | (1 << ExpressionAntlrParser.SUBSTRACT) | (1 << ExpressionAntlrParser.NON) | (1 << ExpressionAntlrParser.OPEN_BRACKET) | (1 << ExpressionAntlrParser.OPEN_SQUARE_BRACKET) | (1 << ExpressionAntlrParser.OPEN_CURLY_BRACKET) | (1 << ExpressionAntlrParser.NUMBER))) !== 0) || _la === ExpressionAntlrParser.IDENTIFIER || _la === ExpressionAntlrParser.STRING) {
                                                    {
                                                        this.state = 96;
                                                        this.argsList();
                                                    }
                                                }
                                                this.state = 99;
                                                this.match(ExpressionAntlrParser.CLOSE_BRACKET);
                                            }
                                            break;
                                        case 3:
                                            {
                                                _localctx = new IndexAccessExpContext(new PrimaryExpressionContext(_parentctx, _parentState));
                                                this.pushNewRecursionContext(_localctx, _startState, ExpressionAntlrParser.RULE_primaryExpression);
                                                this.state = 100;
                                                if (!(this.precpred(this._ctx, 1))) {
                                                    throw new FailedPredicateException_1.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                                                }
                                                this.state = 101;
                                                this.match(ExpressionAntlrParser.OPEN_SQUARE_BRACKET);
                                                this.state = 102;
                                                this.expression(0);
                                                this.state = 103;
                                                this.match(ExpressionAntlrParser.CLOSE_SQUARE_BRACKET);
                                            }
                                            break;
                                        }
                                    }
                                }
                                this.state = 109;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 9, this._ctx);
                            }
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.unrollRecursionContexts(_parentctx);
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                stringInterpolation()
                {
                    let _localctx = new StringInterpolationContext(this._ctx, this.state);
                    this.enterRule(_localctx, 6, ExpressionAntlrParser.RULE_stringInterpolation);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 110;
                            this.match(ExpressionAntlrParser.STRING_INTERPOLATION_START);
                            this.state = 116;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (((((_la - 36)) & ~0x1F) === 0 && ((1 << (_la - 36)) & ((1 << (ExpressionAntlrParser.TEMPLATE - 36)) | (1 << (ExpressionAntlrParser.ESCAPE_CHARACTER - 36)) | (1 << (ExpressionAntlrParser.TEXT_CONTENT - 36)))) !== 0)) {
                                {
                                    this.state = 114;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                    case ExpressionAntlrParser.ESCAPE_CHARACTER:
                                        {
                                            this.state = 111;
                                            this.match(ExpressionAntlrParser.ESCAPE_CHARACTER);
                                        }
                                        break;
                                    case ExpressionAntlrParser.TEMPLATE:
                                        {
                                            this.state = 112;
                                            this.match(ExpressionAntlrParser.TEMPLATE);
                                        }
                                        break;
                                    case ExpressionAntlrParser.TEXT_CONTENT:
                                        {
                                            this.state = 113;
                                            this.textContent();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException_1.NoViableAltException(this);
                                    }
                                }
                                this.state = 118;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                            this.state = 119;
                            this.match(ExpressionAntlrParser.STRING_INTERPOLATION_START);
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                textContent()
                {
                    let _localctx = new TextContentContext(this._ctx, this.state);
                    this.enterRule(_localctx, 8, ExpressionAntlrParser.RULE_textContent);
                    try {
                        let _alt;
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 122;
                            this._errHandler.sync(this);
                            _alt = 1;
                            do {
                                switch (_alt) {
                                case 1:
                                    {
                                        {
                                            this.state = 121;
                                            this.match(ExpressionAntlrParser.TEXT_CONTENT);
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException_1.NoViableAltException(this);
                                }
                                this.state = 124;
                                this._errHandler.sync(this);
                                _alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
                            } while (_alt !== 2 && _alt !== ATN_1.ATN.INVALID_ALT_NUMBER);
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                argsList()
                {
                    let _localctx = new ArgsListContext(this._ctx, this.state);
                    this.enterRule(_localctx, 10, ExpressionAntlrParser.RULE_argsList);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 128;
                            this._errHandler.sync(this);
                            switch (this.interpreter.adaptivePredict(this._input, 13, this._ctx)) {
                            case 1:
                                {
                                    this.state = 126;
                                    this.lambda();
                                }
                                break;
                            case 2:
                                {
                                    this.state = 127;
                                    this.expression(0);
                                }
                                break;
                            }
                            this.state = 137;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === ExpressionAntlrParser.COMMA) {
                                {
                                    {
                                        this.state = 130;
                                        this.match(ExpressionAntlrParser.COMMA);
                                        this.state = 133;
                                        this._errHandler.sync(this);
                                        switch (this.interpreter.adaptivePredict(this._input, 14, this._ctx)) {
                                        case 1:
                                            {
                                                this.state = 131;
                                                this.lambda();
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.state = 132;
                                                this.expression(0);
                                            }
                                            break;
                                        }
                                    }
                                }
                                this.state = 139;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                lambda()
                {
                    let _localctx = new LambdaContext(this._ctx, this.state);
                    this.enterRule(_localctx, 12, ExpressionAntlrParser.RULE_lambda);
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 140;
                            this.match(ExpressionAntlrParser.IDENTIFIER);
                            this.state = 141;
                            this.match(ExpressionAntlrParser.ARROW);
                            this.state = 142;
                            this.expression(0);
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                keyValuePairList()
                {
                    let _localctx = new KeyValuePairListContext(this._ctx, this.state);
                    this.enterRule(_localctx, 14, ExpressionAntlrParser.RULE_keyValuePairList);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 144;
                            this.keyValuePair();
                            this.state = 149;
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                            while (_la === ExpressionAntlrParser.COMMA) {
                                {
                                    {
                                        this.state = 145;
                                        this.match(ExpressionAntlrParser.COMMA);
                                        this.state = 146;
                                        this.keyValuePair();
                                    }
                                }
                                this.state = 151;
                                this._errHandler.sync(this);
                                _la = this._input.LA(1);
                            }
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                keyValuePair()
                {
                    let _localctx = new KeyValuePairContext(this._ctx, this.state);
                    this.enterRule(_localctx, 16, ExpressionAntlrParser.RULE_keyValuePair);
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 152;
                            this.key();
                            this.state = 153;
                            this.match(ExpressionAntlrParser.COLON);
                            this.state = 154;
                            this.expression(0);
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                // @RuleVersion(0)
                key()
                {
                    let _localctx = new KeyContext(this._ctx, this.state);
                    this.enterRule(_localctx, 18, ExpressionAntlrParser.RULE_key);
                    let _la;
                    try {
                        this.enterOuterAlt(_localctx, 1);
                        {
                            this.state = 156;
                            _la = this._input.LA(1);
                            if (!(_la === ExpressionAntlrParser.IDENTIFIER || _la === ExpressionAntlrParser.STRING)) {
                                this._errHandler.recoverInline(this);
                            }
                            else {
                                if (this._input.LA(1) === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                        }
                    }
                    catch (re) {
                        if (re instanceof RecognitionException_1.RecognitionException) {
                            _localctx.exception = re;
                            this._errHandler.reportError(this, re);
                            this._errHandler.recover(this, re);
                        }
                        else {
                            throw re;
                        }
                    }
                    finally {
                        this.exitRule();
                    }
                    return _localctx;
                }
                sempred(_localctx, ruleIndex, predIndex)
                {
                    switch (ruleIndex) {
                    case 1:
                        return this.expression_sempred(_localctx, predIndex);
                    case 2:
                        return this.primaryExpression_sempred(_localctx, predIndex);
                    }
                    return true;
                }
                expression_sempred(_localctx, predIndex)
                {
                    switch (predIndex) {
                    case 0:
                        return this.precpred(this._ctx, 11);
                    case 1:
                        return this.precpred(this._ctx, 10);
                    case 2:
                        return this.precpred(this._ctx, 9);
                    case 3:
                        return this.precpred(this._ctx, 8);
                    case 4:
                        return this.precpred(this._ctx, 7);
                    case 5:
                        return this.precpred(this._ctx, 6);
                    case 6:
                        return this.precpred(this._ctx, 5);
                    case 7:
                        return this.precpred(this._ctx, 4);
                    case 8:
                        return this.precpred(this._ctx, 3);
                    case 9:
                        return this.precpred(this._ctx, 2);
                    }
                    return true;
                }
                primaryExpression_sempred(_localctx, predIndex)
                {
                    switch (predIndex) {
                    case 10:
                        return this.precpred(this._ctx, 3);
                    case 11:
                        return this.precpred(this._ctx, 2);
                    case 12:
                        return this.precpred(this._ctx, 1);
                    }
                    return true;
                }
                static get _ATN()
                {
                    if (!ExpressionAntlrParser.__ATN) {
                        ExpressionAntlrParser.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(ExpressionAntlrParser._serializedATN));
                    }
                    return ExpressionAntlrParser.__ATN;
                }
            }
            ExpressionAntlrParser.STRING_INTERPOLATION_START = 1;
            ExpressionAntlrParser.PLUS = 2;
            ExpressionAntlrParser.SUBSTRACT = 3;
            ExpressionAntlrParser.NON = 4;
            ExpressionAntlrParser.XOR = 5;
            ExpressionAntlrParser.ASTERISK = 6;
            ExpressionAntlrParser.SLASH = 7;
            ExpressionAntlrParser.PERCENT = 8;
            ExpressionAntlrParser.DOUBLE_EQUAL = 9;
            ExpressionAntlrParser.NOT_EQUAL = 10;
            ExpressionAntlrParser.SINGLE_AND = 11;
            ExpressionAntlrParser.DOUBLE_AND = 12;
            ExpressionAntlrParser.DOUBLE_VERTICAL_CYLINDER = 13;
            ExpressionAntlrParser.LESS_THAN = 14;
            ExpressionAntlrParser.MORE_THAN = 15;
            ExpressionAntlrParser.LESS_OR_EQUAl = 16;
            ExpressionAntlrParser.MORE_OR_EQUAL = 17;
            ExpressionAntlrParser.OPEN_BRACKET = 18;
            ExpressionAntlrParser.CLOSE_BRACKET = 19;
            ExpressionAntlrParser.DOT = 20;
            ExpressionAntlrParser.OPEN_SQUARE_BRACKET = 21;
            ExpressionAntlrParser.CLOSE_SQUARE_BRACKET = 22;
            ExpressionAntlrParser.OPEN_CURLY_BRACKET = 23;
            ExpressionAntlrParser.CLOSE_CURLY_BRACKET = 24;
            ExpressionAntlrParser.COMMA = 25;
            ExpressionAntlrParser.COLON = 26;
            ExpressionAntlrParser.ARROW = 27;
            ExpressionAntlrParser.NULL_COALESCE = 28;
            ExpressionAntlrParser.QUESTION_MARK = 29;
            ExpressionAntlrParser.NUMBER = 30;
            ExpressionAntlrParser.WHITESPACE = 31;
            ExpressionAntlrParser.IDENTIFIER = 32;
            ExpressionAntlrParser.NEWLINE = 33;
            ExpressionAntlrParser.STRING = 34;
            ExpressionAntlrParser.INVALID_TOKEN_DEFAULT_MODE = 35;
            ExpressionAntlrParser.TEMPLATE = 36;
            ExpressionAntlrParser.ESCAPE_CHARACTER = 37;
            ExpressionAntlrParser.TEXT_CONTENT = 38;
            ExpressionAntlrParser.RULE_file = 0;
            ExpressionAntlrParser.RULE_expression = 1;
            ExpressionAntlrParser.RULE_primaryExpression = 2;
            ExpressionAntlrParser.RULE_stringInterpolation = 3;
            ExpressionAntlrParser.RULE_textContent = 4;
            ExpressionAntlrParser.RULE_argsList = 5;
            ExpressionAntlrParser.RULE_lambda = 6;
            ExpressionAntlrParser.RULE_keyValuePairList = 7;
            ExpressionAntlrParser.RULE_keyValuePair = 8;
            ExpressionAntlrParser.RULE_key = 9;
            // tslint:disable:no-trailing-whitespace
            ExpressionAntlrParser.ruleNames = [
            "file", "expression", "primaryExpression", "stringInterpolation", "textContent",
            "argsList", "lambda", "keyValuePairList", "keyValuePair", "key",
            ];
            ExpressionAntlrParser._LITERAL_NAMES = [
            undefined, undefined, "'+'", "'-'", "'!'", "'^'", "'*'", "'/'", "'%'",
            "'=='", undefined, "'&'", "'&&'", "'||'", "'<'", "'>'", "'<='", "'>='",
            "'('", "')'", "'.'", "'['", "']'", "'{'", "'}'", "','", "':'", "'=>'",
            "'??'", "'?'",
            ];
            ExpressionAntlrParser._SYMBOLIC_NAMES = [
            undefined, "STRING_INTERPOLATION_START", "PLUS", "SUBSTRACT", "NON", "XOR",
            "ASTERISK", "SLASH", "PERCENT", "DOUBLE_EQUAL", "NOT_EQUAL", "SINGLE_AND",
            "DOUBLE_AND", "DOUBLE_VERTICAL_CYLINDER", "LESS_THAN", "MORE_THAN", "LESS_OR_EQUAl",
            "MORE_OR_EQUAL", "OPEN_BRACKET", "CLOSE_BRACKET", "DOT", "OPEN_SQUARE_BRACKET",
            "CLOSE_SQUARE_BRACKET", "OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "COMMA",
            "COLON", "ARROW", "NULL_COALESCE", "QUESTION_MARK", "NUMBER", "WHITESPACE",
            "IDENTIFIER", "NEWLINE", "STRING", "INVALID_TOKEN_DEFAULT_MODE", "TEMPLATE",
            "ESCAPE_CHARACTER", "TEXT_CONTENT",
            ];
            ExpressionAntlrParser.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(ExpressionAntlrParser._LITERAL_NAMES, ExpressionAntlrParser._SYMBOLIC_NAMES, []);
            ExpressionAntlrParser._serializedATN = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03(\xA1\x04\x02" +
            "\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07" +
            "\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x03\x02\x03\x02\x03\x02" +
            "\x03\x03\x03\x03\x03\x03\x03\x03\x05\x03\x1E\n\x03\x03\x03\x03\x03\x03" +
            "\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
            "\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
            "\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
            "\x03\x03\x03\x03\x03\x03\x03\x07\x03A\n\x03\f\x03\x0E\x03D\v\x03\x03\x04" +
            "\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04M\n\x04\x03\x04" +
            "\x03\x04\x03\x04\x05\x04R\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
            "\x05\x04Y\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04`\n\x04" +
            "\x03\x04\x03\x04\x05\x04d\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
            "\x03\x04\x07\x04l\n\x04\f\x04\x0E\x04o\v\x04\x03\x05\x03\x05\x03\x05\x03" +
            "\x05\x07\x05u\n\x05\f\x05\x0E\x05x\v\x05\x03\x05\x03\x05\x03\x06\x06\x06" +
            "}\n\x06\r\x06\x0E\x06~\x03\x07\x03\x07\x05\x07\x83\n\x07\x03\x07\x03\x07" +
            "\x03\x07\x05\x07\x88\n\x07\x07\x07\x8A\n\x07\f\x07\x0E\x07\x8D\v\x07\x03" +
            "\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x07\t\x96\n\t\f\t\x0E\t\x99\v\t" +
            "\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x02\x02\x04\x04\x06\f\x02\x02" +
            "\x04\x02\x06\x02\b\x02\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x02" +
            "\b\x03\x02\x04\x06\x03\x02\b\n\x03\x02\x04\x05\x03\x02\v\f\x03\x02\x10" +
            "\x13\x04\x02\"\"$$\x02\xB6\x02\x16\x03\x02\x02\x02\x04\x1D\x03\x02\x02" +
            "\x02\x06X\x03\x02\x02\x02\bp\x03\x02\x02\x02\n|\x03\x02\x02\x02\f\x82" +
            "\x03\x02\x02\x02\x0E\x8E\x03\x02\x02\x02\x10\x92\x03\x02\x02\x02\x12\x9A" +
            "\x03\x02\x02\x02\x14\x9E\x03\x02\x02\x02\x16\x17\x05\x04\x03\x02\x17\x18" +
            "\x07\x02\x02\x03\x18\x03\x03\x02\x02\x02\x19\x1A\b\x03\x01\x02\x1A\x1B" +
            "\t\x02\x02\x02\x1B\x1E\x05\x04\x03\x0E\x1C\x1E\x05\x06\x04\x02\x1D\x19" +
            "\x03\x02\x02\x02\x1D\x1C\x03\x02\x02\x02\x1EB\x03\x02\x02\x02\x1F \f\r" +
            "\x02\x02 !\x07\x07\x02\x02!A\x05\x04\x03\r\"#\f\f\x02\x02#$\t\x03\x02" +
            "\x02$A\x05\x04\x03\r%&\f\v\x02\x02&\'\t\x04\x02\x02\'A\x05\x04\x03\f(" +
            ")\f\n\x02\x02)*\t\x05\x02\x02*A\x05\x04\x03\v+,\f\t\x02\x02,-\x07\r\x02" +
            "\x02-A\x05\x04\x03\n./\f\b\x02\x02/0\t\x06\x02\x020A\x05\x04\x03\t12\f" +
            "\x07\x02\x0223\x07\x0E\x02\x023A\x05\x04\x03\b45\f\x06\x02\x0256\x07\x0F" +
            "\x02\x026A\x05\x04\x03\x0778\f\x05\x02\x0289\x07\x1E\x02\x029A\x05\x04" +
            "\x03\x06:;\f\x04\x02\x02;<\x07\x1F\x02\x02<=\x05\x04\x03\x02=>\x07\x1C" +
            "\x02\x02>?\x05\x04\x03\x05?A\x03\x02\x02\x02@\x1F\x03\x02\x02\x02@\"\x03" +
            "\x02\x02\x02@%\x03\x02\x02\x02@(\x03\x02\x02\x02@+\x03\x02\x02\x02@.\x03" +
            "\x02\x02\x02@1\x03\x02\x02\x02@4\x03\x02\x02\x02@7\x03\x02\x02\x02@:\x03" +
            "\x02\x02\x02AD\x03\x02\x02\x02B@\x03\x02\x02\x02BC\x03\x02\x02\x02C\x05" +
            "\x03\x02\x02\x02DB\x03\x02\x02\x02EF\b\x04\x01\x02FG\x07\x14\x02\x02G" +
            "H\x05\x04\x03\x02HI\x07\x15\x02\x02IY\x03\x02\x02\x02JL\x07\x17\x02\x02" +
            "KM\x05\f\x07\x02LK\x03\x02\x02\x02LM\x03\x02\x02\x02MN\x03\x02\x02\x02" +
            "NY\x07\x18\x02\x02OQ\x07\x19\x02\x02PR\x05\x10\t\x02QP\x03\x02\x02\x02" +
            "QR\x03\x02\x02\x02RS\x03\x02\x02\x02SY\x07\x1A\x02\x02TY\x07 \x02\x02" +
            "UY\x07$\x02\x02VY\x07\"\x02\x02WY\x05\b\x05\x02XE\x03\x02\x02\x02XJ\x03" +
            "\x02\x02\x02XO\x03\x02\x02\x02XT\x03\x02\x02\x02XU\x03\x02\x02\x02XV\x03" +
            "\x02\x02\x02XW\x03\x02\x02\x02Ym\x03\x02\x02\x02Z[\f\x05\x02\x02[\\\x07" +
            "\x16\x02\x02\\l\x07\"\x02\x02]_\f\x04\x02\x02^`\x07\x06\x02\x02_^\x03" +
            "\x02\x02\x02_`\x03\x02\x02\x02`a\x03\x02\x02\x02ac\x07\x14\x02\x02bd\x05" +
            "\f\x07\x02cb\x03\x02\x02\x02cd\x03\x02\x02\x02de\x03\x02\x02\x02el\x07" +
            "\x15\x02\x02fg\f\x03\x02\x02gh\x07\x17\x02\x02hi\x05\x04\x03\x02ij\x07" +
            "\x18\x02\x02jl\x03\x02\x02\x02kZ\x03\x02\x02\x02k]\x03\x02\x02\x02kf\x03" +
            "\x02\x02\x02lo\x03\x02\x02\x02mk\x03\x02\x02\x02mn\x03\x02\x02\x02n\x07" +
            "\x03\x02\x02\x02om\x03\x02\x02\x02pv\x07\x03\x02\x02qu\x07\'\x02\x02r" +
            "u\x07&\x02\x02su\x05\n\x06\x02tq\x03\x02\x02\x02tr\x03\x02\x02\x02ts\x03" +
            "\x02\x02\x02ux\x03\x02\x02\x02vt\x03\x02\x02\x02vw\x03\x02\x02\x02wy\x03" +
            "\x02\x02\x02xv\x03\x02\x02\x02yz\x07\x03\x02\x02z\t\x03\x02\x02\x02{}" +
            "\x07(\x02\x02|{\x03\x02\x02\x02}~\x03\x02\x02\x02~|\x03\x02\x02\x02~\x7F" +
            "\x03\x02\x02\x02\x7F\v\x03\x02\x02\x02\x80\x83\x05\x0E\b\x02\x81\x83\x05" +
            "\x04\x03\x02\x82\x80\x03\x02\x02\x02\x82\x81\x03\x02\x02\x02\x83\x8B\x03" +
            "\x02\x02\x02\x84\x87\x07\x1B\x02\x02\x85\x88\x05\x0E\b\x02\x86\x88\x05" +
            "\x04\x03\x02\x87\x85\x03\x02\x02\x02\x87\x86\x03\x02\x02\x02\x88\x8A\x03" +
            "\x02\x02\x02\x89\x84\x03\x02\x02\x02\x8A\x8D\x03\x02\x02\x02\x8B\x89\x03" +
            "\x02\x02\x02\x8B\x8C\x03\x02\x02\x02\x8C\r\x03\x02\x02\x02\x8D\x8B\x03" +
            "\x02\x02\x02\x8E\x8F\x07\"\x02\x02\x8F\x90\x07\x1D\x02\x02\x90\x91\x05" +
            "\x04\x03\x02\x91\x0F\x03\x02\x02\x02\x92\x97\x05\x12\n\x02\x93\x94\x07" +
            "\x1B\x02\x02\x94\x96\x05\x12\n\x02\x95\x93\x03\x02\x02\x02\x96\x99\x03" +
            "\x02\x02\x02\x97\x95\x03\x02\x02\x02\x97\x98\x03\x02\x02\x02\x98\x11\x03" +
            "\x02\x02\x02\x99\x97\x03\x02\x02\x02\x9A\x9B\x05\x14\v\x02\x9B\x9C\x07" +
            "\x1C\x02\x02\x9C\x9D\x05\x04\x03\x02\x9D\x13\x03\x02\x02\x02\x9E\x9F\t" +
            "\x07\x02\x02\x9F\x15\x03\x02\x02\x02\x13\x1D@BLQX_ckmtv~\x82\x87\x8B\x97";
            exports.ExpressionAntlrParser = ExpressionAntlrParser;
            class FileContext extends ParserRuleContext_1.ParserRuleContext {
                expression()
                {
                    return this.getRuleContext(0, ExpressionContext);
                }
                EOF()
                {
                    return this.getToken(ExpressionAntlrParser.EOF, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return ExpressionAntlrParser.RULE_file;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterFile) {
                        listener.enterFile(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitFile) {
                        listener.exitFile(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitFile) {
                        return visitor.visitFile(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.FileContext = FileContext;
            class ExpressionContext extends ParserRuleContext_1.ParserRuleContext {
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return ExpressionAntlrParser.RULE_expression;
                }
                copyFrom(ctx)
                {
                    super.copyFrom(ctx);
                }
            }
            exports.ExpressionContext = ExpressionContext;
            class UnaryOpExpContext extends ExpressionContext {
                expression()
                {
                    return this.getRuleContext(0, ExpressionContext);
                }
                NON()
                {
                    return this.tryGetToken(ExpressionAntlrParser.NON, 0);
                }
                SUBSTRACT()
                {
                    return this.tryGetToken(ExpressionAntlrParser.SUBSTRACT, 0);
                }
                PLUS()
                {
                    return this.tryGetToken(ExpressionAntlrParser.PLUS, 0);
                }
                constructor(ctx)
                {
                    super(ctx.parent, ctx.invokingState);
                    this.copyFrom(ctx);
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterUnaryOpExp) {
                        listener.enterUnaryOpExp(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitUnaryOpExp) {
                        listener.exitUnaryOpExp(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitUnaryOpExp) {
                        return visitor.visitUnaryOpExp(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.UnaryOpExpContext = UnaryOpExpContext;
            class BinaryOpExpContext extends ExpressionContext {
                expression(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(ExpressionContext);
                    }
                    else {
                        return this.getRuleContext(i, ExpressionContext);
                    }
                }
                XOR()
                {
                    return this.tryGetToken(ExpressionAntlrParser.XOR, 0);
                }
                ASTERISK()
                {
                    return this.tryGetToken(ExpressionAntlrParser.ASTERISK, 0);
                }
                SLASH()
                {
                    return this.tryGetToken(ExpressionAntlrParser.SLASH, 0);
                }
                PERCENT()
                {
                    return this.tryGetToken(ExpressionAntlrParser.PERCENT, 0);
                }
                PLUS()
                {
                    return this.tryGetToken(ExpressionAntlrParser.PLUS, 0);
                }
                SUBSTRACT()
                {
                    return this.tryGetToken(ExpressionAntlrParser.SUBSTRACT, 0);
                }
                DOUBLE_EQUAL()
                {
                    return this.tryGetToken(ExpressionAntlrParser.DOUBLE_EQUAL, 0);
                }
                NOT_EQUAL()
                {
                    return this.tryGetToken(ExpressionAntlrParser.NOT_EQUAL, 0);
                }
                SINGLE_AND()
                {
                    return this.tryGetToken(ExpressionAntlrParser.SINGLE_AND, 0);
                }
                LESS_THAN()
                {
                    return this.tryGetToken(ExpressionAntlrParser.LESS_THAN, 0);
                }
                LESS_OR_EQUAl()
                {
                    return this.tryGetToken(ExpressionAntlrParser.LESS_OR_EQUAl, 0);
                }
                MORE_THAN()
                {
                    return this.tryGetToken(ExpressionAntlrParser.MORE_THAN, 0);
                }
                MORE_OR_EQUAL()
                {
                    return this.tryGetToken(ExpressionAntlrParser.MORE_OR_EQUAL, 0);
                }
                DOUBLE_AND()
                {
                    return this.tryGetToken(ExpressionAntlrParser.DOUBLE_AND, 0);
                }
                DOUBLE_VERTICAL_CYLINDER()
                {
                    return this.tryGetToken(ExpressionAntlrParser.DOUBLE_VERTICAL_CYLINDER, 0);
                }
                NULL_COALESCE()
                {
                    return this.tryGetToken(ExpressionAntlrParser.NULL_COALESCE, 0);
                }
                constructor(ctx)
                {
                    super(ctx.parent, ctx.invokingState);
                    this.copyFrom(ctx);
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterBinaryOpExp) {
                        listener.enterBinaryOpExp(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitBinaryOpExp) {
                        listener.exitBinaryOpExp(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitBinaryOpExp) {
                        return visitor.visitBinaryOpExp(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.BinaryOpExpContext = BinaryOpExpContext;
            class TripleOpExpContext extends ExpressionContext {
                expression(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(ExpressionContext);
                    }
                    else {
                        return this.getRuleContext(i, ExpressionContext);
                    }
                }
                QUESTION_MARK()
                {
                    return this.getToken(ExpressionAntlrParser.QUESTION_MARK, 0);
                }
                COLON()
                {
                    return this.getToken(ExpressionAntlrParser.COLON, 0);
                }
                constructor(ctx)
                {
                    super(ctx.parent, ctx.invokingState);
                    this.copyFrom(ctx);
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterTripleOpExp) {
                        listener.enterTripleOpExp(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitTripleOpExp) {
                        listener.exitTripleOpExp(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitTripleOpExp) {
                        return visitor.visitTripleOpExp(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.TripleOpExpContext = TripleOpExpContext;
            class PrimaryExpContext extends ExpressionContext {
                primaryExpression()
                {
                    return this.getRuleContext(0, PrimaryExpressionContext);
                }
                constructor(ctx)
                {
                    super(ctx.parent, ctx.invokingState);
                    this.copyFrom(ctx);
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterPrimaryExp) {
                        listener.enterPrimaryExp(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitPrimaryExp) {
                        listener.exitPrimaryExp(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitPrimaryExp) {
                        return visitor.visitPrimaryExp(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.PrimaryExpContext = PrimaryExpContext;
            class PrimaryExpressionContext extends ParserRuleContext_1.ParserRuleContext {
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return ExpressionAntlrParser.RULE_primaryExpression;
                }
                copyFrom(ctx)
                {
                    super.copyFrom(ctx);
                }
            }
            exports.PrimaryExpressionContext = PrimaryExpressionContext;
            class ParenthesisExpContext extends PrimaryExpressionContext {
                OPEN_BRACKET()
                {
                    return this.getToken(ExpressionAntlrParser.OPEN_BRACKET, 0);
                }
                expression()
                {
                    return this.getRuleContext(0, ExpressionContext);
                }
                CLOSE_BRACKET()
                {
                    return this.getToken(ExpressionAntlrParser.CLOSE_BRACKET, 0);
                }
                constructor(ctx)
                {
                    super(ctx.parent, ctx.invokingState);
                    this.copyFrom(ctx);
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterParenthesisExp) {
                        listener.enterParenthesisExp(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitParenthesisExp) {
                        listener.exitParenthesisExp(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitParenthesisExp) {
                        return visitor.visitParenthesisExp(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.ParenthesisExpContext = ParenthesisExpContext;
            class ArrayCreationExpContext extends PrimaryExpressionContext {
                OPEN_SQUARE_BRACKET()
                {
                    return this.getToken(ExpressionAntlrParser.OPEN_SQUARE_BRACKET, 0);
                }
                CLOSE_SQUARE_BRACKET()
                {
                    return this.getToken(ExpressionAntlrParser.CLOSE_SQUARE_BRACKET, 0);
                }
                argsList()
                {
                    return this.tryGetRuleContext(0, ArgsListContext);
                }
                constructor(ctx)
                {
                    super(ctx.parent, ctx.invokingState);
                    this.copyFrom(ctx);
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterArrayCreationExp) {
                        listener.enterArrayCreationExp(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitArrayCreationExp) {
                        listener.exitArrayCreationExp(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitArrayCreationExp) {
                        return visitor.visitArrayCreationExp(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.ArrayCreationExpContext = ArrayCreationExpContext;
            class JsonCreationExpContext extends PrimaryExpressionContext {
                OPEN_CURLY_BRACKET()
                {
                    return this.getToken(ExpressionAntlrParser.OPEN_CURLY_BRACKET, 0);
                }
                CLOSE_CURLY_BRACKET()
                {
                    return this.getToken(ExpressionAntlrParser.CLOSE_CURLY_BRACKET, 0);
                }
                keyValuePairList()
                {
                    return this.tryGetRuleContext(0, KeyValuePairListContext);
                }
                constructor(ctx)
                {
                    super(ctx.parent, ctx.invokingState);
                    this.copyFrom(ctx);
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterJsonCreationExp) {
                        listener.enterJsonCreationExp(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitJsonCreationExp) {
                        listener.exitJsonCreationExp(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitJsonCreationExp) {
                        return visitor.visitJsonCreationExp(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.JsonCreationExpContext = JsonCreationExpContext;
            class NumericAtomContext extends PrimaryExpressionContext {
                NUMBER()
                {
                    return this.getToken(ExpressionAntlrParser.NUMBER, 0);
                }
                constructor(ctx)
                {
                    super(ctx.parent, ctx.invokingState);
                    this.copyFrom(ctx);
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterNumericAtom) {
                        listener.enterNumericAtom(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitNumericAtom) {
                        listener.exitNumericAtom(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitNumericAtom) {
                        return visitor.visitNumericAtom(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.NumericAtomContext = NumericAtomContext;
            class StringAtomContext extends PrimaryExpressionContext {
                STRING()
                {
                    return this.getToken(ExpressionAntlrParser.STRING, 0);
                }
                constructor(ctx)
                {
                    super(ctx.parent, ctx.invokingState);
                    this.copyFrom(ctx);
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterStringAtom) {
                        listener.enterStringAtom(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitStringAtom) {
                        listener.exitStringAtom(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitStringAtom) {
                        return visitor.visitStringAtom(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.StringAtomContext = StringAtomContext;
            class IdAtomContext extends PrimaryExpressionContext {
                IDENTIFIER()
                {
                    return this.getToken(ExpressionAntlrParser.IDENTIFIER, 0);
                }
                constructor(ctx)
                {
                    super(ctx.parent, ctx.invokingState);
                    this.copyFrom(ctx);
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterIdAtom) {
                        listener.enterIdAtom(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitIdAtom) {
                        listener.exitIdAtom(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitIdAtom) {
                        return visitor.visitIdAtom(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.IdAtomContext = IdAtomContext;
            class StringInterpolationAtomContext extends PrimaryExpressionContext {
                stringInterpolation()
                {
                    return this.getRuleContext(0, StringInterpolationContext);
                }
                constructor(ctx)
                {
                    super(ctx.parent, ctx.invokingState);
                    this.copyFrom(ctx);
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterStringInterpolationAtom) {
                        listener.enterStringInterpolationAtom(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitStringInterpolationAtom) {
                        listener.exitStringInterpolationAtom(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitStringInterpolationAtom) {
                        return visitor.visitStringInterpolationAtom(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.StringInterpolationAtomContext = StringInterpolationAtomContext;
            class MemberAccessExpContext extends PrimaryExpressionContext {
                primaryExpression()
                {
                    return this.getRuleContext(0, PrimaryExpressionContext);
                }
                DOT()
                {
                    return this.getToken(ExpressionAntlrParser.DOT, 0);
                }
                IDENTIFIER()
                {
                    return this.getToken(ExpressionAntlrParser.IDENTIFIER, 0);
                }
                constructor(ctx)
                {
                    super(ctx.parent, ctx.invokingState);
                    this.copyFrom(ctx);
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterMemberAccessExp) {
                        listener.enterMemberAccessExp(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitMemberAccessExp) {
                        listener.exitMemberAccessExp(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitMemberAccessExp) {
                        return visitor.visitMemberAccessExp(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.MemberAccessExpContext = MemberAccessExpContext;
            class FuncInvokeExpContext extends PrimaryExpressionContext {
                primaryExpression()
                {
                    return this.getRuleContext(0, PrimaryExpressionContext);
                }
                OPEN_BRACKET()
                {
                    return this.getToken(ExpressionAntlrParser.OPEN_BRACKET, 0);
                }
                CLOSE_BRACKET()
                {
                    return this.getToken(ExpressionAntlrParser.CLOSE_BRACKET, 0);
                }
                NON()
                {
                    return this.tryGetToken(ExpressionAntlrParser.NON, 0);
                }
                argsList()
                {
                    return this.tryGetRuleContext(0, ArgsListContext);
                }
                constructor(ctx)
                {
                    super(ctx.parent, ctx.invokingState);
                    this.copyFrom(ctx);
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterFuncInvokeExp) {
                        listener.enterFuncInvokeExp(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitFuncInvokeExp) {
                        listener.exitFuncInvokeExp(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitFuncInvokeExp) {
                        return visitor.visitFuncInvokeExp(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.FuncInvokeExpContext = FuncInvokeExpContext;
            class IndexAccessExpContext extends PrimaryExpressionContext {
                primaryExpression()
                {
                    return this.getRuleContext(0, PrimaryExpressionContext);
                }
                OPEN_SQUARE_BRACKET()
                {
                    return this.getToken(ExpressionAntlrParser.OPEN_SQUARE_BRACKET, 0);
                }
                expression()
                {
                    return this.getRuleContext(0, ExpressionContext);
                }
                CLOSE_SQUARE_BRACKET()
                {
                    return this.getToken(ExpressionAntlrParser.CLOSE_SQUARE_BRACKET, 0);
                }
                constructor(ctx)
                {
                    super(ctx.parent, ctx.invokingState);
                    this.copyFrom(ctx);
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterIndexAccessExp) {
                        listener.enterIndexAccessExp(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitIndexAccessExp) {
                        listener.exitIndexAccessExp(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitIndexAccessExp) {
                        return visitor.visitIndexAccessExp(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.IndexAccessExpContext = IndexAccessExpContext;
            class StringInterpolationContext extends ParserRuleContext_1.ParserRuleContext {
                STRING_INTERPOLATION_START(i)
                {
                    if (i === undefined) {
                        return this.getTokens(ExpressionAntlrParser.STRING_INTERPOLATION_START);
                    }
                    else {
                        return this.getToken(ExpressionAntlrParser.STRING_INTERPOLATION_START, i);
                    }
                }
                ESCAPE_CHARACTER(i)
                {
                    if (i === undefined) {
                        return this.getTokens(ExpressionAntlrParser.ESCAPE_CHARACTER);
                    }
                    else {
                        return this.getToken(ExpressionAntlrParser.ESCAPE_CHARACTER, i);
                    }
                }
                TEMPLATE(i)
                {
                    if (i === undefined) {
                        return this.getTokens(ExpressionAntlrParser.TEMPLATE);
                    }
                    else {
                        return this.getToken(ExpressionAntlrParser.TEMPLATE, i);
                    }
                }
                textContent(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(TextContentContext);
                    }
                    else {
                        return this.getRuleContext(i, TextContentContext);
                    }
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return ExpressionAntlrParser.RULE_stringInterpolation;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterStringInterpolation) {
                        listener.enterStringInterpolation(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitStringInterpolation) {
                        listener.exitStringInterpolation(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitStringInterpolation) {
                        return visitor.visitStringInterpolation(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.StringInterpolationContext = StringInterpolationContext;
            class TextContentContext extends ParserRuleContext_1.ParserRuleContext {
                TEXT_CONTENT(i)
                {
                    if (i === undefined) {
                        return this.getTokens(ExpressionAntlrParser.TEXT_CONTENT);
                    }
                    else {
                        return this.getToken(ExpressionAntlrParser.TEXT_CONTENT, i);
                    }
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return ExpressionAntlrParser.RULE_textContent;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterTextContent) {
                        listener.enterTextContent(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitTextContent) {
                        listener.exitTextContent(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitTextContent) {
                        return visitor.visitTextContent(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.TextContentContext = TextContentContext;
            class ArgsListContext extends ParserRuleContext_1.ParserRuleContext {
                lambda(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(LambdaContext);
                    }
                    else {
                        return this.getRuleContext(i, LambdaContext);
                    }
                }
                expression(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(ExpressionContext);
                    }
                    else {
                        return this.getRuleContext(i, ExpressionContext);
                    }
                }
                COMMA(i)
                {
                    if (i === undefined) {
                        return this.getTokens(ExpressionAntlrParser.COMMA);
                    }
                    else {
                        return this.getToken(ExpressionAntlrParser.COMMA, i);
                    }
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return ExpressionAntlrParser.RULE_argsList;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterArgsList) {
                        listener.enterArgsList(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitArgsList) {
                        listener.exitArgsList(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitArgsList) {
                        return visitor.visitArgsList(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.ArgsListContext = ArgsListContext;
            class LambdaContext extends ParserRuleContext_1.ParserRuleContext {
                IDENTIFIER()
                {
                    return this.getToken(ExpressionAntlrParser.IDENTIFIER, 0);
                }
                ARROW()
                {
                    return this.getToken(ExpressionAntlrParser.ARROW, 0);
                }
                expression()
                {
                    return this.getRuleContext(0, ExpressionContext);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return ExpressionAntlrParser.RULE_lambda;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterLambda) {
                        listener.enterLambda(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitLambda) {
                        listener.exitLambda(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitLambda) {
                        return visitor.visitLambda(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.LambdaContext = LambdaContext;
            class KeyValuePairListContext extends ParserRuleContext_1.ParserRuleContext {
                keyValuePair(i)
                {
                    if (i === undefined) {
                        return this.getRuleContexts(KeyValuePairContext);
                    }
                    else {
                        return this.getRuleContext(i, KeyValuePairContext);
                    }
                }
                COMMA(i)
                {
                    if (i === undefined) {
                        return this.getTokens(ExpressionAntlrParser.COMMA);
                    }
                    else {
                        return this.getToken(ExpressionAntlrParser.COMMA, i);
                    }
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return ExpressionAntlrParser.RULE_keyValuePairList;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterKeyValuePairList) {
                        listener.enterKeyValuePairList(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitKeyValuePairList) {
                        listener.exitKeyValuePairList(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitKeyValuePairList) {
                        return visitor.visitKeyValuePairList(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.KeyValuePairListContext = KeyValuePairListContext;
            class KeyValuePairContext extends ParserRuleContext_1.ParserRuleContext {
                key()
                {
                    return this.getRuleContext(0, KeyContext);
                }
                COLON()
                {
                    return this.getToken(ExpressionAntlrParser.COLON, 0);
                }
                expression()
                {
                    return this.getRuleContext(0, ExpressionContext);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return ExpressionAntlrParser.RULE_keyValuePair;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterKeyValuePair) {
                        listener.enterKeyValuePair(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitKeyValuePair) {
                        listener.exitKeyValuePair(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitKeyValuePair) {
                        return visitor.visitKeyValuePair(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.KeyValuePairContext = KeyValuePairContext;
            class KeyContext extends ParserRuleContext_1.ParserRuleContext {
                IDENTIFIER()
                {
                    return this.tryGetToken(ExpressionAntlrParser.IDENTIFIER, 0);
                }
                STRING()
                {
                    return this.tryGetToken(ExpressionAntlrParser.STRING, 0);
                }
                constructor(parent, invokingState)
                {
                    super(parent, invokingState);
                }
                // @Override
                get ruleIndex()
                {
                    return ExpressionAntlrParser.RULE_key;
                }
                // @Override
                enterRule(listener)
                {
                    if (listener.enterKey) {
                        listener.enterKey(this);
                    }
                }
                // @Override
                exitRule(listener)
                {
                    if (listener.exitKey) {
                        listener.exitKey(this);
                    }
                }
                // @Override
                accept(visitor)
                {
                    if (visitor.visitKey) {
                        return visitor.visitKey(this);
                    }
                    else {
                        return visitor.visitChildren(this);
                    }
                }
            }
            exports.KeyContext = KeyContext;

        }, {
            "antlr4ts/FailedPredicateException": 228,
            "antlr4ts/NoViableAltException": 236,
            "antlr4ts/Parser": 237,
            "antlr4ts/ParserRuleContext": 239,
            "antlr4ts/RecognitionException": 242,
            "antlr4ts/Token": 248,
            "antlr4ts/VocabularyImpl": 250,
            "antlr4ts/atn/ATN": 251,
            "antlr4ts/atn/ATNDeserializer": 255,
            "antlr4ts/atn/ParserATNSimulator": 292,
            "antlr4ts/misc/Utils": 337
        }],
        199: [function(require, module, exports) {
            "use strict";
            function __export(m) {
                for (var p in m)
                    if (!exports.hasOwnProperty(p))
                        exports[p] = m[p];
            }
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            __export(require("./ExpressionAntlrLexer"));
            __export(require("./ExpressionAntlrParser"));

        }, {
            "./ExpressionAntlrLexer": 197,
            "./ExpressionAntlrParser": 198
        }],
        200: [function(require, module, exports) {
            "use strict";
            function __export(m) {
                for (var p in m)
                    if (!exports.hasOwnProperty(p))
                        exports[p] = m[p];
            }
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            __export(require("./parseErrorListener"));
            __export(require("./expressionParser"));
            __export(require("./util"));
            __export(require("./generated"));

        }, {
            "./expressionParser": 196,
            "./generated": 199,
            "./parseErrorListener": 201,
            "./util": 202
        }],
        201: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // tslint:disable-next-line: completed-docs
            /**
             * Expression parser error listener.
             */
            class ParseErrorListener {
                /**
                     * Throws a syntax error based on the current context.
                     * @param _recognizer An Antlr4 runtime recognizer.
                     * @param _offendingSymbol The token violating the lexer rules.
                     * @param line The line number where the error occurred.
                     * @param charPositionInLine The position of character in the line where the error occurred.
                     * @param msg The error message.
                     * @param _e The `RecognitionException`.
                     */
                syntaxError(_recognizer, _offendingSymbol, line, charPositionInLine, msg, // eslint-disable-next-line @typescript-eslint/no-unused-vars
                _e)
                {
                    throw Error(`syntax error at line ${line}:${charPositionInLine} ${msg}`);
                }
            }
            ParseErrorListener.Instance = new ParseErrorListener();
            exports.ParseErrorListener = ParseErrorListener;

        }, {}],
        202: [function(require, module, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            /**
             * util class
             */
            class Util {
                /**
                     * trim char
                     * @param str input string
                     * @param char trim character
                     */
                static trim(str, char)
                {
                    if (char !== undefined) {
                        return str.replace(new RegExp(''.concat('^\\', char, '+|\\', char, '+$'), 'g'), '');
                    }
                    return str.trim();
                }
            }
            exports.Util = Util;

        }, {}],
        203: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * Error listener for Regex.
             */
            // re-enable when this rule honors underscore prefix
            /* eslint-disable @typescript-eslint/no-unused-vars */
            class RegexErrorListener {
                /**
                     * Upon syntax error, notify any interested parties.
                     * @param _recognizer What parser got the error. From this object, you can access the context as well as the input stream.
                     * @param _offendingSymbol Offending token in the input token stream, unless recognizer is a lexer, then it's null.
                     * @param line Line number in the input where the error occurred.
                     * @param charPositionInLine Character position within the line where the error occurred.
                     * @param msg Message to emit.
                     * @param _e Exception generated by the parser that led to the reporting of an error.
                     */
                syntaxError(_recognizer, _offendingSymbol, _line, _charPositionInLine, _msg, _e)
                {
                    throw Error(`Regular expression is invalid.`);
                }
            }
            RegexErrorListener.Instance = new RegexErrorListener();
            exports.RegexErrorListener = RegexErrorListener;

        }, {}],
        204: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * Type expected from evalating an expression.
             */
            var ReturnType;
            (function(ReturnType) {
                /**
                     * True or false boolean value.
                     */
                ReturnType[ReturnType["Boolean"] = 1] = "Boolean";
                /**
                     * Numerical value like int, float, double, ...
                     */
                ReturnType[ReturnType["Number"] = 2] = "Number";
                /**
                     * Any value is possible.
                     */
                ReturnType[ReturnType["Object"] = 4] = "Object";
                /**
                     * String value.
                     */
                ReturnType[ReturnType["String"] = 8] = "String";
                /**
                     * Array value.
                     */
                ReturnType[ReturnType["Array"] = 16] = "Array";
            })(ReturnType = exports.ReturnType || (exports.ReturnType = {}));

        }, {}],
        205: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * Time zone converter.
             * (1) From Windows (.NET) timezone to iana timezone.
             * (2) From iana timezone to windows (.NET) timezone.
             * windows ref: https://support.microsoft.com/en-us/help/22803/daylight-saving-time.
             * iana ref: https://www.iana.org/time-zones.
             */
            class TimeZoneConverter {
                /**
                     * convert IANA timezone format to windows timezone format.
                     * @param ianaTimeZoneId IANA timezone format.
                     * @returns windows timezone format.
                     */
                static ianaToWindows(ianaTimeZoneId)
                {
                    this.loadData();
                    if (this.ianaToWindowsMap.has(ianaTimeZoneId)) {
                        return this.ianaToWindowsMap.get(ianaTimeZoneId);
                    }
                    return ianaTimeZoneId;
                }
                /**
                     * Convert windows timezone to iana timezone.
                     * @param windowsTimeZoneId Windows timezone format.
                     * @returns Iana timezone format.
                     */
                static windowsToIana(windowsTimeZoneId)
                {
                    this.loadData();
                    if (this.windowsToIanaMap.has(`001|${windowsTimeZoneId}`)) {
                        return this.windowsToIanaMap.get(`001|${windowsTimeZoneId}`);
                    }
                    return windowsTimeZoneId;
                }
                /**
                     * Verify the string is windows timezone or iana string
                     * @param timezoneStr time zone string
                     * @returns is the string is time zone string
                     */
                static verifyTimeZoneStr(timezoneStr)
                {
                    this.loadData();
                    return this.validTimezonStr.includes(timezoneStr);
                }
                /**
                     * @private
                     */
                static loadData()
                {
                    const data = this.mappingString;
                    const lines = data.split(this.seperator);
                    for (const line of lines) {
                        const tokens = line.split(',');
                        const windowsID = tokens[0];
                        const territory = tokens[1];
                        const ianaIDs = tokens[2].split(' ');
                        for (const ianaID of ianaIDs) {
                            if (!this.ianaToWindowsMap.has(ianaID)) {
                                this.ianaToWindowsMap.set(ianaID, windowsID);
                            }
                            if (!this.validTimezonStr.includes(ianaID)) {
                                this.validTimezonStr.push(ianaID);
                            }
                        }
                        if (!this.windowsToIanaMap.has(`${territory}|${windowsID}`)) {
                            this.windowsToIanaMap.set(`${territory}|${windowsID}`, ianaIDs[0]);
                        }
                        if (!this.validTimezonStr.includes(windowsID)) {
                            this.validTimezonStr.push(windowsID);
                        }
                    }
                }
            }
            TimeZoneConverter.ianaToWindowsMap = new Map();
            TimeZoneConverter.windowsToIanaMap = new Map();
            TimeZoneConverter.validTimezonStr = [];
            TimeZoneConverter.seperator = '    ';
            TimeZoneConverter.mappingString = 'AUS Central Standard Time,001,Australia/Darwin\
    AUS Central Standard Time,AU,Australia/Darwin\
    AUS Eastern Standard Time,001,Australia/Sydney\
    AUS Eastern Standard Time,AU,Australia/Sydney Australia/Melbourne\
    Afghanistan Standard Time,001,Asia/Kabul\
    Afghanistan Standard Time,AF,Asia/Kabul\
    Alaskan Standard Time,001,America/Anchorage\
    Alaskan Standard Time,US,America/Anchorage America/Juneau America/Metlakatla America/Nome America/Sitka America/Yakutat\
    Aleutian Standard Time,001,America/Adak\
    Aleutian Standard Time,US,America/Adak\
    Altai Standard Time,001,Asia/Barnaul\
    Altai Standard Time,RU,Asia/Barnaul\
    Arab Standard Time,001,Asia/Riyadh\
    Arab Standard Time,BH,Asia/Qatar\
    Arab Standard Time,KW,Asia/Riyadh\
    Arab Standard Time,QA,Asia/Qatar\
    Arab Standard Time,SA,Asia/Riyadh\
    Arab Standard Time,YE,Asia/Riyadh\
    Arabian Standard Time,001,Asia/Dubai\
    Arabian Standard Time,AE,Asia/Dubai\
    Arabian Standard Time,OM,Asia/Dubai\
    Arabian Standard Time,ZZ,Etc/GMT-4\
    Arabic Standard Time,001,Asia/Baghdad\
    Arabic Standard Time,IQ,Asia/Baghdad\
    Argentina Standard Time,001,America/Argentina/Buenos_Aires\
    Argentina Standard Time,AR,America/Argentina/Buenos_Aires America/Argentina/La_Rioja America/Argentina/Rio_Gallegos America/Argentina/Salta America/Argentina/San_Juan America/Argentina/San_Luis America/Argentina/Tucuman America/Argentina/Ushuaia America/Argentina/Catamarca America/Argentina/Cordoba America/Argentina/Jujuy America/Argentina/Mendoza\
    Astrakhan Standard Time,001,Europe/Astrakhan\
    Astrakhan Standard Time,RU,Europe/Astrakhan Europe/Ulyanovsk\
    Atlantic Standard Time,001,America/Halifax\
    Atlantic Standard Time,BM,Atlantic/Bermuda\
    Atlantic Standard Time,CA,America/Halifax America/Glace_Bay America/Goose_Bay America/Moncton\
    Atlantic Standard Time,GL,America/Thule\
    Aus Central W. Standard Time,001,Australia/Eucla\
    Aus Central W. Standard Time,AU,Australia/Eucla\
    Azerbaijan Standard Time,001,Asia/Baku\
    Azerbaijan Standard Time,AZ,Asia/Baku\
    Azores Standard Time,001,Atlantic/Azores\
    Azores Standard Time,GL,America/Scoresbysund\
    Azores Standard Time,PT,Atlantic/Azores\
    Bahia Standard Time,001,America/Bahia\
    Bahia Standard Time,BR,America/Bahia\
    Bangladesh Standard Time,001,Asia/Dhaka\
    Bangladesh Standard Time,BD,Asia/Dhaka\
    Bangladesh Standard Time,BT,Asia/Thimphu\
    Belarus Standard Time,001,Europe/Minsk\
    Belarus Standard Time,BY,Europe/Minsk\
    Bougainville Standard Time,001,Pacific/Bougainville\
    Bougainville Standard Time,PG,Pacific/Bougainville\
    Canada Central Standard Time,001,America/Regina\
    Canada Central Standard Time,CA,America/Regina America/Swift_Current\
    Cape Verde Standard Time,001,Atlantic/Cape_Verde\
    Cape Verde Standard Time,CV,Atlantic/Cape_Verde\
    Cape Verde Standard Time,ZZ,Etc/GMT+1\
    Caucasus Standard Time,001,Asia/Yerevan\
    Caucasus Standard Time,AM,Asia/Yerevan\
    Cen. Australia Standard Time,001,Australia/Adelaide\
    Cen. Australia Standard Time,AU,Australia/Adelaide Australia/Broken_Hill\
    Central America Standard Time,001,America/Guatemala\
    Central America Standard Time,BZ,America/Belize\
    Central America Standard Time,CR,America/Costa_Rica\
    Central America Standard Time,EC,Pacific/Galapagos\
    Central America Standard Time,GT,America/Guatemala\
    Central America Standard Time,HN,America/Tegucigalpa\
    Central America Standard Time,NI,America/Managua\
    Central America Standard Time,SV,America/El_Salvador\
    Central America Standard Time,ZZ,Etc/GMT+6\
    Central Asia Standard Time,001,Asia/Almaty\
    Central Asia Standard Time,AQ,Antarctica/Vostok\
    Central Asia Standard Time,CN,Asia/Urumqi\
    Central Asia Standard Time,DG,Indian/Chagos\
    Central Asia Standard Time,IO,Indian/Chagos\
    Central Asia Standard Time,KG,Asia/Bishkek\
    Central Asia Standard Time,KZ,Asia/Almaty Asia/Qyzylorda\
    Central Asia Standard Time,ZZ,Etc/GMT-6\
    Central Brazilian Standard Time,001,America/Cuiaba\
    Central Brazilian Standard Time,BR,America/Cuiaba America/Campo_Grande\
    Central Europe Standard Time,001,Europe/Budapest\
    Central Europe Standard Time,AL,Europe/Tirane\
    Central Europe Standard Time,CZ,Europe/Prague\
    Central Europe Standard Time,HU,Europe/Budapest\
    Central Europe Standard Time,ME,Europe/Belgrade\
    Central Europe Standard Time,RS,Europe/Belgrade\
    Central Europe Standard Time,SI,Europe/Belgrade\
    Central Europe Standard Time,SK,Europe/Prague\
    Central Europe Standard Time,XK,Europe/Belgrade\
    Central European Standard Time,001,Europe/Warsaw\
    Central European Standard Time,BA,Europe/Belgrade\
    Central European Standard Time,HR,Europe/Belgrade\
    Central European Standard Time,MK,Europe/Belgrade\
    Central European Standard Time,PL,Europe/Warsaw\
    Central Pacific Standard Time,001,Pacific/Guadalcanal\
    Central Pacific Standard Time,AU,Antarctica/Macquarie\
    Central Pacific Standard Time,FM,Pacific/Pohnpei Pacific/Kosrae\
    Central Pacific Standard Time,NC,Pacific/Noumea\
    Central Pacific Standard Time,SB,Pacific/Guadalcanal\
    Central Pacific Standard Time,VU,Pacific/Efate\
    Central Pacific Standard Time,ZZ,Etc/GMT-11\
    Central Standard Time (Mexico),001,America/Mexico_City\
    Central Standard Time (Mexico),MX,America/Mexico_City America/Bahia_Banderas America/Merida America/Monterrey\
    Central Standard Time,001,America/Chicago\
    Central Standard Time,CA,America/Winnipeg America/Rainy_River America/Rankin_Inlet America/Resolute\
    Central Standard Time,MX,America/Matamoros\
    Central Standard Time,US,America/Chicago America/Indiana/Knox America/Indiana/Tell_City America/Menominee America/North_Dakota/Beulah America/North_Dakota/Center America/North_Dakota/New_Salem\
    Central Standard Time,ZZ,CST6CDT\
    Chatham Islands Standard Time,001,Pacific/Chatham\
    Chatham Islands Standard Time,NZ,Pacific/Chatham\
    China Standard Time,001,Asia/Shanghai\
    China Standard Time,CN,Asia/Shanghai\
    China Standard Time,HK,Asia/Hong_Kong\
    China Standard Time,MO,Asia/Macau\
    Cuba Standard Time,001,America/Havana\
    Cuba Standard Time,CU,America/Havana\
    Dateline Standard Time,001,Etc/GMT+12\
    Dateline Standard Time,ZZ,Etc/GMT+12\
    E. Africa Standard Time,001,Africa/Nairobi\
    E. Africa Standard Time,AQ,Antarctica/Syowa\
    E. Africa Standard Time,DJ,Africa/Nairobi\
    E. Africa Standard Time,ER,Africa/Nairobi\
    E. Africa Standard Time,ET,Africa/Nairobi\
    E. Africa Standard Time,KE,Africa/Nairobi\
    E. Africa Standard Time,KM,Africa/Nairobi\
    E. Africa Standard Time,MG,Africa/Nairobi\
    E. Africa Standard Time,SO,Africa/Nairobi\
    E. Africa Standard Time,SS,Africa/Juba\
    E. Africa Standard Time,TZ,Africa/Nairobi\
    E. Africa Standard Time,UG,Africa/Nairobi\
    E. Africa Standard Time,YT,Africa/Nairobi\
    E. Africa Standard Time,ZZ,Etc/GMT-3\
    E. Australia Standard Time,001,Australia/Brisbane\
    E. Australia Standard Time,AU,Australia/Brisbane Australia/Lindeman\
    E. Europe Standard Time,001,Europe/Chisinau\
    E. Europe Standard Time,MD,Europe/Chisinau\
    E. South America Standard Time,001,America/Sao_Paulo\
    E. South America Standard Time,BR,America/Sao_Paulo\
    Easter Island Standard Time,001,Pacific/Easter\
    Easter Island Standard Time,CL,Pacific/Easter\
    Eastern Standard Time (Mexico),001,America/Cancun\
    Eastern Standard Time (Mexico),MX,America/Cancun\
    Eastern Standard Time,001,America/New_York\
    Eastern Standard Time,BS,America/Nassau\
    Eastern Standard Time,CA,America/Toronto America/Iqaluit America/Nipigon America/Pangnirtung America/Thunder_Bay\
    Eastern Standard Time,US,America/New_York America/Detroit America/Indiana/Petersburg America/Indiana/Vincennes America/Indiana/Winamac America/Kentucky/Monticello America/Kentucky/Louisville\
    Eastern Standard Time,ZZ,EST5EDT\
    Egypt Standard Time,001,Africa/Cairo\
    Egypt Standard Time,EG,Africa/Cairo\
    Ekaterinburg Standard Time,001,Asia/Yekaterinburg\
    Ekaterinburg Standard Time,RU,Asia/Yekaterinburg\
    FLE Standard Time,001,Europe/Kiev\
    FLE Standard Time,AX,Europe/Helsinki\
    FLE Standard Time,BG,Europe/Sofia\
    FLE Standard Time,EE,Europe/Tallinn\
    FLE Standard Time,FI,Europe/Helsinki\
    FLE Standard Time,LT,Europe/Vilnius\
    FLE Standard Time,LV,Europe/Riga\
    FLE Standard Time,UA,Europe/Kiev Europe/Uzhgorod Europe/Zaporozhye\
    Fiji Standard Time,001,Pacific/Fiji\
    Fiji Standard Time,FJ,Pacific/Fiji\
    GMT Standard Time,001,Europe/London\
    GMT Standard Time,ES,Atlantic/Canary\
    GMT Standard Time,FO,Atlantic/Faroe\
    GMT Standard Time,GB,Europe/London\
    GMT Standard Time,GG,Europe/London\
    GMT Standard Time,IC,Atlantic/Canary\
    GMT Standard Time,IE,Europe/Dublin\
    GMT Standard Time,IM,Europe/London\
    GMT Standard Time,JE,Europe/London\
    GMT Standard Time,PT,Europe/Lisbon Atlantic/Madeira\
    GTB Standard Time,001,Europe/Bucharest\
    GTB Standard Time,CY,Asia/Nicosia Asia/Famagusta\
    GTB Standard Time,GR,Europe/Athens\
    GTB Standard Time,RO,Europe/Bucharest\
    Georgian Standard Time,001,Asia/Tbilisi\
    Georgian Standard Time,GE,Asia/Tbilisi\
    Greenland Standard Time,001,America/Godthab\
    Greenland Standard Time,GL,America/Godthab\
    Greenwich Standard Time,001,Atlantic/Reykjavik\
    Greenwich Standard Time,AC,Atlantic/St_Helena\
    Greenwich Standard Time,BF,Africa/Abidjan\
    Greenwich Standard Time,CI,Africa/Abidjan\
    Greenwich Standard Time,GH,Africa/Accra\
    Greenwich Standard Time,GM,Africa/Abidjan\
    Greenwich Standard Time,GN,Africa/Abidjan\
    Greenwich Standard Time,GW,Africa/Bissau\
    Greenwich Standard Time,IS,Atlantic/Reykjavik\
    Greenwich Standard Time,LR,Africa/Monrovia\
    Greenwich Standard Time,ML,Africa/Abidjan\
    Greenwich Standard Time,MR,Africa/Abidjan\
    Greenwich Standard Time,SH,Africa/Abidjan\
    Greenwich Standard Time,SL,Africa/Abidjan\
    Greenwich Standard Time,SN,Africa/Abidjan\
    Greenwich Standard Time,TA,Atlantic/St_Helena\
    Greenwich Standard Time,TG,Africa/Abidjan\
    Haiti Standard Time,001,America/Port-au-Prince\
    Haiti Standard Time,HT,America/Port-au-Prince\
    Hawaiian Standard Time,001,Pacific/Honolulu\
    Hawaiian Standard Time,CK,Pacific/Rarotonga\
    Hawaiian Standard Time,PF,Pacific/Tahiti\
    Hawaiian Standard Time,UM,Pacific/Honolulu\
    Hawaiian Standard Time,US,Pacific/Honolulu\
    Hawaiian Standard Time,ZZ,Etc/GMT+10\
    India Standard Time,001,Asia/Kolkata\
    India Standard Time,IN,Asia/Kolkata\
    Iran Standard Time,001,Asia/Tehran\
    Iran Standard Time,IR,Asia/Tehran\
    Israel Standard Time,001,Asia/Jerusalem\
    Israel Standard Time,IL,Asia/Jerusalem\
    Jordan Standard Time,001,Asia/Amman\
    Jordan Standard Time,JO,Asia/Amman\
    Kaliningrad Standard Time,001,Europe/Kaliningrad\
    Kaliningrad Standard Time,RU,Europe/Kaliningrad\
    Kamchatka Standard Time,001,Asia/Kamchatka\
    Korea Standard Time,001,Asia/Seoul\
    Korea Standard Time,KR,Asia/Seoul\
    Libya Standard Time,001,Africa/Tripoli\
    Libya Standard Time,LY,Africa/Tripoli\
    Line Islands Standard Time,001,Pacific/Kiritimati\
    Line Islands Standard Time,KI,Pacific/Kiritimati\
    Line Islands Standard Time,ZZ,Etc/GMT-14\
    Lord Howe Standard Time,001,Australia/Lord_Howe\
    Lord Howe Standard Time,AU,Australia/Lord_Howe\
    Magadan Standard Time,001,Asia/Magadan\
    Magadan Standard Time,RU,Asia/Magadan\
    Magallanes Standard Time,001,America/Punta_Arenas\
    Magallanes Standard Time,AQ,Antarctica/Palmer\
    Magallanes Standard Time,CL,America/Punta_Arenas\
    Marquesas Standard Time,001,Pacific/Marquesas\
    Marquesas Standard Time,PF,Pacific/Marquesas\
    Mauritius Standard Time,001,Indian/Mauritius\
    Mauritius Standard Time,MU,Indian/Mauritius\
    Mauritius Standard Time,RE,Indian/Reunion\
    Mauritius Standard Time,SC,Indian/Mahe\
    Mid-Atlantic Standard Time,001,Etc/GMT+2\
    Middle East Standard Time,001,Asia/Beirut\
    Middle East Standard Time,LB,Asia/Beirut\
    Montevideo Standard Time,001,America/Montevideo\
    Montevideo Standard Time,UY,America/Montevideo\
    Morocco Standard Time,001,Africa/Casablanca\
    Morocco Standard Time,EH,Africa/El_Aaiun\
    Morocco Standard Time,MA,Africa/Casablanca\
    Mountain Standard Time (Mexico),001,America/Chihuahua\
    Mountain Standard Time (Mexico),MX,America/Chihuahua America/Mazatlan\
    Mountain Standard Time,001,America/Denver\
    Mountain Standard Time,CA,America/Edmonton America/Cambridge_Bay America/Inuvik America/Yellowknife\
    Mountain Standard Time,MX,America/Ojinaga\
    Mountain Standard Time,US,America/Denver America/Boise\
    Mountain Standard Time,ZZ,MST7MDT\
    Myanmar Standard Time,001,Asia/Yangon\
    Myanmar Standard Time,CC,Indian/Cocos\
    Myanmar Standard Time,MM,Asia/Yangon\
    N. Central Asia Standard Time,001,Asia/Novosibirsk\
    N. Central Asia Standard Time,RU,Asia/Novosibirsk\
    Namibia Standard Time,001,Africa/Windhoek\
    Namibia Standard Time,NA,Africa/Windhoek\
    Nepal Standard Time,001,Asia/Kathmandu\
    Nepal Standard Time,NP,Asia/Kathmandu\
    New Zealand Standard Time,001,Pacific/Auckland\
    New Zealand Standard Time,AQ,Pacific/Auckland\
    New Zealand Standard Time,NZ,Pacific/Auckland\
    Newfoundland Standard Time,001,America/St_Johns\
    Newfoundland Standard Time,CA,America/St_Johns\
    Norfolk Standard Time,001,Pacific/Norfolk\
    Norfolk Standard Time,NF,Pacific/Norfolk\
    North Asia East Standard Time,001,Asia/Irkutsk\
    North Asia East Standard Time,RU,Asia/Irkutsk\
    North Asia Standard Time,001,Asia/Krasnoyarsk\
    North Asia Standard Time,RU,Asia/Krasnoyarsk Asia/Novokuznetsk\
    North Korea Standard Time,001,Asia/Pyongyang\
    North Korea Standard Time,KP,Asia/Pyongyang\
    Omsk Standard Time,001,Asia/Omsk\
    Omsk Standard Time,RU,Asia/Omsk\
    Pacific SA Standard Time,001,America/Santiago\
    Pacific SA Standard Time,CL,America/Santiago\
    Pacific Standard Time (Mexico),001,America/Tijuana\
    Pacific Standard Time (Mexico),MX,America/Tijuana\
    Pacific Standard Time,001,America/Los_Angeles\
    Pacific Standard Time,CA,America/Vancouver America/Dawson America/Whitehorse\
    Pacific Standard Time,US,America/Los_Angeles\
    Pacific Standard Time,ZZ,PST8PDT\
    Pakistan Standard Time,001,Asia/Karachi\
    Pakistan Standard Time,PK,Asia/Karachi\
    Paraguay Standard Time,001,America/Asuncion\
    Paraguay Standard Time,PY,America/Asuncion\
    Romance Standard Time,001,Europe/Paris\
    Romance Standard Time,BE,Europe/Brussels\
    Romance Standard Time,DK,Europe/Copenhagen\
    Romance Standard Time,EA,Africa/Ceuta\
    Romance Standard Time,ES,Europe/Madrid Africa/Ceuta\
    Romance Standard Time,FR,Europe/Paris\
    Russia Time Zone 10,001,Asia/Srednekolymsk\
    Russia Time Zone 10,RU,Asia/Srednekolymsk\
    Russia Time Zone 11,001,Asia/Kamchatka\
    Russia Time Zone 11,RU,Asia/Kamchatka Asia/Anadyr\
    Russia Time Zone 3,001,Europe/Samara\
    Russia Time Zone 3,RU,Europe/Samara\
    Russian Standard Time,001,Europe/Moscow\
    Russian Standard Time,RU,Europe/Moscow Europe/Kirov Europe/Volgograd\
    Russian Standard Time,UA,Europe/Simferopol\
    SA Eastern Standard Time,001,America/Cayenne\
    SA Eastern Standard Time,AQ,Antarctica/Rothera\
    SA Eastern Standard Time,BR,America/Fortaleza America/Belem America/Maceio America/Recife America/Santarem\
    SA Eastern Standard Time,FK,Atlantic/Stanley\
    SA Eastern Standard Time,GF,America/Cayenne\
    SA Eastern Standard Time,SR,America/Paramaribo\
    SA Eastern Standard Time,ZZ,Etc/GMT+3\
    SA Pacific Standard Time,001,America/Bogota\
    SA Pacific Standard Time,BR,America/Rio_Branco America/Eirunepe\
    SA Pacific Standard Time,CA,America/Atikokan\
    SA Pacific Standard Time,CO,America/Bogota\
    SA Pacific Standard Time,EC,America/Guayaquil\
    SA Pacific Standard Time,JM,America/Jamaica\
    SA Pacific Standard Time,KY,America/Panama\
    SA Pacific Standard Time,PA,America/Panama\
    SA Pacific Standard Time,PE,America/Lima\
    SA Pacific Standard Time,ZZ,Etc/GMT+5\
    SA Western Standard Time,001,America/La_Paz\
    SA Western Standard Time,AG,America/Port_of_Spain\
    SA Western Standard Time,AI,America/Port_of_Spain\
    SA Western Standard Time,AW,America/Curacao\
    SA Western Standard Time,BB,America/Barbados\
    SA Western Standard Time,BL,America/Port_of_Spain\
    SA Western Standard Time,BO,America/La_Paz\
    SA Western Standard Time,BQ,America/Curacao\
    SA Western Standard Time,BR,America/Manaus America/Boa_Vista America/Porto_Velho\
    SA Western Standard Time,CA,America/Blanc-Sablon\
    SA Western Standard Time,CW,America/Curacao\
    SA Western Standard Time,DM,America/Port_of_Spain\
    SA Western Standard Time,DO,America/Santo_Domingo\
    SA Western Standard Time,GD,America/Port_of_Spain\
    SA Western Standard Time,GP,America/Port_of_Spain\
    SA Western Standard Time,GY,America/Guyana\
    SA Western Standard Time,KN,America/Port_of_Spain\
    SA Western Standard Time,LC,America/Port_of_Spain\
    SA Western Standard Time,MF,America/Port_of_Spain\
    SA Western Standard Time,MQ,America/Martinique\
    SA Western Standard Time,MS,America/Port_of_Spain\
    SA Western Standard Time,PR,America/Puerto_Rico\
    SA Western Standard Time,SX,America/Curacao\
    SA Western Standard Time,TT,America/Port_of_Spain\
    SA Western Standard Time,VC,America/Port_of_Spain\
    SA Western Standard Time,VG,America/Port_of_Spain\
    SA Western Standard Time,VI,America/Port_of_Spain\
    SA Western Standard Time,ZZ,Etc/GMT+4\
    SE Asia Standard Time,001,Asia/Bangkok\
    SE Asia Standard Time,AQ,Antarctica/Davis\
    SE Asia Standard Time,CX,Indian/Christmas\
    SE Asia Standard Time,ID,Asia/Jakarta Asia/Pontianak\
    SE Asia Standard Time,KH,Asia/Bangkok\
    SE Asia Standard Time,LA,Asia/Bangkok\
    SE Asia Standard Time,TH,Asia/Bangkok\
    SE Asia Standard Time,VN,Asia/Ho_Chi_Minh\
    SE Asia Standard Time,ZZ,Etc/GMT-7\
    Saint Pierre Standard Time,001,America/Miquelon\
    Saint Pierre Standard Time,PM,America/Miquelon\
    Sakhalin Standard Time,001,Asia/Sakhalin\
    Sakhalin Standard Time,RU,Asia/Sakhalin\
    Samoa Standard Time,001,Pacific/Apia\
    Samoa Standard Time,WS,Pacific/Apia\
    Sao Tome Standard Time,001,Africa/Sao_Tome\
    Sao Tome Standard Time,ST,Africa/Sao_Tome\
    Saratov Standard Time,001,Europe/Saratov\
    Saratov Standard Time,RU,Europe/Saratov\
    Singapore Standard Time,001,Asia/Singapore\
    Singapore Standard Time,BN,Asia/Brunei\
    Singapore Standard Time,ID,Asia/Makassar\
    Singapore Standard Time,MY,Asia/Kuala_Lumpur Asia/Kuching\
    Singapore Standard Time,PH,Asia/Manila\
    Singapore Standard Time,SG,Asia/Singapore\
    Singapore Standard Time,ZZ,Etc/GMT-8\
    South Africa Standard Time,001,Africa/Johannesburg\
    South Africa Standard Time,BI,Africa/Maputo\
    South Africa Standard Time,BW,Africa/Maputo\
    South Africa Standard Time,CD,Africa/Maputo\
    South Africa Standard Time,LS,Africa/Johannesburg\
    South Africa Standard Time,MW,Africa/Maputo\
    South Africa Standard Time,MZ,Africa/Maputo\
    South Africa Standard Time,RW,Africa/Maputo\
    South Africa Standard Time,SZ,Africa/Johannesburg\
    South Africa Standard Time,ZA,Africa/Johannesburg\
    South Africa Standard Time,ZM,Africa/Maputo\
    South Africa Standard Time,ZW,Africa/Maputo\
    South Africa Standard Time,ZZ,Etc/GMT-2\
    Sri Lanka Standard Time,001,Asia/Colombo\
    Sri Lanka Standard Time,LK,Asia/Colombo\
    Sudan Standard Time,001,Africa/Khartoum\
    Sudan Standard Time,SD,Africa/Khartoum\
    Syria Standard Time,001,Asia/Damascus\
    Syria Standard Time,SY,Asia/Damascus\
    Taipei Standard Time,001,Asia/Taipei\
    Taipei Standard Time,TW,Asia/Taipei\
    Tasmania Standard Time,001,Australia/Hobart\
    Tasmania Standard Time,AU,Australia/Hobart Australia/Currie\
    Tocantins Standard Time,001,America/Araguaina\
    Tocantins Standard Time,BR,America/Araguaina\
    Tokyo Standard Time,001,Asia/Tokyo\
    Tokyo Standard Time,ID,Asia/Jayapura\
    Tokyo Standard Time,JP,Asia/Tokyo\
    Tokyo Standard Time,PW,Pacific/Palau\
    Tokyo Standard Time,TL,Asia/Dili\
    Tokyo Standard Time,ZZ,Etc/GMT-9\
    Tomsk Standard Time,001,Asia/Tomsk\
    Tomsk Standard Time,RU,Asia/Tomsk\
    Tonga Standard Time,001,Pacific/Tongatapu\
    Tonga Standard Time,TO,Pacific/Tongatapu\
    Transbaikal Standard Time,001,Asia/Chita\
    Transbaikal Standard Time,RU,Asia/Chita\
    Turkey Standard Time,001,Europe/Istanbul\
    Turkey Standard Time,TR,Europe/Istanbul\
    Turks And Caicos Standard Time,001,America/Grand_Turk\
    Turks And Caicos Standard Time,TC,America/Grand_Turk\
    US Eastern Standard Time,001,America/Indiana/Indianapolis\
    US Eastern Standard Time,US,America/Indiana/Indianapolis America/Indiana/Marengo America/Indiana/Vevay\
    US Mountain Standard Time,001,America/Phoenix\
    US Mountain Standard Time,CA,America/Dawson_Creek America/Creston America/Fort_Nelson\
    US Mountain Standard Time,MX,America/Hermosillo\
    US Mountain Standard Time,US,America/Phoenix\
    US Mountain Standard Time,ZZ,Etc/GMT+7\
    UTC+12,001,Etc/GMT-12\
    UTC+12,KI,Pacific/Tarawa\
    UTC+12,MH,Pacific/Majuro Pacific/Kwajalein\
    UTC+12,NR,Pacific/Nauru\
    UTC+12,TV,Pacific/Funafuti\
    UTC+12,UM,Pacific/Wake\
    UTC+12,WF,Pacific/Wallis\
    UTC+12,ZZ,Etc/GMT-12\
    UTC+13,001,Etc/GMT-13\
    UTC+13,KI,Pacific/Enderbury\
    UTC+13,TK,Pacific/Fakaofo\
    UTC+13,ZZ,Etc/GMT-13\
    UTC,001,Etc/UTC\
    UTC,GL,America/Danmarkshavn\
    UTC,ZZ,Etc/UTC\
    UTC-02,001,Etc/GMT+2\
    UTC-02,BR,America/Noronha\
    UTC-02,GS,Atlantic/South_Georgia\
    UTC-02,ZZ,Etc/GMT+2\
    UTC-08,001,Etc/GMT+8\
    UTC-08,PN,Pacific/Pitcairn\
    UTC-08,ZZ,Etc/GMT+8\
    UTC-09,001,Etc/GMT+9\
    UTC-09,PF,Pacific/Gambier\
    UTC-09,ZZ,Etc/GMT+9\
    UTC-11,001,Etc/GMT+11\
    UTC-11,AS,Pacific/Pago_Pago\
    UTC-11,NU,Pacific/Niue\
    UTC-11,UM,Pacific/Pago_Pago\
    UTC-11,ZZ,Etc/GMT+11\
    Ulaanbaatar Standard Time,001,Asia/Ulaanbaatar\
    Ulaanbaatar Standard Time,MN,Asia/Ulaanbaatar Asia/Choibalsan\
    Venezuela Standard Time,001,America/Caracas\
    Venezuela Standard Time,VE,America/Caracas\
    Vladivostok Standard Time,001,Asia/Vladivostok\
    Vladivostok Standard Time,RU,Asia/Vladivostok Asia/Ust-Nera\
    W. Australia Standard Time,001,Australia/Perth\
    W. Australia Standard Time,AQ,Antarctica/Casey\
    W. Australia Standard Time,AU,Australia/Perth\
    W. Central Africa Standard Time,001,Africa/Lagos\
    W. Central Africa Standard Time,AO,Africa/Lagos\
    W. Central Africa Standard Time,BJ,Africa/Lagos\
    W. Central Africa Standard Time,CD,Africa/Lagos\
    W. Central Africa Standard Time,CF,Africa/Lagos\
    W. Central Africa Standard Time,CG,Africa/Lagos\
    W. Central Africa Standard Time,CM,Africa/Lagos\
    W. Central Africa Standard Time,DZ,Africa/Algiers\
    W. Central Africa Standard Time,GA,Africa/Lagos\
    W. Central Africa Standard Time,GQ,Africa/Lagos\
    W. Central Africa Standard Time,NE,Africa/Lagos\
    W. Central Africa Standard Time,NG,Africa/Lagos\
    W. Central Africa Standard Time,TD,Africa/Ndjamena\
    W. Central Africa Standard Time,TN,Africa/Tunis\
    W. Central Africa Standard Time,ZZ,Etc/GMT-1\
    W. Europe Standard Time,001,Europe/Berlin\
    W. Europe Standard Time,AD,Europe/Andorra\
    W. Europe Standard Time,AT,Europe/Vienna\
    W. Europe Standard Time,CH,Europe/Zurich\
    W. Europe Standard Time,DE,Europe/Berlin Europe/Zurich\
    W. Europe Standard Time,GI,Europe/Gibraltar\
    W. Europe Standard Time,IT,Europe/Rome\
    W. Europe Standard Time,LI,Europe/Zurich\
    W. Europe Standard Time,LU,Europe/Luxembourg\
    W. Europe Standard Time,MC,Europe/Monaco\
    W. Europe Standard Time,MT,Europe/Malta\
    W. Europe Standard Time,NL,Europe/Amsterdam\
    W. Europe Standard Time,NO,Europe/Oslo\
    W. Europe Standard Time,SE,Europe/Stockholm\
    W. Europe Standard Time,SJ,Europe/Oslo\
    W. Europe Standard Time,SM,Europe/Rome\
    W. Europe Standard Time,VA,Europe/Rome\
    W. Mongolia Standard Time,001,Asia/Hovd\
    W. Mongolia Standard Time,MN,Asia/Hovd\
    West Asia Standard Time,001,Asia/Tashkent\
    West Asia Standard Time,AQ,Antarctica/Mawson\
    West Asia Standard Time,KZ,Asia/Oral Asia/Aqtau Asia/Aqtobe Asia/Atyrau\
    West Asia Standard Time,MV,Indian/Maldives\
    West Asia Standard Time,TF,Indian/Kerguelen\
    West Asia Standard Time,TJ,Asia/Dushanbe\
    West Asia Standard Time,TM,Asia/Ashgabat\
    West Asia Standard Time,UZ,Asia/Tashkent Asia/Samarkand\
    West Asia Standard Time,ZZ,Etc/GMT-5\
    West Bank Standard Time,001,Asia/Hebron\
    West Bank Standard Time,PS,Asia/Hebron Asia/Gaza\
    West Pacific Standard Time,001,Pacific/Port_Moresby\
    West Pacific Standard Time,AQ,Antarctica/DumontDUrville\
    West Pacific Standard Time,FM,Pacific/Chuuk\
    West Pacific Standard Time,GU,Pacific/Guam\
    West Pacific Standard Time,MP,Pacific/Guam\
    West Pacific Standard Time,PG,Pacific/Port_Moresby\
    West Pacific Standard Time,ZZ,Etc/GMT-10\
    Yakutsk Standard Time,001,Asia/Yakutsk\
    Yakutsk Standard Time,RU,Asia/Yakutsk Asia/Khandyga'



























































































































































































































































































































































































































































































































            ;
            exports.TimeZoneConverter = TimeZoneConverter;

        }, {}],
        206: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expression_1 = require("../expression");
            const expressionType_1 = require("../expressionType");
            const relationshipType_1 = require("./relationshipType");
            /**
             * A canonical normal form expression.
             */
            class Clause extends expression_1.Expression {
                /**
                     * Initializes a new instance of the `Clause` class.
                     * @param clauseOrExpression A clause, expression or an array of expressions to initialize a `Clause`.
                     */
                constructor(clauseOrExpression)
                {
                    super(expressionType_1.ExpressionType.And, undefined);
                    /**
                             * Gets or sets the anyBinding dictionary.
                             */
                    this.anyBindings = new Map();
                    /**
                             * Gets or sets whether the clause is subsumed.
                             */
                    this.subsumed = false;
                    if (clauseOrExpression) {
                        if (Array.isArray(clauseOrExpression)) {
                            const children = clauseOrExpression;
                            this.children = children;
                        }
                        else if (clauseOrExpression instanceof Clause) {
                            const fromClause = clauseOrExpression;
                            this.children = [...fromClause.children];
                            for (const [key, value] of fromClause.anyBindings.entries()) {
                                this.anyBindings.set(key, value);
                            }
                        }
                        else if (clauseOrExpression instanceof expression_1.Expression) {
                            const expression = clauseOrExpression;
                            this.children.push(expression);
                        }
                    }
                }
                /**
                     * Gets a string that represents the current clause.
                     * @param builder An array of string to build the string of clause.
                     * @param indent An integer represents the number of spaces at the start of a line.
                     */
                toString(builder=[], indent=0)
                {
                    builder.push(' '.repeat(indent));
                    if (this.subsumed) {
                        builder.push('*');
                    }
                    builder.push('(');
                    let first = true;
                    for (const child of this.children) {
                        if (first) {
                            first = false;
                        }
                        else {
                            builder.push(' && ');
                        }
                        builder.push(child.toString());
                    }
                    builder.push(')');
                    if (this._ignored) {
                        builder.push(' ignored(');
                        builder.push(this._ignored.toString());
                        builder.push(')');
                    }
                    this.anyBindings.forEach((value, key) => {
                        builder.push(` ${key}->${value}`);
                    });
                    return builder.join('');
                }
                /**
                     * Compares the current `Clause` with another `Clause`.
                     * @param other The other `Clause` to compare.
                     * @param comparers A comparer, which is a dictionary of `PredicateComparer` with string keys.
                     * @returns A `RelationshipType` value between two `Clause` instances.
                     */
                relationship(other, comparers)
                {
                    let soFar = relationshipType_1.RelationshipType.incomparable;
                    let shorter = this;
                    let shorterCount = shorter.children.length;
                    let longer = other;
                    let longerCount = longer.children.length;
                    let swapped = false;
                    if (longerCount < shorterCount) {
                        longer = this;
                        shorter = other;
                        const tmp = longerCount;
                        longerCount = shorterCount;
                        shorterCount = tmp;
                        swapped = true;
                    }
                    if (shorterCount === 0) {
                        if (longerCount === 0) {
                            soFar = relationshipType_1.RelationshipType.equal;
                        }
                        else {
                            soFar = relationshipType_1.RelationshipType.generalizes;
                        }
                    }
                    else {
                        // If every one of shorter predicates is equal or superset of one in longer, then shorter is a superset of longer
                        for (const shortPredicate of shorter.children) {
                            let shorterRel = relationshipType_1.RelationshipType.incomparable;
                            for (const longPredicate of longer.children) {
                                shorterRel = this._relationship(shortPredicate, longPredicate, comparers);
                                if (shorterRel !== relationshipType_1.RelationshipType.incomparable) {
                                    // Found related predicates
                                    break;
                                }
                            }
                            if (shorterRel === relationshipType_1.RelationshipType.incomparable) {
                                // Predicate in shorter is incomparable so done
                                soFar = relationshipType_1.RelationshipType.incomparable;
                                break;
                            }
                            else {
                                if (soFar === relationshipType_1.RelationshipType.incomparable) {
                                    soFar = shorterRel;
                                }
                                if (soFar === relationshipType_1.RelationshipType.equal) {
                                    if (shorterRel === relationshipType_1.RelationshipType.generalizes ||
                                    (shorterRel === relationshipType_1.RelationshipType.specializes && shorterCount === longerCount) ||
                                    shorterRel === relationshipType_1.RelationshipType.equal) {
                                        soFar = shorterRel;
                                    }
                                    else {
                                        break;
                                    }
                                }
                                else if (soFar != shorterRel) {
                                    // Not continued with sub/super so incomparable
                                    break;
                                }
                            }
                        }
                        if (shorterCount !== longerCount) {
                            switch (soFar) {
                            case relationshipType_1.RelationshipType.equal:
                            case relationshipType_1.RelationshipType.generalizes:
                                soFar = relationshipType_1.RelationshipType.generalizes;
                                break;
                            default:
                                soFar = relationshipType_1.RelationshipType.incomparable;
                                break;
                            }
                        }
                        soFar = this._bindingRelationship(soFar, shorter, longer);
                    }
                    return this._swap(soFar, swapped);
                }
                /**
                     * Determines whether the current `Clause` matches with another `Clause`.
                     * @param clause The other `Clause` instance to compare with.
                     * @param memory The scope for looking up variables.
                     * @returns A boolean value indicating whether the two clauses are matches.
                     */
                matches(clause, memory)
                {
                    let matched = false;
                    if (clause.deepEquals(this)) {
                        matched = true;
                        if (this._ignored) {
                            const {value: match, error} = this._ignored.tryEvaluate(memory);
                            matched = !error && match;
                        }
                    }
                    return matched;
                }
                /**
                     * Splits ignored child expressions.
                     */
                splitIgnores()
                {
                    const children = [];
                    const ignores = [];
                    for (let i = 0; i < this.children.length; i++) {
                        const child = this.children[i];
                        if (child.type === expressionType_1.ExpressionType.Ignore) {
                            ignores.push(child);
                        }
                        else {
                            children.push(child);
                        }
                    }
                    this.children = children;
                    if (ignores.length > 0) {
                        this._ignored = expression_1.Expression.andExpression(...ignores);
                    }
                }
                _bindingRelationship(soFar, shorterClause, longerClause)
                {
                    if (soFar === relationshipType_1.RelationshipType.equal) {
                        let swapped = false;
                        let shorter = shorterClause.anyBindings;
                        let longer = longerClause.anyBindings;
                        if (shorterClause.anyBindings.size > longerClause.anyBindings.size) {
                            shorter = longerClause.anyBindings;
                            longer = shorterClause.anyBindings;
                            swapped = true;
                        }
                        for (const [shorterKey, shorterValue] of shorter.entries()) {
                            let found = false;
                            for (const [longerKey, longerValue] of longer.entries()) {
                                if (shorterKey === longerKey && shorterValue === longerValue) {
                                    found = true;
                                    break;
                                }
                            }
                            if (!found) {
                                soFar = relationshipType_1.RelationshipType.incomparable;
                            }
                        }
                        if (soFar === relationshipType_1.RelationshipType.equal && shorter.size < longer.size) {
                            soFar = relationshipType_1.RelationshipType.specializes;
                        }
                        soFar = this._swap(soFar, swapped);
                    }
                    return soFar;
                }
                _swap(soFar, swapped)
                {
                    let reln = soFar;
                    if (swapped) {
                        switch (soFar) {
                        case relationshipType_1.RelationshipType.specializes:
                            reln = relationshipType_1.RelationshipType.generalizes;
                            break;
                        case relationshipType_1.RelationshipType.generalizes:
                            reln = relationshipType_1.RelationshipType.specializes;
                            break;
                        }
                    }
                    return reln;
                }
                _relationship(expr, other, comparers)
                {
                    let relationship = relationshipType_1.RelationshipType.incomparable;
                    let root = expr;
                    let rootOther = other;
                    if (expr.type === expressionType_1.ExpressionType.Not && other.type === expressionType_1.ExpressionType.Not) {
                        root = expr.children[0];
                        rootOther = other.children[0];
                    }
                    let comparer;
                    if (root.type === other.type) {
                        comparer = comparers[root.type];
                    }
                    if (comparer) {
                        relationship = comparer.relationship(root, rootOther);
                    }
                    else {
                        relationship = expr.deepEquals(other) ? relationshipType_1.RelationshipType.equal : relationshipType_1.RelationshipType.incomparable;
                    }
                    return relationship;
                }
            }
            exports.Clause = Clause;

        }, {
            "../expression": 170,
            "../expressionType": 183,
            "./relationshipType": 210
        }],
        207: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            function __export(m) {
                for (var p in m)
                    if (!exports.hasOwnProperty(p))
                        exports[p] = m[p];
            }
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            __export(require("./clause"));
            __export(require("./node"));
            __export(require("./quantifier"));
            __export(require("./relationshipType"));
            __export(require("./trigger"));
            __export(require("./triggerTree"));

        }, {
            "./clause": 206,
            "./node": 208,
            "./quantifier": 209,
            "./relationshipType": 210,
            "./trigger": 211,
            "./triggerTree": 212
        }],
        208: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const clause_1 = require("./clause");
            const relationshipType_1 = require("./relationshipType");
            var Operation;
            (function(Operation) {
                Operation["none"] = "none";
                Operation["found"] = "found";
                Operation["added"] = "added";
                Operation["removed"] = "removed";
                Operation["inserted"] = "inserted";
            })(Operation || (Operation = {}));
            /**
             * Node in a trigger tree.
             */
            class Node {
                /**
                     * Intializes a new instance of the `Node` class.
                     * @param clause The logical conjunction this node represents.
                     * @param tree The trigger tree this node is found in.
                     * @param trigger The trigger to initialize this node.
                     */
                constructor(clause, tree, trigger)
                {
                    this._allTriggers = [];
                    this._triggers = [];
                    this._specializations = [];
                    this.clause = new clause_1.Clause(clause);
                    this.tree = tree;
                    if (trigger) {
                        this._allTriggers.push(trigger);
                        this._triggers.push(trigger);
                    }
                }
                /**
                     * Gets all of the most specific triggers that contains the `Clause` in this node.
                     */
                get triggers()
                {
                    return this._triggers;
                }
                /**
                     * Gets all triggers that contain the `Clause` in this node.
                     */
                get allTriggers()
                {
                    return this._allTriggers;
                }
                /**
                     * Gets specialized children of this node.
                     */
                get specializations()
                {
                    return this._specializations;
                }
                /**
                     * Gets a string that represents the current node.
                     * @param builder An array of string to build the string of node.
                     * @param indent An integer representing the number of spaces at the start of a line.
                     */
                toString(builder=[], indent=0)
                {
                    return this.clause.toString(builder, indent);
                }
                /**
                     * Identify the relationship between two nodes.
                     * @param other Node to compare against.
                     * @returns Relationship between this node an the other.
                     */
                relationship(other)
                {
                    return this.clause.relationship(other.clause, this.tree.comparers);
                }
                /**
                     * Gets the most specific matches below this node.
                     * @param state Frame to evaluate against.
                     * @returns List of the most specific matches found.
                     */
                matches(state)
                {
                    const matches = new Set();
                    this._matches(state, matches, new Map());
                    return Array.from(matches);
                }
                /**
                     * Adds a child node.
                     * @param triggerNode The node to be added.
                     * @returns Whether adding node operation is successful.
                     */
                addNode(triggerNode)
                {
                    return this._addNode(triggerNode, new Map()) === Operation.added;
                }
                /**
                     * Removes a trigger from node.
                     * @param trigger The trigger to be removed.
                     * @returns Whether removing trigger operation is successful.
                     */
                removeTrigger(trigger)
                {
                    return this._removeTrigger(trigger, new Set());
                }
                _addNode(triggerNode, ops)
                {
                    if (ops.has(this)) {
                        return Operation.none;
                    }
                    let op = Operation.none;
                    const trigger = triggerNode.triggers[0];
                    const relationship = this.relationship(triggerNode);
                    switch (relationship) {
                    case relationshipType_1.RelationshipType.equal:
                        // Ensure action is not already there
                        const found = this._allTriggers.find((existing) => trigger.action != undefined && trigger.action === existing.action) !== undefined;
                        op = Operation.found;
                        if (!found) {
                            this._allTriggers.push(trigger);
                            let add = true;
                            for (let i = 0; i < this._triggers.length;) {
                                const existing = this._triggers[i];
                                const reln = trigger.relationship(existing, this.tree.comparers);
                                if (reln === relationshipType_1.RelationshipType.generalizes) {
                                    add = false;
                                    break;
                                }
                                else if (reln === relationshipType_1.RelationshipType.specializes) {
                                    this._triggers.splice(i, 1);
                                }
                                else {
                                    ++i;
                                }
                            }
                            if (add) {
                                this._triggers.push(trigger);
                            }
                            op = Operation.added;
                        }
                        break;
                    case relationshipType_1.RelationshipType.incomparable:
                        for (const child of this._specializations) {
                            child._addNode(triggerNode, ops);
                        }
                        break;
                    case relationshipType_1.RelationshipType.specializes:
                        triggerNode._addSpecialization(this);
                        op = Operation.inserted;
                        break;
                    case relationshipType_1.RelationshipType.generalizes:
                        let foundOne = false;
                        let removals;
                        for (let i = 0; i < this._specializations.length; i++) {
                            const child = this._specializations[i];
                            const childOp = child._addNode(triggerNode, ops);
                            if (childOp != Operation.none) {
                                foundOne = true;
                                if (childOp === Operation.inserted) {
                                    if (!removals) {
                                        removals = [];
                                    }
                                    removals.push(child);
                                    op = Operation.added;
                                }
                                else {
                                    op = childOp;
                                }
                            }
                        }
                        if (removals) {
                            for (const removal of removals) {
                                const removed = this._specializations.findIndex((item) => item === removal);
                                if (removed >= 0) {
                                    this._specializations.splice(removed, 1);
                                }
                            }
                            this._specializations.push(triggerNode);
                        }
                        if (!foundOne) {
                            this._specializations.push(triggerNode);
                            op = Operation.added;
                        }
                        break;
                    }
                    // Prevent visiting this node again
                    ops.set(this, op);
                    return op;
                }
                _matches(state, matches, matched)
                {
                    let found = matched.get(this);
                    if (found) {
                        return true;
                    }
                    found = false;
                    for (const child of this._specializations) {
                        if (child._matches(state, matches, matched)) {
                            found = true;
                        }
                    }
                    // No child matched so we might
                    if (!found) {
                        const {value: match, error} = this.clause.tryEvaluate(state);
                        if (!error && match) {
                            for (const trigger of this.triggers) {
                                if (trigger.matches(this.clause, state)) {
                                    matches.add(trigger);
                                    found = true;
                                }
                            }
                        }
                    }
                    matched.set(this, found);
                    return found;
                }
                _removeTrigger(trigger, visited)
                {
                    if (visited.has(this)) {
                        return false;
                    }
                    visited.add(this);
                    let removed = false;
                    // Remove from allTriggers and triggers
                    const allTriggerIndex = this._allTriggers.findIndex((item) => item === trigger);
                    if (allTriggerIndex >= 0) {
                        // We found the trigger somewhere in the tree
                        this._allTriggers.splice(allTriggerIndex, 1);
                        removed = true;
                        const triggerIndex = this._triggers.findIndex((item) => item === trigger);
                        if (triggerIndex >= 0) {
                            this._triggers.splice(triggerIndex, 1);
                            for (const candidate of this._allTriggers) {
                                let add = true;
                                for (const existing of this._triggers) {
                                    const reln = candidate.relationship(existing, this.tree.comparers);
                                    if (reln === relationshipType_1.RelationshipType.equal || reln === relationshipType_1.RelationshipType.generalizes) {
                                        add = false;
                                        break;
                                    }
                                }
                                if (add) {
                                    this._triggers.push(candidate);
                                }
                            }
                        }
                    }
                    // Remove from any children
                    let removals;
                    for (let i = 0; i < this._specializations.length; i++) {
                        const child = this._specializations[i];
                        const childRemoved = child._removeTrigger(trigger, visited);
                        if (childRemoved) {
                            removed = true;
                        }
                        if (child.triggers.length === 0) {
                            if (!removals) {
                                removals = [];
                            }
                            removals.push(child);
                        }
                    }
                    if (removals) {
                        // Remove children if no triggers left
                        for (const removal of removals) {
                            const removedIndex = this._specializations.findIndex((item) => item === removal);
                            if (removedIndex >= 0) {
                                this._specializations.splice(removedIndex, 1);
                                for (const specialization of removal.specializations) {
                                    let add = true;
                                    for (const parent of this._specializations) {
                                        const reln = parent.relationship(specialization);
                                        if (reln === relationshipType_1.RelationshipType.generalizes) {
                                            add = false;
                                            break;
                                        }
                                    }
                                    if (add) {
                                        this._specializations.push(specialization);
                                    }
                                }
                            }
                        }
                    }
                    return removed;
                }
                _addSpecialization(specialization)
                {
                    let added = false;
                    let removals;
                    let skip = false;
                    for (let i = 0; i < this._specializations.length; i++) {
                        const child = this._specializations[i];
                        const reln = specialization.relationship(child);
                        if (reln === relationshipType_1.RelationshipType.equal) {
                            skip = true;
                            break;
                        }
                        if (reln === relationshipType_1.RelationshipType.generalizes) {
                            if (!removals) {
                                removals = [];
                            }
                            removals.push(child);
                        }
                        else if (reln === relationshipType_1.RelationshipType.specializes) {
                            skip = true;
                            break;
                        }
                    }
                    if (!skip) {
                        if (removals) {
                            for (const removal of removals) {
                                // Don't need to add back because specialization already has them
                                const removed = this._specializations.findIndex((item) => item === removal);
                                if (removed >= 0) {
                                    specialization._addSpecialization(this._specializations[removed]);
                                    this._specializations.splice(removed, 1);
                                }
                            }
                        }
                        this._specializations.push(specialization);
                        added = true;
                    }
                    return added;
                }
            }
            exports.Node = Node;

        }, {
            "./clause": 206,
            "./relationshipType": 210
        }],
        209: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * Type of quantifier for expanding trigger expressions.
             */
            var QuantifierType;
            (function(QuantifierType) {
                /**
                     * Within a clause, duplicate any predicate with variable for each possible binding.
                     */
                QuantifierType["all"] = "all";
                /**
                     * Create a new clause for each possible binding of variable.
                     */
                QuantifierType["any"] = "any";
            })(QuantifierType = exports.QuantifierType || (exports.QuantifierType = {}));
            /**
             * Quantifier for allowing runtime expansion of expressions.
             */
            class Quantifier {
                /**
                     * Initializes a new instance of the `Quantifier` class.
                     * @param variable Name of variable to replace.
                     * @param type Type of quantifier.
                     * @param bindings Possible bindings for variable.
                     */
                constructor(variable, type, bindings)
                {
                    this.variable = variable;
                    this.type = type;
                    this.bindings = bindings;
                }
                /**
                     * Returns a string that represents the quantifier.
                     */
                toString()
                {
                    return `${this.type} ${this.variable} ${this.bindings.length}`;
                }
            }
            exports.Quantifier = Quantifier;

        }, {}],
        210: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * Relationship between trigger expressions.
             */
            var RelationshipType;
            (function(RelationshipType) {
                /**
                     * First argument specializes the second, i.e. applies to a subset of the states the second argument covers.
                     */
                RelationshipType["specializes"] = "specializes";
                /**
                     * First and second argument are the same expression.
                     */
                RelationshipType["equal"] = "equal";
                /**
                     * First argument generalizes the second, i.e. applies to a superset of the states the second argument covers.
                     */
                RelationshipType["generalizes"] = "generalizes";
                /**
                     * Connot tell how the first and second arguments relate.
                     */
                RelationshipType["incomparable"] = "incomparable";
            })(RelationshipType = exports.RelationshipType || (exports.RelationshipType = {}));

        }, {}],
        211: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const clause_1 = require("./clause");
            const constant_1 = require("../constant");
            const expression_1 = require("../expression");
            const expressionType_1 = require("../expressionType");
            const quantifier_1 = require("./quantifier");
            const relationshipType_1 = require("./relationshipType");
            /**
             * Rewrite the expression by pushing not down to the leaves.
             */
            const pushDownNot = (expression, inNot=false) => {
                let newExpr = expression;
                const negation = expression.evaluator.negation;
                switch (expression.type) {
                case expressionType_1.ExpressionType.And:
                case expressionType_1.ExpressionType.Or:
                    const children = expression.children.map((child) => pushDownNot(child, inNot));
                    if (children.length === 1) {
                        newExpr = children[0];
                    }
                    else {
                        newExpr = expression_1.Expression.makeExpression(expression.type === expressionType_1.ExpressionType.And
                        ? inNot
                        ? expressionType_1.ExpressionType.Or
                        : expressionType_1.ExpressionType.And
                        : inNot
                        ? expressionType_1.ExpressionType.And
                        : expressionType_1.ExpressionType.Or, undefined, ...children);
                    }
                    break;
                case expressionType_1.ExpressionType.Not:
                    newExpr = pushDownNot(expression.children[0], !inNot);
                    break;
                default:
                    if (inNot) {
                        if (negation) {
                            if (expression.type === negation.type) {
                                // Pass through like optional/ignore
                                newExpr = expression_1.Expression.makeExpression(undefined, negation, ...expression.children.map((child) => pushDownNot(child, true)));
                            }
                            else {
                                // Replace with negation and stop
                                newExpr = expression_1.Expression.makeExpression(undefined, negation, ...expression.children);
                            }
                        }
                        else {
                            // Keep not
                            newExpr = expression_1.Expression.makeExpression(expressionType_1.ExpressionType.Not, undefined, expression);
                        }
                    }
                    break;
                }
                return newExpr;
            };
            /**
             * A trigger is a combination of a trigger expression and the corresponding action.
             */
            class Trigger {
                /**
                     * Intializes a new instance of the `Trigger` class.
                     * @param tree Trigger tree that contains this trigger.
                     * @param expression Expression for when the trigger action is possible.
                     * @param action Action to take when a trigger matches.
                     * @param quantifiers Quantifiers to dynamically expand the expression.
                     */
                constructor(tree, expression, action, ...quantifiers)
                {
                    this._tree = tree;
                    this.action = action;
                    this.originalExpression = expression;
                    this._quantifiers = quantifiers;
                    if (expression) {
                        const normalForm = pushDownNot(expression);
                        this._clauses = this._generateClauses(normalForm);
                        this._removeDuplicatedPredicates();
                        this._optimizeClauses();
                        this._expandQuantifiers();
                        this._removeDuplicates();
                        this._markSubsumedClauses();
                        this._splitIgnores();
                    }
                    else {
                        this._clauses = [];
                    }
                }
                /**
                     * Gets list of expressions converted into Disjunctive Normal Form where ! is pushed to the leaves and
                     * there is an implicit || between clauses and && within a clause.
                     */
                get clauses()
                {
                    return this._clauses;
                }
                /**
                     * Determines the relationship between current instance and another `Trigger` instance.
                     * @param other The other Trigger instance.
                     * @param comparers The comparer dictionary.
                     * @returns A `RelationshipType` value.
                     */
                relationship(other, comparers)
                {
                    let result;
                    const first = this._relationship(this, other, comparers);
                    const second = this._relationship(other, this, comparers);
                    if (first === relationshipType_1.RelationshipType.equal) {
                        if (second === relationshipType_1.RelationshipType.equal) {
                            // All first clauses == second clauses
                            result = relationshipType_1.RelationshipType.equal;
                        }
                        else {
                            // All first clauses found in second
                            result = relationshipType_1.RelationshipType.specializes;
                        }
                    }
                    else if (first === relationshipType_1.RelationshipType.specializes) {
                        // All first clauses specializes or equal a second clause
                        result = relationshipType_1.RelationshipType.specializes;
                    }
                    else if (second === relationshipType_1.RelationshipType.equal || second === relationshipType_1.RelationshipType.specializes) {
                        // All second clauses are equal or specialize a first clause
                        result = relationshipType_1.RelationshipType.generalizes;
                    }
                    else {
                        // All other cases are in comparable
                        result = relationshipType_1.RelationshipType.incomparable;
                    }
                    return result;
                }
                /**
                     * Determines whether there is a member in the current `Clause` that matches the nodeClause parameter.
                     * @param nodeClause The other Clause instance to match.
                     * @param state The scope for looking up variables.
                     * @returns A boolean value inidicating whether there is a member matches.
                     */
                matches(nodeClause, state)
                {
                    return this.clauses.find((clause) => clause.matches(nodeClause, state)) !== undefined;
                }
                /**
                     * Gets a string that represents the current trigger.
                     * @param builder An array of string to build the string of trigger.
                     * @param indent An integer represents the number of spaces at the start of a line.
                     */
                toString(builder=[], indent=0)
                {
                    builder.push(' '.repeat(indent));
                    if (this._clauses.length > 0) {
                        let first = true;
                        for (const clause of this._clauses) {
                            if (first) {
                                first = false;
                            }
                            else {
                                builder.push('\n');
                                builder.push(' '.repeat(indent));
                                builder.push('|| ');
                            }
                            builder.push(clause.toString());
                        }
                    }
                    else {
                        builder.push('<Empty>');
                    }
                    return builder.join('');
                }
                _relationship(trigger, other, comparers)
                {
                    let soFar = relationshipType_1.RelationshipType.incomparable;
                    for (const clause of trigger.clauses) {
                        if (!clause.subsumed) {
                            // Check other for = or clause that is specialized
                            let clauseSoFar = relationshipType_1.RelationshipType.incomparable;
                            for (const second of other.clauses) {
                                if (!second.subsumed) {
                                    const reln = clause.relationship(second, comparers);
                                    if (reln === relationshipType_1.RelationshipType.equal || reln === relationshipType_1.RelationshipType.specializes) {
                                        clauseSoFar = reln;
                                        break;
                                    }
                                }
                            }
                            if (clauseSoFar === relationshipType_1.RelationshipType.incomparable) {
                                // Some clause is not comparable
                                soFar = relationshipType_1.RelationshipType.incomparable;
                                break;
                            }
                            if (clauseSoFar === relationshipType_1.RelationshipType.equal) {
                                if (soFar === relationshipType_1.RelationshipType.incomparable) {
                                    // Start on equal clause
                                    soFar = clauseSoFar;
                                }
                            }
                            else if (clauseSoFar === relationshipType_1.RelationshipType.specializes) {
                                // Either going from incomparable or equal to specializes
                                soFar = clauseSoFar;
                            }
                        }
                    }
                    // Either incomparable, equal or specializes
                    return soFar;
                }
                _generateClauses(expression)
                {
                    switch (expression.type) {
                    case expressionType_1.ExpressionType.And:
                        // Need to combine every combination of clauses
                        let soFar = [];
                        let first = true;
                        for (let i = 0; i < expression.children.length; i++) {
                            const child = expression.children[i];
                            const clauses = this._generateClauses(child);
                            if (clauses.length === 0) {
                                // Encountered false
                                soFar = [];
                                break;
                            }
                            if (first) {
                                soFar.push(...clauses);
                                first = false;
                            }
                            else {
                                const newClauses = [];
                                for (const old of soFar) {
                                    for (const clause of clauses) {
                                        const children = [];
                                        children.push(...old.children);
                                        children.push(...clause.children);
                                        newClauses.push(new clause_1.Clause(children));
                                    }
                                }
                                soFar = newClauses;
                            }
                        }
                        return soFar;
                    case expressionType_1.ExpressionType.Or:
                        const clauses = [];
                        for (let i = 0; i < expression.children.length; i++) {
                            const child = expression.children[i];
                            clauses.push(...this._generateClauses(child));
                        }
                        return clauses;
                    case expressionType_1.ExpressionType.Optional:
                        return [new clause_1.Clause(), ...this._generateClauses(expression.children[0])];
                    default:
                        // True becomes empty expression and false drops clause
                        if (expression instanceof constant_1.Constant && typeof expression.value === 'boolean') {
                            return expression.value ? [new clause_1.Clause()] : [];
                        }
                        else {
                            return [new clause_1.Clause(expression)];
                        }
                    }
                }
                /**
                     * Remove any duplicate predicates within a clause.
                     * NOTE: This is annoying but expression hash codes of deepEquals expressions are different.
                     */
                _removeDuplicatedPredicates()
                {
                    // Rewrite clauses to remove duplicated tests
                    for (let i = 0; i < this._clauses.length; ++i) {
                        const clause = this._clauses[i];
                        const children = [];
                        for (let p = 0; p < clause.children.length; ++p) {
                            const pred = clause.children[p];
                            let found = false;
                            for (let q = p + 1; q < clause.children.length; ++q) {
                                if (pred.deepEquals(clause.children[q])) {
                                    found = true;
                                    break;
                                }
                            }
                            if (!found) {
                                children.push(pred);
                            }
                        }
                        this._clauses[i] = new clause_1.Clause(children);
                    }
                }
                /**
                     * Mark clauses that are more specific than another clause as subsumed and also remove any = clauses.
                     */
                _markSubsumedClauses()
                {
                    for (let i = 0; i < this._clauses.length; ++i) {
                        const clause = this._clauses[i];
                        if (!clause.subsumed) {
                            for (let j = i + 1; j < this._clauses.length; ++j) {
                                const other = this._clauses[j];
                                if (!other.subsumed) {
                                    const reln = clause.relationship(other, this._tree.comparers);
                                    if (reln === relationshipType_1.RelationshipType.equal) {
                                        this._clauses.splice(j, 1);
                                        --j;
                                    }
                                    else {
                                        if (reln === relationshipType_1.RelationshipType.specializes) {
                                            clause.subsumed = true;
                                            break;
                                        }
                                        if (reln === relationshipType_1.RelationshipType.generalizes) {
                                            other.subsumed = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                _splitIgnores()
                {
                    for (let i = 0; i < this._clauses.length; i++) {
                        this._clauses[i].splitIgnores();
                    }
                }
                _optimizeClauses()
                {
                    this._clauses.forEach((clause) => {
                        this._tree.optimizers.forEach((optimizer) => {
                            optimizer.optimize(clause);
                        });
                    });
                }
                _expandQuantifiers()
                {
                    if (this._quantifiers && this._quantifiers.length > 0) {
                        for (let i = 0; i < this._quantifiers.length; i++) {
                            const quantifier = this._quantifiers[i];
                            const newClauses = [];
                            for (let j = 0; j < this._clauses.length; j++) {
                                const clause = this._clauses[j];
                                newClauses.push(...this._expandQuantifiersWithClause(quantifier, clause));
                            }
                            this._clauses = newClauses;
                        }
                    }
                }
                _expandQuantifiersWithClause(quantifier, clause)
                {
                    const results = [];
                    if (quantifier.type === quantifier_1.QuantifierType.all) {
                        const children = [];
                        if (quantifier.bindings.length > 0) {
                            for (let i = 0; i < clause.children.length; i++) {
                                const predicate = clause.children[i];
                                for (let j = 0; j < quantifier.bindings.length; j++) {
                                    const binding = quantifier.bindings[j];
                                    const {expression: newPredicate, changed} = this._substituteVariable(quantifier.variable, binding, predicate);
                                    children.push(newPredicate);
                                    if (!changed) {
                                        // No change to first predicate, so can stop
                                        break;
                                    }
                                }
                            }
                        }
                        else {
                            // Empty quantifier is trivially true so remove any predicate that refers to quantifier
                            for (let i = 0; i < clause.children.length; i++) {
                                const predicate = clause.children[i];
                                const {changed} = this._substituteVariable(quantifier.variable, '', predicate);
                                if (!changed) {
                                    children.push(predicate);
                                }
                            }
                        }
                        results.push(new clause_1.Clause(children));
                    }
                    else {
                        if (quantifier.bindings.length > 0) {
                            let changed = false;
                            for (let i = 0; i < quantifier.bindings.length; i++) {
                                const binding = quantifier.bindings[i];
                                const newClause = new clause_1.Clause(clause);
                                const children = [];
                                for (let j = 0; j < clause.children.length; j++) {
                                    const predicate = clause.children[j];
                                    const {expression: newPredicate, changed: predicateChanged} = this._substituteVariable(quantifier.variable, binding, predicate);
                                    changed = changed || predicateChanged;
                                    children.push(newPredicate);
                                }
                                if (changed) {
                                    newClause.anyBindings.set(quantifier.variable, binding);
                                }
                                newClause.children = [...children];
                                results.push(newClause);
                                if (!changed) {
                                    break;
                                }
                            }
                        }
                        else {
                            // Keep clause if does not contain any binding
                            let changed = false;
                            for (let i = 0; i < clause.children.length; i++) {
                                const predicate = clause.children[i];
                                const {changed: predicateChanged} = this._substituteVariable(quantifier.variable, '', predicate);
                                if (predicateChanged) {
                                    changed = true;
                                    break;
                                }
                            }
                            if (!changed) {
                                results.push(clause);
                            }
                        }
                    }
                    return results;
                }
                _substituteVariable(variable, binding, expression)
                {
                    let newExpr = expression;
                    let changed = false;
                    if (expression.type === expressionType_1.ExpressionType.Accessor &&
                    expression.children.length === 1 &&
                    expression.children[0] instanceof constant_1.Constant &&
                    typeof expression.children[0].value === 'string' &&
                    expression.children[0].value === variable) {
                        newExpr = expression_1.Expression.makeExpression(expressionType_1.ExpressionType.Accessor, undefined, new constant_1.Constant(binding));
                        changed = true;
                    }
                    else {
                        const children = [];
                        for (let i = 0; i < expression.children.length; i++) {
                            const child = expression.children[i];
                            const {expression: childExpr, changed: childChanged} = this._substituteVariable(variable, binding, child);
                            children.push(childExpr);
                            changed = changed || childChanged;
                        }
                        if (changed) {
                            newExpr = new expression_1.Expression(undefined, expression.evaluator, ...children);
                        }
                    }
                    return {
                        expression: newExpr,
                        changed
                    };
                }
                _removeDuplicates()
                {
                    for (const clause of this._clauses) {
                        // NOTE: This is quadratic in clause length but GetHashCode is not equal for expressions and we expect the number of clauses to be small.
                        const predicates = [...clause.children];
                        for (let i = 0; i < predicates.length; ++i) {
                            const first = predicates[i];
                            for (let j = i + 1; j < predicates.length;) {
                                const second = predicates[j];
                                if (first.deepEquals(second)) {
                                    predicates.splice(j, 1);
                                }
                                else {
                                    ++j;
                                }
                            }
                        }
                        clause.children = [...predicates];
                    }
                }
            }
            exports.Trigger = Trigger;

        }, {
            "../constant": 158,
            "../expression": 170,
            "../expressionType": 183,
            "./clause": 206,
            "./quantifier": 209,
            "./relationshipType": 210
        }],
        212: [function(require, module, exports) {
            "use strict";
            /**
             * @module adaptive-expressions
             */
            /**
             * Copyright (c) Microsoft Corporation. All rights reserved.
             * Licensed under the MIT License.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const expression_1 = require("../expression");
            const clause_1 = require("./clause");
            const node_1 = require("./node");
            const relationshipType_1 = require("./relationshipType");
            const trigger_1 = require("./trigger");
            /**
             * A trigger tree organizes evaluators according to generalization/specialization in order to make it easier to use rules.
             */
            class TriggerTree {
                /**
                     * Intializes a new instance of the `TriggerTree` class.
                     */
                constructor()
                {
                    /**
                             * A list of `Optimizer` for optimizing claues.
                             */
                    this.optimizers = [];
                    /**
                             * A dictionary of `PredicateComparer` values, with string keys.
                             */
                    this.comparers = {};
                    /**
                             * The total number of triggers.
                             */
                    this.totalTriggers = 0;
                    this.root = new node_1.Node(new clause_1.Clause(), this);
                }
                /**
                     * Returns a string the represents the current object.
                     */
                toString()
                {
                    return `TriggerTree with ${this.totalTriggers} triggers`;
                }
                /**
                     * Add a trigger expression to the tree.
                     * @param stringOrExpression Trigger to add.
                     * @param action Action when triggered.
                     * @param quantifiers Quantifiers to use when expanding expressions.
                     * @returns New trigger.
                     */
                addTrigger(stringOrExpression, action, ...quantifiers)
                {
                    const expression = typeof stringOrExpression === 'string' ? expression_1.Expression.parse(stringOrExpression) : stringOrExpression;
                    const trigger = new trigger_1.Trigger(this, expression, action, ...quantifiers);
                    let added = false;
                    if (trigger.clauses.length) {
                        for (const clause of trigger.clauses) {
                            const newNode = new node_1.Node(clause, this, trigger);
                            if (this.root.addNode(newNode)) {
                                added = true;
                            }
                        }
                    }
                    if (added) {
                        ++this.totalTriggers;
                    }
                    return trigger;
                }
                /**
                     * Remove trigger from tree.
                     * @param trigger Trigger to remove.
                     * @returns True if removed trigger.
                     */
                removeTrigger(trigger)
                {
                    const result = this.root.removeTrigger(trigger);
                    if (result) {
                        --this.totalTriggers;
                    }
                    return result;
                }
                /**
                     * Generates a string describing the tree.
                     * @param indent Current indent level.
                     * @returns String describing the tree.
                     */
                treeToString(indent=0)
                {
                    const builder = [];
                    this._treeToString(builder, this.root, indent);
                    return builder.join('');
                }
                /**
                     * Return the possible matches given the current state.
                     * @param state State to evaluate against.
                     * @returns List of possible matches.
                     */
                matches(state)
                {
                    return this.root.matches(state);
                }
                /**
                     * Verify the tree meets specialization/generalization invariants.
                     * @returns Bad node if found.
                     */
                verifyTree()
                {
                    return this._verifyTree(this.root, new Set());
                }
                _verifyTree(node, visited)
                {
                    let badNode;
                    if (!visited.has(node)) {
                        visited.add(node);
                        for (let i = 0; !badNode && i < node.specializations.length; ++i) {
                            const first = node.specializations[i];
                            if (node.relationship(first) !== relationshipType_1.RelationshipType.generalizes) {
                                badNode = node;
                            }
                            else {
                                this._verifyTree(node.specializations[i], visited);
                                for (let j = i + 1; j < node.specializations.length; ++j) {
                                    const second = node.specializations[j];
                                    if (first.relationship(second) !== relationshipType_1.RelationshipType.incomparable) {
                                        badNode = node;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    return badNode;
                }
                _treeToString(builder, node, indent)
                {
                    node.toString(builder, indent);
                    builder.push(` [${node.triggers.length}]`);
                    builder.push('\n');
                    for (const child of node.specializations) {
                        this._treeToString(builder, child, indent + 2);
                    }
                }
            }
            exports.TriggerTree = TriggerTree;

        }, {
            "../expression": 170,
            "./clause": 206,
            "./node": 208,
            "./relationshipType": 210,
            "./trigger": 211
        }],
        213: [function(require, module, exports) {
            var microsoftRecognizersTextDataTypesTimexExpression = (function(exports) {
                'use strict';

                // Copyright (c) Microsoft Corporation. All rights reserved.

                class Time {
                    constructor(hour, minute, second)
                    {
                        if (arguments.length === 1) {
                            this.hour = Math.floor(hour / 3600000);
                            this.minute = Math.floor((hour - (this.hour * 3600000)) / 60000);
                            this.second = (hour - (this.hour * 3600000) - (this.minute * 60000)) / 1000;
                        }
                        else {
                            this.hour = hour;
                            this.minute = minute;
                            this.second = second;
                        }
                    }

                    getTime()
                    {
                        return (this.second * 1000) + (this.minute * 60000) + (this.hour * 3600000);
                    }
                }

                var Time_1 = Time;

                var time = {
                    Time: Time_1
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.

                const value = function(s) {
                    return s;
                };
                const isTrue = function() {
                    return true;
                };
                const zero = function() {
                    return 0;
                };

                const timexRegex = {

                    date: [// date
                    {
                        regex: /^(\d\d\d\d)-(\d\d)-(\d\d)$/,
                        props: {
                            year: Number,
                            month: Number,
                            dayOfMonth: Number
                        }
                    },
                    {
                        regex: /^XXXX-WXX-(\d)$/,
                        props: {
                            dayOfWeek: Number
                        }
                    },
                    {
                        regex: /^XXXX-(\d\d)-(\d\d)$/,
                        props: {
                            month: Number,
                            dayOfMonth: Number
                        }
                    }, // daterange
                    {
                        regex: /^(\d\d\d\d)$/,
                        props: {
                            year: Number
                        }
                    },
                    {
                        regex: /^(\d\d\d\d)-(\d\d)$/,
                        props: {
                            year: Number,
                            month: Number
                        }
                    },
                    {
                        regex: /^(SP|SU|FA|WI)$/,
                        props: {
                            season: value
                        }
                    },
                    {
                        regex: /^(\d\d\d\d)-(SP|SU|FA|WI)$/,
                        props: {
                            year: Number,
                            season: value
                        }
                    },
                    {
                        regex: /^(\d\d\d\d)-W(\d\d)$/,
                        props: {
                            year: Number,
                            weekOfYear: Number
                        }
                    },
                    {
                        regex: /^(\d\d\d\d)-W(\d\d)-WE$/,
                        props: {
                            year: Number,
                            weekOfYear: Number,
                            weekend: isTrue
                        }
                    },
                    {
                        regex: /^XXXX-(\d\d)$/,
                        props: {
                            month: Number
                        }
                    },
                    {
                        regex: /^XXXX-(\d\d)-W(\d\d)$/,
                        props: {
                            month: Number,
                            weekOfMonth: Number
                        }
                    },
                    {
                        regex: /^XXXX-(\d\d)-WXX-(\d)-(\d)$/,
                        props: {
                            month: Number,
                            weekOfMonth: Number,
                            dayOfWeek: Number
                        }
                    }
                    ],

                    time: [// time
                    {
                        regex: /^T(\d\d)$/,
                        props: {
                            hour: Number,
                            minute: zero,
                            second: zero
                        }
                    },
                    {
                        regex: /^T(\d\d):(\d\d)$/,
                        props: {
                            hour: Number,
                            minute: Number,
                            second: zero
                        }
                    },
                    {
                        regex: /^T(\d\d):(\d\d):(\d\d)$/,
                        props: {
                            hour: Number,
                            minute: Number,
                            second: Number
                        }
                    }, // timerange
                    {
                        regex: /^T(DT|NI|MO|AF|EV)$/,
                        props: {
                            partOfDay: value
                        }
                    }
                    ],

                    period: [
                    {
                        regex: /^P(\d*\.?\d+)(Y|M|W|D)$/,
                        props: {
                            amount: Number,
                            dateUnit: value
                        }
                    },
                    {
                        regex: /^PT(\d*\.?\d+)(H|M|S)$/,
                        props: {
                            amount: Number,
                            timeUnit: value
                        }
                    }
                    ]
                };

                const tryExtract = function(entry, timex, result) {
                    const regexResult = timex.match(entry.regex);
                    if (!regexResult) {
                        return false;
                    }
                    let index = 1;
                    for (const name in entry.props) {
                        const val = regexResult[index++];
                        result[name] = entry.props[name](val);
                    }
                    return true;
                };

                const extract = function(name, timex, result) {
                    for (const entry of timexRegex[name]) {
                        if (tryExtract(entry, timex, result)) {
                            return true;
                        }
                    }
                    return false;
                };

                var extract_1 = extract;

                var timexregex = {
                    extract: extract_1
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.



                const parseString = function(timex, obj) {
                    // a reference to the present
                    if (timex === 'PRESENT_REF') {
                        obj.now = true;
                    }

                    else // duration
                    if (timex.startsWith('P')) {
                        extractDuration(timex, obj);
                    }

                    else // range indicated with start and end dates and a duration
                    if (timex.startsWith('(') && timex.endsWith(')')) {
                        extractStartEndRange(timex, obj);
                    }

                    else // date and time and their respective ranges
                    {
                        extractDateTime(timex, obj);
                    }
                };

                const extractDuration = function(s, obj) {
                    const extracted = {};
                    timexregex.extract('period', s, extracted);
                    if (extracted.dateUnit) {
                        obj[{
                            Y: 'years',
                            M: 'months',
                            W: 'weeks',
                            D: 'days'
                        }[extracted.dateUnit]] = extracted.amount;
                    }
                    else if (extracted.timeUnit) {
                        obj[{
                            H: 'hours',
                            M: 'minutes',
                            S: 'seconds'
                        }[extracted.timeUnit]] = extracted.amount;
                    }
                };

                const extractStartEndRange = function(s, obj) {
                    const parts = s.substring(1, s.length - 1).split(',');
                    if (parts.length === 3) {
                        extractDateTime(parts[0], obj);
                        extractDuration(parts[2], obj);
                    }
                };

                const extractDateTime = function(s, obj) {
                    const indexOfT = s.indexOf('T');
                    if (indexOfT === -1) {
                        timexregex.extract('date', s, obj);
                    }
                    else {
                        timexregex.extract('date', s.substr(0, indexOfT), obj);
                        timexregex.extract('time', s.substr(indexOfT), obj);
                    }
                };

                const fromObject = function(source, obj) {
                    Object.assign(obj, source);
                    if ('hour' in obj) {
                        if (!('minute' in obj)) {
                            obj.minute = 0;
                        }
                        if (!('second' in obj)) {
                            obj.second = 0;
                        }
                    }
                };

                var timexParsing = {
                    parseString: parseString,
                    fromObject: fromObject
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.

                const isPresent = function(obj) {
                    return obj.now === true;
                };

                const isDuration = function(obj) {
                    return 'years' in obj || 'months' in obj || 'weeks' in obj || 'days' in obj
                        || 'hours' in obj || 'minutes' in obj || 'seconds' in obj;
                };

                const isTime = function(obj) {
                    return 'hour' in obj && 'minute' in obj && 'second' in obj;
                };

                const isDate = function(obj) {
                    return ('month' in obj && 'dayOfMonth' in obj) || 'dayOfWeek' in obj;
                };

                const isTimeRange = function(obj) {
                    return 'partOfDay' in obj;
                };

                const isDateRange = function(obj) {
                    return ('year' in obj && !('dayOfMonth' in obj))
                        || ('year' in obj && 'month' in obj && !('dayOfMonth' in obj))
                        || ('month' in obj && !('dayOfMonth' in obj))
                        || 'season' in obj
                        || 'weekOfYear' in obj
                        || 'weekOfMonth' in obj;
                };

                const isDefinite = function(obj) {
                    return 'year' in obj && 'month' in obj && 'dayOfMonth' in obj;
                };

                const infer = function(obj) {
                    const types = new Set();
                    if (isPresent(obj)) {
                        types.add('present');
                    }
                    if (isDefinite(obj)) {
                        types.add('definite');
                    }
                    if (isDate(obj)) {
                        types.add('date');
                    }
                    if (isDateRange(obj)) {
                        types.add('daterange');
                    }
                    if (isDuration(obj)) {
                        types.add('duration');
                    }
                    if (isTime(obj)) {
                        types.add('time');
                    }
                    if (isTimeRange(obj)) {
                        types.add('timerange');
                    }
                    if (types.has('present')) {
                        types.add('date');
                        types.add('time');
                    }
                    if (types.has('time') && types.has('duration')) {
                        types.add('timerange');
                    }
                    if (types.has('date') && types.has('time')) {
                        types.add('datetime');
                    }
                    if (types.has('date') && types.has('duration')) {
                        types.add('daterange');
                    }
                    if (types.has('datetime') && types.has('duration')) {
                        types.add('datetimerange');
                    }
                    if (types.has('date') && types.has('timerange')) {
                        types.add('datetimerange');
                    }
                    return types;
                };

                var infer_1 = infer;

                var timexInference = {
                    infer: infer_1
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.

                const cloneDate = function(date) {
                    const result = new Date();
                    result.setTime(date.getTime());
                    return result;
                };

                const tomorrow = function(date) {
                    const result = cloneDate(date);
                    result.setDate(result.getDate() + 1);
                    return result;
                };

                const yesterday = function(date) {
                    const result = cloneDate(date);
                    result.setDate(result.getDate() - 1);
                    return result;
                };

                const datePartEquals = function(dateX, dateY) {
                    return (dateX.getFullYear() === dateY.getFullYear())
                        && (dateX.getMonth() === dateY.getMonth())
                        && (dateX.getDate() === dateY.getDate());
                };

                const isDateInWeek = function(date, startOfWeek) {
                    let d = cloneDate(startOfWeek);
                    for (let i = 0; i < 7; i++) {
                        if (datePartEquals(date, d)) {
                            return true;
                        }
                        d = tomorrow(d);
                    }
                    return false;
                };

                const isThisWeek = function(date, referenceDate) {
                    const startOfThisWeek = cloneDate(referenceDate);
                    startOfThisWeek.setDate(startOfThisWeek.getDate() - startOfThisWeek.getDay());
                    return isDateInWeek(date, startOfThisWeek);
                };

                const isNextWeek = function(date, referenceDate) {
                    const startOfNextWeek = cloneDate(referenceDate);
                    startOfNextWeek.setDate(startOfNextWeek.getDate() + (7 - startOfNextWeek.getDay()));
                    return isDateInWeek(date, startOfNextWeek);
                };

                const isLastWeek = function(date, referenceDate) {
                    const startOfLastWeek = cloneDate(referenceDate);
                    startOfLastWeek.setDate(startOfLastWeek.getDate() - (7 + startOfLastWeek.getDay()));
                    return isDateInWeek(date, startOfLastWeek);
                };

                const weekOfYear = function(date) {
                    const ds = new Date(date.getFullYear(), 0);
                    const de = new Date(date.getFullYear(), date.getMonth(), date.getDate());
                    let weeks = 1;
                    while (ds.getTime() < de.getTime()) {
                        const jsDayOfWeek = ds.getDay();
                        const isoDayOfWeek = jsDayOfWeek == 0 ? 7 : jsDayOfWeek;
                        if (isoDayOfWeek === 7) {
                            weeks++;
                        }
                        ds.setDate(ds.getDate() + 1);
                    }
                    return weeks;
                };

                const fixedFormatNumber$1 = function(n, size) {
                    const s = n.toString();
                    let zeros = '';
                    const np = size - s.length;
                    for (let i = 0; i < np; i++) {
                        zeros += '0';
                    }
                    return `${zeros}${s}`;
                };

                const dateOfLastDay = function(day, referenceDate) {
                    const result = cloneDate(referenceDate);
                    result.setDate(result.getDate() - 1);
                    while (result.getDay() !== day) {
                        result.setDate(result.getDate() - 1);
                    }
                    return result;
                };

                const dateOfNextDay = function(day, referenceDate) {
                    const result = cloneDate(referenceDate);
                    do {
                        result.setDate(result.getDate() + 1);
                    }
                    while (result.getDay() !== day);
                    return result;
                };

                const datesMatchingDay = function(day, start, end) {
                    const result = [];
                    const d = cloneDate(start);
                    while (!datePartEquals(d, end)) {
                        if (d.getDay() === day) {
                            result.push(cloneDate(d));
                        }
                        d.setDate(d.getDate() + 1);
                    }
                    return result;
                };

                var timexDateHelpers = {
                    tomorrow: tomorrow,
                    yesterday: yesterday,
                    datePartEquals: datePartEquals,
                    isThisWeek: isThisWeek,
                    isNextWeek: isNextWeek,
                    isLastWeek: isLastWeek,
                    weekOfYear: weekOfYear,
                    fixedFormatNumber: fixedFormatNumber$1,
                    dateOfLastDay: dateOfLastDay,
                    dateOfNextDay: dateOfNextDay,
                    datesMatchingDay: datesMatchingDay
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.

                const Time$1 = time.Time;


                const cloneDateTime = function(timex) {
                    const result = Object.assign({}, timex);
                    delete result.years;
                    delete result.months;
                    delete result.weeks;
                    delete result.days;
                    delete result.hours;
                    delete result.minutes;
                    delete result.seconds;
                    return result;
                };

                const cloneDuration = function(timex) {
                    const result = Object.assign({}, timex);
                    delete result.year;
                    delete result.month;
                    delete result.dayOfMonth;
                    delete result.dayOfWeek;
                    delete result.weekOfYear;
                    delete result.weekOfMonth;
                    delete result.season;
                    delete result.hour;
                    delete result.minute;
                    delete result.second;
                    delete result.weekend;
                    delete result.partOfDay;
                    return result;
                };

                const timexDateAdd$1 = function(start, duration) {
                    if ('dayOfWeek' in start) {
                        const end = Object.assign({}, start);
                        if ('days' in duration) {
                            end.dayOfWeek += duration.days;
                        }
                        return end;
                    }
                    if ('month' in start && 'dayOfMonth' in start) {
                        if ('days' in duration) {
                            if ('year' in start) {
                                const d = new Date(start.year, start.month - 1, start.dayOfMonth, 0, 0, 0);
                                for (let i = 0; i < duration.days; i++) {
                                    d.setDate(d.getDate() + 1);
                                }
                                return {
                                    year: d.getFullYear(),
                                    month: d.getMonth() + 1,
                                    dayOfMonth: d.getDate()
                                };
                            }
                            else {
                                const d = new Date(2001, start.month - 1, start.dayOfMonth, 0, 0, 0);
                                for (let i = 0; i < duration.days; i++) {
                                    d.setDate(d.getDate() + 1);
                                }
                                return {
                                    month: d.getMonth() + 1,
                                    dayOfMonth: d.getDate()
                                };
                            }
                        }
                        if ('years' in duration) {
                            if ('year' in start) {
                                return {
                                    year: start.year + duration.years,
                                    month: start.month,
                                    dayOfMonth: start.dayOfMonth
                                };
                            }
                        }
                        if ('months' in duration) {
                            if ('month' in start) {
                                return {
                                    year: start.year,
                                    month: start.month + duration.months,
                                    dayOfMonth: start.dayOfMonth
                                };
                            }
                        }
                    }
                    return start;
                };

                const timexTimeAdd$1 = function(start, duration) {
                    if ('hours' in duration) {
                        const result = Object.assign({}, start);
                        result.hour += duration.hours;
                        if (result.hour > 23) {
                            const days = Math.floor(result.hour / 24);
                            const hour = result.hour % 24;
                            result.hour = hour;
                            if ('year' in result && 'month' in result && 'dayOfMonth' in result) {
                                const d = new Date(result.year, result.month - 1, result.dayOfMonth, 0, 0, 0);
                                for (let i = 0; i < days; i++) {
                                    d.setDate(d.getDate() + 1);
                                }
                                result.year = d.getFullYear();
                                result.month = d.getMonth() + 1;
                                result.dayOfMonth = d.getDate();
                                return result;
                            }
                            if ('dayOfWeek' in result) {
                                result.dayOfWeek += days;
                                return result;
                            }
                        }
                        return result;
                    }
                    if ('minutes' in duration) {
                        const result = Object.assign({}, start);
                        result.minute += duration.minutes;
                        if (result.minute > 59) {
                            result.hour++;
                            result.minute = 0;
                        }
                        return result;
                    }
                    return start;
                };

                const timexDateTimeAdd$1 = function(start, duration) {
                    return timexTimeAdd$1(timexDateAdd$1(start, duration), duration);
                };

                const expandDateTimeRange = function(timex) {
                    const types = ('types' in timex) ? timex.types : timexInference.infer(timex);
                    if (types.has('duration')) {
                        const start = cloneDateTime(timex);
                        const duration = cloneDuration(timex);
                        return {
                            start: start,
                            end: timexDateTimeAdd$1(start, duration),
                            duration: duration
                        };
                    }
                    else {
                        if ('year' in timex) {
                            const range = {
                                start: {
                                    year: timex.year
                                },
                                end: {}
                            };
                            if ('month' in timex) {
                                range.start.month = timex.month;
                                range.start.dayOfMonth = 1;
                                range.end.year = timex.year;
                                range.end.month = timex.month + 1;
                                range.end.dayOfMonth = 1;
                            }
                            else {
                                range.start.month = 1;
                                range.start.dayOfMonth = 1;
                                range.end.year = timex.year + 1;
                                range.end.month = 1;
                                range.end.dayOfMonth = 1;
                            }
                            return range;
                        }
                    }
                    return {
                        start: {},
                        end: {}
                    };
                };

                const timeAdd = function(start, duration) {
                    const hours = duration.hours || 0;
                    const minutes = duration.minutes || 0;
                    const seconds = duration.seconds || 0;
                    return {
                        hour: start.hour + hours,
                        minute: start.minute + minutes,
                        second: start.second + seconds
                    };
                };

                const expandTimeRange = function(timex) {

                    if (!timex.types.has('timerange'))
                    {
                        throw new exception('argument must be a timerange');
                    }

                    if (timex.partOfDay !== undefined) {
                        switch (timex.partOfDay) {
                        case 'DT':
                            timex = {
                                hour: 8,
                                minute: 0,
                                second: 0,
                                hours: 10,
                                minutes: 0,
                                seconds: 0
                            };
                            break;
                        case 'MO':
                            timex = {
                                hour: 8,
                                minute: 0,
                                second: 0,
                                hours: 4,
                                minutes: 0,
                                seconds: 0
                            };
                            break;
                        case 'AF':
                            timex = {
                                hour: 12,
                                minute: 0,
                                second: 0,
                                hours: 4,
                                minutes: 0,
                                seconds: 0
                            };
                            break;
                        case 'EV':
                            timex = {
                                hour: 16,
                                minute: 0,
                                second: 0,
                                hours: 4,
                                minutes: 0,
                                seconds: 0
                            };
                            break;
                        case 'NI':
                            timex = {
                                hour: 20,
                                minute: 0,
                                second: 0,
                                hours: 4,
                                minutes: 0,
                                seconds: 0
                            };
                            break;
                        default:
                            throw new exception('unrecognized part of day timerange');
                        }
                    }

                    const start = {
                        hour: timex.hour,
                        minute: timex.minute,
                        second: timex.second
                    };
                    const duration = cloneDuration(timex);
                    return {
                        start: start,
                        end: timeAdd(start, duration),
                        duration: duration
                    };
                };

                const dateFromTimex = function(timex) {
                    const year = 'year' in timex ? timex.year : 2001;
                    const month = 'month' in timex ? timex.month - 1 : 0;
                    const date = 'dayOfMonth' in timex ? timex.dayOfMonth : 1;
                    const hour = 'hour' in timex ? timex.hour : 0;
                    const minute = 'minute' in timex ? timex.minute : 0;
                    const second = 'second' in timex ? timex.second : 0;
                    return new Date(year, month, date, hour, minute, second);
                };

                const timeFromTimex = function(timex) {
                    const hour = timex.hour || 0;
                    const minute = timex.minute || 0;
                    const second = timex.second || 0;
                    return new Time$1(hour, minute, second);
                };

                const dateRangeFromTimex = function(timex) {
                    const expanded = expandDateTimeRange(timex);
                    return {
                        start: dateFromTimex(expanded.start),
                        end: dateFromTimex(expanded.end)
                    };
                };

                const timeRangeFromTimex = function(timex) {
                    const expanded = expandTimeRange(timex);
                    return {
                        start: timeFromTimex(expanded.start),
                        end: timeFromTimex(expanded.end)
                    };
                };

                var timexHelpers = {
                    expandDateTimeRange: expandDateTimeRange,
                    expandTimeRange: expandTimeRange,
                    dateFromTimex: dateFromTimex,
                    timeFromTimex: timeFromTimex,
                    dateRangeFromTimex: dateRangeFromTimex,
                    timeRangeFromTimex: timeRangeFromTimex,
                    timexTimeAdd: timexTimeAdd$1,
                    timexDateTimeAdd: timexDateTimeAdd$1
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.


                const fixedFormatNumber = timexDateHelpers.fixedFormatNumber;


                const formatDuration = function(timex) {
                    if ('years' in timex) {
                        return `P${timex.years}Y`;
                    }
                    if ('months' in timex) {
                        return `P${timex.months}M`;
                    }
                    if ('weeks' in timex) {
                        return `P${timex.weeks}W`;
                    }
                    if ('days' in timex) {
                        return `P${timex.days}D`;
                    }
                    if ('hours' in timex) {
                        return `PT${timex.hours}H`;
                    }
                    if ('minutes' in timex) {
                        return `PT${timex.minutes}M`;
                    }
                    if ('seconds' in timex) {
                        return `PT${timex.seconds}S`;
                    }
                    return '';
                };

                const formatTime = function(timex) {
                    if (timex.minute === 0 && timex.second === 0) {
                        return `T${fixedFormatNumber(timex.hour, 2)}`;
                    }
                    if (timex.second === 0) {
                        return `T${fixedFormatNumber(timex.hour, 2)}:${fixedFormatNumber(timex.minute, 2)}`;
                    }
                    return `T${fixedFormatNumber(timex.hour, 2)}:${fixedFormatNumber(timex.minute, 2)}:${fixedFormatNumber(timex.second, 2)}`;
                };

                const formatDate = function(timex) {
                    if ('year' in timex && 'month' in timex && 'dayOfMonth' in timex) {
                        return `${fixedFormatNumber(timex.year, 4)}-${fixedFormatNumber(timex.month, 2)}-${fixedFormatNumber(timex.dayOfMonth, 2)}`;
                    }
                    if ('month' in timex && 'dayOfMonth' in timex) {
                        return `XXXX-${fixedFormatNumber(timex.month, 2)}-${fixedFormatNumber(timex.dayOfMonth, 2)}`;
                    }
                    if ('dayOfWeek' in timex) {
                        return `XXXX-WXX-${timex.dayOfWeek}`;
                    }
                    return '';
                };

                const formatDateRange = function(timex) {
                    if ('year' in timex && 'weekOfYear' in timex && 'weekend' in timex) {
                        return `${fixedFormatNumber(timex.year, 4)}-W${fixedFormatNumber(timex.weekOfYear, 2)}-WE`;
                    }
                    if ('year' in timex && 'weekOfYear' in timex) {
                        return `${fixedFormatNumber(timex.year, 4)}-W${fixedFormatNumber(timex.weekOfYear, 2)}`;
                    }
                    if ('year' in timex && 'season' in timex) {
                        return `${fixedFormatNumber(timex.year, 4)}-${timex.season}`;
                    }
                    if ('season' in timex) {
                        return `${timex.season}`;
                    }
                    if ('year' in timex && 'month' in timex) {
                        return `${fixedFormatNumber(timex.year, 4)}-${fixedFormatNumber(timex.month, 2)}`;
                    }
                    if ('year' in timex) {
                        return `${fixedFormatNumber(timex.year, 4)}`;
                    }
                    if ('month' in timex && 'weekOfMonth' in timex && 'dayOfWeek' in timex) {
                        return `XXXX-${fixedFormatNumber(timex.month, 2)}-WXX-${timex.weekOfMonth}-${timex.dayOfWeek}`;
                    }
                    if ('month' in timex && 'weekOfMonth' in timex) {
                        return `XXXX-${fixedFormatNumber(timex.month, 2)}-WXX-${timex.weekOfMonth}`;
                    }
                    if ('month' in timex) {
                        return `XXXX-${fixedFormatNumber(timex.month, 2)}`;
                    }
                    return '';
                };

                const formatTimeRange = function(timex) {
                    if ('partOfDay' in timex) {
                        return `T${timex.partOfDay}`;
                    }
                    return '';
                };

                const format = function(timex) {

                    const types = ('types' in timex) ? timex.types : timexInference.infer(timex);

                    if (types.has('present')) {
                        return 'PRESENT_REF';
                    }
                    if ((types.has('datetimerange') || types.has('daterange') || types.has('timerange')) && types.has('duration')) {
                        const range = timexHelpers.expandDateTimeRange(timex);
                        return `(${format(range.start)},${format(range.end)},${format(range.duration)})`;
                    }
                    if (types.has('datetimerange')) {
                        return `${formatDate(timex)}${formatTimeRange(timex)}`;
                    }
                    if (types.has('daterange')) {
                        return `${formatDateRange(timex)}`;
                    }
                    if (types.has('timerange')) {
                        return `${formatTimeRange(timex)}`;
                    }
                    if (types.has('datetime')) {
                        return `${formatDate(timex)}${formatTime(timex)}`;
                    }
                    if (types.has('duration')) {
                        return `${formatDuration(timex)}`;
                    }
                    if (types.has('date')) {
                        return `${formatDate(timex)}`;
                    }
                    if (types.has('time')) {
                        return `${formatTime(timex)}`;
                    }
                    return '';
                };

                var format_1 = format;

                var timexFormat = {
                    format: format_1
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.

                var days = [
                'Monday',
                'Tuesday',
                'Wednesday',
                'Thursday',
                'Friday',
                'Saturday',
                'Sunday'
                ];

                var months = [
                'January',
                'Februrary',
                'March',
                'April',
                'May',
                'June',
                'July',
                'August',
                'September',
                'October',
                'November',
                'December'
                ];

                var dateAbbreviation = {
                    0: 'th',
                    1: 'st',
                    2: 'nd',
                    3: 'rd',
                    4: 'th',
                    5: 'th',
                    6: 'th',
                    7: 'th',
                    8: 'th',
                    9: 'th'
                };

                var hours = [
                'midnight', '1AM', '2AM', '3AM', '4AM', '5AM', '6AM', '7AM', '8AM', '9AM', '10AM', '11AM',
                'midday', '1PM', '2PM', '3PM', '4PM', '5PM', '6PM', '7PM', '8PM', '9PM', '10PM', '11PM'
                ];

                var seasons = {
                    SP: 'spring',
                    SU: 'summer',
                    FA: 'fall',
                    WI: 'winter'
                };

                var weeks = ['first', 'second', 'third', 'forth'];

                var dayParts = {
                    DT: 'daytime',
                    NI: 'night',
                    MO: 'morning',
                    AF: 'afternoon',
                    EV: 'evening'
                };

                var timexConstants = {
                    days: days,
                    months: months,
                    dateAbbreviation: dateAbbreviation,
                    hours: hours,
                    seasons: seasons,
                    weeks: weeks,
                    dayParts: dayParts
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.




                const convertDate = function(timex) {
                    if ('dayOfWeek' in timex) {
                        return timexConstants.days[timex.dayOfWeek - 1];
                    }
                    const month = timexConstants.months[timex.month - 1];
                    const date = timex.dayOfMonth.toString();
                    const abbreviation = timexConstants.dateAbbreviation[date.slice(-1)];
                    if ('year' in timex) {
                        return `${date}${abbreviation} ${month} ${timex.year}`.trim();
                    }
                    return `${date}${abbreviation} ${month}`;
                };

                const convertTime = function(timex) {
                    if (timex.hour === 0 && timex.minute === 0 && timex.second === 0) {
                        return 'midnight';
                    }
                    if (timex.hour === 12 && timex.minute === 0 && timex.second === 0) {
                        return 'midday';
                    }
                    const pad = function(s) {
                        return (s.length === 1) ? '0' + s : s;
                    };
                    const hour = (timex.hour === 0) ? '12' : (timex.hour > 12) ? (timex.hour - 12).toString() : timex.hour.toString();
                    const minute = (timex.minute === 0 && timex.second === 0) ? '' : ':' + pad(timex.minute.toString());
                    const second = (timex.second === 0) ? '' : ':' + pad(timex.second.toString());
                    const period = timex.hour < 12 ? 'AM' : 'PM';
                    return `${hour}${minute}${second}${period}`;
                };

                const convertDurationPropertyToString = function(timex, property, includeSingleCount) {
                    const propertyName = property + 's';
                    const value = timex[propertyName];
                    if (value !== undefined) {
                        if (value === 1) {
                            return includeSingleCount ? '1 ' + property : property;
                        }
                        else {
                            return `${value} ${property}s`;
                        }
                    }
                    return false;
                };

                const convertTimexDurationToString = function(timex, includeSingleCount) {
                    return convertDurationPropertyToString(timex, 'year', includeSingleCount)
                        || convertDurationPropertyToString(timex, 'month', includeSingleCount)
                        || convertDurationPropertyToString(timex, 'week', includeSingleCount)
                        || convertDurationPropertyToString(timex, 'day', includeSingleCount)
                        || convertDurationPropertyToString(timex, 'hour', includeSingleCount)
                        || convertDurationPropertyToString(timex, 'minute', includeSingleCount)
                        || convertDurationPropertyToString(timex, 'second', includeSingleCount);
                };

                const convertDuration = function(timex) {
                    return convertTimexDurationToString(timex, true);
                };

                const convertDateRange = function(timex) {
                    const season = ('season' in timex) ? timexConstants.seasons[timex.season] : '';
                    const year = ('year' in timex) ? timex.year.toString() : '';
                    if ('weekOfYear' in timex) {
                        if (timex.weekend) {
                            return '';
                        }
                        else {
                            return '';
                        }
                    }
                    if ('month' in timex) {
                        const month = `${timexConstants.months[timex.month - 1]}`;
                        if ('weekOfMonth' in timex) {
                            return `${timexConstants.weeks[timex.weekOfMonth - 1]} week of ${month}`;
                        }
                        else {
                            return `${month} ${year}`.trim();
                        }
                    }
                    return `${season} ${year}`.trim();
                };

                const convertTimeRange = function(timex) {
                    return timexConstants.dayParts[timex.partOfDay];
                };

                const convertDateTime = function(timex) {
                    return `${convertTime(timex)} ${convertDate(timex)}`;
                };

                const convertDateTimeRange = function(timex) {
                    if (timex.types.has('timerange')) {
                        return `${convertDate(timex)} ${convertTimeRange(timex)}`;
                    }
                    // date + time + duration
                    // - OR - 
                    // date + duration
                    return '';
                };

                const convertTimexToString = function(timex) {

                    const types = ('types' in timex) ? timex.types : timexInference.infer(timex);

                    if (types.has('present')) {
                        return 'now';
                    }
                    if (types.has('datetimerange')) {
                        return convertDateTimeRange(timex);
                    }
                    if (types.has('daterange')) {
                        return convertDateRange(timex);
                    }
                    if (types.has('duration')) {
                        return convertDuration(timex);
                    }
                    if (types.has('timerange')) {
                        return convertTimeRange(timex);
                    }

                    // TODO: where appropriate delegate most the formatting delegate to Date.toLocaleString(options)
                    if (types.has('datetime')) {
                        return convertDateTime(timex);
                    }
                    if (types.has('date')) {
                        return convertDate(timex);
                    }
                    if (types.has('time')) {
                        return convertTime(timex);
                    }
                    return '';
                };

                const convertTimexSetToString = function(timexSet) {

                    const timex = timexSet.timex;
                    if (timex.types.has('duration')) {
                        return `every ${convertTimexDurationToString(timex, false)}`;
                    }
                    else {
                        return `every ${convertTimexToString(timex)}`;
                    }
                };

                var timexConvert$2 = {
                    convertDate: convertDate,
                    convertTime: convertTime,
                    convertTimexToString: convertTimexToString,
                    convertTimexSetToString: convertTimexSetToString
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.



                var timexConvert = {
                    convertTimexToString: timexConvert$2.convertTimexToString,
                    convertTimexSetToString: timexConvert$2.convertTimexSetToString
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.






                const getDateDay = function(day) {
                    const index = (day === 0) ? 6 : day - 1;
                    return timexConstants.days[index];
                };

                const convertDate$1 = function(timex, date) {
                    if ('year' in timex && 'month' in timex && 'dayOfMonth' in timex) {
                        const timexDate = new Date(timex.year, timex.month - 1, timex.dayOfMonth);

                        if (timexDateHelpers.datePartEquals(timexDate, date)) {
                            return 'today';
                        }
                        const tomorrow = timexDateHelpers.tomorrow(date);
                        if (timexDateHelpers.datePartEquals(timexDate, tomorrow)) {
                            return 'tomorrow';
                        }
                        const yesterday = timexDateHelpers.yesterday(date);
                        if (timexDateHelpers.datePartEquals(timexDate, yesterday)) {
                            return 'yesterday';
                        }
                        if (timexDateHelpers.isThisWeek(timexDate, date)) {
                            return `this ${getDateDay(timexDate.getDay())}`;
                        }
                        if (timexDateHelpers.isNextWeek(timexDate, date)) {
                            return `next ${getDateDay(timexDate.getDay())}`;
                        }
                        if (timexDateHelpers.isLastWeek(timexDate, date)) {
                            return `last ${getDateDay(timexDate.getDay())}`;
                        }
                    }
                    return timexConvert$2.convertDate(timex);
                };

                const convertDateTime$1 = function(timex, date) {
                    return `${convertDate$1(timex, date)} ${timexConvert$2.convertTime(timex)}`;
                };

                const convertDateRange$1 = function(timex, date) {
                    if ('year' in timex) {
                        const year = date.getFullYear();
                        if (timex.year === year) {
                            if ('weekOfYear' in timex) {
                                const thisWeek = timexDateHelpers.weekOfYear(date);
                                if (thisWeek === timex.weekOfYear) {
                                    return timex.weekend ? 'this weekend' : 'this week';
                                }
                                if (thisWeek === timex.weekOfYear + 1) {
                                    return timex.weekend ? 'last weekend' : 'last week';
                                }
                                if (thisWeek === timex.weekOfYear - 1) {
                                    return timex.weekend ? 'next weekend' : 'next week';
                                }
                            }
                            if ('month' in timex) {
                                const isoMonth = date.getMonth() + 1;
                                if (timex.month === isoMonth) {
                                    return 'this month';
                                }
                                if (timex.month === isoMonth + 1) {
                                    return 'next month';
                                }
                                if (timex.month === isoMonth - 1) {
                                    return 'last month';
                                }
                            }
                            return ('season' in timex) ? `this ${timexConstants.seasons[timex.season]}` : 'this year';
                        }
                        if (timex.year === year + 1) {
                            return ('season' in timex) ? `next ${timexConstants.seasons[timex.season]}` : 'next year';
                        }
                        if (timex.year === year - 1) {
                            return ('season' in timex) ? `last ${timexConstants.seasons[timex.season]}` : 'last year';
                        }
                    }
                    return '';
                };

                const convertDateTimeRange$1 = function(timex, date) {
                    if ('year' in timex && 'month' in timex && 'dayOfMonth' in timex) {
                        const timexDate = new Date(timex.year, timex.month - 1, timex.dayOfMonth);

                        if ('partOfDay' in timex) {
                            if (timexDateHelpers.datePartEquals(timexDate, date)) {
                                if (timex.partOfDay === 'NI') {
                                    return 'tonight';
                                }
                                else {
                                    return `this ${timexConstants.dayParts[timex.partOfDay]}`;
                                }
                            }
                            const tomorrow = timexDateHelpers.tomorrow(date);
                            if (timexDateHelpers.datePartEquals(timexDate, tomorrow)) {
                                return `tomorrow ${timexConstants.dayParts[timex.partOfDay]}`;
                            }
                            const yesterday = timexDateHelpers.yesterday(date);
                            if (timexDateHelpers.datePartEquals(timexDate, yesterday)) {
                                return `yesterday ${timexConstants.dayParts[timex.partOfDay]}`;
                            }

                            if (timexDateHelpers.isNextWeek(timexDate, date)) {
                                return `next ${getDateDay(timexDate.getDay())} ${timexConstants.dayParts[timex.partOfDay]}`;
                            }

                            if (timexDateHelpers.isLastWeek(timexDate, date)) {
                                return `last ${getDateDay(timexDate.getDay())} ${timexConstants.dayParts[timex.partOfDay]}`;
                            }
                        }
                    }
                    return '';
                };

                const convertTimexToStringRelative$1 = function(timex, date) {

                    const types = ('types' in timex) ? timex.types : timexInference.infer(timex);

                    if (types.has('datetimerange')) {
                        return convertDateTimeRange$1(timex, date);
                    }
                    if (types.has('daterange')) {
                        return convertDateRange$1(timex, date);
                    }
                    if (types.has('datetime')) {
                        return convertDateTime$1(timex, date);
                    }
                    if (types.has('date')) {
                        return convertDate$1(timex, date);
                    }

                    return timexConvert$2.convertTimexToString(timex);
                };

                var convertTimexToStringRelative_1 = convertTimexToStringRelative$1;

                var timexRelativeConvert$2 = {
                    convertTimexToStringRelative: convertTimexToStringRelative_1
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.

                var convertTimexToStringRelative = timexRelativeConvert$2.convertTimexToStringRelative;

                var timexRelativeConvert = {
                    convertTimexToStringRelative: convertTimexToStringRelative
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.







                class TimexProperty {
                    constructor(timex)
                    {
                        if (typeof timex === 'string') {
                            timexParsing.parseString(timex, this);
                        }
                        else {
                            timexParsing.fromObject(timex, this);
                        }

                    }
                    // TODO: constructing a Timex from a Timex should be very cheap

                    get timex()
                    {
                        return timexFormat.format(this);
                    }

                    get types()
                    {
                        return timexInference.infer(this);
                    }

                    toString()
                    {
                        return timexConvert.convertTimexToString(this);
                    }

                    // TODO: consider [locales[, options]] similar to Date.toLocaleString([locales[, options]])
                    toNaturalLanguage(referenceDate)
                    {
                        return timexRelativeConvert.convertTimexToStringRelative(this, referenceDate);
                    }

                    static fromDate(date)
                    {
                        return new TimexProperty({
                            year: date.getFullYear(),
                            month: date.getMonth() + 1,
                            dayOfMonth: date.getDate()
                        });
                    }

                    static fromDateTime(date)
                    {
                        return new TimexProperty({
                            year: date.getFullYear(),
                            month: date.getMonth() + 1,
                            dayOfMonth: date.getDate(),
                            hour: date.getHours(),
                            minute: date.getMinutes(),
                            second: date.getSeconds()
                        });
                    }

                    static fromTime(time)
                    {
                        return new TimexProperty(time);
                    }
                }

                var TimexProperty_1 = TimexProperty;

                var timexProperty = {
                    TimexProperty: TimexProperty_1
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.

                const TimexProperty$1 = timexProperty.TimexProperty;

                class TimexSet {
                    constructor(timex)
                    {
                        this.timex = new TimexProperty$1(timex);
                    }
                }

                var TimexSet_1 = TimexSet;

                var timexSet = {
                    TimexSet: TimexSet_1
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.



                const TimexProperty$2 = timexProperty.TimexProperty;

                const today = function(date) {
                    return TimexProperty$2.fromDate(date || new Date()).timex;
                };

                const tomorrow$1 = function(date) {
                    const d = (date === undefined) ? new Date() : new Date(date.getTime());
                    d.setDate(d.getDate() + 1);
                    return TimexProperty$2.fromDate(d).timex;
                };

                const yesterday$1 = function(date) {
                    const d = (date === undefined) ? new Date() : new Date(date.getTime());
                    d.setDate(d.getDate() - 1);
                    return TimexProperty$2.fromDate(d).timex;
                };

                const weekFromToday = function(date) {
                    const d = (date === undefined) ? new Date() : new Date(date.getTime());
                    return (new TimexProperty$2(Object.assign(TimexProperty$2.fromDate(d), {
                        days: 7
                    }))).timex;
                };

                const weekBackFromToday = function(date) {
                    const d = (date === undefined) ? new Date() : new Date(date.getTime());
                    d.setDate(d.getDate() - 7);
                    return (new TimexProperty$2(Object.assign(TimexProperty$2.fromDate(d), {
                        days: 7
                    }))).timex;
                };

                const thisWeek = function(date) {
                    const d = (date === undefined) ? new Date() : new Date(date.getTime());
                    d.setDate(d.getDate() - 7);
                    const start = timexDateHelpers.dateOfNextDay(1, d);
                    return (new TimexProperty$2(Object.assign(TimexProperty$2.fromDate(start), {
                        days: 7
                    }))).timex;
                };

                const nextWeek = function(date) {
                    const d = (date === undefined) ? new Date() : new Date(date.getTime());
                    const start = timexDateHelpers.dateOfNextDay(1, d);
                    return (new TimexProperty$2(Object.assign(TimexProperty$2.fromDate(start), {
                        days: 7
                    }))).timex;
                };

                const lastWeek = function(date) {
                    const d = (date === undefined) ? new Date() : new Date(date.getTime());
                    const start = timexDateHelpers.dateOfLastDay(1, d);
                    start.setDate(start.getDate() - 7);
                    return (new TimexProperty$2(Object.assign(TimexProperty$2.fromDate(start), {
                        days: 7
                    }))).timex;
                };

                const nextWeeksFromToday = function(n, date) {
                    const d = (date === undefined) ? new Date() : new Date(date.getTime());
                    return (new TimexProperty$2(Object.assign(TimexProperty$2.fromDate(d), {
                        days: 7 * n
                    }))).timex;
                };

                // The following constants are consistent with the Recognizer results
                const monday = 'XXXX-WXX-1';
                const tuesday = 'XXXX-WXX-2';
                const wednesday = 'XXXX-WXX-3';
                const thursday = 'XXXX-WXX-4';
                const friday = 'XXXX-WXX-5';
                const saturday = 'XXXX-WXX-6';
                const sunday = 'XXXX-WXX-7';
                const morning = '(T08,T12,PT4H)';
                const afternoon = '(T12,T16,PT4H)';
                const evening = '(T16,T20,PT4H)';
                const daytime = '(T08,T18,PT10H)';

                var timexCreator = {
                    today: today,
                    tomorrow: tomorrow$1,
                    yesterday: yesterday$1,
                    weekFromToday: weekFromToday,
                    weekBackFromToday: weekBackFromToday,
                    thisWeek: thisWeek,
                    nextWeek: nextWeek,
                    lastWeek: lastWeek,
                    nextWeeksFromToday: nextWeeksFromToday,
                    monday: monday,
                    tuesday: tuesday,
                    wednesday: wednesday,
                    thursday: thursday,
                    friday: friday,
                    saturday: saturday,
                    sunday: sunday,
                    morning: morning,
                    afternoon: afternoon,
                    evening: evening,
                    daytime: daytime
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.

                const isOverlapping = function(r1, r2) {
                    return r1.end.getTime() > r2.start.getTime() && r1.start.getTime() <= r2.start.getTime()
                        || r1.start.getTime() < r2.end.getTime() && r1.start.getTime() >= r2.start.getTime();
                };

                const collapseOverlapping = function(r1, r2, T) {
                    return {
                        start: new T(Math.max(r1.start.getTime(), r2.start.getTime())),
                        end: new T(Math.min(r1.end.getTime(), r2.end.getTime()))
                    };
                };

                const innerCollapse = function(ranges, T) {
                    if (ranges.length === 1) {
                        return false;
                    }
                    for (let i = 0; i < ranges.length; i++) {
                        const r1 = ranges[i];
                        for (let j = i + 1; j < ranges.length; j++) {
                            const r2 = ranges[j];
                            if (isOverlapping(r1, r2)) {
                                ranges.splice(i, 1);
                                ranges.splice(j - 1, 1);
                                ranges.push(collapseOverlapping(r1, r2, T));
                                return true;
                            }
                        }
                    }
                    return false;
                };

                const collapse = function(ranges, T) {
                    const r = ranges.slice(0);
                    while (innerCollapse(r, T))
                        ;
                    r.sort((a, b) => a.start.getTime() - b.start.getTime());
                    return r;
                };

                var timexConstraintsHelper = {
                    collapse: collapse,
                    isOverlapping: isOverlapping
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.




                const Time$2 = time.Time;
                const TimexProperty$3 = timexProperty.TimexProperty;

                const resolveDefiniteAgainstConstraint = function(timex, constraint) {
                    const timexDate = timexHelpers.dateFromTimex(timex);
                    if (timexDate.getTime() >= constraint.start.getTime() && timexDate.getTime() < constraint.end.getTime()) {
                        return [timex.timex];
                    }
                    return [];
                };

                const resolveDateAgainstConstraint = function(timex, constraint) {
                    if ('month' in timex && 'dayOfMonth' in timex) {
                        const result = [];
                        for (let year = constraint.start.getFullYear(); year <= constraint.end.getFullYear(); year++) {
                            const r = resolveDefiniteAgainstConstraint(new TimexProperty$3(Object.assign({}, timex, {
                                year: year
                            })), constraint);
                            if (r.length > 0) {
                                result.push(r[0]);
                            }
                        }
                        return result;
                    }
                    if ('dayOfWeek' in timex) {
                        const day = timex.dayOfWeek === 7 ? 0 : timex.dayOfWeek;
                        const dates = timexDateHelpers.datesMatchingDay(day, constraint.start, constraint.end);
                        const result = [];
                        for (const d of dates) {
                            const t = Object.assign({}, timex);
                            delete t.dayOfWeek;
                            const r = new TimexProperty$3(Object.assign({}, t, {
                                year: d.getFullYear(),
                                month: d.getMonth() + 1,
                                dayOfMonth: d.getDate()
                            }));
                            result.push(r.timex);
                        }
                        return result;
                    }
                    return [];
                };

                const resolveDate = function(timex, constraints) {
                    const result = [];
                    for (const constraint of constraints) {
                        Array.prototype.push.apply(result, resolveDateAgainstConstraint(timex, constraint));
                    }
                    return result;
                };

                const resolveTimeAgainstConstraint = function(timex, constraint) {
                    const t = new Time$2(timex.hour, timex.minute, timex.second);
                    if (t.getTime() >= constraint.start.getTime() && t.getTime() < constraint.end.getTime()) {
                        return [timex.timex];
                    }
                    return [];
                };

                const resolveTime = function(timex, constraints) {
                    const result = [];
                    for (const constraint of constraints) {
                        Array.prototype.push.apply(result, resolveTimeAgainstConstraint(timex, constraint));
                    }
                    return result;
                };

                const removeDuplicates = function(array) {
                    var seen = new Set();
                    return array.filter(item => {
                        return seen.has(item) ? false : seen.add(item);
                    });
                };

                const resolveByDateRangeConstraints = function(candidates, timexConstraints) {

                    const dateRangeConstraints = timexConstraints
                    .filter((timex) => {
                        return timex.types.has('daterange');
                    })
                    .map((timex) => {
                        return timexHelpers.dateRangeFromTimex(timex);
                    });
                    const collapsedDateRanges = timexConstraintsHelper.collapse(dateRangeConstraints, Date);

                    if (collapsedDateRanges.length === 0) {
                        return candidates;
                    }

                    const resolution = [];
                    for (const timex of candidates) {
                        const r = resolveDate(new TimexProperty$3(timex), collapsedDateRanges);
                        Array.prototype.push.apply(resolution, r);
                    }

                    return removeDuplicates(resolution);
                };

                const resolveByTimeConstraints = function(candidates, timexConstraints) {

                    const times = timexConstraints
                    .filter((timex) => {
                        return timex.types.has('time');
                    })
                    .map((timex) => {
                        return timexHelpers.timeFromTimex(timex);
                    });

                    if (times.length === 0) {
                        return candidates;
                    }

                    const resolution = [];
                    for (const timex of candidates.map(t => new TimexProperty$3(t))) {
                        if (timex.types.has('date') && !timex.types.has('time')) {
                            for (const time$$2 of times) {
                                timex.hour = time$$2.hour;
                                timex.minute = time$$2.minute;
                                timex.second = time$$2.second;
                                resolution.push(timex.timex);
                            }
                        }
                        else {
                            resolution.push(timex.timex);
                        }
                    }
                    return removeDuplicates(resolution);
                };

                const resolveByTimeRangeConstraints = function(candidates, timexConstraints) {

                    const timeRangeConstraints = timexConstraints
                    .filter((timex) => {
                        return timex.types.has('timerange');
                    })
                    .map((timex) => {
                        return timexHelpers.timeRangeFromTimex(timex);
                    });
                    const collapsedTimeRanges = timexConstraintsHelper.collapse(timeRangeConstraints, Time$2);

                    if (collapsedTimeRanges.length === 0) {
                        return candidates;
                    }

                    const resolution = [];
                    for (const timex of candidates) {
                        const t = new TimexProperty$3(timex);
                        if (t.types.has('timerange')) {
                            const r = resolveTimeRange(t, collapsedTimeRanges);
                            Array.prototype.push.apply(resolution, r);
                        }
                        else if (t.types.has('time')) {
                            const r = resolveTime(t, collapsedTimeRanges);
                            Array.prototype.push.apply(resolution, r);
                        }
                    }

                    return removeDuplicates(resolution);
                };

                const resolveTimeRange = function(timex, constraints) {

                    const candidate = timexHelpers.timeRangeFromTimex(timex);

                    const result = [];
                    for (const constraint of constraints) {

                        if (timexConstraintsHelper.isOverlapping(candidate, constraint)) {

                            const start = Math.max(candidate.start.getTime(), constraint.start.getTime());
                            const time$$2 = new Time$2(start);

                            // TODO: refer to comments in C# - consider first classing this clone/overwrite behavior
                            const resolved = new TimexProperty$3(timex.timex);
                            delete resolved.partOfDay;
                            delete resolved.seconds;
                            delete resolved.minutes;
                            delete resolved.hours;
                            resolved.second = time$$2.second;
                            resolved.minute = time$$2.minute;
                            resolved.hour = time$$2.hour;

                            result.push(resolved.timex);
                        }
                    }
                    return result;
                };

                const resolveDuration = function(candidate, constraints) {
                    const results = [];
                    for (const constraint of constraints) {
                        if (constraint.types.has('datetime')) {
                            results.push(new TimexProperty$3(timexHelpers.timexDateTimeAdd(constraint, candidate)));
                        }
                        else if (constraint.types.has('time')) {
                            results.push(new TimexProperty$3(timexHelpers.timexTimeAdd(constraint, candidate)));
                        }
                    }
                    return results;
                };

                const resolveDurations = function(candidates, constraints) {
                    const results = [];
                    for (const candidate of candidates) {
                        const timex = new TimexProperty$3(candidate);
                        if (timex.types.has('duration')) {
                            const r = resolveDuration(timex, constraints);
                            for (const resolved of r) {
                                results.push(resolved.timex);
                            }
                        }
                        else {
                            results.push(candidate);
                        }
                    }
                    return results;
                };

                const evaluate = function(candidates, constraints) {
                    const timexConstraints = constraints.map((x) => {
                        return new TimexProperty$3(x);
                    });
                    const candidatesWithDurationsResolved = resolveDurations(candidates, timexConstraints);
                    const candidatesAccordingToDate = resolveByDateRangeConstraints(candidatesWithDurationsResolved, timexConstraints);
                    const candidatesWithAddedTime = resolveByTimeConstraints(candidatesAccordingToDate, timexConstraints);
                    const candidatesFilteredByTime = resolveByTimeRangeConstraints(candidatesWithAddedTime, timexConstraints);
                    const timexResults = candidatesFilteredByTime.map((x) => {
                        return new TimexProperty$3(x);
                    });
                    return timexResults;
                };

                var timexRangeResolver = {
                    evaluate: evaluate
                };

                // Copyright (c) Microsoft Corporation. All rights reserved.

                var datatypesDateTime = {
                    Time: time.Time,
                    TimexProperty: timexProperty.TimexProperty,
                    TimexSet: timexSet.TimexSet,
                    creator: timexCreator,
                    resolver: timexRangeResolver
                };

                var datatypesDateTime_1 = datatypesDateTime.Time;
                var datatypesDateTime_2 = datatypesDateTime.TimexProperty;
                var datatypesDateTime_3 = datatypesDateTime.TimexSet;
                var datatypesDateTime_4 = datatypesDateTime.creator;
                var datatypesDateTime_5 = datatypesDateTime.resolver;

                exports['default'] = datatypesDateTime;
                exports.Time = datatypesDateTime_1;
                exports.TimexProperty = datatypesDateTime_2;
                exports.TimexSet = datatypesDateTime_3;
                exports.creator = datatypesDateTime_4;
                exports.resolver = datatypesDateTime_5;

                return exports;

            }({}));


        }, {}],
        214: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            // ConvertTo-TS run at 2016-10-04T11:26:49.0828748-07:00
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const assert = require("assert");
            const Decorators_1 = require("./Decorators");
            const IntStream_1 = require("./IntStream");
            const READ_BUFFER_SIZE = 1024;
            const INITIAL_BUFFER_SIZE = 1024;
            /**
             * Vacuum all input from a {@link Reader}/{@link InputStream} and then treat it
             * like a `char[]` buffer. Can also pass in a {@link String} or
             * `char[]` to use.
             *
             * If you need encoding, pass in stream/reader with correct encoding.
             *
             * @deprecated as of 4.7, please use `CharStreams` interface.
             */
            class ANTLRInputStream {
                /** Copy data in string to a local char array */
                constructor(input)
                {
                    /** 0..n-1 index into string of next char */
                    this.p = 0;
                    this.data = input;
                    this.n = input.length;
                }
                /** Reset the stream so that it's in the same state it was
                     *  when the object was created *except* the data array is not
                     *  touched.
                     */
                reset()
                {
                    this.p = 0;
                }
                consume()
                {
                    if (this.p >= this.n) {
                        assert(this.LA(1) === IntStream_1.IntStream.EOF);
                        throw new Error("cannot consume EOF");
                    }
                    //System.out.println("prev p="+p+", c="+(char)data[p]);
                    if (this.p < this.n) {
                        this.p++;

                    }
                }
                //System.out.println("p moves to "+p+" (c='"+(char)data[p]+"')");
                LA(i)
                {
                    if (i === 0) {
                        return 0; // undefined
                    }
                    if (i < 0) {
                        i++; // e.g., translate LA(-1) to use offset i=0; then data[p+0-1]
                        if ((this.p + i - 1) < 0) {
                            return IntStream_1.IntStream.EOF; // invalid; no char before first char
                        }
                    }
                    if ((this.p + i - 1) >= this.n) {
                        //System.out.println("char LA("+i+")=EOF; p="+p);
                        return IntStream_1.IntStream.EOF;
                    }
                    //System.out.println("char LA("+i+")="+(char)data[p+i-1]+"; p="+p);
                    //System.out.println("LA("+i+"); p="+p+" n="+n+" data.length="+data.length);
                    return this.data.charCodeAt(this.p + i - 1);
                }
                LT(i)
                {
                    return this.LA(i);
                }
                /** Return the current input symbol index 0..n where n indicates the
                     *  last symbol has been read.  The index is the index of char to
                     *  be returned from LA(1).
                     */
                get index()
                {
                    return this.p;
                }
                get size()
                {
                    return this.n;
                }
                /** mark/release do nothing; we have entire buffer */
                mark()
                {
                    return -1;
                }
                release(marker) {

                }
                /** consume() ahead until p==index; can't just set p=index as we must
                     *  update line and charPositionInLine. If we seek backwards, just set p
                     */
                seek(index)
                {
                    if (index <= this.p) {
                        this.p = index; // just jump; don't update stream state (line, ...)
                        return;
                    }
                    // seek forward, consume until p hits index or n (whichever comes first)
                    index = Math.min(index, this.n);
                    while (this.p < index) {
                        this.consume();
                    }
                }
                getText(interval)
                {
                    let start = interval.a;
                    let stop = interval.b;
                    if (stop >= this.n) {
                        stop = this.n - 1;
                    }
                    let count = stop - start + 1;
                    if (start >= this.n) {
                        return "";
                    }
                    // System.err.println("data: "+Arrays.toString(data)+", n="+n+
                    //           ", start="+start+
                    //           ", stop="+stop);
                    return this.data.substr(start, count);
                }
                get sourceName()
                {
                    if (!this.name) {
                        return IntStream_1.IntStream.UNKNOWN_SOURCE_NAME;
                    }
                    return this.name;
                }
                toString()
                {
                    return this.data;
                }
            }
            __decorate([
            Decorators_1.Override
            ], ANTLRInputStream.prototype, "consume", null);
            __decorate([
            Decorators_1.Override
            ], ANTLRInputStream.prototype, "LA", null);
            __decorate([
            Decorators_1.Override
            ], ANTLRInputStream.prototype, "index", null);
            __decorate([
            Decorators_1.Override
            ], ANTLRInputStream.prototype, "size", null);
            __decorate([
            Decorators_1.Override
            ], ANTLRInputStream.prototype, "mark", null);
            __decorate([
            Decorators_1.Override
            ], ANTLRInputStream.prototype, "release", null);
            __decorate([
            Decorators_1.Override
            ], ANTLRInputStream.prototype, "seek", null);
            __decorate([
            Decorators_1.Override
            ], ANTLRInputStream.prototype, "getText", null);
            __decorate([
            Decorators_1.Override
            ], ANTLRInputStream.prototype, "sourceName", null);
            __decorate([
            Decorators_1.Override
            ], ANTLRInputStream.prototype, "toString", null);
            exports.ANTLRInputStream = ANTLRInputStream;

        }, {
            "./Decorators": 224,
            "./IntStream": 230,
            "assert": 364
        }],
        215: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:49.2855056-07:00
            const DefaultErrorStrategy_1 = require("./DefaultErrorStrategy");
            const InputMismatchException_1 = require("./InputMismatchException");
            const Decorators_1 = require("./Decorators");
            const ParseCancellationException_1 = require("./misc/ParseCancellationException");
            /**
             * This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
             * by immediately canceling the parse operation with a
             * {@link ParseCancellationException}. The implementation ensures that the
             * {@link ParserRuleContext#exception} field is set for all parse tree nodes
             * that were not completed prior to encountering the error.
             *
             * This error strategy is useful in the following scenarios.
             *
             * * **Two-stage parsing:** This error strategy allows the first
             *   stage of two-stage parsing to immediately terminate if an error is
             *   encountered, and immediately fall back to the second stage. In addition to
             *   avoiding wasted work by attempting to recover from errors here, the empty
             *   implementation of {@link BailErrorStrategy#sync} improves the performance of
             *   the first stage.
             * * **Silent validation:** When syntax errors are not being
             *   reported or logged, and the parse result is simply ignored if errors occur,
             *   the {@link BailErrorStrategy} avoids wasting work on recovering from errors
             *   when the result will be ignored either way.
             *
             * ```
             * myparser.errorHandler = new BailErrorStrategy();
             * ```
             *
             * @see Parser.errorHandler
             */
            class BailErrorStrategy extends DefaultErrorStrategy_1.DefaultErrorStrategy {
                /** Instead of recovering from exception `e`, re-throw it wrapped
                     *  in a {@link ParseCancellationException} so it is not caught by the
                     *  rule function catches.  Use {@link Exception#getCause()} to get the
                     *  original {@link RecognitionException}.
                     */
                recover(recognizer, e)
                {
                    for (let context = recognizer.context; context; context = context.parent) {
                        context.exception = e;
                    }
                    throw new ParseCancellationException_1.ParseCancellationException(e);
                }
                /** Make sure we don't attempt to recover inline; if the parser
                     *  successfully recovers, it won't throw an exception.
                     */
                recoverInline(recognizer)
                {
                    let e = new InputMismatchException_1.InputMismatchException(recognizer);
                    for (let context = recognizer.context; context; context = context.parent) {
                        context.exception = e;
                    }
                    throw new ParseCancellationException_1.ParseCancellationException(e);
                }
                /** Make sure we don't attempt to recover from problems in subrules. */
                sync(recognizer) {

                }
            }
            __decorate([
            Decorators_1.Override
            ], BailErrorStrategy.prototype, "recover", null);
            __decorate([
            Decorators_1.Override
            ], BailErrorStrategy.prototype, "recoverInline", null);
            __decorate([
            Decorators_1.Override
            ], BailErrorStrategy.prototype, "sync", null);
            exports.BailErrorStrategy = BailErrorStrategy;

        }, {
            "./Decorators": 224,
            "./DefaultErrorStrategy": 225,
            "./InputMismatchException": 229,
            "./misc/ParseCancellationException": 335
        }],
        216: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:49.6074365-07:00
            const assert = require("assert");
            const CommonToken_1 = require("./CommonToken");
            const Interval_1 = require("./misc/Interval");
            const Lexer_1 = require("./Lexer");
            const Decorators_1 = require("./Decorators");
            const Token_1 = require("./Token");
            /**
             * This implementation of {@link TokenStream} loads tokens from a
             * {@link TokenSource} on-demand, and places the tokens in a buffer to provide
             * access to any previous token by index.
             *
             * This token stream ignores the value of {@link Token#getChannel}. If your
             * parser requires the token stream filter tokens to only those on a particular
             * channel, such as {@link Token#DEFAULT_CHANNEL} or
             * {@link Token#HIDDEN_CHANNEL}, use a filtering token stream such a
             * {@link CommonTokenStream}.
             */
            let BufferedTokenStream = class BufferedTokenStream {
                constructor(tokenSource)
                {
                    /**
                             * A collection of all tokens fetched from the token source. The list is
                             * considered a complete view of the input once {@link #fetchedEOF} is set
                             * to `true`.
                             */
                    this.tokens = [];
                    /**
                             * The index into {@link #tokens} of the current token (next token to
                             * {@link #consume}). {@link #tokens}`[`{@link #p}`]` should be
                             * {@link #LT LT(1)}.
                             *
                             * This field is set to -1 when the stream is first constructed or when
                             * {@link #setTokenSource} is called, indicating that the first token has
                             * not yet been fetched from the token source. For additional information,
                             * see the documentation of {@link IntStream} for a description of
                             * Initializing Methods.
                             */
                    this.p = -1;
                    /**
                             * Indicates whether the {@link Token#EOF} token has been fetched from
                             * {@link #tokenSource} and added to {@link #tokens}. This field improves
                             * performance for the following cases:
                             *
                             * * {@link #consume}: The lookahead check in {@link #consume} to prevent
                             *   consuming the EOF symbol is optimized by checking the values of
                             *   {@link #fetchedEOF} and {@link #p} instead of calling {@link #LA}.
                             * * {@link #fetch}: The check to prevent adding multiple EOF symbols into
                             *   {@link #tokens} is trivial with this field.
                             */
                    this.fetchedEOF = false;
                    if (tokenSource == null) {
                        throw new Error("tokenSource cannot be null");
                    }
                    this._tokenSource = tokenSource;
                }
                get tokenSource()
                {
                    return this._tokenSource;
                }
                /** Reset this token stream by setting its token source. */
                set tokenSource(tokenSource)
                {
                    this._tokenSource = tokenSource;
                    this.tokens.length = 0;
                    this.p = -1;
                    this.fetchedEOF = false;
                }
                get index()
                {
                    return this.p;
                }
                mark()
                {
                    return 0;
                }
                release(marker) {

                }
                seek(index)
                {
                    this.lazyInit();
                    this.p = this.adjustSeekIndex(index);
                }
                get size()
                {
                    return this.tokens.length;
                }
                consume()
                {
                    let skipEofCheck;
                    if (this.p >= 0) {
                        if (this.fetchedEOF) {
                            // the last token in tokens is EOF. skip check if p indexes any
                            // fetched token except the last.
                            skipEofCheck = this.p < this.tokens.length - 1;
                        }
                        else {
                            // no EOF token in tokens. skip check if p indexes a fetched token.
                            skipEofCheck = this.p < this.tokens.length;
                        }
                    }
                    else {
                        // not yet initialized
                        skipEofCheck = false;
                    }
                    if (!skipEofCheck && this.LA(1) === Token_1.Token.EOF) {
                        throw new Error("cannot consume EOF");
                    }
                    if (this.sync(this.p + 1)) {
                        this.p = this.adjustSeekIndex(this.p + 1);
                    }
                }
                /** Make sure index `i` in tokens has a token.
                     *
                     * @returns `true` if a token is located at index `i`, otherwise
                     *    `false`.
                     * @see #get(int i)
                     */
                sync(i)
                {
                    assert(i >= 0);
                    let n = i - this.tokens.length + 1; // how many more elements we need?
                    //System.out.println("sync("+i+") needs "+n);
                    if (n > 0) {
                        let fetched = this.fetch(n);
                        return fetched >= n;
                    }
                    return true;
                }
                /** Add `n` elements to buffer.
                     *
                     * @returns The actual number of elements added to the buffer.
                     */
                fetch(n)
                {
                    if (this.fetchedEOF) {
                        return 0;
                    }
                    for (let i = 0; i < n; i++) {
                        let t = this.tokenSource.nextToken();
                        if (this.isWritableToken(t)) {
                            t.tokenIndex = this.tokens.length;
                        }
                        this.tokens.push(t);
                        if (t.type === Token_1.Token.EOF) {
                            this.fetchedEOF = true;
                            return i + 1;
                        }
                    }
                    return n;
                }
                get(i)
                {
                    if (i < 0 || i >= this.tokens.length) {
                        throw new RangeError("token index " + i + " out of range 0.." + (this.tokens.length - 1));
                    }
                    return this.tokens[i];
                }
                /** Get all tokens from start..stop inclusively. */
                getRange(start, stop)
                {
                    if (start < 0 || stop < 0) {
                        return [];
                    }
                    this.lazyInit();
                    let subset = new Array();
                    if (stop >= this.tokens.length) {
                        stop = this.tokens.length - 1;
                    }
                    for (let i = start; i <= stop; i++) {
                        let t = this.tokens[i];
                        if (t.type === Token_1.Token.EOF) {
                            break;
                        }
                        subset.push(t);
                    }
                    return subset;
                }
                LA(i)
                {
                    let token = this.LT(i);
                    if (!token) {
                        return Token_1.Token.INVALID_TYPE;
                    }
                    return token.type;
                }
                tryLB(k)
                {
                    if ((this.p - k) < 0) {
                        return undefined;
                    }
                    return this.tokens[this.p - k];
                }
                LT(k)
                {
                    let result = this.tryLT(k);
                    if (result === undefined) {
                        throw new RangeError("requested lookback index out of range");
                    }
                    return result;
                }
                tryLT(k)
                {
                    this.lazyInit();
                    if (k === 0) {
                        throw new RangeError("0 is not a valid lookahead index");
                    }
                    if (k < 0) {
                        return this.tryLB(-k);
                    }
                    let i = this.p + k - 1;
                    this.sync(i);
                    if (i >= this.tokens.length) {
                        // return EOF token
                        // EOF must be last token
                        return this.tokens[this.tokens.length - 1];
                    }
                    //    if ( i>range ) range = i;
                    return this.tokens[i];
                }
                /**
                     * Allowed derived classes to modify the behavior of operations which change
                     * the current stream position by adjusting the target token index of a seek
                     * operation. The default implementation simply returns `i`. If an
                     * exception is thrown in this method, the current stream index should not be
                     * changed.
                     *
                     * For example, {@link CommonTokenStream} overrides this method to ensure that
                     * the seek target is always an on-channel token.
                     *
                     * @param i The target token index.
                     * @returns The adjusted target token index.
                     */
                adjustSeekIndex(i)
                {
                    return i;
                }
                lazyInit()
                {
                    if (this.p === -1) {
                        this.setup();
                    }
                }
                setup()
                {
                    this.sync(0);
                    this.p = this.adjustSeekIndex(0);
                }
                /** Given a start and stop index, return a `List` of all tokens in
                     *  the token type `BitSet`.  Return an empty array if no tokens were found.  This
                     *  method looks at both on and off channel tokens.
                     */
                getTokens(start, stop, types)
                {
                    this.lazyInit();
                    if (start === undefined) {
                        assert(stop === undefined && types === undefined);
                        return this.tokens;
                    }
                    else if (stop === undefined) {
                        stop = this.tokens.length - 1;
                    }
                    if (start < 0 || stop >= this.tokens.length || stop < 0 || start >= this.tokens.length) {
                        throw new RangeError("start " + start + " or stop " + stop + " not in 0.." + (this.tokens.length - 1));
                    }
                    if (start > stop) {
                        return [];
                    }
                    if (types === undefined) {
                        return this.tokens.slice(start, stop + 1);
                    }
                    else if (typeof types === "number") {
                        types = new Set().add(types);
                    }
                    let typesSet = types;
                    // list = tokens[start:stop]:{T t, t.type in types}
                    let filteredTokens = this.tokens.slice(start, stop + 1);
                    filteredTokens = filteredTokens.filter((value) => typesSet.has(value.type));
                    return filteredTokens;
                }
                /**
                     * Given a starting index, return the index of the next token on channel.
                     * Return `i` if `tokens[i]` is on channel. Return the index of
                     * the EOF token if there are no tokens on channel between `i` and
                     * EOF.
                     */
                nextTokenOnChannel(i, channel)
                {
                    this.sync(i);
                    if (i >= this.size) {
                        return this.size - 1;
                    }
                    let token = this.tokens[i];
                    while (token.channel !== channel) {
                        if (token.type === Token_1.Token.EOF) {
                            return i;
                        }
                        i++;
                        this.sync(i);
                        token = this.tokens[i];
                    }
                    return i;
                }
                /**
                     * Given a starting index, return the index of the previous token on
                     * channel. Return `i` if `tokens[i]` is on channel. Return -1
                     * if there are no tokens on channel between `i` and 0.
                     *
                     * If `i` specifies an index at or after the EOF token, the EOF token
                     * index is returned. This is due to the fact that the EOF token is treated
                     * as though it were on every channel.
                     */
                previousTokenOnChannel(i, channel)
                {
                    this.sync(i);
                    if (i >= this.size) {
                        // the EOF token is on every channel
                        return this.size - 1;
                    }
                    while (i >= 0) {
                        let token = this.tokens[i];
                        if (token.type === Token_1.Token.EOF || token.channel === channel) {
                            return i;
                        }
                        i--;
                    }
                    return i;
                }
                /** Collect all tokens on specified channel to the right of
                     *  the current token up until we see a token on {@link Lexer#DEFAULT_TOKEN_CHANNEL} or
                     *  EOF. If `channel` is `-1`, find any non default channel token.
                     */
                getHiddenTokensToRight(tokenIndex, channel=-1)
                {
                    this.lazyInit();
                    if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
                        throw new RangeError(tokenIndex + " not in 0.." + (this.tokens.length - 1));
                    }
                    let nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer_1.Lexer.DEFAULT_TOKEN_CHANNEL);
                    let to;
                    let from = tokenIndex + 1;
                    // if none onchannel to right, nextOnChannel=-1 so set to = last token
                    if (nextOnChannel === -1) {
                        to = this.size - 1;
                    }
                    else {
                        to = nextOnChannel;
                    }
                    return this.filterForChannel(from, to, channel);
                }
                /** Collect all tokens on specified channel to the left of
                     *  the current token up until we see a token on {@link Lexer#DEFAULT_TOKEN_CHANNEL}.
                     *  If `channel` is `-1`, find any non default channel token.
                     */
                getHiddenTokensToLeft(tokenIndex, channel=-1)
                {
                    this.lazyInit();
                    if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
                        throw new RangeError(tokenIndex + " not in 0.." + (this.tokens.length - 1));
                    }
                    if (tokenIndex === 0) {
                        // obviously no tokens can appear before the first token
                        return [];
                    }
                    let prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer_1.Lexer.DEFAULT_TOKEN_CHANNEL);
                    if (prevOnChannel === tokenIndex - 1) {
                        return [];
                    }
                    // if none onchannel to left, prevOnChannel=-1 then from=0
                    let from = prevOnChannel + 1;
                    let to = tokenIndex - 1;
                    return this.filterForChannel(from, to, channel);
                }
                filterForChannel(from, to, channel)
                {
                    let hidden = new Array();
                    for (let i = from; i <= to; i++) {
                        let t = this.tokens[i];
                        if (channel === -1) {
                            if (t.channel !== Lexer_1.Lexer.DEFAULT_TOKEN_CHANNEL) {
                                hidden.push(t);
                            }
                        }
                        else {
                            if (t.channel === channel) {
                                hidden.push(t);
                            }
                        }
                    }
                    return hidden;
                }
                get sourceName()
                {
                    return this.tokenSource.sourceName;
                }
                getText(interval)
                {
                    if (interval === undefined) {
                        interval = Interval_1.Interval.of(0, this.size - 1);
                    }
                    else if (!(interval instanceof Interval_1.Interval)) {
                        // Note: the more obvious check for 'instanceof RuleContext' results in a circular dependency problem
                        interval = interval.sourceInterval;
                    }
                    let start = interval.a;
                    let stop = interval.b;
                    if (start < 0 || stop < 0) {
                        return "";
                    }
                    this.fill();
                    if (stop >= this.tokens.length) {
                        stop = this.tokens.length - 1;
                    }
                    let buf = "";
                    for (let i = start; i <= stop; i++) {
                        let t = this.tokens[i];
                        if (t.type === Token_1.Token.EOF) {
                            break;
                        }
                        buf += t.text;
                    }
                    return buf.toString();
                }
                getTextFromRange(start, stop)
                {
                    if (this.isToken(start) && this.isToken(stop)) {
                        return this.getText(Interval_1.Interval.of(start.tokenIndex, stop.tokenIndex));
                    }
                    return "";
                }
                /** Get all tokens from lexer until EOF. */
                fill()
                {
                    this.lazyInit();
                    const blockSize = 1000;
                    while (true) {
                        let fetched = this.fetch(blockSize);
                        if (fetched < blockSize) {
                            return;
                        }
                    }
                }
                // TODO: Figure out a way to make this more flexible?
                isWritableToken(t)
                {
                    return t instanceof CommonToken_1.CommonToken;
                }
                // TODO: Figure out a way to make this more flexible?
                isToken(t)
                {
                    return t instanceof CommonToken_1.CommonToken;
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], BufferedTokenStream.prototype, "_tokenSource", void 0);
            __decorate([
            Decorators_1.Override
            ], BufferedTokenStream.prototype, "tokenSource", null);
            __decorate([
            Decorators_1.Override
            ], BufferedTokenStream.prototype, "index", null);
            __decorate([
            Decorators_1.Override
            ], BufferedTokenStream.prototype, "mark", null);
            __decorate([
            Decorators_1.Override
            ], BufferedTokenStream.prototype, "release", null);
            __decorate([
            Decorators_1.Override
            ], BufferedTokenStream.prototype, "seek", null);
            __decorate([
            Decorators_1.Override
            ], BufferedTokenStream.prototype, "size", null);
            __decorate([
            Decorators_1.Override
            ], BufferedTokenStream.prototype, "consume", null);
            __decorate([
            Decorators_1.Override
            ], BufferedTokenStream.prototype, "get", null);
            __decorate([
            Decorators_1.Override
            ], BufferedTokenStream.prototype, "LA", null);
            __decorate([
            Decorators_1.NotNull,
            Decorators_1.Override
            ], BufferedTokenStream.prototype, "LT", null);
            __decorate([
            Decorators_1.Override
            ], BufferedTokenStream.prototype, "sourceName", null);
            __decorate([
            Decorators_1.NotNull,
            Decorators_1.Override
            ], BufferedTokenStream.prototype, "getText", null);
            __decorate([
            Decorators_1.NotNull,
            Decorators_1.Override
            ], BufferedTokenStream.prototype, "getTextFromRange", null);
            BufferedTokenStream = __decorate([
            __param(0, Decorators_1.NotNull)
            ], BufferedTokenStream);
            exports.BufferedTokenStream = BufferedTokenStream;

        }, {
            "./CommonToken": 220,
            "./Decorators": 224,
            "./Lexer": 232,
            "./Token": 248,
            "./misc/Interval": 330,
            "assert": 364
        }],
        217: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const CodePointBuffer_1 = require("./CodePointBuffer");
            const CodePointCharStream_1 = require("./CodePointCharStream");
            const IntStream_1 = require("./IntStream");
            // const DEFAULT_BUFFER_SIZE: number = 4096;
            /** This class represents the primary interface for creating {@link CharStream}s
             *  from a variety of sources as of 4.7.  The motivation was to support
             *  Unicode code points > U+FFFF.  {@link ANTLRInputStream} and
             *  {@link ANTLRFileStream} are now deprecated in favor of the streams created
             *  by this interface.
             *
             *  DEPRECATED: {@code new ANTLRFileStream("myinputfile")}
             *  NEW:        {@code CharStreams.fromFileName("myinputfile")}
             *
             *  WARNING: If you use both the deprecated and the new streams, you will see
             *  a nontrivial performance degradation. This speed hit is because the
             *  {@link Lexer}'s internal code goes from a monomorphic to megamorphic
             *  dynamic dispatch to get characters from the input stream. Java's
             *  on-the-fly compiler (JIT) is unable to perform the same optimizations
             *  so stick with either the old or the new streams, if performance is
             *  a primary concern. See the extreme debugging and spelunking
             *  needed to identify this issue in our timing rig:
             *
             *      https://github.com/antlr/antlr4/pull/1781
             *
             *  The ANTLR character streams still buffer all the input when you create
             *  the stream, as they have done for ~20 years. If you need unbuffered
             *  access, please note that it becomes challenging to create
             *  parse trees. The parse tree has to point to tokens which will either
             *  point into a stale location in an unbuffered stream or you have to copy
             *  the characters out of the buffer into the token. That defeats the purpose
             *  of unbuffered input. Per the ANTLR book, unbuffered streams are primarily
             *  useful for processing infinite streams *during the parse.*
             *
             *  The new streams also use 8-bit buffers when possible so this new
             *  interface supports character streams that use half as much memory
             *  as the old {@link ANTLRFileStream}, which assumed 16-bit characters.
             *
             *  A big shout out to Ben Hamilton (github bhamiltoncx) for his superhuman
             *  efforts across all targets to get true Unicode 3.1 support for U+10FFFF.
             *
             *  @since 4.7
             */
            var CharStreams;
            (function(CharStreams) {
                // /**
                //  * Creates a {@link CharStream} given a path to a UTF-8
                //  * encoded file on disk.
                //  *
                //  * Reads the entire contents of the file into the result before returning.
                //  */
                // export function fromFile(file: File): CharStream;
                // export function fromFile(file: File, charset: Charset): CharStream;
                // export function fromFile(file: File, charset?: Charset): CharStream {
                //  if (charset === undefined) {
                //    charset = Charset.forName("UTF-8");
                //  }
                function fromString(s, sourceName) {
                    if (sourceName === undefined || sourceName.length === 0) {
                        sourceName = IntStream_1.IntStream.UNKNOWN_SOURCE_NAME;
                    }
                    // Initial guess assumes no code points > U+FFFF: one code
                    // point for each code unit in the string
                    let codePointBufferBuilder = CodePointBuffer_1.CodePointBuffer.builder(s.length);
                    // TODO: CharBuffer.wrap(String) rightfully returns a read-only buffer
                    // which doesn't expose its array, so we make a copy.
                    let cb = new Uint16Array(s.length);
                    for (let i = 0; i < s.length; i++) {
                        cb[i] = s.charCodeAt(i);
                    }
                    codePointBufferBuilder.append(cb);
                    return CodePointCharStream_1.CodePointCharStream.fromBuffer(codePointBufferBuilder.build(), sourceName);
                }
                CharStreams.fromString = fromString;



















































            })(// export function bufferFromChannel(
            //  channel: ReadableByteChannel,
            //  charset: Charset,
            //  bufferSize: number,
            //  decodingErrorAction: CodingErrorAction,
            //  inputSize: number): CodePointBuffer {
            //  try {
            //    let utf8BytesIn: Uint8Array = new Uint8Array(bufferSize);
            //    let utf16CodeUnitsOut: Uint16Array = new Uint16Array(bufferSize);
            //    if (inputSize === -1) {
            //      inputSize = bufferSize;
            //    } else if (inputSize > Integer.MAX_VALUE) {
            //      // ByteBuffer et al don't support long sizes
            //      throw new RangeError(`inputSize ${inputSize} larger than max ${Integer.MAX_VALUE}`);
            //    }
            //    let codePointBufferBuilder: CodePointBuffer.Builder = CodePointBuffer.builder(inputSize);
            //    let decoder: CharsetDecoder = charset
            //        .newDecoder()
            //        .onMalformedInput(decodingErrorAction)
            //        .onUnmappableCharacter(decodingErrorAction);
            //    let endOfInput: boolean = false;
            //    while (!endOfInput) {
            //      let bytesRead: number = channel.read(utf8BytesIn);
            //      endOfInput = (bytesRead === -1);
            //      utf8BytesIn.flip();
            //      let result: CoderResult = decoder.decode(
            //        utf8BytesIn,
            //        utf16CodeUnitsOut,
            //        endOfInput);
            //      if (result.isError() && decodingErrorAction === CodingErrorAction.REPORT) {
            //        result.throwException();
            //      }
            //      utf16CodeUnitsOut.flip();
            //      codePointBufferBuilder.append(utf16CodeUnitsOut);
            //      utf8BytesIn.compact();
            //      utf16CodeUnitsOut.compact();
            //    }
            //    // Handle any bytes at the end of the file which need to
            //    // be represented as errors or substitution characters.
            //    let flushResult: CoderResult = decoder.flush(utf16CodeUnitsOut);
            //    if (flushResult.isError() && decodingErrorAction === CodingErrorAction.REPORT) {
            //      flushResult.throwException();
            //    }
            //    utf16CodeUnitsOut.flip();
            //    codePointBufferBuilder.append(utf16CodeUnitsOut);
            //    return codePointBufferBuilder.build();
            //  }
            //  finally {
            //    channel.close();
            //  }
            // }
            CharStreams = exports.CharStreams || (exports.CharStreams = {}));

        }, {
            "./CodePointBuffer": 218,
            "./CodePointCharStream": 219,
            "./IntStream": 230
        }],
        218: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const assert = require("assert");
            const Character = require("./misc/Character");
            /**
             * Wrapper for `Uint8Array` / `Uint16Array` / `Int32Array`.
             */
            class CodePointBuffer {
                constructor(buffer, size)
                {
                    this.buffer = buffer;
                    this._position = 0;
                    this._size = size;
                }
                static withArray(buffer)
                {
                    return new CodePointBuffer(buffer, buffer.length);
                }
                get position()
                {
                    return this._position;
                }
                set position(newPosition)
                {
                    if (newPosition < 0 || newPosition > this._size) {
                        throw new RangeError();
                    }
                    this._position = newPosition;
                }
                get remaining()
                {
                    return this._size - this.position;
                }
                get(offset)
                {
                    return this.buffer[offset];
                }
                array()
                {
                    return this.buffer.slice(0, this._size);
                }
                static builder(initialBufferSize)
                {
                    return new CodePointBuffer.Builder(initialBufferSize);
                }
            }
            exports.CodePointBuffer = CodePointBuffer;
            (function(CodePointBuffer) {
                let Type;
                (function(Type) {
                    Type[Type["BYTE"] = 0] = "BYTE";
                    Type[Type["CHAR"] = 1] = "CHAR";
                    Type[Type["INT"] = 2] = "INT";
                })(Type || (Type = {}));
                class Builder {
                    constructor(initialBufferSize)
                    {
                        this.type = 0 /* BYTE */
                        ;
                        this.buffer = new Uint8Array(initialBufferSize);
                        this.prevHighSurrogate = -1;
                        this.position = 0;
                    }
                    build()
                    {
                        return new CodePointBuffer(this.buffer, this.position);
                    }
                    static roundUpToNextPowerOfTwo(i)
                    {
                        let nextPowerOfTwo = 32 - Math.clz32(i - 1);
                        return Math.pow(2, nextPowerOfTwo);
                    }
                    ensureRemaining(remainingNeeded)
                    {
                        switch (this.type) {
                        case 0 /* BYTE */
                        :
                            if (this.buffer.length - this.position < remainingNeeded) {
                                let newCapacity = Builder.roundUpToNextPowerOfTwo(this.buffer.length + remainingNeeded);
                                let newBuffer = new Uint8Array(newCapacity);
                                newBuffer.set(this.buffer.subarray(0, this.position), 0);
                                this.buffer = newBuffer;
                            }
                            break;
                        case 1 /* CHAR */
                        :
                            if (this.buffer.length - this.position < remainingNeeded) {
                                let newCapacity = Builder.roundUpToNextPowerOfTwo(this.buffer.length + remainingNeeded);
                                let newBuffer = new Uint16Array(newCapacity);
                                newBuffer.set(this.buffer.subarray(0, this.position), 0);
                                this.buffer = newBuffer;
                            }
                            break;
                        case 2 /* INT */
                        :
                            if (this.buffer.length - this.position < remainingNeeded) {
                                let newCapacity = Builder.roundUpToNextPowerOfTwo(this.buffer.length + remainingNeeded);
                                let newBuffer = new Int32Array(newCapacity);
                                newBuffer.set(this.buffer.subarray(0, this.position), 0);
                                this.buffer = newBuffer;
                            }
                            break;
                        }
                    }
                    append(utf16In)
                    {
                        this.ensureRemaining(utf16In.length);
                        this.appendArray(utf16In);
                    }
                    appendArray(utf16In)
                    {
                        switch (this.type) {
                        case 0 /* BYTE */
                        :
                            this.appendArrayByte(utf16In);
                            break;
                        case 1 /* CHAR */
                        :
                            this.appendArrayChar(utf16In);
                            break;
                        case 2 /* INT */
                        :
                            this.appendArrayInt(utf16In);
                            break;
                        }
                    }
                    appendArrayByte(utf16In)
                    {
                        assert(this.prevHighSurrogate === -1);
                        let input = utf16In;
                        let inOffset = 0;
                        let inLimit = utf16In.length;
                        let outByte = this.buffer;
                        let outOffset = this.position;
                        while (inOffset < inLimit) {
                            let c = input[inOffset];
                            if (c <= 0xFF) {
                                outByte[outOffset] = c;
                            }
                            else {
                                utf16In = utf16In.subarray(inOffset, inLimit);
                                this.position = outOffset;
                                if (!Character.isHighSurrogate(c)) {
                                    this.byteToCharBuffer(utf16In.length);
                                    this.appendArrayChar(utf16In);
                                    return;
                                }
                                else {
                                    this.byteToIntBuffer(utf16In.length);
                                    this.appendArrayInt(utf16In);
                                    return;
                                }
                            }
                            inOffset++;
                            outOffset++;
                        }
                        this.position = outOffset;
                    }
                    appendArrayChar(utf16In)
                    {
                        assert(this.prevHighSurrogate === -1);
                        let input = utf16In;
                        let inOffset = 0;
                        let inLimit = utf16In.length;
                        let outChar = this.buffer;
                        let outOffset = this.position;
                        while (inOffset < inLimit) {
                            let c = input[inOffset];
                            if (!Character.isHighSurrogate(c)) {
                                outChar[outOffset] = c;
                            }
                            else {
                                utf16In = utf16In.subarray(inOffset, inLimit);
                                this.position = outOffset;
                                this.charToIntBuffer(utf16In.length);
                                this.appendArrayInt(utf16In);
                                return;
                            }
                            inOffset++;
                            outOffset++;
                        }
                        this.position = outOffset;
                    }
                    appendArrayInt(utf16In)
                    {
                        let input = utf16In;
                        let inOffset = 0;
                        let inLimit = utf16In.length;
                        let outInt = this.buffer;
                        let outOffset = this.position;
                        while (inOffset < inLimit) {
                            let c = input[inOffset];
                            inOffset++;
                            if (this.prevHighSurrogate !== -1) {
                                if (Character.isLowSurrogate(c)) {
                                    outInt[outOffset] = String.fromCharCode(this.prevHighSurrogate, c).codePointAt(0);
                                    outOffset++;
                                    this.prevHighSurrogate = -1;
                                }
                                else {
                                    // Dangling high surrogate
                                    outInt[outOffset] = this.prevHighSurrogate;
                                    outOffset++;
                                    if (Character.isHighSurrogate(c)) {
                                        this.prevHighSurrogate = c;
                                    }
                                    else {
                                        outInt[outOffset] = c;
                                        outOffset++;
                                        this.prevHighSurrogate = -1;
                                    }
                                }
                            }
                            else if (Character.isHighSurrogate(c)) {
                                this.prevHighSurrogate = c;
                            }
                            else {
                                outInt[outOffset] = c;
                                outOffset++;
                            }
                        }
                        if (this.prevHighSurrogate !== -1) {
                            // Dangling high surrogate
                            outInt[outOffset] = this.prevHighSurrogate;
                            outOffset++;
                        }
                        this.position = outOffset;
                    }
                    byteToCharBuffer(toAppend)
                    {
                        // CharBuffers hold twice as much per unit as ByteBuffers, so start with half the capacity.
                        let newBuffer = new Uint16Array(Math.max(this.position + toAppend, this.buffer.length >> 1));
                        newBuffer.set(this.buffer.subarray(0, this.position), 0);
                        this.type = 1 /* CHAR */
                        ;
                        this.buffer = newBuffer;
                    }
                    byteToIntBuffer(toAppend)
                    {
                        // IntBuffers hold four times as much per unit as ByteBuffers, so start with one quarter the capacity.
                        let newBuffer = new Int32Array(Math.max(this.position + toAppend, this.buffer.length >> 2));
                        newBuffer.set(this.buffer.subarray(0, this.position), 0);
                        this.type = 2 /* INT */
                        ;
                        this.buffer = newBuffer;
                    }
                    charToIntBuffer(toAppend)
                    {
                        // IntBuffers hold two times as much per unit as ByteBuffers, so start with one half the capacity.
                        let newBuffer = new Int32Array(Math.max(this.position + toAppend, this.buffer.length >> 1));
                        newBuffer.set(this.buffer.subarray(0, this.position), 0);
                        this.type = 2 /* INT */
                        ;
                        this.buffer = newBuffer;
                    }
                }
                CodePointBuffer.Builder = Builder;
            })(CodePointBuffer = exports.CodePointBuffer || (exports.CodePointBuffer = {}));

        }, {
            "./misc/Character": 326,
            "assert": 364
        }],
        219: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const assert = require("assert");
            const IntStream_1 = require("./IntStream");
            const Interval_1 = require("./misc/Interval");
            const Decorators_1 = require("./Decorators");
            /**
             * Alternative to {@link ANTLRInputStream} which treats the input
             * as a series of Unicode code points, instead of a series of UTF-16
             * code units.
             *
             * Use this if you need to parse input which potentially contains
             * Unicode values > U+FFFF.
             */
            class CodePointCharStream {
                // Use the factory method {@link #fromBuffer(CodePointBuffer)} to
                // construct instances of this type.
                constructor(array, position, remaining, name)
                {
                    // TODO
                    assert(position === 0);
                    this._array = array;
                    this._size = remaining;
                    this._name = name;
                    this._position = 0;
                }
                get internalStorage()
                {
                    return this._array;
                }
                static fromBuffer(codePointBuffer, name)
                {
                    if (name === undefined || name.length === 0) {
                        name = IntStream_1.IntStream.UNKNOWN_SOURCE_NAME;
                    }
                    // Java lacks generics on primitive types.
                    //
                    // To avoid lots of calls to virtual methods in the
                    // very hot codepath of LA() below, we construct one
                    // of three concrete subclasses.
                    //
                    // The concrete subclasses directly access the code
                    // points stored in the underlying array (byte[],
                    // char[], or int[]), so we can avoid lots of virtual
                    // method calls to ByteBuffer.get(offset).
                    return new CodePointCharStream(codePointBuffer.array(), codePointBuffer.position, codePointBuffer.remaining, name);
                }
                consume()
                {
                    if (this._size - this._position === 0) {
                        assert(this.LA(1) === IntStream_1.IntStream.EOF);
                        throw new RangeError("cannot consume EOF");
                    }
                    this._position++;
                }
                get index()
                {
                    return this._position;
                }
                get size()
                {
                    return this._size;
                }
                /** mark/release do nothing; we have entire buffer */
                mark()
                {
                    return -1;
                }
                release(marker) {

                }
                seek(index)
                {
                    this._position = index;
                }
                get sourceName()
                {
                    return this._name;
                }
                toString()
                {
                    return this.getText(Interval_1.Interval.of(0, this.size - 1));
                }
                LA(i)
                {
                    let offset;
                    switch (Math.sign(i)) {
                    case -1:
                        offset = this.index + i;
                        if (offset < 0) {
                            return IntStream_1.IntStream.EOF;
                        }
                        return this._array[offset];
                    case 0:
                        // Undefined
                        return 0;
                    case 1:
                        offset = this.index + i - 1;
                        if (offset >= this.size) {
                            return IntStream_1.IntStream.EOF;
                        }
                        return this._array[offset];
                    }
                    throw new RangeError("Not reached");
                }
                /** Return the UTF-16 encoded string for the given interval */
                getText(interval)
                {
                    const startIdx = Math.min(interval.a, this.size);
                    const len = Math.min(interval.b - interval.a + 1, this.size - startIdx);
                    if (this._array instanceof Int32Array) {
                        return String.fromCodePoint(...Array.from(this._array.subarray(startIdx, startIdx + len)));
                    }
                    else {
                        return String.fromCharCode(...Array.from(this._array.subarray(startIdx, startIdx + len)));
                    }
                }
            }
            __decorate([
            Decorators_1.Override
            ], CodePointCharStream.prototype, "consume", null);
            __decorate([
            Decorators_1.Override
            ], CodePointCharStream.prototype, "index", null);
            __decorate([
            Decorators_1.Override
            ], CodePointCharStream.prototype, "size", null);
            __decorate([
            Decorators_1.Override
            ], CodePointCharStream.prototype, "mark", null);
            __decorate([
            Decorators_1.Override
            ], CodePointCharStream.prototype, "release", null);
            __decorate([
            Decorators_1.Override
            ], CodePointCharStream.prototype, "seek", null);
            __decorate([
            Decorators_1.Override
            ], CodePointCharStream.prototype, "sourceName", null);
            __decorate([
            Decorators_1.Override
            ], CodePointCharStream.prototype, "toString", null);
            __decorate([
            Decorators_1.Override
            ], CodePointCharStream.prototype, "LA", null);
            __decorate([
            Decorators_1.Override
            ], CodePointCharStream.prototype, "getText", null);
            exports.CodePointCharStream = CodePointCharStream;

        }, {
            "./Decorators": 224,
            "./IntStream": 230,
            "./misc/Interval": 330,
            "assert": 364
        }],
        220: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Interval_1 = require("./misc/Interval");
            const Decorators_1 = require("./Decorators");
            const Token_1 = require("./Token");
            let CommonToken = class CommonToken {
                constructor(type, text, source=CommonToken.EMPTY_SOURCE, channel=Token_1.Token.DEFAULT_CHANNEL, start=0, stop=0)
                {
                    /**
                             * This is the backing field for {@link #getLine} and {@link #setLine}.
                             */
                    this._line = 0;
                    /**
                             * This is the backing field for {@link #getCharPositionInLine} and
                             * {@link #setCharPositionInLine}.
                             */
                    this._charPositionInLine = -1; // set to invalid position
                    /**
                             * This is the backing field for {@link #getChannel} and
                             * {@link #setChannel}.
                             */
                    this._channel = Token_1.Token.DEFAULT_CHANNEL;
                    /**
                             * This is the backing field for `tokenIndex`.
                             */
                    this.index = -1;
                    this._text = text;
                    this._type = type;
                    this.source = source;
                    this._channel = channel;
                    this.start = start;
                    this.stop = stop;
                    if (source.source != null) {
                        this._line = source.source.line;
                        this._charPositionInLine = source.source.charPositionInLine;
                    }
                }
                /**
                     * Constructs a new {@link CommonToken} as a copy of another {@link Token}.
                     *
                     * If `oldToken` is also a {@link CommonToken} instance, the newly
                     * constructed token will share a reference to the {@link #text} field and
                     * the {@link Tuple2} stored in {@link #source}. Otherwise, {@link #text} will
                     * be assigned the result of calling {@link #getText}, and {@link #source}
                     * will be constructed from the result of {@link Token#getTokenSource} and
                     * {@link Token#getInputStream}.
                     *
                     * @param oldToken The token to copy.
                     */
                static fromToken(oldToken)
                {
                    let result = new CommonToken(oldToken.type, undefined, CommonToken.EMPTY_SOURCE, oldToken.channel, oldToken.startIndex, oldToken.stopIndex);
                    result._line = oldToken.line;
                    result.index = oldToken.tokenIndex;
                    result._charPositionInLine = oldToken.charPositionInLine;
                    if (oldToken instanceof CommonToken) {
                        result._text = oldToken.text;
                        result.source = oldToken.source;
                    }
                    else {
                        result._text = oldToken.text;
                        result.source = {
                            source: oldToken.tokenSource,
                            stream: oldToken.inputStream
                        };
                    }
                    return result;
                }
                get type()
                {
                    return this._type;
                }
                // @Override
                set type(type)
                {
                    this._type = type;
                }
                get line()
                {
                    return this._line;
                }
                // @Override
                set line(line)
                {
                    this._line = line;
                }
                get text()
                {
                    if (this._text != null) {
                        return this._text;
                    }
                    let input = this.inputStream;
                    if (input == null) {
                        return undefined;
                    }
                    let n = input.size;
                    if (this.start < n && this.stop < n) {
                        return input.getText(Interval_1.Interval.of(this.start, this.stop));
                    }
                    else {
                        return "<EOF>";
                    }
                }
                /**
                     * Explicitly set the text for this token. If {code text} is not
                     * `undefined`, then {@link #getText} will return this value rather than
                     * extracting the text from the input.
                     *
                     * @param text The explicit text of the token, or `undefined` if the text
                     * should be obtained from the input along with the start and stop indexes
                     * of the token.
                     */
                // @Override
                set text(text)
                {
                    this._text = text;
                }
                get charPositionInLine()
                {
                    return this._charPositionInLine;
                }
                // @Override
                set charPositionInLine(charPositionInLine)
                {
                    this._charPositionInLine = charPositionInLine;
                }
                get channel()
                {
                    return this._channel;
                }
                // @Override
                set channel(channel)
                {
                    this._channel = channel;
                }
                get startIndex()
                {
                    return this.start;
                }
                set startIndex(start)
                {
                    this.start = start;
                }
                get stopIndex()
                {
                    return this.stop;
                }
                set stopIndex(stop)
                {
                    this.stop = stop;
                }
                get tokenIndex()
                {
                    return this.index;
                }
                // @Override
                set tokenIndex(index)
                {
                    this.index = index;
                }
                get tokenSource()
                {
                    return this.source.source;
                }
                get inputStream()
                {
                    return this.source.stream;
                }
                toString(recognizer)
                {
                    let channelStr = "";
                    if (this._channel > 0) {
                        channelStr = ",channel=" + this._channel;
                    }
                    let txt = this.text;
                    if (txt != null) {
                        txt = txt.replace(/\n/g, "\\n");
                        txt = txt.replace(/\r/g, "\\r");
                        txt = txt.replace(/\t/g, "\\t");
                    }
                    else {
                        txt = "<no text>";
                    }
                    let typeString = String(this._type);
                    if (recognizer) {
                        typeString = recognizer.vocabulary.getDisplayName(this._type);
                    }
                    return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" + txt + "',<" + typeString + ">" + channelStr + "," + this._line + ":" + this.charPositionInLine + "]";
                }
            }
            ;
            /**
             * An empty {@link Tuple2} which is used as the default value of
             * {@link #source} for tokens that do not have a source.
             */
            CommonToken.EMPTY_SOURCE = {
                source: undefined,
                stream: undefined
            };
            __decorate([
            Decorators_1.NotNull
            ], CommonToken.prototype, "source", void 0);
            __decorate([
            Decorators_1.Override
            ], CommonToken.prototype, "type", null);
            __decorate([
            Decorators_1.Override
            ], CommonToken.prototype, "line", null);
            __decorate([
            Decorators_1.Override
            ], CommonToken.prototype, "text", null);
            __decorate([
            Decorators_1.Override
            ], CommonToken.prototype, "charPositionInLine", null);
            __decorate([
            Decorators_1.Override
            ], CommonToken.prototype, "channel", null);
            __decorate([
            Decorators_1.Override
            ], CommonToken.prototype, "startIndex", null);
            __decorate([
            Decorators_1.Override
            ], CommonToken.prototype, "stopIndex", null);
            __decorate([
            Decorators_1.Override
            ], CommonToken.prototype, "tokenIndex", null);
            __decorate([
            Decorators_1.Override
            ], CommonToken.prototype, "tokenSource", null);
            __decorate([
            Decorators_1.Override
            ], CommonToken.prototype, "inputStream", null);
            __decorate([
            Decorators_1.Override
            ], CommonToken.prototype, "toString", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], CommonToken, "fromToken", null);
            CommonToken = __decorate([
            __param(2, Decorators_1.NotNull)
            ], CommonToken);
            exports.CommonToken = CommonToken;

        }, {
            "./Decorators": 224,
            "./Token": 248,
            "./misc/Interval": 330
        }],
        221: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const CommonToken_1 = require("./CommonToken");
            const Interval_1 = require("./misc/Interval");
            const Decorators_1 = require("./Decorators");
            /**
             * This default implementation of {@link TokenFactory} creates
             * {@link CommonToken} objects.
             */
            class CommonTokenFactory {
                /**
                     * Constructs a {@link CommonTokenFactory} with the specified value for
                     * {@link #copyText}.
                     *
                     * When `copyText` is `false`, the {@link #DEFAULT} instance
                     * should be used instead of constructing a new instance.
                     *
                     * @param copyText The value for {@link #copyText}.
                     */
                constructor(copyText=false)
                {
                    this.copyText = copyText;
                }
                create(source, type, text, channel, start, stop, line, charPositionInLine)
                {
                    let t = new CommonToken_1.CommonToken(type, text, source, channel, start, stop);
                    t.line = line;
                    t.charPositionInLine = charPositionInLine;
                    if (text == null && this.copyText && source.stream != null) {
                        t.text = source.stream.getText(Interval_1.Interval.of(start, stop));
                    }
                    return t;
                }
                createSimple(type, text)
                {
                    return new CommonToken_1.CommonToken(type, text);
                }
            }
            __decorate([
            Decorators_1.Override
            ], CommonTokenFactory.prototype, "create", null);
            __decorate([
            Decorators_1.Override
            ], CommonTokenFactory.prototype, "createSimple", null);
            exports.CommonTokenFactory = CommonTokenFactory;
            (function(CommonTokenFactory) {
                /**
                     * The default {@link CommonTokenFactory} instance.
                     *
                     * This token factory does not explicitly copy token text when constructing
                     * tokens.
                     */
                CommonTokenFactory.DEFAULT = new CommonTokenFactory();
            })(CommonTokenFactory = exports.CommonTokenFactory || (exports.CommonTokenFactory = {}));

        }, {
            "./CommonToken": 220,
            "./Decorators": 224,
            "./misc/Interval": 330
        }],
        222: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:50.3953157-07:00
            const BufferedTokenStream_1 = require("./BufferedTokenStream");
            const Decorators_1 = require("./Decorators");
            const Token_1 = require("./Token");
            /**
             * This class extends {@link BufferedTokenStream} with functionality to filter
             * token streams to tokens on a particular channel (tokens where
             * {@link Token#getChannel} returns a particular value).
             *
             * This token stream provides access to all tokens by index or when calling
             * methods like {@link #getText}. The channel filtering is only used for code
             * accessing tokens via the lookahead methods {@link #LA}, {@link #LT}, and
             * {@link #LB}.
             *
             * By default, tokens are placed on the default channel
             * ({@link Token#DEFAULT_CHANNEL}), but may be reassigned by using the
             * `->channel(HIDDEN)` lexer command, or by using an embedded action to
             * call {@link Lexer#setChannel}.
             *
             * Note: lexer rules which use the `->skip` lexer command or call
             * {@link Lexer#skip} do not produce tokens at all, so input text matched by
             * such a rule will not be available as part of the token stream, regardless of
             * channel.
             */
            let CommonTokenStream = class CommonTokenStream extends BufferedTokenStream_1.BufferedTokenStream {
                /**
                     * Constructs a new {@link CommonTokenStream} using the specified token
                     * source and filtering tokens to the specified channel. Only tokens whose
                     * {@link Token#getChannel} matches `channel` or have the
                     * `Token.type` equal to {@link Token#EOF} will be returned by the
                     * token stream lookahead methods.
                     *
                     * @param tokenSource The token source.
                     * @param channel The channel to use for filtering tokens.
                     */
                constructor(tokenSource, channel=Token_1.Token.DEFAULT_CHANNEL)
                {
                    super(tokenSource);
                    this.channel = channel;
                }
                adjustSeekIndex(i)
                {
                    return this.nextTokenOnChannel(i, this.channel);
                }
                tryLB(k)
                {
                    if ((this.p - k) < 0) {
                        return undefined;
                    }
                    let i = this.p;
                    let n = 1;
                    // find k good tokens looking backwards
                    while (n <= k && i > 0) {
                        // skip off-channel tokens
                        i = this.previousTokenOnChannel(i - 1, this.channel);
                        n++;
                    }
                    if (i < 0) {
                        return undefined;
                    }
                    return this.tokens[i];
                }
                tryLT(k)
                {
                    //System.out.println("enter LT("+k+")");
                    this.lazyInit();
                    if (k === 0) {
                        throw new RangeError("0 is not a valid lookahead index");
                    }
                    if (k < 0) {
                        return this.tryLB(-k);
                    }
                    let i = this.p;
                    let n = 1; // we know tokens[p] is a good one
                    // find k good tokens
                    while (n < k) {
                        // skip off-channel tokens, but make sure to not look past EOF
                        if (this.sync(i + 1)) {
                            i = this.nextTokenOnChannel(i + 1, this.channel);
                        }
                        n++;
                    }
                    //    if ( i>range ) range = i;
                    return this.tokens[i];
                }
                /** Count EOF just once. */
                getNumberOfOnChannelTokens()
                {
                    let n = 0;
                    this.fill();
                    for (let t of this.tokens) {
                        if (t.channel === this.channel) {
                            n++;
                        }
                        if (t.type === Token_1.Token.EOF) {
                            break;
                        }
                    }
                    return n;
                }
            }
            ;
            __decorate([
            Decorators_1.Override
            ], CommonTokenStream.prototype, "adjustSeekIndex", null);
            __decorate([
            Decorators_1.Override
            ], CommonTokenStream.prototype, "tryLB", null);
            __decorate([
            Decorators_1.Override
            ], CommonTokenStream.prototype, "tryLT", null);
            CommonTokenStream = __decorate([
            __param(0, Decorators_1.NotNull)
            ], CommonTokenStream);
            exports.CommonTokenStream = CommonTokenStream;

        }, {
            "./BufferedTokenStream": 216,
            "./Decorators": 224,
            "./Token": 248
        }],
        223: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             *
             * @author Sam Harwell
             */
            class ConsoleErrorListener {
                /**
                     * {@inheritDoc}
                     *
                     * This implementation prints messages to {@link System#err} containing the
                     * values of `line`, `charPositionInLine`, and `msg` using
                     * the following format.
                     *
                     * <pre>
                     * line *line*:*charPositionInLine* *msg*
                     * </pre>
                     */
                syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e)
                {
                    console.error(`line ${line}:${charPositionInLine} ${msg}`);
                }
            }
            /**
             * Provides a default instance of {@link ConsoleErrorListener}.
             */
            ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();
            exports.ConsoleErrorListener = ConsoleErrorListener;

        }, {}],
        224: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            function NotNull(target, propertyKey, propertyDescriptor) {

            }
            exports.NotNull = NotNull;
            function Nullable(target, propertyKey, propertyDescriptor) {

            }
            exports.Nullable = Nullable;
            function Override(target, propertyKey, propertyDescriptor) {

            }
            exports.Override = Override;
            function SuppressWarnings(options) {
                return (target, propertyKey, descriptor) => {

                };
            }
            exports.SuppressWarnings = SuppressWarnings;

        }, {}],
        225: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const ATNState_1 = require("./atn/ATNState");
            const ATNStateType_1 = require("./atn/ATNStateType");
            const FailedPredicateException_1 = require("./FailedPredicateException");
            const InputMismatchException_1 = require("./InputMismatchException");
            const IntervalSet_1 = require("./misc/IntervalSet");
            const NoViableAltException_1 = require("./NoViableAltException");
            const PredictionContext_1 = require("./atn/PredictionContext");
            const Token_1 = require("./Token");
            const Decorators_1 = require("./Decorators");
            /**
             * This is the default implementation of {@link ANTLRErrorStrategy} used for
             * error reporting and recovery in ANTLR parsers.
             */
            class DefaultErrorStrategy {
                constructor()
                {
                    /**
                             * Indicates whether the error strategy is currently "recovering from an
                             * error". This is used to suppress reporting multiple error messages while
                             * attempting to recover from a detected syntax error.
                             *
                             * @see #inErrorRecoveryMode
                             */
                    this.errorRecoveryMode = false;
                    /** The index into the input stream where the last error occurred.
                             *  This is used to prevent infinite loops where an error is found
                             *  but no token is consumed during recovery...another error is found,
                             *  ad nauseum.  This is a failsafe mechanism to guarantee that at least
                             *  one token/tree node is consumed for two errors.
                             */
                    this.lastErrorIndex = -1;
                    /**
                             * @see #nextTokensContext
                             */
                    this.nextTokensState = ATNState_1.ATNState.INVALID_STATE_NUMBER;
                }
                /**
                     * {@inheritDoc}
                     *
                     * The default implementation simply calls {@link #endErrorCondition} to
                     * ensure that the handler is not in error recovery mode.
                     */
                reset(recognizer)
                {
                    this.endErrorCondition(recognizer);
                }
                /**
                     * This method is called to enter error recovery mode when a recognition
                     * exception is reported.
                     *
                     * @param recognizer the parser instance
                     */
                beginErrorCondition(recognizer)
                {
                    this.errorRecoveryMode = true;
                }
                /**
                     * {@inheritDoc}
                     */
                inErrorRecoveryMode(recognizer)
                {
                    return this.errorRecoveryMode;
                }
                /**
                     * This method is called to leave error recovery mode after recovering from
                     * a recognition exception.
                     *
                     * @param recognizer
                     */
                endErrorCondition(recognizer)
                {
                    this.errorRecoveryMode = false;
                    this.lastErrorStates = undefined;
                    this.lastErrorIndex = -1;
                }
                /**
                     * {@inheritDoc}
                     *
                     * The default implementation simply calls {@link #endErrorCondition}.
                     */
                reportMatch(recognizer)
                {
                    this.endErrorCondition(recognizer);
                }
                /**
                     * {@inheritDoc}
                     *
                     * The default implementation returns immediately if the handler is already
                     * in error recovery mode. Otherwise, it calls {@link #beginErrorCondition}
                     * and dispatches the reporting task based on the runtime type of `e`
                     * according to the following table.
                     *
                     * * {@link NoViableAltException}: Dispatches the call to
                     *   {@link #reportNoViableAlternative}
                     * * {@link InputMismatchException}: Dispatches the call to
                     *   {@link #reportInputMismatch}
                     * * {@link FailedPredicateException}: Dispatches the call to
                     *   {@link #reportFailedPredicate}
                     * * All other types: calls {@link Parser#notifyErrorListeners} to report
                     *   the exception
                     */
                reportError(recognizer, e)
                {
                    // if we've already reported an error and have not matched a token
                    // yet successfully, don't report any errors.
                    if (this.inErrorRecoveryMode(recognizer)) {
                        //      System.err.print("[SPURIOUS] ");
                        return; // don't report spurious errors
                    }
                    this.beginErrorCondition(recognizer);
                    if (e instanceof NoViableAltException_1.NoViableAltException) {
                        this.reportNoViableAlternative(recognizer, e);
                    }
                    else if (e instanceof InputMismatchException_1.InputMismatchException) {
                        this.reportInputMismatch(recognizer, e);
                    }
                    else if (e instanceof FailedPredicateException_1.FailedPredicateException) {
                        this.reportFailedPredicate(recognizer, e);
                    }
                    else {
                        console.error(`unknown recognition error type: ${e}`);
                        this.notifyErrorListeners(recognizer, e.toString(), e);
                    }
                }
                notifyErrorListeners(recognizer, message, e)
                {
                    let offendingToken = e.getOffendingToken(recognizer);
                    if (offendingToken === undefined) {
                        // Pass null to notifyErrorListeners so it in turn calls the error listeners with undefined as the offending
                        // token. If we passed undefined, it would instead call the listeners with currentToken from the parser.
                        offendingToken = null;
                    }
                    recognizer.notifyErrorListeners(message, offendingToken, e);
                }
                /**
                     * {@inheritDoc}
                     *
                     * The default implementation resynchronizes the parser by consuming tokens
                     * until we find one in the resynchronization set--loosely the set of tokens
                     * that can follow the current rule.
                     */
                recover(recognizer, e)
                {
                    //    System.out.println("recover in "+recognizer.getRuleInvocationStack()+
                    //               " index="+recognizer.inputStream.index+
                    //               ", lastErrorIndex="+
                    //               lastErrorIndex+
                    //               ", states="+lastErrorStates);
                    if (this.lastErrorIndex === recognizer.inputStream.index &&
                    this.lastErrorStates &&
                    this.lastErrorStates.contains(recognizer.state)) {
                        // uh oh, another error at same token index and previously-visited
                        // state in ATN; must be a case where LT(1) is in the recovery
                        // token set so nothing got consumed. Consume a single token
                        // at least to prevent an infinite loop; this is a failsafe.
                        //      System.err.println("seen error condition before index="+
                        //                 lastErrorIndex+", states="+lastErrorStates);
                        //      System.err.println("FAILSAFE consumes "+recognizer.getTokenNames()[recognizer.inputStream.LA(1)]);
                        recognizer.consume();
                    }
                    this.lastErrorIndex = recognizer.inputStream.index;
                    if (!this.lastErrorStates) {
                        this.lastErrorStates = new IntervalSet_1.IntervalSet();
                    }
                    this.lastErrorStates.add(recognizer.state);
                    let followSet = this.getErrorRecoverySet(recognizer);
                    this.consumeUntil(recognizer, followSet);
                }
                /**
                     * The default implementation of {@link ANTLRErrorStrategy#sync} makes sure
                     * that the current lookahead symbol is consistent with what were expecting
                     * at this point in the ATN. You can call this anytime but ANTLR only
                     * generates code to check before subrules/loops and each iteration.
                     *
                     * Implements Jim Idle's magic sync mechanism in closures and optional
                     * subrules. E.g.,
                     *
                     * ```antlr
                     * a : sync ( stuff sync )* ;
                     * sync : {consume to what can follow sync} ;
                     * ```
                     *
                     * At the start of a sub rule upon error, {@link #sync} performs single
                     * token deletion, if possible. If it can't do that, it bails on the current
                     * rule and uses the default error recovery, which consumes until the
                     * resynchronization set of the current rule.
                     *
                     * If the sub rule is optional (`(...)?`, `(...)*`, or block
                     * with an empty alternative), then the expected set includes what follows
                     * the subrule.
                     *
                     * During loop iteration, it consumes until it sees a token that can start a
                     * sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
                     * stay in the loop as long as possible.
                     *
                     * **ORIGINS**
                     *
                     * Previous versions of ANTLR did a poor job of their recovery within loops.
                     * A single mismatch token or missing token would force the parser to bail
                     * out of the entire rules surrounding the loop. So, for rule
                     *
                     * ```antlr
                     * classDef : 'class' ID '{' member* '}'
                     * ```
                     *
                     * input with an extra token between members would force the parser to
                     * consume until it found the next class definition rather than the next
                     * member definition of the current class.
                     *
                     * This functionality cost a little bit of effort because the parser has to
                     * compare token set at the start of the loop and at each iteration. If for
                     * some reason speed is suffering for you, you can turn off this
                     * functionality by simply overriding this method as a blank { }.
                     */
                sync(recognizer)
                {
                    let s = recognizer.interpreter.atn.states[recognizer.state];
                    //    System.err.println("sync @ "+s.stateNumber+"="+s.getClass().getSimpleName());
                    // If already recovering, don't try to sync
                    if (this.inErrorRecoveryMode(recognizer)) {
                        return;
                    }
                    let tokens = recognizer.inputStream;
                    let la = tokens.LA(1);
                    // try cheaper subset first; might get lucky. seems to shave a wee bit off
                    let nextTokens = recognizer.atn.nextTokens(s);
                    if (nextTokens.contains(la)) {
                        // We are sure the token matches
                        this.nextTokensContext = undefined;
                        this.nextTokensState = ATNState_1.ATNState.INVALID_STATE_NUMBER;
                        return;
                    }
                    if (nextTokens.contains(Token_1.Token.EPSILON)) {
                        if (this.nextTokensContext === undefined) {
                            // It's possible the next token won't match; information tracked
                            // by sync is restricted for performance.
                            this.nextTokensContext = recognizer.context;
                            this.nextTokensState = recognizer.state;
                        }
                        return;
                    }
                    switch (s.stateType) {
                    case ATNStateType_1.ATNStateType.BLOCK_START:
                    case ATNStateType_1.ATNStateType.STAR_BLOCK_START:
                    case ATNStateType_1.ATNStateType.PLUS_BLOCK_START:
                    case ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY:
                        // report error and recover if possible
                        if (this.singleTokenDeletion(recognizer)) {
                            return;
                        }
                        throw new InputMismatchException_1.InputMismatchException(recognizer);
                    case ATNStateType_1.ATNStateType.PLUS_LOOP_BACK:
                    case ATNStateType_1.ATNStateType.STAR_LOOP_BACK:
                        //      System.err.println("at loop back: "+s.getClass().getSimpleName());
                        this.reportUnwantedToken(recognizer);
                        let expecting = recognizer.getExpectedTokens();
                        let whatFollowsLoopIterationOrRule = expecting.or(this.getErrorRecoverySet(recognizer));
                        this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
                        break;
                    default:
                        // do nothing if we can't identify the exact kind of ATN state
                        break;
                    }
                }
                /**
                     * This is called by {@link #reportError} when the exception is a
                     * {@link NoViableAltException}.
                     *
                     * @see #reportError
                     *
                     * @param recognizer the parser instance
                     * @param e the recognition exception
                     */
                reportNoViableAlternative(recognizer, e)
                {
                    let tokens = recognizer.inputStream;
                    let input;
                    if (tokens) {
                        if (e.startToken.type === Token_1.Token.EOF) {
                            input = "<EOF>";
                        }
                        else {
                            input = tokens.getTextFromRange(e.startToken, e.getOffendingToken());
                        }
                    }
                    else {
                        input = "<unknown input>";
                    }
                    let msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
                    this.notifyErrorListeners(recognizer, msg, e);
                }
                /**
                     * This is called by {@link #reportError} when the exception is an
                     * {@link InputMismatchException}.
                     *
                     * @see #reportError
                     *
                     * @param recognizer the parser instance
                     * @param e the recognition exception
                     */
                reportInputMismatch(recognizer, e)
                {
                    let expected = e.expectedTokens;
                    let expectedString = expected ? expected.toStringVocabulary(recognizer.vocabulary) : "";
                    let msg = "mismatched input " + this.getTokenErrorDisplay(e.getOffendingToken(recognizer)) +
                    " expecting " + expectedString;
                    this.notifyErrorListeners(recognizer, msg, e);
                }
                /**
                     * This is called by {@link #reportError} when the exception is a
                     * {@link FailedPredicateException}.
                     *
                     * @see #reportError
                     *
                     * @param recognizer the parser instance
                     * @param e the recognition exception
                     */
                reportFailedPredicate(recognizer, e)
                {
                    let ruleName = recognizer.ruleNames[recognizer.context.ruleIndex];
                    let msg = "rule " + ruleName + " " + e.message;
                    this.notifyErrorListeners(recognizer, msg, e);
                }
                /**
                     * This method is called to report a syntax error which requires the removal
                     * of a token from the input stream. At the time this method is called, the
                     * erroneous symbol is current `LT(1)` symbol and has not yet been
                     * removed from the input stream. When this method returns,
                     * `recognizer` is in error recovery mode.
                     *
                     * This method is called when {@link #singleTokenDeletion} identifies
                     * single-token deletion as a viable recovery strategy for a mismatched
                     * input error.
                     *
                     * The default implementation simply returns if the handler is already in
                     * error recovery mode. Otherwise, it calls {@link #beginErrorCondition} to
                     * enter error recovery mode, followed by calling
                     * {@link Parser#notifyErrorListeners}.
                     *
                     * @param recognizer the parser instance
                     */
                reportUnwantedToken(recognizer)
                {
                    if (this.inErrorRecoveryMode(recognizer)) {
                        return;
                    }
                    this.beginErrorCondition(recognizer);
                    let t = recognizer.currentToken;
                    let tokenName = this.getTokenErrorDisplay(t);
                    let expecting = this.getExpectedTokens(recognizer);
                    let msg = "extraneous input " + tokenName + " expecting " +
                    expecting.toStringVocabulary(recognizer.vocabulary);
                    recognizer.notifyErrorListeners(msg, t, undefined);
                }
                /**
                     * This method is called to report a syntax error which requires the
                     * insertion of a missing token into the input stream. At the time this
                     * method is called, the missing token has not yet been inserted. When this
                     * method returns, `recognizer` is in error recovery mode.
                     *
                     * This method is called when {@link #singleTokenInsertion} identifies
                     * single-token insertion as a viable recovery strategy for a mismatched
                     * input error.
                     *
                     * The default implementation simply returns if the handler is already in
                     * error recovery mode. Otherwise, it calls {@link #beginErrorCondition} to
                     * enter error recovery mode, followed by calling
                     * {@link Parser#notifyErrorListeners}.
                     *
                     * @param recognizer the parser instance
                     */
                reportMissingToken(recognizer)
                {
                    if (this.inErrorRecoveryMode(recognizer)) {
                        return;
                    }
                    this.beginErrorCondition(recognizer);
                    let t = recognizer.currentToken;
                    let expecting = this.getExpectedTokens(recognizer);
                    let msg = "missing " + expecting.toStringVocabulary(recognizer.vocabulary) +
                    " at " + this.getTokenErrorDisplay(t);
                    recognizer.notifyErrorListeners(msg, t, undefined);
                }
                /**
                     * {@inheritDoc}
                     *
                     * The default implementation attempts to recover from the mismatched input
                     * by using single token insertion and deletion as described below. If the
                     * recovery attempt fails, this method
                     * {@link InputMismatchException}.
                     *
                     * **EXTRA TOKEN** (single token deletion)
                     *
                     * `LA(1)` is not what we are looking for. If `LA(2)` has the
                     * right token, however, then assume `LA(1)` is some extra spurious
                     * token and delete it. Then consume and return the next token (which was
                     * the `LA(2)` token) as the successful result of the match operation.
                     *
                     * This recovery strategy is implemented by {@link #singleTokenDeletion}.
                     *
                     * **MISSING TOKEN** (single token insertion)
                     *
                     * If current token (at `LA(1)`) is consistent with what could come
                     * after the expected `LA(1)` token, then assume the token is missing
                     * and use the parser's {@link TokenFactory} to create it on the fly. The
                     * "insertion" is performed by returning the created token as the successful
                     * result of the match operation.
                     *
                     * This recovery strategy is implemented by {@link #singleTokenInsertion}.
                     *
                     * **EXAMPLE**
                     *
                     * For example, Input `i=(3;` is clearly missing the `')'`. When
                     * the parser returns from the nested call to `expr`, it will have
                     * call chain:
                     *
                     * ```
                     * stat → expr → atom
                     * ```
                     *
                     * and it will be trying to match the `')'` at this point in the
                     * derivation:
                     *
                     * ```
                     * => ID '=' '(' INT ')' ('+' atom)* ';'
                     *                    ^
                     * ```
                     *
                     * The attempt to match `')'` will fail when it sees `';'` and
                     * call {@link #recoverInline}. To recover, it sees that `LA(1)==';'`
                     * is in the set of tokens that can follow the `')'` token reference
                     * in rule `atom`. It can assume that you forgot the `')'`.
                     */
                recoverInline(recognizer)
                {
                    // SINGLE TOKEN DELETION
                    let matchedSymbol = this.singleTokenDeletion(recognizer);
                    if (matchedSymbol) {
                        // we have deleted the extra token.
                        // now, move past ttype token as if all were ok
                        recognizer.consume();
                        return matchedSymbol;
                    }
                    // SINGLE TOKEN INSERTION
                    if (this.singleTokenInsertion(recognizer)) {
                        return this.getMissingSymbol(recognizer);
                    }
                    // even that didn't work; must throw the exception
                    if (this.nextTokensContext === undefined) {
                        throw new InputMismatchException_1.InputMismatchException(recognizer);
                    }
                    else {
                        throw new InputMismatchException_1.InputMismatchException(recognizer, this.nextTokensState, this.nextTokensContext);
                    }
                }
                /**
                     * This method implements the single-token insertion inline error recovery
                     * strategy. It is called by {@link #recoverInline} if the single-token
                     * deletion strategy fails to recover from the mismatched input. If this
                     * method returns `true`, `recognizer` will be in error recovery
                     * mode.
                     *
                     * This method determines whether or not single-token insertion is viable by
                     * checking if the `LA(1)` input symbol could be successfully matched
                     * if it were instead the `LA(2)` symbol. If this method returns
                     * `true`, the caller is responsible for creating and inserting a
                     * token with the correct type to produce this behavior.
                     *
                     * @param recognizer the parser instance
                     * @returns `true` if single-token insertion is a viable recovery
                     * strategy for the current mismatched input, otherwise `false`
                     */
                singleTokenInsertion(recognizer)
                {
                    let currentSymbolType = recognizer.inputStream.LA(1);
                    // if current token is consistent with what could come after current
                    // ATN state, then we know we're missing a token; error recovery
                    // is free to conjure up and insert the missing token
                    let currentState = recognizer.interpreter.atn.states[recognizer.state];
                    let next = currentState.transition(0).target;
                    let atn = recognizer.interpreter.atn;
                    let expectingAtLL2 = atn.nextTokens(next, PredictionContext_1.PredictionContext.fromRuleContext(atn, recognizer.context));
                    //    console.warn("LT(2) set="+expectingAtLL2.toString(recognizer.getTokenNames()));
                    if (expectingAtLL2.contains(currentSymbolType)) {
                        this.reportMissingToken(recognizer);
                        return true;
                    }
                    return false;
                }
                /**
                     * This method implements the single-token deletion inline error recovery
                     * strategy. It is called by {@link #recoverInline} to attempt to recover
                     * from mismatched input. If this method returns `undefined`, the parser and error
                     * handler state will not have changed. If this method returns non-`undefined`,
                     * `recognizer` will *not* be in error recovery mode since the
                     * returned token was a successful match.
                     *
                     * If the single-token deletion is successful, this method calls
                     * {@link #reportUnwantedToken} to report the error, followed by
                     * {@link Parser#consume} to actually "delete" the extraneous token. Then,
                     * before returning {@link #reportMatch} is called to signal a successful
                     * match.
                     *
                     * @param recognizer the parser instance
                     * @returns the successfully matched {@link Token} instance if single-token
                     * deletion successfully recovers from the mismatched input, otherwise
                     * `undefined`
                     */
                singleTokenDeletion(recognizer)
                {
                    let nextTokenType = recognizer.inputStream.LA(2);
                    let expecting = this.getExpectedTokens(recognizer);
                    if (expecting.contains(nextTokenType)) {
                        this.reportUnwantedToken(recognizer);
                        /*
                                    System.err.println("recoverFromMismatchedToken deleting "+
                                                       ((TokenStream)recognizer.inputStream).LT(1)+
                                                       " since "+((TokenStream)recognizer.inputStream).LT(2)+
                                                       " is what we want");
                                    */
                        recognizer.consume(); // simply delete extra token
                        // we want to return the token we're actually matching
                        let matchedSymbol = recognizer.currentToken;
                        this.reportMatch(recognizer); // we know current token is correct
                        return matchedSymbol;
                    }
                    return undefined;
                }
                /** Conjure up a missing token during error recovery.
                     *
                     *  The recognizer attempts to recover from single missing
                     *  symbols. But, actions might refer to that missing symbol.
                     *  For example, x=ID {f($x);}. The action clearly assumes
                     *  that there has been an identifier matched previously and that
                     *  $x points at that token. If that token is missing, but
                     *  the next token in the stream is what we want we assume that
                     *  this token is missing and we keep going. Because we
                     *  have to return some token to replace the missing token,
                     *  we have to conjure one up. This method gives the user control
                     *  over the tokens returned for missing tokens. Mostly,
                     *  you will want to create something special for identifier
                     *  tokens. For literals such as '{' and ',', the default
                     *  action in the parser or tree parser works. It simply creates
                     *  a CommonToken of the appropriate type. The text will be the token.
                     *  If you change what tokens must be created by the lexer,
                     *  override this method to create the appropriate tokens.
                     */
                getMissingSymbol(recognizer)
                {
                    let currentSymbol = recognizer.currentToken;
                    let expecting = this.getExpectedTokens(recognizer);
                    let expectedTokenType = Token_1.Token.INVALID_TYPE;
                    if (!expecting.isNil) {
                        // get any element
                        expectedTokenType = expecting.minElement;
                    }
                    let tokenText;
                    if (expectedTokenType === Token_1.Token.EOF) {
                        tokenText = "<missing EOF>";
                    }
                    else {
                        tokenText = "<missing " + recognizer.vocabulary.getDisplayName(expectedTokenType) + ">";
                    }
                    let current = currentSymbol;
                    let lookback = recognizer.inputStream.tryLT(-1);
                    if (current.type === Token_1.Token.EOF && lookback != null) {
                        current = lookback;
                    }
                    return this.constructToken(recognizer.inputStream.tokenSource, expectedTokenType, tokenText, current);
                }
                constructToken(tokenSource, expectedTokenType, tokenText, current)
                {
                    let factory = tokenSource.tokenFactory;
                    let x = current.tokenSource;
                    let stream = x ? x.inputStream : undefined;
                    return factory.create({
                        source: tokenSource,
                        stream
                    }, expectedTokenType, tokenText, Token_1.Token.DEFAULT_CHANNEL, -1, -1, current.line, current.charPositionInLine);
                }
                getExpectedTokens(recognizer)
                {
                    return recognizer.getExpectedTokens();
                }
                /** How should a token be displayed in an error message? The default
                     *  is to display just the text, but during development you might
                     *  want to have a lot of information spit out.  Override in that case
                     *  to use t.toString() (which, for CommonToken, dumps everything about
                     *  the token). This is better than forcing you to override a method in
                     *  your token objects because you don't have to go modify your lexer
                     *  so that it creates a new Java type.
                     */
                getTokenErrorDisplay(t)
                {
                    if (!t) {
                        return "<no token>";
                    }
                    let s = this.getSymbolText(t);
                    if (!s) {
                        if (this.getSymbolType(t) === Token_1.Token.EOF) {
                            s = "<EOF>";
                        }
                        else {
                            s = `<${this.getSymbolType(t)}>`;
                        }
                    }
                    return this.escapeWSAndQuote(s);
                }
                getSymbolText(symbol)
                {
                    return symbol.text;
                }
                getSymbolType(symbol)
                {
                    return symbol.type;
                }
                escapeWSAndQuote(s)
                {
                    //    if ( s==null ) return s;
                    s = s.replace("\n", "\\n");
                    s = s.replace("\r", "\\r");
                    s = s.replace("\t", "\\t");
                    return "'" + s + "'";
                }
                /*  Compute the error recovery set for the current rule.  During
                     *  rule invocation, the parser pushes the set of tokens that can
                     *  follow that rule reference on the stack; this amounts to
                     *  computing FIRST of what follows the rule reference in the
                     *  enclosing rule. See LinearApproximator.FIRST().
                     *  This local follow set only includes tokens
                     *  from within the rule; i.e., the FIRST computation done by
                     *  ANTLR stops at the end of a rule.
                     *
                     *  EXAMPLE
                     *
                     *  When you find a "no viable alt exception", the input is not
                     *  consistent with any of the alternatives for rule r.  The best
                     *  thing to do is to consume tokens until you see something that
                     *  can legally follow a call to r *or* any rule that called r.
                     *  You don't want the exact set of viable next tokens because the
                     *  input might just be missing a token--you might consume the
                     *  rest of the input looking for one of the missing tokens.
                     *
                     *  Consider grammar:
                     *
                     *  a : '[' b ']'
                     *    | '(' b ')'
                     *    ;
                     *  b : c '^' INT ;
                     *  c : ID
                     *    | INT
                     *    ;
                     *
                     *  At each rule invocation, the set of tokens that could follow
                     *  that rule is pushed on a stack.  Here are the various
                     *  context-sensitive follow sets:
                     *
                     *  FOLLOW(b1_in_a) = FIRST(']') = ']'
                     *  FOLLOW(b2_in_a) = FIRST(')') = ')'
                     *  FOLLOW(c_in_b) = FIRST('^') = '^'
                     *
                     *  Upon erroneous input "[]", the call chain is
                     *
                     *  a -> b -> c
                     *
                     *  and, hence, the follow context stack is:
                     *
                     *  depth     follow set       start of rule execution
                     *    0         <EOF>                    a (from main())
                     *    1          ']'                     b
                     *    2          '^'                     c
                     *
                     *  Notice that ')' is not included, because b would have to have
                     *  been called from a different context in rule a for ')' to be
                     *  included.
                     *
                     *  For error recovery, we cannot consider FOLLOW(c)
                     *  (context-sensitive or otherwise).  We need the combined set of
                     *  all context-sensitive FOLLOW sets--the set of all tokens that
                     *  could follow any reference in the call chain.  We need to
                     *  resync to one of those tokens.  Note that FOLLOW(c)='^' and if
                     *  we resync'd to that token, we'd consume until EOF.  We need to
                     *  sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
                     *  In this case, for input "[]", LA(1) is ']' and in the set, so we would
                     *  not consume anything. After printing an error, rule c would
                     *  return normally.  Rule b would not find the required '^' though.
                     *  At this point, it gets a mismatched token error and
                     *  exception (since LA(1) is not in the viable following token
                     *  set).  The rule exception handler tries to recover, but finds
                     *  the same recovery set and doesn't consume anything.  Rule b
                     *  exits normally returning to rule a.  Now it finds the ']' (and
                     *  with the successful match exits errorRecovery mode).
                     *
                     *  So, you can see that the parser walks up the call chain looking
                     *  for the token that was a member of the recovery set.
                     *
                     *  Errors are not generated in errorRecovery mode.
                     *
                     *  ANTLR's error recovery mechanism is based upon original ideas:
                     *
                     *  "Algorithms + Data Structures = Programs" by Niklaus Wirth
                     *
                     *  and
                     *
                     *  "A note on error recovery in recursive descent parsers":
                     *  http://portal.acm.org/citation.cfm?id=947902.947905
                     *
                     *  Later, Josef Grosch had some good ideas:
                     *
                     *  "Efficient and Comfortable Error Recovery in Recursive Descent
                     *  Parsers":
                     *  ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
                     *
                     *  Like Grosch I implement context-sensitive FOLLOW sets that are combined
                     *  at run-time upon error to avoid overhead during parsing.
                     */
                getErrorRecoverySet(recognizer)
                {
                    let atn = recognizer.interpreter.atn;
                    let ctx = recognizer.context;
                    let recoverSet = new IntervalSet_1.IntervalSet();
                    while (ctx && ctx.invokingState >= 0) {
                        // compute what follows who invoked us
                        let invokingState = atn.states[ctx.invokingState];
                        let rt = invokingState.transition(0);
                        let follow = atn.nextTokens(rt.followState);
                        recoverSet.addAll(follow);
                        ctx = ctx._parent;
                    }
                    recoverSet.remove(Token_1.Token.EPSILON);
                    //    System.out.println("recover set "+recoverSet.toString(recognizer.getTokenNames()));
                    return recoverSet;
                }
                /** Consume tokens until one matches the given token set. */
                consumeUntil(recognizer, set)
                {
                    //    System.err.println("consumeUntil("+set.toString(recognizer.getTokenNames())+")");
                    let ttype = recognizer.inputStream.LA(1);
                    while (ttype !== Token_1.Token.EOF && !set.contains(ttype)) {
                        //System.out.println("consume during recover LA(1)="+getTokenNames()[input.LA(1)]);
                        //      recognizer.inputStream.consume();
                        recognizer.consume();
                        ttype = recognizer.inputStream.LA(1);
                    }
                }
            }
            __decorate([
            Decorators_1.Override
            ], DefaultErrorStrategy.prototype, "reset", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "beginErrorCondition", null);
            __decorate([
            Decorators_1.Override
            ], DefaultErrorStrategy.prototype, "inErrorRecoveryMode", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "endErrorCondition", null);
            __decorate([
            Decorators_1.Override
            ], DefaultErrorStrategy.prototype, "reportMatch", null);
            __decorate([
            Decorators_1.Override
            ], DefaultErrorStrategy.prototype, "reportError", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "notifyErrorListeners", null);
            __decorate([
            Decorators_1.Override
            ], DefaultErrorStrategy.prototype, "recover", null);
            __decorate([
            Decorators_1.Override
            ], DefaultErrorStrategy.prototype, "sync", null);
            __decorate([
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "reportNoViableAlternative", null);
            __decorate([
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "reportInputMismatch", null);
            __decorate([
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "reportFailedPredicate", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "reportUnwantedToken", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "reportMissingToken", null);
            __decorate([
            Decorators_1.Override
            ], DefaultErrorStrategy.prototype, "recoverInline", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "singleTokenInsertion", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "singleTokenDeletion", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "getMissingSymbol", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "getExpectedTokens", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "getSymbolText", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "getSymbolType", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "escapeWSAndQuote", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "getErrorRecoverySet", null);
            __decorate([
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
            ], DefaultErrorStrategy.prototype, "consumeUntil", null);
            exports.DefaultErrorStrategy = DefaultErrorStrategy;

        }, {
            "./Decorators": 224,
            "./FailedPredicateException": 228,
            "./InputMismatchException": 229,
            "./NoViableAltException": 236,
            "./Token": 248,
            "./atn/ATNState": 257,
            "./atn/ATNStateType": 258,
            "./atn/PredictionContext": 298,
            "./misc/IntervalSet": 331
        }],
        226: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:51.1349829-07:00
            /**
             *
             * @author Sam Harwell
             */
            var Dependents;
            (function(Dependents) {
                /**
                     * The element is dependent upon the specified rule.
                     */
                Dependents[Dependents["SELF"] = 0] = "SELF";
                /**
                     * The element is dependent upon the set of the specified rule's parents
                     * (rules which directly reference it).
                     */
                Dependents[Dependents["PARENTS"] = 1] = "PARENTS";
                /**
                     * The element is dependent upon the set of the specified rule's children
                     * (rules which it directly references).
                     */
                Dependents[Dependents["CHILDREN"] = 2] = "CHILDREN";
                /**
                     * The element is dependent upon the set of the specified rule's ancestors
                     * (the transitive closure of `PARENTS` rules).
                     */
                Dependents[Dependents["ANCESTORS"] = 3] = "ANCESTORS";
                /**
                     * The element is dependent upon the set of the specified rule's descendants
                     * (the transitive closure of `CHILDREN` rules).
                     */
                Dependents[Dependents["DESCENDANTS"] = 4] = "DESCENDANTS";
                /**
                     * The element is dependent upon the set of the specified rule's siblings
                     * (the union of `CHILDREN` of its `PARENTS`).
                     */
                Dependents[Dependents["SIBLINGS"] = 5] = "SIBLINGS";
                /**
                     * The element is dependent upon the set of the specified rule's preceeding
                     * siblings (the union of `CHILDREN` of its `PARENTS` which
                     * appear before a reference to the rule).
                     */
                Dependents[Dependents["PRECEEDING_SIBLINGS"] = 6] = "PRECEEDING_SIBLINGS";
                /**
                     * The element is dependent upon the set of the specified rule's following
                     * siblings (the union of `CHILDREN` of its `PARENTS` which
                     * appear after a reference to the rule).
                     */
                Dependents[Dependents["FOLLOWING_SIBLINGS"] = 7] = "FOLLOWING_SIBLINGS";
                /**
                     * The element is dependent upon the set of the specified rule's preceeding
                     * elements (rules which might end before the start of the specified rule
                     * while parsing). This is calculated by taking the
                     * `PRECEEDING_SIBLINGS` of the rule and each of its
                     * `ANCESTORS`, along with the `DESCENDANTS` of those
                     * elements.
                     */
                Dependents[Dependents["PRECEEDING"] = 8] = "PRECEEDING";
                /**
                     * The element is dependent upon the set of the specified rule's following
                     * elements (rules which might start after the end of the specified rule
                     * while parsing). This is calculated by taking the
                     * `FOLLOWING_SIBLINGS` of the rule and each of its
                     * `ANCESTORS`, along with the `DESCENDANTS` of those
                     * elements.
                     */
                Dependents[Dependents["FOLLOWING"] = 9] = "FOLLOWING";
            })(Dependents = exports.Dependents || (exports.Dependents = {}));

        }, {}],
        227: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const BitSet_1 = require("./misc/BitSet");
            const Decorators_1 = require("./Decorators");
            const Interval_1 = require("./misc/Interval");
            /**
             * This implementation of {@link ANTLRErrorListener} can be used to identify
             * certain potential correctness and performance problems in grammars. "Reports"
             * are made by calling {@link Parser#notifyErrorListeners} with the appropriate
             * message.
             *
             * * **Ambiguities**: These are cases where more than one path through the
             *   grammar can match the input.
             * * **Weak context sensitivity**: These are cases where full-context
             *   prediction resolved an SLL conflict to a unique alternative which equaled the
             *   minimum alternative of the SLL conflict.
             * * **Strong (forced) context sensitivity**: These are cases where the
             *   full-context prediction resolved an SLL conflict to a unique alternative,
             *   *and* the minimum alternative of the SLL conflict was found to not be
             *   a truly viable alternative. Two-stage parsing cannot be used for inputs where
             *   this situation occurs.
             *
             * @author Sam Harwell
             */
            class DiagnosticErrorListener {
                /**
                     * Initializes a new instance of {@link DiagnosticErrorListener}, specifying
                     * whether all ambiguities or only exact ambiguities are reported.
                     *
                     * @param exactOnly `true` to report only exact ambiguities, otherwise
                     * `false` to report all ambiguities.  Defaults to true.
                     */
                constructor(exactOnly=true)
                {
                    this.exactOnly = exactOnly;
                    this.exactOnly = exactOnly;
                }
                syntaxError(/*@NotNull*/
                recognizer, offendingSymbol, line, charPositionInLine, /*@NotNull*/
                msg, e) {

                }
                reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs)
                {
                    if (this.exactOnly && !exact) {
                        return;
                    }
                    let decision = this.getDecisionDescription(recognizer, dfa);
                    let conflictingAlts = this.getConflictingAlts(ambigAlts, configs);
                    let text = recognizer.inputStream.getText(Interval_1.Interval.of(startIndex, stopIndex));
                    let message = `reportAmbiguity d=${decision}: ambigAlts=${conflictingAlts}, input='${text}'`;
                    recognizer.notifyErrorListeners(message);
                }
                reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState)
                {
                    let format = "reportAttemptingFullContext d=%s, input='%s'";
                    let decision = this.getDecisionDescription(recognizer, dfa);
                    let text = recognizer.inputStream.getText(Interval_1.Interval.of(startIndex, stopIndex));
                    let message = `reportAttemptingFullContext d=${decision}, input='${text}'`;
                    recognizer.notifyErrorListeners(message);
                }
                reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState)
                {
                    let format = "reportContextSensitivity d=%s, input='%s'";
                    let decision = this.getDecisionDescription(recognizer, dfa);
                    let text = recognizer.inputStream.getText(Interval_1.Interval.of(startIndex, stopIndex));
                    let message = `reportContextSensitivity d=${decision}, input='${text}'`;
                    recognizer.notifyErrorListeners(message);
                }
                getDecisionDescription(recognizer, dfa)
                {
                    let decision = dfa.decision;
                    let ruleIndex = dfa.atnStartState.ruleIndex;
                    let ruleNames = recognizer.ruleNames;
                    if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
                        return decision.toString();
                    }
                    let ruleName = ruleNames[ruleIndex];
                    if (!ruleName) {
                        return decision.toString();
                    }
                    return `${decision} (${ruleName})`;
                }
                /**
                     * Computes the set of conflicting or ambiguous alternatives from a
                     * configuration set, if that information was not already provided by the
                     * parser.
                     *
                     * @param reportedAlts The set of conflicting or ambiguous alternatives, as
                     * reported by the parser.
                     * @param configs The conflicting or ambiguous configuration set.
                     * @returns Returns `reportedAlts` if it is not `undefined`, otherwise
                     * returns the set of alternatives represented in `configs`.
                     */
                getConflictingAlts(reportedAlts, configs)
                {
                    if (reportedAlts != null) {
                        return reportedAlts;
                    }
                    let result = new BitSet_1.BitSet();
                    for (let config of configs) {
                        result.set(config.alt);
                    }
                    return result;
                }
            }
            __decorate([
            Decorators_1.Override
            ], DiagnosticErrorListener.prototype, "syntaxError", null);
            __decorate([
            Decorators_1.Override,
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull),
            __param(6, Decorators_1.NotNull)
            ], DiagnosticErrorListener.prototype, "reportAmbiguity", null);
            __decorate([
            Decorators_1.Override,
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull),
            __param(5, Decorators_1.NotNull)
            ], DiagnosticErrorListener.prototype, "reportAttemptingFullContext", null);
            __decorate([
            Decorators_1.Override,
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull),
            __param(5, Decorators_1.NotNull)
            ], DiagnosticErrorListener.prototype, "reportContextSensitivity", null);
            __decorate([
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull)
            ], DiagnosticErrorListener.prototype, "getDecisionDescription", null);
            __decorate([
            Decorators_1.NotNull,
            __param(1, Decorators_1.NotNull)
            ], DiagnosticErrorListener.prototype, "getConflictingAlts", null);
            exports.DiagnosticErrorListener = DiagnosticErrorListener;

        }, {
            "./Decorators": 224,
            "./misc/BitSet": 325,
            "./misc/Interval": 330
        }],
        228: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const RecognitionException_1 = require("./RecognitionException");
            const Decorators_1 = require("./Decorators");
            const PredicateTransition_1 = require("./atn/PredicateTransition");
            /** A semantic predicate failed during validation.  Validation of predicates
             *  occurs when normally parsing the alternative just like matching a token.
             *  Disambiguating predicate evaluation occurs when we test a predicate during
             *  prediction.
             */
            let FailedPredicateException = class FailedPredicateException extends RecognitionException_1.RecognitionException {
                constructor(recognizer, predicate, message)
                {
                    super(recognizer, recognizer.inputStream, recognizer.context, FailedPredicateException.formatMessage(predicate, message));
                    let s = recognizer.interpreter.atn.states[recognizer.state];
                    let trans = s.transition(0);
                    if (trans instanceof PredicateTransition_1.PredicateTransition) {
                        this._ruleIndex = trans.ruleIndex;
                        this._predicateIndex = trans.predIndex;
                    }
                    else {
                        this._ruleIndex = 0;
                        this._predicateIndex = 0;
                    }
                    this._predicate = predicate;
                    super.setOffendingToken(recognizer, recognizer.currentToken);
                }
                get ruleIndex()
                {
                    return this._ruleIndex;
                }
                get predicateIndex()
                {
                    return this._predicateIndex;
                }
                get predicate()
                {
                    return this._predicate;
                }
                static formatMessage(predicate, message)
                {
                    if (message) {
                        return message;
                    }
                    return `failed predicate: {${predicate}}?`;
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], FailedPredicateException, "formatMessage", null);
            FailedPredicateException = __decorate([
            __param(0, Decorators_1.NotNull)
            ], FailedPredicateException);
            exports.FailedPredicateException = FailedPredicateException;

        }, {
            "./Decorators": 224,
            "./RecognitionException": 242,
            "./atn/PredicateTransition": 297
        }],
        229: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:51.5187682-07:00
            const RecognitionException_1 = require("./RecognitionException");
            const Decorators_1 = require("./Decorators");
            /** This signifies any kind of mismatched input exceptions such as
             *  when the current input does not match the expected token.
             */
            let InputMismatchException = class InputMismatchException extends RecognitionException_1.RecognitionException {
                constructor(recognizer, state, context)
                {
                    if (context === undefined) {
                        context = recognizer.context;
                    }
                    super(recognizer, recognizer.inputStream, context);
                    if (state !== undefined) {
                        this.setOffendingState(state);
                    }
                    this.setOffendingToken(recognizer, recognizer.currentToken);
                }
            }
            ;
            InputMismatchException = __decorate([
            __param(0, Decorators_1.NotNull)
            ], InputMismatchException);
            exports.InputMismatchException = InputMismatchException;

        }, {
            "./Decorators": 224,
            "./RecognitionException": 242
        }],
        230: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:51.6934376-07:00
            var IntStream;
            (function(IntStream) {
                /**
                     * The value returned by {@link #LA LA()} when the end of the stream is
                     * reached.
                     */
                IntStream.EOF = -1;
                /**
                     * The value returned by {@link #getSourceName} when the actual name of the
                     * underlying source is not known.
                     */
                IntStream.UNKNOWN_SOURCE_NAME = "<unknown>";
            })(IntStream = exports.IntStream || (exports.IntStream = {}));

        }, {}],
        231: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:51.5898546-07:00
            const Decorators_1 = require("./Decorators");
            const ParserRuleContext_1 = require("./ParserRuleContext");
            /**
             * This class extends {@link ParserRuleContext} by allowing the value of
             * {@link #getRuleIndex} to be explicitly set for the context.
             *
             * {@link ParserRuleContext} does not include field storage for the rule index
             * since the context classes created by the code generator override the
             * {@link #getRuleIndex} method to return the correct value for that context.
             * Since the parser interpreter does not use the context classes generated for a
             * parser, this class (with slightly more memory overhead per node) is used to
             * provide equivalent functionality.
             */
            class InterpreterRuleContext extends ParserRuleContext_1.ParserRuleContext {
                constructor(ruleIndex, parent, invokingStateNumber)
                {
                    if (invokingStateNumber !== undefined) {
                        super(parent, invokingStateNumber);
                    }
                    else {
                        super();
                    }
                    this._ruleIndex = ruleIndex;
                }
                get ruleIndex()
                {
                    return this._ruleIndex;
                }
            }
            __decorate([
            Decorators_1.Override
            ], InterpreterRuleContext.prototype, "ruleIndex", null);
            exports.InterpreterRuleContext = InterpreterRuleContext;

        }, {
            "./Decorators": 224,
            "./ParserRuleContext": 239
        }],
        232: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const CommonTokenFactory_1 = require("./CommonTokenFactory");
            const IntegerStack_1 = require("./misc/IntegerStack");
            const Interval_1 = require("./misc/Interval");
            const IntStream_1 = require("./IntStream");
            const LexerATNSimulator_1 = require("./atn/LexerATNSimulator");
            const LexerNoViableAltException_1 = require("./LexerNoViableAltException");
            const Decorators_1 = require("./Decorators");
            const Recognizer_1 = require("./Recognizer");
            const Token_1 = require("./Token");
            /** A lexer is recognizer that draws input symbols from a character stream.
             *  lexer grammars result in a subclass of this object. A Lexer object
             *  uses simplified match() and error recovery mechanisms in the interest
             *  of speed.
             */
            class Lexer extends Recognizer_1.Recognizer {
                constructor(input)
                {
                    super();
                    /** How to create token objects */
                    this._factory = CommonTokenFactory_1.CommonTokenFactory.DEFAULT;
                    /** What character index in the stream did the current token start at?
                             *  Needed, for example, to get the text for current token.  Set at
                             *  the start of nextToken.
                             */
                    this._tokenStartCharIndex = -1;
                    /** The line on which the first character of the token resides */
                    this._tokenStartLine = 0;
                    /** The character position of first character within the line */
                    this._tokenStartCharPositionInLine = 0;
                    /** Once we see EOF on char stream, next token will be EOF.
                             *  If you have DONE : EOF ; then you see DONE EOF.
                             */
                    this._hitEOF = false;
                    /** The channel number for the current token */
                    this._channel = 0;
                    /** The token type for the current token */
                    this._type = 0;
                    this._modeStack = new IntegerStack_1.IntegerStack();
                    this._mode = Lexer.DEFAULT_MODE;
                    this._input = input;
                    this._tokenFactorySourcePair = {
                        source: this,
                        stream: input
                    };
                }
                static get DEFAULT_TOKEN_CHANNEL()
                {
                    return Token_1.Token.DEFAULT_CHANNEL;
                }
                static get HIDDEN()
                {
                    return Token_1.Token.HIDDEN_CHANNEL;
                }
                reset(resetInput)
                {
                    // wack Lexer state variables
                    if (resetInput === undefined || resetInput) {
                        this._input.seek(0); // rewind the input
                    }
                    this._token = undefined;
                    this._type = Token_1.Token.INVALID_TYPE;
                    this._channel = Token_1.Token.DEFAULT_CHANNEL;
                    this._tokenStartCharIndex = -1;
                    this._tokenStartCharPositionInLine = -1;
                    this._tokenStartLine = -1;
                    this._text = undefined;
                    this._hitEOF = false;
                    this._mode = Lexer.DEFAULT_MODE;
                    this._modeStack.clear();
                    this.interpreter.reset();
                }
                /** Return a token from this source; i.e., match a token on the char
                     *  stream.
                     */
                nextToken()
                {
                    if (this._input == null) {
                        throw new Error("nextToken requires a non-null input stream.");
                    }
                    // Mark start location in char stream so unbuffered streams are
                    // guaranteed at least have text of current token
                    let tokenStartMarker = this._input.mark();
                    try {
                        outer:
                        while (true) {
                            if (this._hitEOF) {
                                return this.emitEOF();
                            }
                            this._token = undefined;
                            this._channel = Token_1.Token.DEFAULT_CHANNEL;
                            this._tokenStartCharIndex = this._input.index;
                            this._tokenStartCharPositionInLine = this.interpreter.charPositionInLine;
                            this._tokenStartLine = this.interpreter.line;
                            this._text = undefined;
                            do {
                                this._type = Token_1.Token.INVALID_TYPE;
                                //        System.out.println("nextToken line "+tokenStartLine+" at "+((char)input.LA(1))+
                                //                   " in mode "+mode+
                                //                   " at index "+input.index);
                                let ttype;
                                try {
                                    ttype = this.interpreter.match(this._input, this._mode);
                                }
                                catch (e) {
                                    if (e instanceof LexerNoViableAltException_1.LexerNoViableAltException) {
                                        this.notifyListeners(e); // report error
                                        this.recover(e);
                                        ttype = Lexer.SKIP;
                                    }
                                    else {
                                        throw e;
                                    }
                                }
                                if (this._input.LA(1) === IntStream_1.IntStream.EOF) {
                                    this._hitEOF = true;
                                }
                                if (this._type === Token_1.Token.INVALID_TYPE) {
                                    this._type = ttype;
                                }
                                if (this._type === Lexer.SKIP) {
                                    continue outer;
                                }
                            } while (this._type === Lexer.MORE);
                            if (this._token == null) {
                                return this.emit();
                            }
                            return this._token;
                        }
                    }
                    finally {
                        // make sure we release marker after match or
                        // unbuffered char stream will keep buffering
                        this._input.release(tokenStartMarker);
                    }
                }
                /** Instruct the lexer to skip creating a token for current lexer rule
                     *  and look for another token.  nextToken() knows to keep looking when
                     *  a lexer rule finishes with token set to SKIP_TOKEN.  Recall that
                     *  if token==undefined at end of any token rule, it creates one for you
                     *  and emits it.
                     */
                skip()
                {
                    this._type = Lexer.SKIP;
                }
                more()
                {
                    this._type = Lexer.MORE;
                }
                mode(m)
                {
                    this._mode = m;
                }
                pushMode(m)
                {
                    if (LexerATNSimulator_1.LexerATNSimulator.debug) {
                        console.log("pushMode " + m);
                    }
                    this._modeStack.push(this._mode);
                    this.mode(m);
                }
                popMode()
                {
                    if (this._modeStack.isEmpty) {
                        throw new Error("EmptyStackException");
                    }
                    if (LexerATNSimulator_1.LexerATNSimulator.debug) {
                        console.log("popMode back to " + this._modeStack.peek());
                    }
                    this.mode(this._modeStack.pop());
                    return this._mode;
                }
                get tokenFactory()
                {
                    return this._factory;
                }
                // @Override
                set tokenFactory(factory)
                {
                    this._factory = factory;
                }
                get inputStream()
                {
                    return this._input;
                }
                /** Set the char stream and reset the lexer */
                set inputStream(input)
                {
                    this.reset(false);
                    this._input = input;
                    this._tokenFactorySourcePair = {
                        source: this,
                        stream: this._input
                    };
                }
                get sourceName()
                {
                    return this._input.sourceName;
                }
                emit(token)
                {
                    if (!token) {
                        token = this._factory.create(this._tokenFactorySourcePair, this._type, this._text, this._channel, this._tokenStartCharIndex, this.charIndex - 1, this._tokenStartLine, this._tokenStartCharPositionInLine);
                    }
                    this._token = token;
                    return token;
                }
                emitEOF()
                {
                    let cpos = this.charPositionInLine;
                    let line = this.line;
                    let eof = this._factory.create(this._tokenFactorySourcePair, Token_1.Token.EOF, undefined, Token_1.Token.DEFAULT_CHANNEL, this._input.index, this._input.index - 1, line, cpos);
                    this.emit(eof);
                    return eof;
                }
                get line()
                {
                    return this.interpreter.line;
                }
                set line(line)
                {
                    this.interpreter.line = line;
                }
                get charPositionInLine()
                {
                    return this.interpreter.charPositionInLine;
                }
                set charPositionInLine(charPositionInLine)
                {
                    this.interpreter.charPositionInLine = charPositionInLine;
                }
                /** What is the index of the current character of lookahead? */
                get charIndex()
                {
                    return this._input.index;
                }
                /** Return the text matched so far for the current token or any
                     *  text override.
                     */
                get text()
                {
                    if (this._text != null) {
                        return this._text;
                    }
                    return this.interpreter.getText(this._input);
                }
                /** Set the complete text of this token; it wipes any previous
                     *  changes to the text.
                     */
                set text(text)
                {
                    this._text = text;
                }
                /** Override if emitting multiple tokens. */
                get token()
                {
                    return this._token;
                }
                set token(_token)
                {
                    this._token = _token;
                }
                set type(ttype)
                {
                    this._type = ttype;
                }
                get type()
                {
                    return this._type;
                }
                set channel(channel)
                {
                    this._channel = channel;
                }
                get channel()
                {
                    return this._channel;
                }
                /** Return a list of all Token objects in input char stream.
                     *  Forces load of all tokens. Does not include EOF token.
                     */
                getAllTokens()
                {
                    let tokens = [];
                    let t = this.nextToken();
                    while (t.type !== Token_1.Token.EOF) {
                        tokens.push(t);
                        t = this.nextToken();
                    }
                    return tokens;
                }
                notifyListeners(e)
                {
                    let text = this._input.getText(Interval_1.Interval.of(this._tokenStartCharIndex, this._input.index));
                    let msg = "token recognition error at: '" +
                    this.getErrorDisplay(text) + "'";
                    let listener = this.getErrorListenerDispatch();
                    if (listener.syntaxError) {
                        listener.syntaxError(this, undefined, this._tokenStartLine, this._tokenStartCharPositionInLine, msg, e);
                    }
                }
                getErrorDisplay(s)
                {
                    if (typeof s === "number") {
                        switch (s) {
                        case Token_1.Token.EOF:
                            return "<EOF>";
                        case 0x0a:
                            return "\\n";
                        case 0x09:
                            return "\\t";
                        case 0x0d:
                            return "\\r";
                        }
                        return String.fromCharCode(s);
                    }
                    return s.replace(/\n/g, "\\n")
                    .replace(/\t/g, "\\t")
                    .replace(/\r/g, "\\r");
                }
                getCharErrorDisplay(c)
                {
                    let s = this.getErrorDisplay(c);
                    return "'" + s + "'";
                }
                recover(re)
                {
                    if (re instanceof LexerNoViableAltException_1.LexerNoViableAltException) {
                        if (this._input.LA(1) !== IntStream_1.IntStream.EOF) {
                            // skip a char and try again
                            this.interpreter.consume(this._input);
                        }
                    }
                    else {
                        //System.out.println("consuming char "+(char)input.LA(1)+" during recovery");
                        //re.printStackTrace();
                        // TODO: Do we lose character or line position information?
                        this._input.consume();
                    }
                }
            }
            Lexer.DEFAULT_MODE = 0;
            Lexer.MORE = -2;
            Lexer.SKIP = -3;
            Lexer.MIN_CHAR_VALUE = 0x0000;
            Lexer.MAX_CHAR_VALUE = 0x10FFFF;
            __decorate([
            Decorators_1.Override
            ], Lexer.prototype, "nextToken", null);
            __decorate([
            Decorators_1.Override
            ], Lexer.prototype, "tokenFactory", null);
            __decorate([
            Decorators_1.Override
            ], Lexer.prototype, "inputStream", null);
            __decorate([
            Decorators_1.Override
            ], Lexer.prototype, "sourceName", null);
            __decorate([
            Decorators_1.Override
            ], Lexer.prototype, "line", null);
            __decorate([
            Decorators_1.Override
            ], Lexer.prototype, "charPositionInLine", null);
            exports.Lexer = Lexer;

        }, {
            "./CommonTokenFactory": 221,
            "./Decorators": 224,
            "./IntStream": 230,
            "./LexerNoViableAltException": 234,
            "./Recognizer": 243,
            "./Token": 248,
            "./atn/LexerATNSimulator": 276,
            "./misc/IntegerStack": 329,
            "./misc/Interval": 330
        }],
        233: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Lexer_1 = require("./Lexer");
            const LexerATNSimulator_1 = require("./atn/LexerATNSimulator");
            const Decorators_1 = require("./Decorators");
            const Decorators_2 = require("./Decorators");
            let LexerInterpreter = class LexerInterpreter extends Lexer_1.Lexer {
                constructor(grammarFileName, vocabulary, ruleNames, channelNames, modeNames, atn, input)
                {
                    super(input);
                    if (atn.grammarType !== 0 /* LEXER */
                    ) {
                        throw new Error("IllegalArgumentException: The ATN must be a lexer ATN.");
                    }
                    this._grammarFileName = grammarFileName;
                    this._atn = atn;
                    this._ruleNames = ruleNames.slice(0);
                    this._channelNames = channelNames.slice(0);
                    this._modeNames = modeNames.slice(0);
                    this._vocabulary = vocabulary;
                    this._interp = new LexerATNSimulator_1.LexerATNSimulator(atn, this);
                }
                get atn()
                {
                    return this._atn;
                }
                get grammarFileName()
                {
                    return this._grammarFileName;
                }
                get ruleNames()
                {
                    return this._ruleNames;
                }
                get channelNames()
                {
                    return this._channelNames;
                }
                get modeNames()
                {
                    return this._modeNames;
                }
                get vocabulary()
                {
                    return this._vocabulary;
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], LexerInterpreter.prototype, "_vocabulary", void 0);
            __decorate([
            Decorators_2.Override
            ], LexerInterpreter.prototype, "atn", null);
            __decorate([
            Decorators_2.Override
            ], LexerInterpreter.prototype, "grammarFileName", null);
            __decorate([
            Decorators_2.Override
            ], LexerInterpreter.prototype, "ruleNames", null);
            __decorate([
            Decorators_2.Override
            ], LexerInterpreter.prototype, "channelNames", null);
            __decorate([
            Decorators_2.Override
            ], LexerInterpreter.prototype, "modeNames", null);
            __decorate([
            Decorators_2.Override
            ], LexerInterpreter.prototype, "vocabulary", null);
            LexerInterpreter = __decorate([
            __param(1, Decorators_1.NotNull)
            ], LexerInterpreter);
            exports.LexerInterpreter = LexerInterpreter;

        }, {
            "./Decorators": 224,
            "./Lexer": 232,
            "./atn/LexerATNSimulator": 276
        }],
        234: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const RecognitionException_1 = require("./RecognitionException");
            const Decorators_1 = require("./Decorators");
            const Interval_1 = require("./misc/Interval");
            const Utils = require("./misc/Utils");
            let LexerNoViableAltException = class LexerNoViableAltException extends RecognitionException_1.RecognitionException {
                constructor(lexer, input, startIndex, deadEndConfigs)
                {
                    super(lexer, input);
                    this._startIndex = startIndex;
                    this._deadEndConfigs = deadEndConfigs;
                }
                get startIndex()
                {
                    return this._startIndex;
                }
                get deadEndConfigs()
                {
                    return this._deadEndConfigs;
                }
                get inputStream()
                {
                    return super.inputStream;
                }
                toString()
                {
                    let symbol = "";
                    if (this._startIndex >= 0 && this._startIndex < this.inputStream.size) {
                        symbol = this.inputStream.getText(Interval_1.Interval.of(this._startIndex, this._startIndex));
                        symbol = Utils.escapeWhitespace(symbol, false);
                    }
                    // return String.format(Locale.getDefault(), "%s('%s')", LexerNoViableAltException.class.getSimpleName(), symbol);
                    return `LexerNoViableAltException('${symbol}')`;
                }
            }
            ;
            __decorate([
            Decorators_1.Override
            ], LexerNoViableAltException.prototype, "inputStream", null);
            __decorate([
            Decorators_1.Override
            ], LexerNoViableAltException.prototype, "toString", null);
            LexerNoViableAltException = __decorate([
            __param(1, Decorators_1.NotNull)
            ], LexerNoViableAltException);
            exports.LexerNoViableAltException = LexerNoViableAltException;

        }, {
            "./Decorators": 224,
            "./RecognitionException": 242,
            "./misc/Interval": 330,
            "./misc/Utils": 337
        }],
        235: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const CommonTokenFactory_1 = require("./CommonTokenFactory");
            const Decorators_1 = require("./Decorators");
            const Token_1 = require("./Token");
            /**
             * Provides an implementation of {@link TokenSource} as a wrapper around a list
             * of {@link Token} objects.
             *
             * If the final token in the list is an {@link Token#EOF} token, it will be used
             * as the EOF token for every call to {@link #nextToken} after the end of the
             * list is reached. Otherwise, an EOF token will be created.
             */
            let ListTokenSource = class ListTokenSource {
                /**
                     * Constructs a new {@link ListTokenSource} instance from the specified
                     * collection of {@link Token} objects and source name.
                     *
                     * @param tokens The collection of {@link Token} objects to provide as a
                     * {@link TokenSource}.
                     * @param sourceName The name of the {@link TokenSource}. If this value is
                     * `undefined`, {@link #getSourceName} will attempt to infer the name from
                     * the next {@link Token} (or the previous token if the end of the input has
                     * been reached).
                     *
                     * @exception NullPointerException if `tokens` is `undefined`
                     */
                constructor(tokens, sourceName)
                {
                    /**
                             * The index into {@link #tokens} of token to return by the next call to
                             * {@link #nextToken}. The end of the input is indicated by this value
                             * being greater than or equal to the number of items in {@link #tokens}.
                             */
                    this.i = 0;
                    /**
                             * This is the backing field for {@link #getTokenFactory} and
                             * {@link setTokenFactory}.
                             */
                    this._factory = CommonTokenFactory_1.CommonTokenFactory.DEFAULT;
                    if (tokens == null) {
                        throw new Error("tokens cannot be null");
                    }
                    this.tokens = tokens;
                    this._sourceName = sourceName;
                }
                /**
                     * {@inheritDoc}
                     */
                get charPositionInLine()
                {
                    if (this.i < this.tokens.length) {
                        return this.tokens[this.i].charPositionInLine;
                    }
                    else if (this.eofToken != null) {
                        return this.eofToken.charPositionInLine;
                    }
                    else if (this.tokens.length > 0) {
                        // have to calculate the result from the line/column of the previous
                        // token, along with the text of the token.
                        let lastToken = this.tokens[this.tokens.length - 1];
                        let tokenText = lastToken.text;
                        if (tokenText != null) {
                            let lastNewLine = tokenText.lastIndexOf("\n");
                            if (lastNewLine >= 0) {
                                return tokenText.length - lastNewLine - 1;
                            }
                        }
                        return lastToken.charPositionInLine + lastToken.stopIndex - lastToken.startIndex + 1;
                    }
                    // only reach this if tokens is empty, meaning EOF occurs at the first
                    // position in the input
                    return 0;
                }
                /**
                     * {@inheritDoc}
                     */
                nextToken()
                {
                    if (this.i >= this.tokens.length) {
                        if (this.eofToken == null) {
                            let start = -1;
                            if (this.tokens.length > 0) {
                                let previousStop = this.tokens[this.tokens.length - 1].stopIndex;
                                if (previousStop !== -1) {
                                    start = previousStop + 1;
                                }
                            }
                            let stop = Math.max(-1, start - 1);
                            this.eofToken = this._factory.create({
                                source: this,
                                stream: this.inputStream
                            }, Token_1.Token.EOF, "EOF", Token_1.Token.DEFAULT_CHANNEL, start, stop, this.line, this.charPositionInLine);
                        }
                        return this.eofToken;
                    }
                    let t = this.tokens[this.i];
                    if (this.i === this.tokens.length - 1 && t.type === Token_1.Token.EOF) {
                        this.eofToken = t;
                    }
                    this.i++;
                    return t;
                }
                /**
                     * {@inheritDoc}
                     */
                get line()
                {
                    if (this.i < this.tokens.length) {
                        return this.tokens[this.i].line;
                    }
                    else if (this.eofToken != null) {
                        return this.eofToken.line;
                    }
                    else if (this.tokens.length > 0) {
                        // have to calculate the result from the line/column of the previous
                        // token, along with the text of the token.
                        let lastToken = this.tokens[this.tokens.length - 1];
                        let line = lastToken.line;
                        let tokenText = lastToken.text;
                        if (tokenText != null) {
                            for (let i = 0; i < tokenText.length; i++) {
                                if (tokenText.charAt(i) === "\n") {
                                    line++;
                                }
                            }
                        }
                        // if no text is available, assume the token did not contain any newline characters.
                        return line;
                    }
                    // only reach this if tokens is empty, meaning EOF occurs at the first
                    // position in the input
                    return 1;
                }
                /**
                     * {@inheritDoc}
                     */
                get inputStream()
                {
                    if (this.i < this.tokens.length) {
                        return this.tokens[this.i].inputStream;
                    }
                    else if (this.eofToken != null) {
                        return this.eofToken.inputStream;
                    }
                    else if (this.tokens.length > 0) {
                        return this.tokens[this.tokens.length - 1].inputStream;
                    }
                    // no input stream information is available
                    return undefined;
                }
                /**
                     * {@inheritDoc}
                     */
                get sourceName()
                {
                    if (this._sourceName) {
                        return this._sourceName;
                    }
                    let inputStream = this.inputStream;
                    if (inputStream != null) {
                        return inputStream.sourceName;
                    }
                    return "List";
                }
                /**
                     * {@inheritDoc}
                     */
                // @Override
                set tokenFactory(factory)
                {
                    this._factory = factory;
                }
                /**
                     * {@inheritDoc}
                     */
                get tokenFactory()
                {
                    return this._factory;
                }
            }
            ;
            __decorate([
            Decorators_1.Override
            ], ListTokenSource.prototype, "charPositionInLine", null);
            __decorate([
            Decorators_1.Override
            ], ListTokenSource.prototype, "nextToken", null);
            __decorate([
            Decorators_1.Override
            ], ListTokenSource.prototype, "line", null);
            __decorate([
            Decorators_1.Override
            ], ListTokenSource.prototype, "inputStream", null);
            __decorate([
            Decorators_1.Override
            ], ListTokenSource.prototype, "sourceName", null);
            __decorate([
            Decorators_1.Override,
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], ListTokenSource.prototype, "tokenFactory", null);
            ListTokenSource = __decorate([
            __param(0, Decorators_1.NotNull)
            ], ListTokenSource);
            exports.ListTokenSource = ListTokenSource;

        }, {
            "./CommonTokenFactory": 221,
            "./Decorators": 224,
            "./Token": 248
        }],
        236: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Parser_1 = require("./Parser");
            const RecognitionException_1 = require("./RecognitionException");
            const Decorators_1 = require("./Decorators");
            /** Indicates that the parser could not decide which of two or more paths
             *  to take based upon the remaining input. It tracks the starting token
             *  of the offending input and also knows where the parser was
             *  in the various paths when the error. Reported by reportNoViableAlternative()
             */
            class NoViableAltException extends RecognitionException_1.RecognitionException {
                constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx)
                {
                    if (recognizer instanceof Parser_1.Parser) {
                        if (input === undefined) {
                            input = recognizer.inputStream;
                        }
                        if (startToken === undefined) {
                            startToken = recognizer.currentToken;
                        }
                        if (offendingToken === undefined) {
                            offendingToken = recognizer.currentToken;
                        }
                        if (ctx === undefined) {
                            ctx = recognizer.context;
                        }
                    }
                    super(recognizer, input, ctx);
                    this._deadEndConfigs = deadEndConfigs;
                    this._startToken = startToken;
                    this.setOffendingToken(recognizer, offendingToken);
                }
                get startToken()
                {
                    return this._startToken;
                }
                get deadEndConfigs()
                {
                    return this._deadEndConfigs;
                }
            }
            __decorate([
            Decorators_1.NotNull
            ], NoViableAltException.prototype, "_startToken", void 0);
            exports.NoViableAltException = NoViableAltException;

        }, {
            "./Decorators": 224,
            "./Parser": 237,
            "./RecognitionException": 242
        }],
        237: [function(require, module, exports) {
            (function(process) {
                (function() {
                    "use strict";
                    /*!
                     * Copyright 2016 The ANTLR Project. All rights reserved.
                     * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
                     */
                    var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                        var c = arguments.length,
                            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                            d;
                        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                            r = Reflect.decorate(decorators, target, key, desc);
                        else
                            for (var i = decorators.length - 1; i >= 0; i--)
                                if (d = decorators[i])
                                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                        return c > 3 && r && Object.defineProperty(target, key, r), r;
                    };
                    var __param = (this && this.__param) || function(paramIndex, decorator) {
                        return function(target, key) {
                            decorator(target, key, paramIndex);
                        }
                    };
                    var __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
                        return new (P || (P = Promise))(function(resolve, reject) {
                            function fulfilled(value) {
                                try {
                                    step(generator.next(value));
                                } catch (e) {
                                    reject(e);
                                }
                            }
                            function rejected(value) {
                                try {
                                    step(generator["throw"](value));
                                } catch (e) {
                                    reject(e);
                                }
                            }
                            function step(result) {
                                result.done ? resolve(result.value) : new P(function(resolve) {
                                    resolve(result.value);
                                }).then(fulfilled, rejected);
                            }
                            step((generator = generator.apply(thisArg, _arguments || [])).next());
                        });
                    };
                    Object.defineProperty(exports, "__esModule", {
                        value: true
                    });
                    const Utils = require("./misc/Utils");
                    const ATNDeserializationOptions_1 = require("./atn/ATNDeserializationOptions");
                    const ATNDeserializer_1 = require("./atn/ATNDeserializer");
                    const DefaultErrorStrategy_1 = require("./DefaultErrorStrategy");
                    const ErrorNode_1 = require("./tree/ErrorNode");
                    const IntegerStack_1 = require("./misc/IntegerStack");
                    const Lexer_1 = require("./Lexer");
                    const Decorators_1 = require("./Decorators");
                    const ParseInfo_1 = require("./atn/ParseInfo");
                    const ParserATNSimulator_1 = require("./atn/ParserATNSimulator");
                    const ProxyParserErrorListener_1 = require("./ProxyParserErrorListener");
                    const Recognizer_1 = require("./Recognizer");
                    const TerminalNode_1 = require("./tree/TerminalNode");
                    const Token_1 = require("./Token");
                    class TraceListener {
                        constructor(ruleNames, tokenStream)
                        {
                            this.ruleNames = ruleNames;
                            this.tokenStream = tokenStream;
                        }
                        enterEveryRule(ctx)
                        {
                            console.log("enter   " + this.ruleNames[ctx.ruleIndex] +
                            ", LT(1)=" + this.tokenStream.LT(1).text);
                        }
                        exitEveryRule(ctx)
                        {
                            console.log("exit    " + this.ruleNames[ctx.ruleIndex] +
                            ", LT(1)=" + this.tokenStream.LT(1).text);
                        }
                        visitErrorNode(node) {

                        }
                        visitTerminal(node)
                        {
                            let parent = node.parent.ruleContext;
                            let token = node.symbol;
                            console.log("consume " + token + " rule " + this.ruleNames[parent.ruleIndex]);
                        }
                    }
                    __decorate([
                    Decorators_1.Override
                    ], TraceListener.prototype, "enterEveryRule", null);
                    __decorate([
                    Decorators_1.Override
                    ], TraceListener.prototype, "exitEveryRule", null);
                    __decorate([
                    Decorators_1.Override
                    ], TraceListener.prototype, "visitErrorNode", null);
                    __decorate([
                    Decorators_1.Override
                    ], TraceListener.prototype, "visitTerminal", null);
                    /** This is all the parsing support code essentially; most of it is error recovery stuff. */
                    class Parser extends Recognizer_1.Recognizer {
                        constructor(input)
                        {
                            super();
                            /**
                                     * The error handling strategy for the parser. The default value is a new
                                     * instance of {@link DefaultErrorStrategy}.
                                     *
                                     * @see #getErrorHandler
                                     * @see #setErrorHandler
                                     */
                            this._errHandler = new DefaultErrorStrategy_1.DefaultErrorStrategy();
                            this._precedenceStack = new IntegerStack_1.IntegerStack();
                            /**
                                     * Specifies whether or not the parser should construct a parse tree during
                                     * the parsing process. The default value is `true`.
                                     *
                                     * @see `buildParseTree`
                                     */
                            this._buildParseTrees = true;
                            /**
                                     * The list of {@link ParseTreeListener} listeners registered to receive
                                     * events during the parse.
                                     *
                                     * @see #addParseListener
                                     */
                            this._parseListeners = [];
                            /**
                                     * The number of syntax errors reported during parsing. This value is
                                     * incremented each time {@link #notifyErrorListeners} is called.
                                     */
                            this._syntaxErrors = 0;
                            /** Indicates parser has match()ed EOF token. See {@link #exitRule()}. */
                            this.matchedEOF = false;
                            this._precedenceStack.push(0);
                            this.inputStream = input;
                        }
                        reset(resetInput)
                        {
                            // Note: this method executes when not parsing, so _ctx can be undefined
                            if (resetInput === undefined || resetInput) {
                                this.inputStream.seek(0);
                            }
                            this._errHandler.reset(this);
                            this._ctx = undefined;
                            this._syntaxErrors = 0;
                            this.matchedEOF = false;
                            this.isTrace = false;
                            this._precedenceStack.clear();
                            this._precedenceStack.push(0);
                            let interpreter = this.interpreter;
                            if (interpreter != null) {
                                interpreter.reset();
                            }
                        }
                        /**
                             * Match current input symbol against `ttype`. If the symbol type
                             * matches, {@link ANTLRErrorStrategy#reportMatch} and {@link #consume} are
                             * called to complete the match process.
                             *
                             * If the symbol type does not match,
                             * {@link ANTLRErrorStrategy#recoverInline} is called on the current error
                             * strategy to attempt recovery. If {@link #getBuildParseTree} is
                             * `true` and the token index of the symbol returned by
                             * {@link ANTLRErrorStrategy#recoverInline} is -1, the symbol is added to
                             * the parse tree by calling {@link #createErrorNode(ParserRuleContext, Token)} then
                             * {@link ParserRuleContext#addErrorNode(ErrorNode)}.
                             *
                             * @param ttype the token type to match
                             * @returns the matched symbol
                             * @ if the current input symbol did not match
                             * `ttype` and the error strategy could not recover from the
                             * mismatched symbol
                             */
                        match(ttype)
                        {
                            let t = this.currentToken;
                            if (t.type === ttype) {
                                if (ttype === Token_1.Token.EOF) {
                                    this.matchedEOF = true;
                                }
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            else {
                                t = this._errHandler.recoverInline(this);
                                if (this._buildParseTrees && t.tokenIndex === -1) {
                                    // we must have conjured up a new token during single token insertion
                                    // if it's not the current symbol
                                    this._ctx.addErrorNode(this.createErrorNode(this._ctx, t));
                                }
                            }
                            return t;
                        }
                        /**
                             * Match current input symbol as a wildcard. If the symbol type matches
                             * (i.e. has a value greater than 0), {@link ANTLRErrorStrategy#reportMatch}
                             * and {@link #consume} are called to complete the match process.
                             *
                             * If the symbol type does not match,
                             * {@link ANTLRErrorStrategy#recoverInline} is called on the current error
                             * strategy to attempt recovery. If {@link #getBuildParseTree} is
                             * `true` and the token index of the symbol returned by
                             * {@link ANTLRErrorStrategy#recoverInline} is -1, the symbol is added to
                             * the parse tree by calling {@link Parser#createErrorNode(ParserRuleContext, Token)} then
                             * {@link ParserRuleContext#addErrorNode(ErrorNode)}.
                             *
                             * @returns the matched symbol
                             * @ if the current input symbol did not match
                             * a wildcard and the error strategy could not recover from the mismatched
                             * symbol
                             */
                        matchWildcard()
                        {
                            let t = this.currentToken;
                            if (t.type > 0) {
                                this._errHandler.reportMatch(this);
                                this.consume();
                            }
                            else {
                                t = this._errHandler.recoverInline(this);
                                if (this._buildParseTrees && t.tokenIndex === -1) {
                                    // we must have conjured up a new token during single token insertion
                                    // if it's not the current symbol
                                    this._ctx.addErrorNode(this.createErrorNode(this._ctx, t));
                                }
                            }
                            return t;
                        }
                        /**
                             * Track the {@link ParserRuleContext} objects during the parse and hook
                             * them up using the {@link ParserRuleContext#children} list so that it
                             * forms a parse tree. The {@link ParserRuleContext} returned from the start
                             * rule represents the root of the parse tree.
                             *
                             * Note that if we are not building parse trees, rule contexts only point
                             * upwards. When a rule exits, it returns the context but that gets garbage
                             * collected if nobody holds a reference. It points upwards but nobody
                             * points at it.
                             *
                             * When we build parse trees, we are adding all of these contexts to
                             * {@link ParserRuleContext#children} list. Contexts are then not candidates
                             * for garbage collection.
                             */
                        set buildParseTree(buildParseTrees)
                        {
                            this._buildParseTrees = buildParseTrees;
                        }
                        /**
                             * Gets whether or not a complete parse tree will be constructed while
                             * parsing. This property is `true` for a newly constructed parser.
                             *
                             * @returns `true` if a complete parse tree will be constructed while
                             * parsing, otherwise `false`
                             */
                        get buildParseTree()
                        {
                            return this._buildParseTrees;
                        }
                        getParseListeners()
                        {
                            return this._parseListeners;
                        }
                        /**
                             * Registers `listener` to receive events during the parsing process.
                             *
                             * To support output-preserving grammar transformations (including but not
                             * limited to left-recursion removal, automated left-factoring, and
                             * optimized code generation), calls to listener methods during the parse
                             * may differ substantially from calls made by
                             * {@link ParseTreeWalker#DEFAULT} used after the parse is complete. In
                             * particular, rule entry and exit events may occur in a different order
                             * during the parse than after the parser. In addition, calls to certain
                             * rule entry methods may be omitted.
                             *
                             * With the following specific exceptions, calls to listener events are
                             * *deterministic*, i.e. for identical input the calls to listener
                             * methods will be the same.
                             *
                             * * Alterations to the grammar used to generate code may change the
                             *   behavior of the listener calls.
                             * * Alterations to the command line options passed to ANTLR 4 when
                             *   generating the parser may change the behavior of the listener calls.
                             * * Changing the version of the ANTLR Tool used to generate the parser
                             *   may change the behavior of the listener calls.
                             *
                             * @param listener the listener to add
                             *
                             * @throws {@link TypeError} if `listener` is `undefined`
                             */
                        addParseListener(listener)
                        {
                            if (listener == null) {
                                throw new TypeError("listener cannot be null");
                            }
                            this._parseListeners.push(listener);
                        }
                        /**
                             * Remove `listener` from the list of parse listeners.
                             *
                             * If `listener` is `undefined` or has not been added as a parse
                             * listener, this method does nothing.
                             *
                             * @see #addParseListener
                             *
                             * @param listener the listener to remove
                             */
                        removeParseListener(listener)
                        {
                            let index = this._parseListeners.findIndex((l) => l === listener);
                            if (index !== -1) {
                                this._parseListeners.splice(index, 1);
                            }
                        }
                        /**
                             * Remove all parse listeners.
                             *
                             * @see #addParseListener
                             */
                        removeParseListeners()
                        {
                            this._parseListeners.length = 0;
                        }
                        /**
                             * Notify any parse listeners of an enter rule event.
                             *
                             * @see #addParseListener
                             */
                        triggerEnterRuleEvent()
                        {
                            for (let listener of this._parseListeners) {
                                if (listener.enterEveryRule) {
                                    listener.enterEveryRule(this._ctx);
                                }
                                this._ctx.enterRule(listener);
                            }
                        }
                        /**
                             * Notify any parse listeners of an exit rule event.
                             *
                             * @see #addParseListener
                             */
                        triggerExitRuleEvent()
                        {
                            // reverse order walk of listeners
                            for (let i = this._parseListeners.length - 1; i >= 0; i--) {
                                let listener = this._parseListeners[i];
                                this._ctx.exitRule(listener);
                                if (listener.exitEveryRule) {
                                    listener.exitEveryRule(this._ctx);
                                }
                            }
                        }
                        /**
                             * Gets the number of syntax errors reported during parsing. This value is
                             * incremented each time {@link #notifyErrorListeners} is called.
                             *
                             * @see #notifyErrorListeners
                             */
                        get numberOfSyntaxErrors()
                        {
                            return this._syntaxErrors;
                        }
                        get tokenFactory()
                        {
                            return this._input.tokenSource.tokenFactory;
                        }
                        /**
                             * The ATN with bypass alternatives is expensive to create so we create it
                             * lazily.
                             *
                             * @ if the current parser does not
                             * implement the `serializedATN` property.
                             */
                        getATNWithBypassAlts()
                        {
                            let serializedAtn = this.serializedATN;
                            if (serializedAtn == null) {
                                throw new Error("The current parser does not support an ATN with bypass alternatives.");
                            }
                            let result = Parser.bypassAltsAtnCache.get(serializedAtn);
                            if (result == null) {
                                let deserializationOptions = new ATNDeserializationOptions_1.ATNDeserializationOptions();
                                deserializationOptions.isGenerateRuleBypassTransitions = true;
                                result = new ATNDeserializer_1.ATNDeserializer(deserializationOptions).deserialize(Utils.toCharArray(serializedAtn));
                                Parser.bypassAltsAtnCache.set(serializedAtn, result);
                            }
                            return result;
                        }
                        compileParseTreePattern(pattern, patternRuleIndex, lexer)
                        {
                            return __awaiter(this, void 0, void 0, function* () {
                                if (!lexer) {
                                    if (this.inputStream) {
                                        let tokenSource = this.inputStream.tokenSource;
                                        if (tokenSource instanceof Lexer_1.Lexer) {
                                            lexer = tokenSource;
                                        }
                                    }
                                    if (!lexer) {
                                        throw new Error("Parser can't discover a lexer to use");
                                    }
                                }
                                let currentLexer = lexer;
                                let m = yield Promise.resolve().then(() => require("./tree/pattern/ParseTreePatternMatcher"));
                                let matcher = new m.ParseTreePatternMatcher(currentLexer, this);
                                return matcher.compile(pattern, patternRuleIndex);
                            });
                        }
                        get errorHandler()
                        {
                            return this._errHandler;
                        }
                        set errorHandler(handler)
                        {
                            this._errHandler = handler;
                        }
                        get inputStream()
                        {
                            return this._input;
                        }
                        /** Set the token stream and reset the parser. */
                        set inputStream(input)
                        {
                            this.reset(false);
                            this._input = input;
                        }
                        /** Match needs to return the current input symbol, which gets put
                             *  into the label for the associated token ref; e.g., x=ID.
                             */
                        get currentToken()
                        {
                            return this._input.LT(1);
                        }
                        notifyErrorListeners(msg, offendingToken, e)
                        {
                            if (offendingToken === undefined) {
                                offendingToken = this.currentToken;
                            }
                            else if (offendingToken === null) {
                                offendingToken = undefined;
                            }
                            this._syntaxErrors++;
                            let line = -1;
                            let charPositionInLine = -1;
                            if (offendingToken != null) {
                                line = offendingToken.line;
                                charPositionInLine = offendingToken.charPositionInLine;
                            }
                            let listener = this.getErrorListenerDispatch();
                            if (listener.syntaxError) {
                                listener.syntaxError(this, offendingToken, line, charPositionInLine, msg, e);
                            }
                        }
                        /**
                             * Consume and return the [current symbol](`currentToken`).
                             *
                             * E.g., given the following input with `A` being the current
                             * lookahead symbol, this function moves the cursor to `B` and returns
                             * `A`.
                             *
                             * ```
                             * A B
                             * ^
                             * ```
                             *
                             * If the parser is not in error recovery mode, the consumed symbol is added
                             * to the parse tree using {@link ParserRuleContext#addChild(TerminalNode)}, and
                             * {@link ParseTreeListener#visitTerminal} is called on any parse listeners.
                             * If the parser *is* in error recovery mode, the consumed symbol is
                             * added to the parse tree using {@link #createErrorNode(ParserRuleContext, Token)} then
                             * {@link ParserRuleContext#addErrorNode(ErrorNode)} and
                             * {@link ParseTreeListener#visitErrorNode} is called on any parse
                             * listeners.
                             */
                        consume()
                        {
                            let o = this.currentToken;
                            if (o.type !== Parser.EOF) {
                                this.inputStream.consume();
                            }
                            let hasListener = this._parseListeners.length !== 0;
                            if (this._buildParseTrees || hasListener) {
                                if (this._errHandler.inErrorRecoveryMode(this)) {
                                    let node = this._ctx.addErrorNode(this.createErrorNode(this._ctx, o));
                                    if (hasListener) {
                                        for (let listener of this._parseListeners) {
                                            if (listener.visitErrorNode) {
                                                listener.visitErrorNode(node);
                                            }
                                        }
                                    }
                                }
                                else {
                                    let node = this.createTerminalNode(this._ctx, o);
                                    this._ctx.addChild(node);
                                    if (hasListener) {
                                        for (let listener of this._parseListeners) {
                                            if (listener.visitTerminal) {
                                                listener.visitTerminal(node);
                                            }
                                        }
                                    }
                                }
                            }
                            return o;
                        }
                        /**
                             * How to create a token leaf node associated with a parent.
                             * Typically, the terminal node to create is not a function of the parent.
                             *
                             * @since 4.7
                             */
                        createTerminalNode(parent, t)
                        {
                            return new TerminalNode_1.TerminalNode(t);
                        }
                        /**
                             * How to create an error node, given a token, associated with a parent.
                             * Typically, the error node to create is not a function of the parent.
                             *
                             * @since 4.7
                             */
                        createErrorNode(parent, t)
                        {
                            return new ErrorNode_1.ErrorNode(t);
                        }
                        addContextToParseTree()
                        {
                            let parent = this._ctx._parent;
                            // add current context to parent if we have a parent
                            if (parent != null) {
                                parent.addChild(this._ctx);
                            }
                        }
                        /**
                             * Always called by generated parsers upon entry to a rule. Access field
                             * {@link #_ctx} get the current context.
                             */
                        enterRule(localctx, state, ruleIndex)
                        {
                            this.state = state;
                            this._ctx = localctx;
                            this._ctx._start = this._input.LT(1);
                            if (this._buildParseTrees) {
                                this.addContextToParseTree();
                            }
                            this.triggerEnterRuleEvent();
                        }
                        enterLeftFactoredRule(localctx, state, ruleIndex)
                        {
                            this.state = state;
                            if (this._buildParseTrees) {
                                let factoredContext = this._ctx.getChild(this._ctx.childCount - 1);
                                this._ctx.removeLastChild();
                                factoredContext._parent = localctx;
                                localctx.addChild(factoredContext);
                            }
                            this._ctx = localctx;
                            this._ctx._start = this._input.LT(1);
                            if (this._buildParseTrees) {
                                this.addContextToParseTree();
                            }
                            this.triggerEnterRuleEvent();
                        }
                        exitRule()
                        {
                            if (this.matchedEOF) {
                                // if we have matched EOF, it cannot consume past EOF so we use LT(1) here
                                this._ctx._stop = this._input.LT(1); // LT(1) will be end of file
                            }
                            else {
                                this._ctx._stop = this._input.tryLT(-1); // stop node is what we just matched
                            }
                            // trigger event on _ctx, before it reverts to parent
                            this.triggerExitRuleEvent();
                            this.state = this._ctx.invokingState;
                            this._ctx = this._ctx._parent;
                        }
                        enterOuterAlt(localctx, altNum)
                        {
                            localctx.altNumber = altNum;
                            // if we have new localctx, make sure we replace existing ctx
                            // that is previous child of parse tree
                            if (this._buildParseTrees && this._ctx !== localctx) {
                                let parent = this._ctx._parent;
                                if (parent != null) {
                                    parent.removeLastChild();
                                    parent.addChild(localctx);
                                }
                            }
                            this._ctx = localctx;
                        }
                        /**
                             * Get the precedence level for the top-most precedence rule.
                             *
                             * @returns The precedence level for the top-most precedence rule, or -1 if
                             * the parser context is not nested within a precedence rule.
                             */
                        get precedence()
                        {
                            if (this._precedenceStack.isEmpty) {
                                return -1;
                            }
                            return this._precedenceStack.peek();
                        }
                        enterRecursionRule(localctx, state, ruleIndex, precedence)
                        {
                            this.state = state;
                            this._precedenceStack.push(precedence);
                            this._ctx = localctx;
                            this._ctx._start = this._input.LT(1);
                            this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules
                        }
                        /** Like {@link #enterRule} but for recursive rules.
                             *  Make the current context the child of the incoming localctx.
                             */
                        pushNewRecursionContext(localctx, state, ruleIndex)
                        {
                            let previous = this._ctx;
                            previous._parent = localctx;
                            previous.invokingState = state;
                            previous._stop = this._input.tryLT(-1);
                            this._ctx = localctx;
                            this._ctx._start = previous._start;
                            if (this._buildParseTrees) {
                                this._ctx.addChild(previous);
                            }
                            this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules
                        }
                        unrollRecursionContexts(_parentctx)
                        {
                            this._precedenceStack.pop();
                            this._ctx._stop = this._input.tryLT(-1);
                            let retctx = this._ctx; // save current ctx (return value)
                            // unroll so _ctx is as it was before call to recursive method
                            if (this._parseListeners.length > 0) {
                                while (this._ctx !== _parentctx) {
                                    this.triggerExitRuleEvent();
                                    this._ctx = this._ctx._parent;
                                }
                            }
                            else {
                                this._ctx = _parentctx;
                            }
                            // hook into tree
                            retctx._parent = _parentctx;
                            if (this._buildParseTrees && _parentctx != null) {
                                // add return ctx into invoking rule's tree
                                _parentctx.addChild(retctx);
                            }
                        }
                        getInvokingContext(ruleIndex)
                        {
                            let p = this._ctx;
                            while (p && p.ruleIndex !== ruleIndex) {
                                p = p._parent;
                            }
                            return p;
                        }
                        get context()
                        {
                            return this._ctx;
                        }
                        set context(ctx)
                        {
                            this._ctx = ctx;
                        }
                        precpred(localctx, precedence)
                        {
                            return precedence >= this._precedenceStack.peek();
                        }
                        getErrorListenerDispatch()
                        {
                            return new ProxyParserErrorListener_1.ProxyParserErrorListener(this.getErrorListeners());
                        }
                        inContext(context)
                        {
                            // TODO: useful in parser?
                            return false;
                        }
                        /**
                             * Checks whether or not `symbol` can follow the current state in the
                             * ATN. The behavior of this method is equivalent to the following, but is
                             * implemented such that the complete context-sensitive follow set does not
                             * need to be explicitly constructed.
                             *
                             * ```
                             * return getExpectedTokens().contains(symbol);
                             * ```
                             *
                             * @param symbol the symbol type to check
                             * @returns `true` if `symbol` can follow the current state in
                             * the ATN, otherwise `false`.
                             */
                        isExpectedToken(symbol)
                        {
                            //      return interpreter.atn.nextTokens(_ctx);
                            let atn = this.interpreter.atn;
                            let ctx = this._ctx;
                            let s = atn.states[this.state];
                            let following = atn.nextTokens(s);
                            if (following.contains(symbol)) {
                                return true;
                            }
                            //        System.out.println("following "+s+"="+following);
                            if (!following.contains(Token_1.Token.EPSILON)) {
                                return false;
                            }
                            while (ctx != null && ctx.invokingState >= 0 && following.contains(Token_1.Token.EPSILON)) {
                                let invokingState = atn.states[ctx.invokingState];
                                let rt = invokingState.transition(0);
                                following = atn.nextTokens(rt.followState);
                                if (following.contains(symbol)) {
                                    return true;
                                }
                                ctx = ctx._parent;
                            }
                            if (following.contains(Token_1.Token.EPSILON) && symbol === Token_1.Token.EOF) {
                                return true;
                            }
                            return false;
                        }
                        get isMatchedEOF()
                        {
                            return this.matchedEOF;
                        }
                        /**
                             * Computes the set of input symbols which could follow the current parser
                             * state and context, as given by {@link #getState} and {@link #getContext},
                             * respectively.
                             *
                             * @see ATN#getExpectedTokens(int, RuleContext)
                             */
                        getExpectedTokens()
                        {
                            return this.atn.getExpectedTokens(this.state, this.context);
                        }
                        getExpectedTokensWithinCurrentRule()
                        {
                            let atn = this.interpreter.atn;
                            let s = atn.states[this.state];
                            return atn.nextTokens(s);
                        }
                        /** Get a rule's index (i.e., `RULE_ruleName` field) or -1 if not found. */
                        getRuleIndex(ruleName)
                        {
                            let ruleIndex = this.getRuleIndexMap().get(ruleName);
                            if (ruleIndex != null) {
                                return ruleIndex;
                            }
                            return -1;
                        }
                        get ruleContext()
                        {
                            return this._ctx;
                        }
                        /** Return List&lt;String&gt; of the rule names in your parser instance
                             *  leading up to a call to the current rule.  You could override if
                             *  you want more details such as the file/line info of where
                             *  in the ATN a rule is invoked.
                             *
                             *  This is very useful for error messages.
                             */
                        getRuleInvocationStack(ctx=this._ctx)
                        {
                            let p = ctx; // Workaround for Microsoft/TypeScript#14487
                            let ruleNames = this.ruleNames;
                            let stack = [];
                            while (p != null) {
                                // compute what follows who invoked us
                                let ruleIndex = p.ruleIndex;
                                if (ruleIndex < 0) {
                                    stack.push("n/a");
                                }
                                else {
                                    stack.push(ruleNames[ruleIndex]);
                                }
                                p = p._parent;
                            }
                            return stack;
                        }
                        /** For debugging and other purposes. */
                        getDFAStrings()
                        {
                            let s = [];
                            for (let dfa of this._interp.atn.decisionToDFA) {
                                s.push(dfa.toString(this.vocabulary, this.ruleNames));
                            }
                            return s;
                        }
                        /** For debugging and other purposes. */
                        dumpDFA()
                        {
                            let seenOne = false;
                            for (let dfa of this._interp.atn.decisionToDFA) {
                                if (!dfa.isEmpty) {
                                    if (seenOne) {
                                        console.log();
                                    }
                                    console.log("Decision " + dfa.decision + ":");
                                    process.stdout.write(dfa.toString(this.vocabulary, this.ruleNames));
                                    seenOne = true;
                                }
                            }
                        }
                        get sourceName()
                        {
                            return this._input.sourceName;
                        }
                        get parseInfo()
                        {
                            return Promise.resolve().then(() => require("./atn/ProfilingATNSimulator")).then((m) => {
                                let interp = this.interpreter;
                                if (interp instanceof m.ProfilingATNSimulator) {
                                    return new ParseInfo_1.ParseInfo(interp);
                                }
                                return undefined;
                            });
                        }
                        /**
                             * @since 4.3
                             */
                        setProfile(profile)
                        {
                            return __awaiter(this, void 0, void 0, function* () {
                                let m = yield Promise.resolve().then(() => require("./atn/ProfilingATNSimulator"));
                                let interp = this.interpreter;
                                if (profile) {
                                    if (!(interp instanceof m.ProfilingATNSimulator)) {
                                        this.interpreter = new m.ProfilingATNSimulator(this);
                                    }
                                }
                                else if (interp instanceof m.ProfilingATNSimulator) {
                                    this.interpreter = new ParserATNSimulator_1.ParserATNSimulator(this.atn, this);
                                }
                                this.interpreter.setPredictionMode(interp.getPredictionMode());
                            });
                        }
                        /** During a parse is sometimes useful to listen in on the rule entry and exit
                             *  events as well as token matches. This is for quick and dirty debugging.
                             */
                        set isTrace(trace)
                        {
                            if (!trace) {
                                if (this._tracer) {
                                    this.removeParseListener(this._tracer);
                                    this._tracer = undefined;
                                }
                            }
                            else {
                                if (this._tracer) {
                                    this.removeParseListener(this._tracer);
                                }
                                else {
                                    this._tracer = new TraceListener(this.ruleNames, this._input);
                                }
                                this.addParseListener(this._tracer);
                            }
                        }
                        /**
                             * Gets whether a {@link TraceListener} is registered as a parse listener
                             * for the parser.
                             */
                        get isTrace()
                        {
                            return this._tracer != null;
                        }
                    }
                    /**
                     * This field maps from the serialized ATN string to the deserialized {@link ATN} with
                     * bypass alternatives.
                     *
                     * @see ATNDeserializationOptions.isGenerateRuleBypassTransitions
                     */
                    Parser.bypassAltsAtnCache = new Map();
                    __decorate([
                    Decorators_1.NotNull
                    ], Parser.prototype, "_errHandler", void 0);
                    __decorate([
                    Decorators_1.NotNull
                    ], Parser.prototype, "match", null);
                    __decorate([
                    Decorators_1.NotNull
                    ], Parser.prototype, "matchWildcard", null);
                    __decorate([
                    Decorators_1.NotNull
                    ], Parser.prototype, "getParseListeners", null);
                    __decorate([
                    __param(0, Decorators_1.NotNull)
                    ], Parser.prototype, "addParseListener", null);
                    __decorate([
                    Decorators_1.NotNull
                    ], Parser.prototype, "getATNWithBypassAlts", null);
                    __decorate([
                    Decorators_1.NotNull,
                    __param(0, Decorators_1.NotNull)
                    ], Parser.prototype, "errorHandler", null);
                    __decorate([
                    Decorators_1.Override
                    ], Parser.prototype, "inputStream", null);
                    __decorate([
                    Decorators_1.NotNull
                    ], Parser.prototype, "currentToken", null);
                    __decorate([
                    __param(0, Decorators_1.NotNull)
                    ], Parser.prototype, "enterRule", null);
                    __decorate([
                    Decorators_1.Override,
                    __param(0, Decorators_1.Nullable)
                    ], Parser.prototype, "precpred", null);
                    __decorate([
                    Decorators_1.Override
                    ], Parser.prototype, "getErrorListenerDispatch", null);
                    __decorate([
                    Decorators_1.NotNull
                    ], Parser.prototype, "getExpectedTokens", null);
                    __decorate([
                    Decorators_1.NotNull
                    ], Parser.prototype, "getExpectedTokensWithinCurrentRule", null);
                    __decorate([
                    Decorators_1.Override
                    ], Parser.prototype, "parseInfo", null);
                    exports.Parser = Parser;

                }).call(this)
            }).call(this, require('_process'))

        }, {
            "./Decorators": 224,
            "./DefaultErrorStrategy": 225,
            "./Lexer": 232,
            "./ProxyParserErrorListener": 241,
            "./Recognizer": 243,
            "./Token": 248,
            "./atn/ATNDeserializationOptions": 254,
            "./atn/ATNDeserializer": 255,
            "./atn/ParseInfo": 291,
            "./atn/ParserATNSimulator": 292,
            "./atn/ProfilingATNSimulator": 301,
            "./misc/IntegerStack": 329,
            "./misc/Utils": 337,
            "./tree/ErrorNode": 339,
            "./tree/TerminalNode": 343,
            "./tree/pattern/ParseTreePatternMatcher": 349,
            "_process": 516
        }],
        238: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const ATNState_1 = require("./atn/ATNState");
            const ATNStateType_1 = require("./atn/ATNStateType");
            const BitSet_1 = require("./misc/BitSet");
            const FailedPredicateException_1 = require("./FailedPredicateException");
            const InputMismatchException_1 = require("./InputMismatchException");
            const InterpreterRuleContext_1 = require("./InterpreterRuleContext");
            const LoopEndState_1 = require("./atn/LoopEndState");
            const Decorators_1 = require("./Decorators");
            const Decorators_2 = require("./Decorators");
            const Parser_1 = require("./Parser");
            const ParserATNSimulator_1 = require("./atn/ParserATNSimulator");
            const RecognitionException_1 = require("./RecognitionException");
            const StarLoopEntryState_1 = require("./atn/StarLoopEntryState");
            const Token_1 = require("./Token");
            /** A parser simulator that mimics what ANTLR's generated
             *  parser code does. A ParserATNSimulator is used to make
             *  predictions via adaptivePredict but this class moves a pointer through the
             *  ATN to simulate parsing. ParserATNSimulator just
             *  makes us efficient rather than having to backtrack, for example.
             *
             *  This properly creates parse trees even for left recursive rules.
             *
             *  We rely on the left recursive rule invocation and special predicate
             *  transitions to make left recursive rules work.
             *
             *  See TestParserInterpreter for examples.
             */
            let ParserInterpreter = class ParserInterpreter extends Parser_1.Parser {
                constructor(grammarFileName, vocabulary, ruleNames, atn, input)
                {
                    super(grammarFileName instanceof ParserInterpreter ? grammarFileName.inputStream : input);
                    /** This stack corresponds to the _parentctx, _parentState pair of locals
                             *  that would exist on call stack frames with a recursive descent parser;
                             *  in the generated function for a left-recursive rule you'd see:
                             *
                             *  private EContext e(int _p) {
                             *      ParserRuleContext _parentctx = _ctx;    // Pair.a
                             *      int _parentState = state;          // Pair.b
                             *      ...
                             *  }
                             *
                             *  Those values are used to create new recursive rule invocation contexts
                             *  associated with left operand of an alt like "expr '*' expr".
                             */
                    this._parentContextStack = [];
                    /** We need a map from (decision,inputIndex)->forced alt for computing ambiguous
                             *  parse trees. For now, we allow exactly one override.
                             */
                    this.overrideDecision = -1;
                    this.overrideDecisionInputIndex = -1;
                    this.overrideDecisionAlt = -1;
                    this.overrideDecisionReached = false; // latch and only override once; error might trigger infinite loop
                    /** What is the current context when we override a decisions?  This tells
                             *  us what the root of the parse tree is when using override
                             *  for an ambiguity/lookahead check.
                             */
                    this._overrideDecisionRoot = undefined;
                    if (grammarFileName instanceof ParserInterpreter) {
                        let old = grammarFileName;
                        this._grammarFileName = old._grammarFileName;
                        this._atn = old._atn;
                        this.pushRecursionContextStates = old.pushRecursionContextStates;
                        this._ruleNames = old._ruleNames;
                        this._vocabulary = old._vocabulary;
                        this.interpreter = new ParserATNSimulator_1.ParserATNSimulator(this._atn, this);
                    }
                    else {
                        // The second constructor requires non-null arguments
                        vocabulary = vocabulary;
                        ruleNames = ruleNames;
                        atn = atn;
                        this._grammarFileName = grammarFileName;
                        this._atn = atn;
                        this._ruleNames = ruleNames.slice(0);
                        this._vocabulary = vocabulary;
                        // identify the ATN states where pushNewRecursionContext() must be called
                        this.pushRecursionContextStates = new BitSet_1.BitSet(atn.states.length);
                        for (let state of atn.states) {
                            if (!(state instanceof StarLoopEntryState_1.StarLoopEntryState)) {
                                continue;
                            }
                            if (state.precedenceRuleDecision) {
                                this.pushRecursionContextStates.set(state.stateNumber);
                            }
                        }
                        // get atn simulator that knows how to do predictions
                        this.interpreter = new ParserATNSimulator_1.ParserATNSimulator(atn, this);
                    }
                }
                reset(resetInput)
                {
                    if (resetInput === undefined) {
                        super.reset();
                    }
                    else {
                        super.reset(resetInput);
                    }
                    this.overrideDecisionReached = false;
                    this._overrideDecisionRoot = undefined;
                }
                get atn()
                {
                    return this._atn;
                }
                get vocabulary()
                {
                    return this._vocabulary;
                }
                get ruleNames()
                {
                    return this._ruleNames;
                }
                get grammarFileName()
                {
                    return this._grammarFileName;
                }
                /** Begin parsing at startRuleIndex */
                parse(startRuleIndex)
                {
                    let startRuleStartState = this._atn.ruleToStartState[startRuleIndex];
                    this._rootContext = this.createInterpreterRuleContext(undefined, ATNState_1.ATNState.INVALID_STATE_NUMBER, startRuleIndex);
                    if (startRuleStartState.isPrecedenceRule) {
                        this.enterRecursionRule(this._rootContext, startRuleStartState.stateNumber, startRuleIndex, 0);
                    }
                    else {
                        this.enterRule(this._rootContext, startRuleStartState.stateNumber, startRuleIndex);
                    }
                    while (true) {
                        let p = this.atnState;
                        switch (p.stateType) {
                        case ATNStateType_1.ATNStateType.RULE_STOP:
                            // pop; return from rule
                            if (this._ctx.isEmpty) {
                                if (startRuleStartState.isPrecedenceRule) {
                                    let result = this._ctx;
                                    let parentContext = this._parentContextStack.pop();
                                    this.unrollRecursionContexts(parentContext[0]);
                                    return result;
                                }
                                else {
                                    this.exitRule();
                                    return this._rootContext;
                                }
                            }
                            this.visitRuleStopState(p);
                            break;
                        default:
                            try {
                                this.visitState(p);
                            }
                            catch (e) {
                                if (e instanceof RecognitionException_1.RecognitionException) {
                                    this.state = this._atn.ruleToStopState[p.ruleIndex].stateNumber;
                                    this.context.exception = e;
                                    this.errorHandler.reportError(this, e);
                                    this.recover(e);
                                }
                                else {
                                    throw e;
                                }
                            }
                            break;
                        }
                    }
                }
                enterRecursionRule(localctx, state, ruleIndex, precedence)
                {
                    this._parentContextStack.push([this._ctx, localctx.invokingState]);
                    super.enterRecursionRule(localctx, state, ruleIndex, precedence);
                }
                get atnState()
                {
                    return this._atn.states[this.state];
                }
                visitState(p)
                {
                    let predictedAlt = 1;
                    if (p.numberOfTransitions > 1) {
                        predictedAlt = this.visitDecisionState(p);
                    }
                    let transition = p.transition(predictedAlt - 1);
                    switch (transition.serializationType) {
                    case 1 /* EPSILON */
                    :
                        if (this.pushRecursionContextStates.get(p.stateNumber) &&
                        !(transition.target instanceof LoopEndState_1.LoopEndState)) {
                            // We are at the start of a left recursive rule's (...)* loop
                            // and we're not taking the exit branch of loop.
                            let parentContext = this._parentContextStack[this._parentContextStack.length - 1];
                            let localctx = this.createInterpreterRuleContext(parentContext[0], parentContext[1], this._ctx.ruleIndex);
                            this.pushNewRecursionContext(localctx, this._atn.ruleToStartState[p.ruleIndex].stateNumber, this._ctx.ruleIndex);
                        }
                        break;
                    case 5 /* ATOM */
                    :
                        this.match(transition._label);
                        break;
                    case 2 /* RANGE */
                    :
                    case 7 /* SET */
                    :
                    case 8 /* NOT_SET */
                    :
                        if (!transition.matches(this._input.LA(1), Token_1.Token.MIN_USER_TOKEN_TYPE, 65535)) {
                            this.recoverInline();
                        }
                        this.matchWildcard();
                        break;
                    case 9 /* WILDCARD */
                    :
                        this.matchWildcard();
                        break;
                    case 3 /* RULE */
                    :
                        let ruleStartState = transition.target;
                        let ruleIndex = ruleStartState.ruleIndex;
                        let newctx = this.createInterpreterRuleContext(this._ctx, p.stateNumber, ruleIndex);
                        if (ruleStartState.isPrecedenceRule) {
                            this.enterRecursionRule(newctx, ruleStartState.stateNumber, ruleIndex, transition.precedence);
                        }
                        else {
                            this.enterRule(newctx, transition.target.stateNumber, ruleIndex);
                        }
                        break;
                    case 4 /* PREDICATE */
                    :
                        let predicateTransition = transition;
                        if (!this.sempred(this._ctx, predicateTransition.ruleIndex, predicateTransition.predIndex)) {
                            throw new FailedPredicateException_1.FailedPredicateException(this);
                        }
                        break;
                    case 6 /* ACTION */
                    :
                        let actionTransition = transition;
                        this.action(this._ctx, actionTransition.ruleIndex, actionTransition.actionIndex);
                        break;
                    case 10 /* PRECEDENCE */
                    :
                        if (!this.precpred(this._ctx, transition.precedence)) {
                            let precedence = transition.precedence;
                            throw new FailedPredicateException_1.FailedPredicateException(this, `precpred(_ctx, ${precedence})`);
                        }
                        break;
                    default:
                        throw new Error("UnsupportedOperationException: Unrecognized ATN transition type.");
                    }
                    this.state = transition.target.stateNumber;
                }
                /** Method visitDecisionState() is called when the interpreter reaches
                     *  a decision state (instance of DecisionState). It gives an opportunity
                     *  for subclasses to track interesting things.
                     */
                visitDecisionState(p)
                {
                    let predictedAlt;
                    this.errorHandler.sync(this);
                    let decision = p.decision;
                    if (decision === this.overrideDecision && this._input.index === this.overrideDecisionInputIndex && !this.overrideDecisionReached) {
                        predictedAlt = this.overrideDecisionAlt;
                        this.overrideDecisionReached = true;
                    }
                    else {
                        predictedAlt = this.interpreter.adaptivePredict(this._input, decision, this._ctx);
                    }
                    return predictedAlt;
                }
                /** Provide simple "factory" for InterpreterRuleContext's.
                     *  @since 4.5.1
                     */
                createInterpreterRuleContext(parent, invokingStateNumber, ruleIndex)
                {
                    return new InterpreterRuleContext_1.InterpreterRuleContext(ruleIndex, parent, invokingStateNumber);
                }
                visitRuleStopState(p)
                {
                    let ruleStartState = this._atn.ruleToStartState[p.ruleIndex];
                    if (ruleStartState.isPrecedenceRule) {
                        let parentContext = this._parentContextStack.pop();
                        this.unrollRecursionContexts(parentContext[0]);
                        this.state = parentContext[1];
                    }
                    else {
                        this.exitRule();
                    }
                    let ruleTransition = this._atn.states[this.state].transition(0);
                    this.state = ruleTransition.followState.stateNumber;
                }
                /** Override this parser interpreters normal decision-making process
                     *  at a particular decision and input token index. Instead of
                     *  allowing the adaptive prediction mechanism to choose the
                     *  first alternative within a block that leads to a successful parse,
                     *  force it to take the alternative, 1..n for n alternatives.
                     *
                     *  As an implementation limitation right now, you can only specify one
                     *  override. This is sufficient to allow construction of different
                     *  parse trees for ambiguous input. It means re-parsing the entire input
                     *  in general because you're never sure where an ambiguous sequence would
                     *  live in the various parse trees. For example, in one interpretation,
                     *  an ambiguous input sequence would be matched completely in expression
                     *  but in another it could match all the way back to the root.
                     *
                     *  s : e '!'? ;
                     *  e : ID
                     *    | ID '!'
                     *    ;
                     *
                     *  Here, x! can be matched as (s (e ID) !) or (s (e ID !)). In the first
                     *  case, the ambiguous sequence is fully contained only by the root.
                     *  In the second case, the ambiguous sequences fully contained within just
                     *  e, as in: (e ID !).
                     *
                     *  Rather than trying to optimize this and make
                     *  some intelligent decisions for optimization purposes, I settled on
                     *  just re-parsing the whole input and then using
                     *  {link Trees#getRootOfSubtreeEnclosingRegion} to find the minimal
                     *  subtree that contains the ambiguous sequence. I originally tried to
                     *  record the call stack at the point the parser detected and ambiguity but
                     *  left recursive rules create a parse tree stack that does not reflect
                     *  the actual call stack. That impedance mismatch was enough to make
                     *  it it challenging to restart the parser at a deeply nested rule
                     *  invocation.
                     *
                     *  Only parser interpreters can override decisions so as to avoid inserting
                     *  override checking code in the critical ALL(*) prediction execution path.
                     *
                     *  @since 4.5
                     */
                addDecisionOverride(decision, tokenIndex, forcedAlt)
                {
                    this.overrideDecision = decision;
                    this.overrideDecisionInputIndex = tokenIndex;
                    this.overrideDecisionAlt = forcedAlt;
                }
                get overrideDecisionRoot()
                {
                    return this._overrideDecisionRoot;
                }
                /** Rely on the error handler for this parser but, if no tokens are consumed
                     *  to recover, add an error node. Otherwise, nothing is seen in the parse
                     *  tree.
                     */
                recover(e)
                {
                    let i = this._input.index;
                    this.errorHandler.recover(this, e);
                    if (this._input.index === i) {
                        // no input consumed, better add an error node
                        let tok = e.getOffendingToken();
                        if (!tok) {
                            throw new Error("Expected exception to have an offending token");
                        }
                        let source = tok.tokenSource;
                        let stream = source !== undefined ? source.inputStream : undefined;
                        let sourcePair = {
                            source,
                            stream
                        };
                        if (e instanceof InputMismatchException_1.InputMismatchException) {
                            let expectedTokens = e.expectedTokens;
                            if (expectedTokens === undefined) {
                                throw new Error("Expected the exception to provide expected tokens");
                            }
                            let expectedTokenType = Token_1.Token.INVALID_TYPE;
                            if (!expectedTokens.isNil) {
                                // get any element
                                expectedTokenType = expectedTokens.minElement;
                            }
                            let errToken = this.tokenFactory.create(sourcePair, expectedTokenType, tok.text, Token_1.Token.DEFAULT_CHANNEL, -1, -1, // invalid start/stop
                            tok.line, tok.charPositionInLine);
                            this._ctx.addErrorNode(this.createErrorNode(this._ctx, errToken));
                        }
                        else {
                            // NoViableAlt
                            let source = tok.tokenSource;
                            let errToken = this.tokenFactory.create(sourcePair, Token_1.Token.INVALID_TYPE, tok.text, Token_1.Token.DEFAULT_CHANNEL, -1, -1, // invalid start/stop
                            tok.line, tok.charPositionInLine);
                            this._ctx.addErrorNode(this.createErrorNode(this._ctx, errToken));
                        }
                    }
                }
                recoverInline()
                {
                    return this._errHandler.recoverInline(this);
                }
                /** Return the root of the parse, which can be useful if the parser
                     *  bails out. You still can access the top node. Note that,
                     *  because of the way left recursive rules add children, it's possible
                     *  that the root will not have any children if the start rule immediately
                     *  called and left recursive rule that fails.
                     *
                     * @since 4.5.1
                     */
                get rootContext()
                {
                    return this._rootContext;
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], ParserInterpreter.prototype, "_vocabulary", void 0);
            __decorate([
            Decorators_2.Override
            ], ParserInterpreter.prototype, "reset", null);
            __decorate([
            Decorators_2.Override
            ], ParserInterpreter.prototype, "atn", null);
            __decorate([
            Decorators_2.Override
            ], ParserInterpreter.prototype, "vocabulary", null);
            __decorate([
            Decorators_2.Override
            ], ParserInterpreter.prototype, "ruleNames", null);
            __decorate([
            Decorators_2.Override
            ], ParserInterpreter.prototype, "grammarFileName", null);
            __decorate([
            Decorators_2.Override
            ], ParserInterpreter.prototype, "enterRecursionRule", null);
            ParserInterpreter = __decorate([
            __param(1, Decorators_1.NotNull)
            ], ParserInterpreter);
            exports.ParserInterpreter = ParserInterpreter;

        }, {
            "./Decorators": 224,
            "./FailedPredicateException": 228,
            "./InputMismatchException": 229,
            "./InterpreterRuleContext": 231,
            "./Parser": 237,
            "./RecognitionException": 242,
            "./Token": 248,
            "./atn/ATNState": 257,
            "./atn/ATNStateType": 258,
            "./atn/LoopEndState": 288,
            "./atn/ParserATNSimulator": 292,
            "./atn/StarLoopEntryState": 310,
            "./misc/BitSet": 325
        }],
        239: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:56.6285494-07:00
            const ErrorNode_1 = require("./tree/ErrorNode");
            const Interval_1 = require("./misc/Interval");
            const Decorators_1 = require("./Decorators");
            const RuleContext_1 = require("./RuleContext");
            const TerminalNode_1 = require("./tree/TerminalNode");
            /** A rule invocation record for parsing.
             *
             *  Contains all of the information about the current rule not stored in the
             *  RuleContext. It handles parse tree children list, Any ATN state
             *  tracing, and the default values available for rule invocations:
             *  start, stop, rule index, current alt number.
             *
             *  Subclasses made for each rule and grammar track the parameters,
             *  return values, locals, and labels specific to that rule. These
             *  are the objects that are returned from rules.
             *
             *  Note text is not an actual field of a rule return value; it is computed
             *  from start and stop using the input stream's toString() method.  I
             *  could add a ctor to this so that we can pass in and store the input
             *  stream, but I'm not sure we want to do that.  It would seem to be undefined
             *  to get the .text property anyway if the rule matches tokens from multiple
             *  input streams.
             *
             *  I do not use getters for fields of objects that are used simply to
             *  group values such as this aggregate.  The getters/setters are there to
             *  satisfy the superclass interface.
             */
            class ParserRuleContext extends RuleContext_1.RuleContext {
                constructor(parent, invokingStateNumber)
                {
                    if (invokingStateNumber == null) {
                        super();
                    }
                    else {
                        super(parent, invokingStateNumber);
                    }
                }
                static emptyContext()
                {
                    return ParserRuleContext.EMPTY;
                }
                /**
                     * COPY a ctx (I'm deliberately not using copy constructor) to avoid
                     * confusion with creating node with parent. Does not copy children
                     * (except error leaves).
                     *
                     * This is used in the generated parser code to flip a generic XContext
                     * node for rule X to a YContext for alt label Y. In that sense, it is not
                     * really a generic copy function.
                     *
                     * If we do an error sync() at start of a rule, we might add error nodes
                     * to the generic XContext so this function must copy those nodes to the
                     * YContext as well else they are lost!
                     */
                copyFrom(ctx)
                {
                    this._parent = ctx._parent;
                    this.invokingState = ctx.invokingState;
                    this._start = ctx._start;
                    this._stop = ctx._stop;
                    // copy any error nodes to alt label node
                    if (ctx.children) {
                        this.children = [];
                        // reset parent pointer for any error nodes
                        for (let child of ctx.children) {
                            if (child instanceof ErrorNode_1.ErrorNode) {
                                this.addChild(child);
                            }
                        }
                    }
                }
                // Double dispatch methods for listeners
                enterRule(listener) {

                }
                exitRule(listener) {

                }
                /** Add a parse tree node to this as a child.  Works for
                     *  internal and leaf nodes. Does not set parent link;
                     *  other add methods must do that. Other addChild methods
                     *  call this.
                     *
                     *  We cannot set the parent pointer of the incoming node
                     *  because the existing interfaces do not have a setParent()
                     *  method and I don't want to break backward compatibility for this.
                     *
                     *  @since 4.7
                     */
                addAnyChild(t)
                {
                    if (!this.children) {
                        this.children = [t];
                    }
                    else {
                        this.children.push(t);
                    }
                    return t;
                }
                addChild(t)
                {
                    let result;
                    if (t instanceof TerminalNode_1.TerminalNode) {
                        t.setParent(this);
                        this.addAnyChild(t);
                        return;
                    }
                    else if (t instanceof RuleContext_1.RuleContext) {
                        // Does not set parent link
                        this.addAnyChild(t);
                        return;
                    }
                    else {
                        // Deprecated code path
                        t = new TerminalNode_1.TerminalNode(t);
                        this.addAnyChild(t);
                        t.setParent(this);
                        return t;
                    }
                }
                addErrorNode(node)
                {
                    if (node instanceof ErrorNode_1.ErrorNode) {
                        const errorNode = node;
                        errorNode.setParent(this);
                        return this.addAnyChild(errorNode);
                    }
                    else {
                        // deprecated path
                        const badToken = node;
                        let t = new ErrorNode_1.ErrorNode(badToken);
                        this.addAnyChild(t);
                        t.setParent(this);
                        return t;
                    }
                }
                //  public void trace(int s) {
                //    if ( states==null ) states = new ArrayList<Integer>();
                //    states.add(s);
                //  }
                /** Used by enterOuterAlt to toss out a RuleContext previously added as
                     *  we entered a rule. If we have # label, we will need to remove
                     *  generic ruleContext object.
                     */
                removeLastChild()
                {
                    if (this.children) {
                        this.children.pop();
                    }
                }
                get parent()
                {
                    let parent = super.parent;
                    if (parent === undefined || parent instanceof ParserRuleContext) {
                        return parent;
                    }
                    throw new TypeError("Invalid parent type for ParserRuleContext");
                }
                // Note: in TypeScript, order or arguments reversed
                getChild(i, ctxType)
                {
                    if (!this.children || i < 0 || i >= this.children.length) {
                        throw new RangeError("index parameter must be between >= 0 and <= number of children.");
                    }
                    if (ctxType == null) {
                        return this.children[i];
                    }
                    let result = this.tryGetChild(i, ctxType);
                    if (result === undefined) {
                        throw new Error("The specified node does not exist");
                    }
                    return result;
                }
                tryGetChild(i, ctxType)
                {
                    if (!this.children || i < 0 || i >= this.children.length) {
                        return undefined;
                    }
                    let j = -1; // what node with ctxType have we found?
                    for (let o of this.children) {
                        if (o instanceof ctxType) {
                            j++;
                            if (j === i) {
                                return o;
                            }
                        }
                    }
                    return undefined;
                }
                getToken(ttype, i)
                {
                    let result = this.tryGetToken(ttype, i);
                    if (result === undefined) {
                        throw new Error("The specified token does not exist");
                    }
                    return result;
                }
                tryGetToken(ttype, i)
                {
                    if (!this.children || i < 0 || i >= this.children.length) {
                        return undefined;
                    }
                    let j = -1; // what token with ttype have we found?
                    for (let o of this.children) {
                        if (o instanceof TerminalNode_1.TerminalNode) {
                            let symbol = o.symbol;
                            if (symbol.type === ttype) {
                                j++;
                                if (j === i) {
                                    return o;
                                }
                            }
                        }
                    }
                    return undefined;
                }
                getTokens(ttype)
                {
                    let tokens = [];
                    if (!this.children) {
                        return tokens;
                    }
                    for (let o of this.children) {
                        if (o instanceof TerminalNode_1.TerminalNode) {
                            let symbol = o.symbol;
                            if (symbol.type === ttype) {
                                tokens.push(o);
                            }
                        }
                    }
                    return tokens;
                }
                get ruleContext()
                {
                    return this;
                }
                // NOTE: argument order change from Java version
                getRuleContext(i, ctxType)
                {
                    return this.getChild(i, ctxType);
                }
                tryGetRuleContext(i, ctxType)
                {
                    return this.tryGetChild(i, ctxType);
                }
                getRuleContexts(ctxType)
                {
                    let contexts = [];
                    if (!this.children) {
                        return contexts;
                    }
                    for (let o of this.children) {
                        if (o instanceof ctxType) {
                            contexts.push(o);
                        }
                    }
                    return contexts;
                }
                get childCount()
                {
                    return this.children ? this.children.length : 0;
                }
                get sourceInterval()
                {
                    if (!this._start) {
                        return Interval_1.Interval.INVALID;
                    }
                    if (!this._stop || this._stop.tokenIndex < this._start.tokenIndex) {
                        return Interval_1.Interval.of(this._start.tokenIndex, this._start.tokenIndex - 1); // empty
                    }
                    return Interval_1.Interval.of(this._start.tokenIndex, this._stop.tokenIndex);
                }
                /**
                     * Get the initial token in this context.
                     * Note that the range from start to stop is inclusive, so for rules that do not consume anything
                     * (for example, zero length or error productions) this token may exceed stop.
                     */
                get start()
                {
                    return this._start;
                }
                /**
                     * Get the final token in this context.
                     * Note that the range from start to stop is inclusive, so for rules that do not consume anything
                     * (for example, zero length or error productions) this token may precede start.
                     */
                get stop()
                {
                    return this._stop;
                }
                /** Used for rule context info debugging during parse-time, not so much for ATN debugging */
                toInfoString(recognizer)
                {
                    let rules = recognizer.getRuleInvocationStack(this).reverse();
                    return "ParserRuleContext" + rules + "{" +
                    "start=" + this._start +
                    ", stop=" + this._stop +
                    "}";
                }
            }
            ParserRuleContext.EMPTY = new ParserRuleContext();
            __decorate([
            Decorators_1.Override

            ], /** Override to make type more specific */
            ParserRuleContext.prototype, "parent", null);
            __decorate([
            Decorators_1.Override
            ], ParserRuleContext.prototype, "childCount", null);
            __decorate([
            Decorators_1.Override
            ], ParserRuleContext.prototype, "sourceInterval", null);
            exports.ParserRuleContext = ParserRuleContext;

        }, {
            "./Decorators": 224,
            "./RuleContext": 244,
            "./misc/Interval": 330,
            "./tree/ErrorNode": 339,
            "./tree/TerminalNode": 343
        }],
        240: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("./Decorators");
            /**
             * This implementation of {@link ANTLRErrorListener} dispatches all calls to a
             * collection of delegate listeners. This reduces the effort required to support multiple
             * listeners.
             *
             * @author Sam Harwell
             */
            class ProxyErrorListener {
                constructor(delegates)
                {
                    this.delegates = delegates;
                    if (!delegates) {
                        throw new Error("Invalid delegates");
                    }
                }
                getDelegates()
                {
                    return this.delegates;
                }
                syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e)
                {
                    this.delegates.forEach((listener) => {
                        if (listener.syntaxError) {
                            listener.syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e);
                        }
                    });
                }
            }
            __decorate([
            Decorators_1.Override,
            __param(0, Decorators_1.NotNull),
            __param(4, Decorators_1.NotNull)
            ], ProxyErrorListener.prototype, "syntaxError", null);
            exports.ProxyErrorListener = ProxyErrorListener;

        }, {
            "./Decorators": 224
        }],
        241: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const ProxyErrorListener_1 = require("./ProxyErrorListener");
            const Decorators_1 = require("./Decorators");
            /**
             * @author Sam Harwell
             */
            class ProxyParserErrorListener extends ProxyErrorListener_1.ProxyErrorListener {
                constructor(delegates)
                {
                    super(delegates);
                }
                reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs)
                {
                    this.getDelegates()
                    .forEach((listener) => {
                        if (listener.reportAmbiguity) {
                            listener.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
                        }
                    });
                }
                reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState)
                {
                    this.getDelegates()
                    .forEach((listener) => {
                        if (listener.reportAttemptingFullContext) {
                            listener.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState);
                        }
                    });
                }
                reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState)
                {
                    this.getDelegates()
                    .forEach((listener) => {
                        if (listener.reportContextSensitivity) {
                            listener.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState);
                        }
                    });
                }
            }
            __decorate([
            Decorators_1.Override
            ], ProxyParserErrorListener.prototype, "reportAmbiguity", null);
            __decorate([
            Decorators_1.Override
            ], ProxyParserErrorListener.prototype, "reportAttemptingFullContext", null);
            __decorate([
            Decorators_1.Override
            ], ProxyParserErrorListener.prototype, "reportContextSensitivity", null);
            exports.ProxyParserErrorListener = ProxyParserErrorListener;

        }, {
            "./Decorators": 224,
            "./ProxyErrorListener": 240
        }],
        242: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /** The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
             *  3 kinds of errors: prediction errors, failed predicate errors, and
             *  mismatched input errors. In each case, the parser knows where it is
             *  in the input, where it is in the ATN, the rule invocation stack,
             *  and what kind of problem occurred.
             */
            class RecognitionException extends Error {
                constructor(recognizer, input, ctx, message)
                {
                    super(message);
                    this._offendingState = -1;
                    this._recognizer = recognizer;
                    this.input = input;
                    this.ctx = ctx;
                    if (recognizer) {
                        this._offendingState = recognizer.state;
                    }
                }
                /**
                     * Get the ATN state number the parser was in at the time the error
                     * occurred. For {@link NoViableAltException} and
                     * {@link LexerNoViableAltException} exceptions, this is the
                     * {@link DecisionState} number. For others, it is the state whose outgoing
                     * edge we couldn't match.
                     *
                     * If the state number is not known, this method returns -1.
                     */
                get offendingState()
                {
                    return this._offendingState;
                }
                setOffendingState(offendingState)
                {
                    this._offendingState = offendingState;
                }
                /**
                     * Gets the set of input symbols which could potentially follow the
                     * previously matched symbol at the time this exception was thrown.
                     *
                     * If the set of expected tokens is not known and could not be computed,
                     * this method returns `undefined`.
                     *
                     * @returns The set of token types that could potentially follow the current
                     * state in the ATN, or `undefined` if the information is not available.
                     */
                get expectedTokens()
                {
                    if (this._recognizer) {
                        return this._recognizer.atn.getExpectedTokens(this._offendingState, this.ctx);
                    }
                    return undefined;
                }
                /**
                     * Gets the {@link RuleContext} at the time this exception was thrown.
                     *
                     * If the context is not available, this method returns `undefined`.
                     *
                     * @returns The {@link RuleContext} at the time this exception was thrown.
                     * If the context is not available, this method returns `undefined`.
                     */
                get context()
                {
                    return this.ctx;
                }
                /**
                     * Gets the input stream which is the symbol source for the recognizer where
                     * this exception was thrown.
                     *
                     * If the input stream is not available, this method returns `undefined`.
                     *
                     * @returns The input stream which is the symbol source for the recognizer
                     * where this exception was thrown, or `undefined` if the stream is not
                     * available.
                     */
                get inputStream()
                {
                    return this.input;
                }
                getOffendingToken(recognizer)
                {
                    if (recognizer && recognizer !== this._recognizer) {
                        return undefined;
                    }
                    return this.offendingToken;
                }
                setOffendingToken(recognizer, offendingToken)
                {
                    if (recognizer === this._recognizer) {
                        this.offendingToken = offendingToken;
                    }
                }
                /**
                     * Gets the {@link Recognizer} where this exception occurred.
                     *
                     * If the recognizer is not available, this method returns `undefined`.
                     *
                     * @returns The recognizer where this exception occurred, or `undefined` if
                     * the recognizer is not available.
                     */
                get recognizer()
                {
                    return this._recognizer;
                }
            }
            exports.RecognitionException = RecognitionException;

        }, {}],
        243: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const ConsoleErrorListener_1 = require("./ConsoleErrorListener");
            const ProxyErrorListener_1 = require("./ProxyErrorListener");
            const Decorators_1 = require("./Decorators");
            const Token_1 = require("./Token");
            const Utils = require("./misc/Utils");
            class Recognizer {
                constructor()
                {
                    this._listeners = [ConsoleErrorListener_1.ConsoleErrorListener.INSTANCE];
                    this._stateNumber = -1;
                }
                /**
                     * Get a map from token names to token types.
                     *
                     * Used for XPath and tree pattern compilation.
                     */
                getTokenTypeMap()
                {
                    let vocabulary = this.vocabulary;
                    let result = Recognizer.tokenTypeMapCache.get(vocabulary);
                    if (result == null) {
                        let intermediateResult = new Map();
                        for (let i = 0; i <= this.atn.maxTokenType; i++) {
                            let literalName = vocabulary.getLiteralName(i);
                            if (literalName != null) {
                                intermediateResult.set(literalName, i);
                            }
                            let symbolicName = vocabulary.getSymbolicName(i);
                            if (symbolicName != null) {
                                intermediateResult.set(symbolicName, i);
                            }
                        }
                        intermediateResult.set("EOF", Token_1.Token.EOF);
                        result = intermediateResult;
                        Recognizer.tokenTypeMapCache.set(vocabulary, result);
                    }
                    return result;
                }
                /**
                     * Get a map from rule names to rule indexes.
                     *
                     * Used for XPath and tree pattern compilation.
                     */
                getRuleIndexMap()
                {
                    let ruleNames = this.ruleNames;
                    if (ruleNames == null) {
                        throw new Error("The current recognizer does not provide a list of rule names.");
                    }
                    let result = Recognizer.ruleIndexMapCache.get(ruleNames);
                    if (result == null) {
                        result = Utils.toMap(ruleNames);
                        Recognizer.ruleIndexMapCache.set(ruleNames, result);
                    }
                    return result;
                }
                getTokenType(tokenName)
                {
                    let ttype = this.getTokenTypeMap().get(tokenName);
                    if (ttype != null) {
                        return ttype;
                    }
                    return Token_1.Token.INVALID_TYPE;
                }
                /**
                     * If this recognizer was generated, it will have a serialized ATN
                     * representation of the grammar.
                     *
                     * For interpreters, we don't know their serialized ATN despite having
                     * created the interpreter from it.
                     */
                get serializedATN()
                {
                    throw new Error("there is no serialized ATN");
                }
                /**
                     * Get the {@link ATN} used by the recognizer for prediction.
                     *
                     * @returns The {@link ATN} used by the recognizer for prediction.
                     */
                get atn()
                {
                    return this._interp.atn;
                }
                /**
                     * Get the ATN interpreter used by the recognizer for prediction.
                     *
                     * @returns The ATN interpreter used by the recognizer for prediction.
                     */
                get interpreter()
                {
                    return this._interp;
                }
                /**
                     * Set the ATN interpreter used by the recognizer for prediction.
                     *
                     * @param interpreter The ATN interpreter used by the recognizer for
                     * prediction.
                     */
                set interpreter(interpreter)
                {
                    this._interp = interpreter;
                }
                /** If profiling during the parse/lex, this will return DecisionInfo records
                     *  for each decision in recognizer in a ParseInfo object.
                     *
                     * @since 4.3
                     */
                get parseInfo()
                {
                    return Promise.resolve(undefined);
                }
                /** What is the error header, normally line/character position information? */
                getErrorHeader(e)
                {
                    let token = e.getOffendingToken();
                    if (!token) {
                        return "";
                    }
                    let line = token.line;
                    let charPositionInLine = token.charPositionInLine;
                    return "line " + line + ":" + charPositionInLine;
                }
                /**
                     * @exception NullPointerException if `listener` is `undefined`.
                     */
                addErrorListener(listener)
                {
                    if (!listener) {
                        throw new TypeError("listener must not be null");
                    }
                    this._listeners.push(listener);
                }
                removeErrorListener(listener)
                {
                    let position = this._listeners.indexOf(listener);
                    if (position !== -1) {
                        this._listeners.splice(position, 1);
                    }
                }
                removeErrorListeners()
                {
                    this._listeners.length = 0;
                }
                getErrorListeners()
                {
                    return this._listeners.slice(0);
                }
                getErrorListenerDispatch()
                {
                    return new ProxyErrorListener_1.ProxyErrorListener(this.getErrorListeners());
                }
                // subclass needs to override these if there are sempreds or actions
                // that the ATN interp needs to execute
                sempred(_localctx, ruleIndex, actionIndex)
                {
                    return true;
                }
                precpred(localctx, precedence)
                {
                    return true;
                }
                action(_localctx, ruleIndex, actionIndex) {

                }
                get state()
                {
                    return this._stateNumber;
                }
                /** Indicate that the recognizer has changed internal state that is
                     *  consistent with the ATN state passed in.  This way we always know
                     *  where we are in the ATN as the parser goes along. The rule
                     *  context objects form a stack that lets us see the stack of
                     *  invoking rules. Combine this and we have complete ATN
                     *  configuration information.
                     */
                set state(atnState)
                {
                    //    System.err.println("setState "+atnState);
                    this._stateNumber = atnState;

                }
            }
            //    if ( traceATNStates ) _ctx.trace(atnState);
            Recognizer.EOF = -1;
            Recognizer.tokenTypeMapCache = new WeakMap();
            Recognizer.ruleIndexMapCache = new WeakMap();
            __decorate([
            Decorators_1.SuppressWarnings("serial"),
            Decorators_1.NotNull
            ], Recognizer.prototype, "_listeners", void 0);
            __decorate([
            Decorators_1.NotNull
            ], Recognizer.prototype, "getTokenTypeMap", null);
            __decorate([
            Decorators_1.NotNull
            ], Recognizer.prototype, "getRuleIndexMap", null);
            __decorate([
            Decorators_1.NotNull
            ], Recognizer.prototype, "serializedATN", null);
            __decorate([
            Decorators_1.NotNull
            ], Recognizer.prototype, "atn", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], Recognizer.prototype, "interpreter", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], Recognizer.prototype, "getErrorHeader", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], Recognizer.prototype, "addErrorListener", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], Recognizer.prototype, "removeErrorListener", null);
            __decorate([
            Decorators_1.NotNull
            ], Recognizer.prototype, "getErrorListeners", null);
            exports.Recognizer = Recognizer;

        }, {
            "./ConsoleErrorListener": 223,
            "./Decorators": 224,
            "./ProxyErrorListener": 240,
            "./Token": 248,
            "./misc/Utils": 337
        }],
        244: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:57.3490837-07:00
            const ATN_1 = require("./atn/ATN");
            const Recognizer_1 = require("./Recognizer");
            const RuleNode_1 = require("./tree/RuleNode");
            const Interval_1 = require("./misc/Interval");
            const Decorators_1 = require("./Decorators");
            const Trees_1 = require("./tree/Trees");
            const ParserRuleContext_1 = require("./ParserRuleContext");
            /** A rule context is a record of a single rule invocation.
             *
             *  We form a stack of these context objects using the parent
             *  pointer. A parent pointer of `undefined` indicates that the current
             *  context is the bottom of the stack. The ParserRuleContext subclass
             *  as a children list so that we can turn this data structure into a
             *  tree.
             *
             *  The root node always has a `undefined` pointer and invokingState of -1.
             *
             *  Upon entry to parsing, the first invoked rule function creates a
             *  context object (a subclass specialized for that rule such as
             *  SContext) and makes it the root of a parse tree, recorded by field
             *  Parser._ctx.
             *
             *  public final SContext s() throws RecognitionException {
             *      SContext _localctx = new SContext(_ctx, state); <-- create new node
             *      enterRule(_localctx, 0, RULE_s);                     <-- push it
             *      ...
             *      exitRule();                                          <-- pop back to _localctx
             *      return _localctx;
             *  }
             *
             *  A subsequent rule invocation of r from the start rule s pushes a
             *  new context object for r whose parent points at s and use invoking
             *  state is the state with r emanating as edge label.
             *
             *  The invokingState fields from a context object to the root
             *  together form a stack of rule indication states where the root
             *  (bottom of the stack) has a -1 sentinel value. If we invoke start
             *  symbol s then call r1, which calls r2, the  would look like
             *  this:
             *
             *     SContext[-1]   <- root node (bottom of the stack)
             *     R1Context[p]   <- p in rule s called r1
             *     R2Context[q]   <- q in rule r1 called r2
             *
             *  So the top of the stack, _ctx, represents a call to the current
             *  rule and it holds the return address from another rule that invoke
             *  to this rule. To invoke a rule, we must always have a current context.
             *
             *  The parent contexts are useful for computing lookahead sets and
             *  getting error information.
             *
             *  These objects are used during parsing and prediction.
             *  For the special case of parsers, we use the subclass
             *  ParserRuleContext.
             *
             *  @see ParserRuleContext
             */
            class RuleContext extends RuleNode_1.RuleNode {
                constructor(parent, invokingState)
                {
                    super();
                    this._parent = parent;
                    this.invokingState = invokingState != null ? invokingState : -1;
                }
                static getChildContext(parent, invokingState)
                {
                    return new RuleContext(parent, invokingState);
                }
                depth()
                {
                    let n = 0;
                    let p = this;
                    while (p) {
                        p = p._parent;
                        n++;
                    }
                    return n;
                }
                /** A context is empty if there is no invoking state; meaning nobody called
                     *  current context.
                     */
                get isEmpty()
                {
                    return this.invokingState === -1;
                }
                // satisfy the ParseTree / SyntaxTree interface
                get sourceInterval()
                {
                    return Interval_1.Interval.INVALID;
                }
                get ruleContext()
                {
                    return this;
                }
                get parent()
                {
                    return this._parent;
                }
                /** @since 4.7. {@see ParseTree#setParent} comment */
                setParent(parent)
                {
                    this._parent = parent;
                }
                get payload()
                {
                    return this;
                }
                /** Return the combined text of all child nodes. This method only considers
                     *  tokens which have been added to the parse tree.
                     *
                     *  Since tokens on hidden channels (e.g. whitespace or comments) are not
                     *  added to the parse trees, they will not appear in the output of this
                     *  method.
                     */
                get text()
                {
                    if (this.childCount === 0) {
                        return "";
                    }
                    let builder = "";
                    for (let i = 0; i < this.childCount; i++) {
                        builder += this.getChild(i).text;
                    }
                    return builder.toString();
                }
                get ruleIndex()
                {
                    return -1;
                }
                /** For rule associated with this parse tree internal node, return
                     *  the outer alternative number used to match the input. Default
                     *  implementation does not compute nor store this alt num. Create
                     *  a subclass of ParserRuleContext with backing field and set
                     *  option contextSuperClass.
                     *  to set it.
                     *
                     *  @since 4.5.3
                     */
                get altNumber()
                {
                    return ATN_1.ATN.INVALID_ALT_NUMBER;
                }
                /** Set the outer alternative number for this context node. Default
                     *  implementation does nothing to avoid backing field overhead for
                     *  trees that don't need it.  Create
                     *  a subclass of ParserRuleContext with backing field and set
                     *  option contextSuperClass.
                     *
                     *  @since 4.5.3
                     */
                set altNumber(altNumber) {

                }
                getChild(i)
                {
                    throw new RangeError("i must be greater than or equal to 0 and less than childCount");
                }
                get childCount()
                {
                    return 0;
                }
                accept(visitor)
                {
                    return visitor.visitChildren(this);
                }
                toStringTree(recog)
                {
                    return Trees_1.Trees.toStringTree(this, recog);
                }
                toString(arg1, stop)
                {
                    const ruleNames = (arg1 instanceof Recognizer_1.Recognizer) ? arg1.ruleNames : arg1;
                    stop = stop || ParserRuleContext_1.ParserRuleContext.emptyContext();
                    let buf = "";
                    let p = this;
                    buf += ("[");
                    while (p && p !== stop) {
                        if (!ruleNames) {
                            if (!p.isEmpty) {
                                buf += (p.invokingState);
                            }
                        }
                        else {
                            let ruleIndex = p.ruleIndex;
                            let ruleName = (ruleIndex >= 0 && ruleIndex < ruleNames.length)
                            ? ruleNames[ruleIndex] : ruleIndex.toString();
                            buf += (ruleName);
                        }
                        if (p._parent && (ruleNames || !p._parent.isEmpty)) {
                            buf += (" ");
                        }
                        p = p._parent;
                    }
                    buf += ("]");
                    return buf.toString();
                }
            }
            __decorate([
            Decorators_1.Override
            ], RuleContext.prototype, "sourceInterval", null);
            __decorate([
            Decorators_1.Override
            ], RuleContext.prototype, "ruleContext", null);
            __decorate([
            Decorators_1.Override
            ], RuleContext.prototype, "parent", null);
            __decorate([
            Decorators_1.Override
            ], RuleContext.prototype, "setParent", null);
            __decorate([
            Decorators_1.Override
            ], RuleContext.prototype, "payload", null);
            __decorate([
            Decorators_1.Override
            ], RuleContext.prototype, "text", null);
            __decorate([
            Decorators_1.Override
            ], RuleContext.prototype, "getChild", null);
            __decorate([
            Decorators_1.Override
            ], RuleContext.prototype, "childCount", null);
            __decorate([
            Decorators_1.Override
            ], RuleContext.prototype, "accept", null);
            __decorate([
            Decorators_1.Override
            ], RuleContext.prototype, "toStringTree", null);
            exports.RuleContext = RuleContext;

        }, {
            "./Decorators": 224,
            "./ParserRuleContext": 239,
            "./Recognizer": 243,
            "./atn/ATN": 251,
            "./misc/Interval": 330,
            "./tree/RuleNode": 342,
            "./tree/Trees": 344
        }],
        245: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:57.4741196-07:00
            const ATN_1 = require("./atn/ATN");
            const Decorators_1 = require("./Decorators");
            const ParserRuleContext_1 = require("./ParserRuleContext");
            /** A handy class for use with
             *
             *  options {contextSuperClass=org.antlr.v4.runtime.RuleContextWithAltNum;}
             *
             *  that provides a backing field / impl for the outer alternative number
             *  matched for an internal parse tree node.
             *
             *  I'm only putting into Java runtime as I'm certain I'm the only one that
             *  will really every use this.
             */
            class RuleContextWithAltNum extends ParserRuleContext_1.ParserRuleContext {
                constructor(parent, invokingStateNumber)
                {
                    if (invokingStateNumber !== undefined) {
                        super(parent, invokingStateNumber);
                    }
                    else {
                        super();
                    }
                    this._altNumber = ATN_1.ATN.INVALID_ALT_NUMBER;
                }
                get altNumber()
                {
                    return this._altNumber;
                }
                // @Override
                set altNumber(altNum)
                {
                    this._altNumber = altNum;
                }
            }
            __decorate([
            Decorators_1.Override
            ], RuleContextWithAltNum.prototype, "altNumber", null);
            exports.RuleContextWithAltNum = RuleContextWithAltNum;

        }, {
            "./Decorators": 224,
            "./ParserRuleContext": 239,
            "./atn/ATN": 251
        }],
        246: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * Declares a dependency upon a grammar rule, along with a set of zero or more dependent rules.
             *
             * Version numbers within a grammar should be assigned on a monotonically increasing basis to allow for accurate
             * tracking of dependent rules.
             *
             * @author Sam Harwell
             */
            function RuleDependency(dependency) {
                return (target, propertyKey, propertyDescriptor) => {

                };
            }
            exports.RuleDependency = RuleDependency;

        }, {}],
        247: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             *
             * @author Sam Harwell
             */
            function RuleVersion(version) {
                return (target, propertyKey, propertyDescriptor) => {

                };
            }
            exports.RuleVersion = RuleVersion;

        }, {}],
        248: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const IntStream_1 = require("./IntStream");
            var Token;
            (function(Token) {
                Token.INVALID_TYPE = 0;
                /** During lookahead operations, this "token" signifies we hit rule end ATN state
                     *  and did not follow it despite needing to.
                     */
                Token.EPSILON = -2;
                Token.MIN_USER_TOKEN_TYPE = 1;
                Token.EOF = IntStream_1.IntStream.EOF;
                /** All tokens go to the parser (unless skip() is called in that rule)
                     *  on a particular "channel".  The parser tunes to a particular channel
                     *  so that whitespace etc... can go to the parser on a "hidden" channel.
                     */
                Token.DEFAULT_CHANNEL = 0;
                /** Anything on different channel than DEFAULT_CHANNEL is not parsed
                     *  by parser.
                     */
                Token.HIDDEN_CHANNEL = 1;
                /**
                     * This is the minimum constant value which can be assigned to a
                     * user-defined token channel.
                     *
                     * The non-negative numbers less than {@link #MIN_USER_CHANNEL_VALUE} are
                     * assigned to the predefined channels {@link #DEFAULT_CHANNEL} and
                     * {@link #HIDDEN_CHANNEL}.
                     *
                     * @see `Token.channel`
                     */
                Token.MIN_USER_CHANNEL_VALUE = 2;
            })(Token = exports.Token || (exports.Token = {}));

        }, {
            "./IntStream": 230
        }],
        249: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:58.1768850-07:00
            const Interval_1 = require("./misc/Interval");
            const Decorators_1 = require("./Decorators");
            const Token_1 = require("./Token");
            /**
             * Useful for rewriting out a buffered input token stream after doing some
             * augmentation or other manipulations on it.
             *
             * You can insert stuff, replace, and delete chunks. Note that the operations
             * are done lazily--only if you convert the buffer to a {@link String} with
             * {@link TokenStream#getText()}. This is very efficient because you are not
             * moving data around all the time. As the buffer of tokens is converted to
             * strings, the {@link #getText()} method(s) scan the input token stream and
             * check to see if there is an operation at the current index. If so, the
             * operation is done and then normal {@link String} rendering continues on the
             * buffer. This is like having multiple Turing machine instruction streams
             * (programs) operating on a single input tape. :)
             *
             * This rewriter makes no modifications to the token stream. It does not ask the
             * stream to fill itself up nor does it advance the input cursor. The token
             * stream `TokenStream.index` will return the same value before and
             * after any {@link #getText()} call.
             *
             * The rewriter only works on tokens that you have in the buffer and ignores the
             * current input cursor. If you are buffering tokens on-demand, calling
             * {@link #getText()} halfway through the input will only do rewrites for those
             * tokens in the first half of the file.
             *
             * Since the operations are done lazily at {@link #getText}-time, operations do
             * not screw up the token index values. That is, an insert operation at token
             * index `i` does not change the index values for tokens
             * `i`+1..n-1.
             *
             * Because operations never actually alter the buffer, you may always get the
             * original token stream back without undoing anything. Since the instructions
             * are queued up, you can easily simulate transactions and roll back any changes
             * if there is an error just by removing instructions. For example,
             *
             * ```
             * CharStream input = new ANTLRFileStream("input");
             * TLexer lex = new TLexer(input);
             * CommonTokenStream tokens = new CommonTokenStream(lex);
             * T parser = new T(tokens);
             * TokenStreamRewriter rewriter = new TokenStreamRewriter(tokens);
             * parser.startRule();
             * ```
             *
             * Then in the rules, you can execute (assuming rewriter is visible):
             *
             * ```
             * Token t,u;
             * ...
             * rewriter.insertAfter(t, "text to put after t");}
             * rewriter.insertAfter(u, "text after u");}
             * System.out.println(rewriter.getText());
             * ```
             *
             * You can also have multiple "instruction streams" and get multiple rewrites
             * from a single pass over the input. Just name the instruction streams and use
             * that name again when printing the buffer. This could be useful for generating
             * a C file and also its header file--all from the same buffer:
             *
             * ```
             * rewriter.insertAfter("pass1", t, "text to put after t");}
             * rewriter.insertAfter("pass2", u, "text after u");}
             * System.out.println(rewriter.getText("pass1"));
             * System.out.println(rewriter.getText("pass2"));
             * ```
             *
             * If you don't use named rewrite streams, a "default" stream is used as the
             * first example shows.
             */
            class TokenStreamRewriter {
                constructor(tokens)
                {
                    this.tokens = tokens;
                    this.programs = new Map();
                    this.programs.set(TokenStreamRewriter.DEFAULT_PROGRAM_NAME, []);
                    this.lastRewriteTokenIndexes = new Map();
                }
                getTokenStream()
                {
                    return this.tokens;
                }
                rollback(instructionIndex, programName=TokenStreamRewriter.DEFAULT_PROGRAM_NAME)
                {
                    let is = this.programs.get(programName);
                    if (is != null) {
                        this.programs.set(programName, is.slice(TokenStreamRewriter.MIN_TOKEN_INDEX, instructionIndex));
                    }
                }
                deleteProgram(programName=TokenStreamRewriter.DEFAULT_PROGRAM_NAME)
                {
                    this.rollback(TokenStreamRewriter.MIN_TOKEN_INDEX, programName);
                }
                insertAfter(tokenOrIndex, text, programName=TokenStreamRewriter.DEFAULT_PROGRAM_NAME)
                {
                    let index;
                    if (typeof tokenOrIndex === "number") {
                        index = tokenOrIndex;
                    }
                    else {
                        index = tokenOrIndex.tokenIndex;
                    }
                    // to insert after, just insert before next index (even if past end)
                    let op = new InsertAfterOp(this.tokens, index, text);
                    let rewrites = this.getProgram(programName);
                    op.instructionIndex = rewrites.length;
                    rewrites.push(op);
                }
                insertBefore(tokenOrIndex, text, programName=TokenStreamRewriter.DEFAULT_PROGRAM_NAME)
                {
                    let index;
                    if (typeof tokenOrIndex === "number") {
                        index = tokenOrIndex;
                    }
                    else {
                        index = tokenOrIndex.tokenIndex;
                    }
                    let op = new InsertBeforeOp(this.tokens, index, text);
                    let rewrites = this.getProgram(programName);
                    op.instructionIndex = rewrites.length;
                    rewrites.push(op);
                }
                replaceSingle(index, text)
                {
                    if (typeof index === "number") {
                        this.replace(index, index, text);
                    }
                    else {
                        this.replace(index, index, text);
                    }
                }
                replace(from, to, text, programName=TokenStreamRewriter.DEFAULT_PROGRAM_NAME)
                {
                    if (typeof from !== "number") {
                        from = from.tokenIndex;
                    }
                    if (typeof to !== "number") {
                        to = to.tokenIndex;
                    }
                    if (from > to || from < 0 || to < 0 || to >= this.tokens.size) {
                        throw new RangeError(`replace: range invalid: ${from}..${to}(size=${this.tokens.size})`);
                    }
                    let op = new ReplaceOp(this.tokens, from, to, text);
                    let rewrites = this.getProgram(programName);
                    op.instructionIndex = rewrites.length;
                    rewrites.push(op);
                }
                delete(from, to, programName=TokenStreamRewriter.DEFAULT_PROGRAM_NAME)
                {
                    if (to === undefined) {
                        to = from;
                    }
                    if (typeof from === "number") {
                        this.replace(from, to, "", programName);
                    }
                    else {
                        this.replace(from, to, "", programName);
                    }
                }
                getLastRewriteTokenIndex(programName=TokenStreamRewriter.DEFAULT_PROGRAM_NAME)
                {
                    let I = this.lastRewriteTokenIndexes.get(programName);
                    if (I == null) {
                        return -1;
                    }
                    return I;
                }
                setLastRewriteTokenIndex(programName, i)
                {
                    this.lastRewriteTokenIndexes.set(programName, i);
                }
                getProgram(name)
                {
                    let is = this.programs.get(name);
                    if (is == null) {
                        is = this.initializeProgram(name);
                    }
                    return is;
                }
                initializeProgram(name)
                {
                    let is = [];
                    this.programs.set(name, is);
                    return is;
                }
                getText(intervalOrProgram, programName=TokenStreamRewriter.DEFAULT_PROGRAM_NAME)
                {
                    let interval;
                    if (intervalOrProgram instanceof Interval_1.Interval) {
                        interval = intervalOrProgram;
                    }
                    else {
                        interval = Interval_1.Interval.of(0, this.tokens.size - 1);
                    }
                    if (typeof intervalOrProgram === "string") {
                        programName = intervalOrProgram;
                    }
                    let rewrites = this.programs.get(programName);
                    let start = interval.a;
                    let stop = interval.b;
                    // ensure start/end are in range
                    if (stop > this.tokens.size - 1) {
                        stop = this.tokens.size - 1;
                    }
                    if (start < 0) {
                        start = 0;
                    }
                    if (rewrites == null || rewrites.length === 0) {
                        return this.tokens.getText(interval); // no instructions to execute
                    }
                    let buf = [];
                    // First, optimize instruction stream
                    let indexToOp = this.reduceToSingleOperationPerIndex(rewrites);
                    // Walk buffer, executing instructions and emitting tokens
                    let i = start;
                    while (i <= stop && i < this.tokens.size) {
                        let op = indexToOp.get(i);
                        indexToOp.delete(i); // remove so any left have index size-1
                        let t = this.tokens.get(i);
                        if (op == null) {
                            // no operation at that index, just dump token
                            if (t.type !== Token_1.Token.EOF) {
                                buf.push(String(t.text));
                            }
                            i++; // move to next token
                        }
                        else {
                            i = op.execute(buf); // execute operation and skip
                        }
                    }
                    // include stuff after end if it's last index in buffer
                    // So, if they did an insertAfter(lastValidIndex, "foo"), include
                    // foo if end==lastValidIndex.
                    if (stop === this.tokens.size - 1) {
                        // Scan any remaining operations after last token
                        // should be included (they will be inserts).
                        for (let op of indexToOp.values()) {
                            if (op.index >= this.tokens.size - 1) {
                                buf.push(op.text.toString());
                            }
                        }
                    }
                    return buf.join("");
                }
                /** We need to combine operations and report invalid operations (like
                     *  overlapping replaces that are not completed nested). Inserts to
                     *  same index need to be combined etc...  Here are the cases:
                     *
                     *  I.i.u I.j.v               leave alone, nonoverlapping
                     *  I.i.u I.i.v               combine: Iivu
                     *
                     *  R.i-j.u R.x-y.v | i-j in x-y      delete first R
                     *  R.i-j.u R.i-j.v             delete first R
                     *  R.i-j.u R.x-y.v | x-y in i-j      ERROR
                     *  R.i-j.u R.x-y.v | boundaries overlap  ERROR
                     *
                     *  Delete special case of replace (text==undefined):
                     *  D.i-j.u D.x-y.v | boundaries overlap  combine to max(min)..max(right)
                     *
                     *  I.i.u R.x-y.v | i in (x+1)-y      delete I (since insert before
                     *                      we're not deleting i)
                     *  I.i.u R.x-y.v | i not in (x+1)-y    leave alone, nonoverlapping
                     *  R.x-y.v I.i.u | i in x-y        ERROR
                     *  R.x-y.v I.x.u               R.x-y.uv (combine, delete I)
                     *  R.x-y.v I.i.u | i not in x-y      leave alone, nonoverlapping
                     *
                     *  I.i.u = insert u before op @ index i
                     *  R.x-y.u = replace x-y indexed tokens with u
                     *
                     *  First we need to examine replaces. For any replace op:
                     *
                     *    1. wipe out any insertions before op within that range.
                     *    2. Drop any replace op before that is contained completely within
                     *   that range.
                     *    3. Throw exception upon boundary overlap with any previous replace.
                     *
                     *  Then we can deal with inserts:
                     *
                     *    1. for any inserts to same index, combine even if not adjacent.
                     *    2. for any prior replace with same left boundary, combine this
                     *   insert with replace and delete this replace.
                     *    3. throw exception if index in same range as previous replace
                     *
                     *  Don't actually delete; make op undefined in list. Easier to walk list.
                     *  Later we can throw as we add to index &rarr; op map.
                     *
                     *  Note that I.2 R.2-2 will wipe out I.2 even though, technically, the
                     *  inserted stuff would be before the replace range. But, if you
                     *  add tokens in front of a method body '{' and then delete the method
                     *  body, I think the stuff before the '{' you added should disappear too.
                     *
                     *  Return a map from token index to operation.
                     */
                reduceToSingleOperationPerIndex(rewrites)
                {
                    // console.log(`rewrites=[${Utils.join(rewrites, ", ")}]`);
                    // WALK REPLACES
                    for (let i = 0; i < rewrites.length; i++) {
                        let op = rewrites[i];
                        if (op == null) {
                            continue;
                        }
                        if (!(op instanceof ReplaceOp)) {
                            continue;
                        }
                        let rop = op;
                        // Wipe prior inserts within range
                        let inserts = this.getKindOfOps(rewrites, InsertBeforeOp, i);
                        for (let iop of inserts) {
                            if (iop.index === rop.index) {
                                // E.g., insert before 2, delete 2..2; update replace
                                // text to include insert before, kill insert
                                rewrites[iop.instructionIndex] = undefined;
                                rop.text = iop.text.toString() + (rop.text != null ? rop.text.toString() : "");
                            }
                            else if (iop.index > rop.index && iop.index <= rop.lastIndex) {
                                // delete insert as it's a no-op.
                                rewrites[iop.instructionIndex] = undefined;
                            }
                        }
                        // Drop any prior replaces contained within
                        let prevReplaces = this.getKindOfOps(rewrites, ReplaceOp, i);
                        for (let prevRop of prevReplaces) {
                            if (prevRop.index >= rop.index && prevRop.lastIndex <= rop.lastIndex) {
                                // delete replace as it's a no-op.
                                rewrites[prevRop.instructionIndex] = undefined;
                                continue;
                            }
                            // throw exception unless disjoint or identical
                            let disjoint = prevRop.lastIndex < rop.index || prevRop.index > rop.lastIndex;
                            // Delete special case of replace (text==null):
                            // D.i-j.u D.x-y.v  | boundaries overlap  combine to max(min)..max(right)
                            if (prevRop.text == null && rop.text == null && !disjoint) {
                                // console.log(`overlapping deletes: ${prevRop}, ${rop}`);
                                rewrites[prevRop.instructionIndex] = undefined; // kill first delete
                                rop.index = Math.min(prevRop.index, rop.index);
                                rop.lastIndex = Math.max(prevRop.lastIndex, rop.lastIndex);

                            }
                            else // console.log(`new rop ${rop}`);
                            if (!disjoint) {
                                throw new Error(`replace op boundaries of ${rop} overlap with previous ${prevRop}`);
                            }
                        }
                    }
                    // WALK INSERTS
                    for (let i = 0; i < rewrites.length; i++) {
                        let op = rewrites[i];
                        if (op == null) {
                            continue;
                        }
                        if (!(op instanceof InsertBeforeOp)) {
                            continue;
                        }
                        let iop = op;
                        // combine current insert with prior if any at same index
                        let prevInserts = this.getKindOfOps(rewrites, InsertBeforeOp, i);
                        for (let prevIop of prevInserts) {
                            if (prevIop.index === iop.index) {
                                if (prevIop instanceof InsertAfterOp) {
                                    iop.text = this.catOpText(prevIop.text, iop.text);
                                    rewrites[prevIop.instructionIndex] = undefined;
                                }
                                else if (prevIop instanceof InsertBeforeOp) {
                                    // combine objects
                                    // convert to strings...we're in process of toString'ing
                                    // whole token buffer so no lazy eval issue with any templates
                                    iop.text = this.catOpText(iop.text, prevIop.text);
                                    // delete redundant prior insert
                                    rewrites[prevIop.instructionIndex] = undefined;
                                }
                            }
                        }
                        // look for replaces where iop.index is in range; error
                        let prevReplaces = this.getKindOfOps(rewrites, ReplaceOp, i);
                        for (let rop of prevReplaces) {
                            if (iop.index === rop.index) {
                                rop.text = this.catOpText(iop.text, rop.text);
                                rewrites[i] = undefined; // delete current insert
                                continue;
                            }
                            if (iop.index >= rop.index && iop.index <= rop.lastIndex) {
                                throw new Error(`insert op ${iop} within boundaries of previous ${rop}`);
                            }
                        }
                    }
                    // console.log(`rewrites after=[${Utils.join(rewrites, ", ")}]`);
                    let m = new Map();
                    for (let op of rewrites) {
                        if (op == null) {
                            // ignore deleted ops
                            continue;
                        }
                        if (m.get(op.index) != null) {
                            throw new Error("should only be one op per index");
                        }
                        m.set(op.index, op);
                    }
                    // console.log(`index to op: ${m}`);
                    return m;
                }
                catOpText(a, b)
                {
                    let x = "";
                    let y = "";
                    if (a != null) {
                        x = a.toString();
                    }
                    if (b != null) {
                        y = b.toString();
                    }
                    return x + y;
                }
                /** Get all operations before an index of a particular kind */
                getKindOfOps(rewrites, kind, before)
                {
                    let ops = [];
                    for (let i = 0; i < before && i < rewrites.length; i++) {
                        let op = rewrites[i];
                        if (op == null) {
                            // ignore deleted
                            continue;
                        }
                        if (op instanceof kind) {
                            ops.push(op);
                        }
                    }
                    return ops;
                }
            }
            TokenStreamRewriter.DEFAULT_PROGRAM_NAME = "default";
            TokenStreamRewriter.PROGRAM_INIT_SIZE = 100;
            TokenStreamRewriter.MIN_TOKEN_INDEX = 0;
            exports.TokenStreamRewriter = TokenStreamRewriter;
            // Define the rewrite operation hierarchy
            class RewriteOperation {
                constructor(tokens, index, text)
                {
                    this.tokens = tokens;
                    this.index = index;
                    this.text = text === undefined ? "" : text;
                }
                /** Execute the rewrite operation by possibly adding to the buffer.
                     *  Return the index of the next token to operate on.
                     */
                execute(buf)
                {
                    return this.index;
                }
                toString()
                {
                    let opName = this.constructor.name;
                    let $index = opName.indexOf("$");
                    opName = opName.substring($index + 1, opName.length);
                    return "<" + opName + "@" + this.tokens.get(this.index) +
                    ":\"" + this.text + "\">";
                }
            }
            __decorate([
            Decorators_1.Override
            ], RewriteOperation.prototype, "toString", null);
            exports.RewriteOperation = RewriteOperation;
            class InsertBeforeOp extends RewriteOperation {
                constructor(tokens, index, text)
                {
                    super(tokens, index, text);
                }
                execute(buf)
                {
                    buf.push(this.text.toString());
                    if (this.tokens.get(this.index).type !== Token_1.Token.EOF) {
                        buf.push(String(this.tokens.get(this.index).text));
                    }
                    return this.index + 1;
                }
            }
            __decorate([
            Decorators_1.Override
            ], InsertBeforeOp.prototype, "execute", null);
            /** Distinguish between insert after/before to do the "insert afters"
             *  first and then the "insert befores" at same index. Implementation
             *  of "insert after" is "insert before index+1".
             */
            class InsertAfterOp extends InsertBeforeOp {
                constructor(tokens, index, text)
                {
                    super(tokens, index + 1, text); // insert after is insert before index+1
                }
            }
            /** I'm going to try replacing range from x..y with (y-x)+1 ReplaceOp
             *  instructions.
             */
            class ReplaceOp extends RewriteOperation {
                constructor(tokens, from, to, text)
                {
                    super(tokens, from, text);
                    this.lastIndex = to;
                }
                execute(buf)
                {
                    if (this.text != null) {
                        buf.push(this.text.toString());
                    }
                    return this.lastIndex + 1;
                }
                toString()
                {
                    if (this.text == null) {
                        return "<DeleteOp@" + this.tokens.get(this.index) +
                        ".." + this.tokens.get(this.lastIndex) + ">";
                    }
                    return "<ReplaceOp@" + this.tokens.get(this.index) +
                    ".." + this.tokens.get(this.lastIndex) + ":\"" + this.text + "\">";
                }
            }
            __decorate([
            Decorators_1.Override
            ], ReplaceOp.prototype, "execute", null);
            __decorate([
            Decorators_1.Override
            ], ReplaceOp.prototype, "toString", null);

        }, {
            "./Decorators": 224,
            "./Token": 248,
            "./misc/Interval": 330
        }],
        250: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:59.5829654-07:00
            const Decorators_1 = require("./Decorators");
            const Token_1 = require("./Token");
            /**
             * This class provides a default implementation of the {@link Vocabulary}
             * interface.
             *
             * @author Sam Harwell
             */
            class VocabularyImpl {
                /**
                     * Constructs a new instance of {@link VocabularyImpl} from the specified
                     * literal, symbolic, and display token names.
                     *
                     * @param literalNames The literal names assigned to tokens, or an empty array
                     * if no literal names are assigned.
                     * @param symbolicNames The symbolic names assigned to tokens, or
                     * an empty array if no symbolic names are assigned.
                     * @param displayNames The display names assigned to tokens, or an empty array
                     * to use the values in `literalNames` and `symbolicNames` as
                     * the source of display names, as described in
                     * {@link #getDisplayName(int)}.
                     *
                     * @see #getLiteralName(int)
                     * @see #getSymbolicName(int)
                     * @see #getDisplayName(int)
                     */
                constructor(literalNames, symbolicNames, displayNames)
                {
                    this.literalNames = literalNames;
                    this.symbolicNames = symbolicNames;
                    this.displayNames = displayNames;
                    // See note here on -1 part: https://github.com/antlr/antlr4/pull/1146
                    this._maxTokenType =
                    Math.max(this.displayNames.length, Math.max(this.literalNames.length, this.symbolicNames.length)) - 1;
                }
                get maxTokenType()
                {
                    return this._maxTokenType;
                }
                getLiteralName(tokenType)
                {
                    if (tokenType >= 0 && tokenType < this.literalNames.length) {
                        return this.literalNames[tokenType];
                    }
                    return undefined;
                }
                getSymbolicName(tokenType)
                {
                    if (tokenType >= 0 && tokenType < this.symbolicNames.length) {
                        return this.symbolicNames[tokenType];
                    }
                    if (tokenType === Token_1.Token.EOF) {
                        return "EOF";
                    }
                    return undefined;
                }
                getDisplayName(tokenType)
                {
                    if (tokenType >= 0 && tokenType < this.displayNames.length) {
                        let displayName = this.displayNames[tokenType];
                        if (displayName) {
                            return displayName;
                        }
                    }
                    let literalName = this.getLiteralName(tokenType);
                    if (literalName) {
                        return literalName;
                    }
                    let symbolicName = this.getSymbolicName(tokenType);
                    if (symbolicName) {
                        return symbolicName;
                    }
                    return String(tokenType);
                }
            }
            /**
             * Gets an empty {@link Vocabulary} instance.
             *
             * No literal or symbol names are assigned to token types, so
             * {@link #getDisplayName(int)} returns the numeric value for all tokens
             * except {@link Token#EOF}.
             */
            VocabularyImpl.EMPTY_VOCABULARY = new VocabularyImpl([], [], []);
            __decorate([
            Decorators_1.NotNull
            ], VocabularyImpl.prototype, "literalNames", void 0);
            __decorate([
            Decorators_1.NotNull
            ], VocabularyImpl.prototype, "symbolicNames", void 0);
            __decorate([
            Decorators_1.NotNull
            ], VocabularyImpl.prototype, "displayNames", void 0);
            __decorate([
            Decorators_1.Override
            ], VocabularyImpl.prototype, "maxTokenType", null);
            __decorate([
            Decorators_1.Override
            ], VocabularyImpl.prototype, "getLiteralName", null);
            __decorate([
            Decorators_1.Override
            ], VocabularyImpl.prototype, "getSymbolicName", null);
            __decorate([
            Decorators_1.Override,
            Decorators_1.NotNull
            ], VocabularyImpl.prototype, "getDisplayName", null);
            __decorate([
            Decorators_1.NotNull
            ], VocabularyImpl, "EMPTY_VOCABULARY", void 0);
            exports.VocabularyImpl = VocabularyImpl;

        }, {
            "./Decorators": 224,
            "./Token": 248
        }],
        251: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:25.1063510-07:00
            const Array2DHashMap_1 = require("../misc/Array2DHashMap");
            const DFA_1 = require("../dfa/DFA");
            const IntervalSet_1 = require("../misc/IntervalSet");
            const InvalidState_1 = require("./InvalidState");
            const LL1Analyzer_1 = require("./LL1Analyzer");
            const Decorators_1 = require("../Decorators");
            const ObjectEqualityComparator_1 = require("../misc/ObjectEqualityComparator");
            const PredictionContext_1 = require("./PredictionContext");
            const Token_1 = require("../Token");
            const assert = require("assert");
            /** */
            let ATN = class ATN {
                /** Used for runtime deserialization of ATNs from strings */
                constructor(grammarType, maxTokenType)
                {
                    this.states = [];
                    /** Each subrule/rule is a decision point and we must track them so we
                             *  can go back later and build DFA predictors for them.  This includes
                             *  all the rules, subrules, optional blocks, ()+, ()* etc...
                             */
                    this.decisionToState = [];
                    this.modeNameToStartState = new Map();
                    this.modeToStartState = [];
                    this.contextCache = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
                    this.decisionToDFA = [];
                    this.modeToDFA = [];
                    this.LL1Table = new Map();
                    this.grammarType = grammarType;
                    this.maxTokenType = maxTokenType;
                }
                clearDFA()
                {
                    this.decisionToDFA = new Array(this.decisionToState.length);
                    for (let i = 0; i < this.decisionToDFA.length; i++) {
                        this.decisionToDFA[i] = new DFA_1.DFA(this.decisionToState[i], i);
                    }
                    this.modeToDFA = new Array(this.modeToStartState.length);
                    for (let i = 0; i < this.modeToDFA.length; i++) {
                        this.modeToDFA[i] = new DFA_1.DFA(this.modeToStartState[i]);
                    }
                    this.contextCache.clear();
                    this.LL1Table.clear();
                }
                get contextCacheSize()
                {
                    return this.contextCache.size;
                }
                getCachedContext(context)
                {
                    return PredictionContext_1.PredictionContext.getCachedContext(context, this.contextCache, new PredictionContext_1.PredictionContext.IdentityHashMap());
                }
                getDecisionToDFA()
                {
                    assert(this.decisionToDFA != null && this.decisionToDFA.length === this.decisionToState.length);
                    return this.decisionToDFA;
                }
                nextTokens(s, ctx)
                {
                    if (ctx) {
                        let anal = new LL1Analyzer_1.LL1Analyzer(this);
                        let next = anal.LOOK(s, ctx);
                        return next;
                    }
                    else {
                        if (s.nextTokenWithinRule) {
                            return s.nextTokenWithinRule;
                        }
                        s.nextTokenWithinRule = this.nextTokens(s, PredictionContext_1.PredictionContext.EMPTY_LOCAL);
                        s.nextTokenWithinRule.setReadonly(true);
                        return s.nextTokenWithinRule;
                    }
                }
                addState(state)
                {
                    state.atn = this;
                    state.stateNumber = this.states.length;
                    this.states.push(state);
                }
                removeState(state)
                {
                    // just replace the state, don't shift states in list
                    let invalidState = new InvalidState_1.InvalidState();
                    invalidState.atn = this;
                    invalidState.stateNumber = state.stateNumber;
                    this.states[state.stateNumber] = invalidState;
                }
                defineMode(name, s)
                {
                    this.modeNameToStartState.set(name, s);
                    this.modeToStartState.push(s);
                    this.modeToDFA.push(new DFA_1.DFA(s));
                    this.defineDecisionState(s);
                }
                defineDecisionState(s)
                {
                    this.decisionToState.push(s);
                    s.decision = this.decisionToState.length - 1;
                    this.decisionToDFA.push(new DFA_1.DFA(s, s.decision));
                    return s.decision;
                }
                getDecisionState(decision)
                {
                    if (this.decisionToState.length > 0) {
                        return this.decisionToState[decision];
                    }
                    return undefined;
                }
                get numberOfDecisions()
                {
                    return this.decisionToState.length;
                }
                /**
                     * Computes the set of input symbols which could follow ATN state number
                     * `stateNumber` in the specified full `context`. This method
                     * considers the complete parser context, but does not evaluate semantic
                     * predicates (i.e. all predicates encountered during the calculation are
                     * assumed true). If a path in the ATN exists from the starting state to the
                     * {@link RuleStopState} of the outermost context without matching any
                     * symbols, {@link Token#EOF} is added to the returned set.
                     *
                     * If `context` is `undefined`, it is treated as
                     * {@link ParserRuleContext#EMPTY}.
                     *
                     * Note that this does NOT give you the set of all tokens that could
                     * appear at a given token position in the input phrase.  In other words, it
                     * does not answer:
                     *
                     * > Given a specific partial input phrase, return the set of all
                     * > tokens that can follow the last token in the input phrase.
                     *
                     * The big difference is that with just the input, the parser could land
                     * right in the middle of a lookahead decision. Getting all
                     * *possible* tokens given a partial input stream is a separate
                     * computation. See https://github.com/antlr/antlr4/issues/1428
                     *
                     * For this function, we are specifying an ATN state and call stack to
                     * compute what token(s) can come next and specifically: outside of a
                     * lookahead decision. That is what you want for error reporting and
                     * recovery upon parse error.
                     *
                     * @param stateNumber the ATN state number
                     * @param context the full parse context
                     * @returns The set of potentially valid input symbols which could follow the
                     * specified state in the specified context.
                     * @ if the ATN does not contain a state with
                     * number `stateNumber`
                     */
                getExpectedTokens(stateNumber, context)
                {
                    if (stateNumber < 0 || stateNumber >= this.states.length) {
                        throw new RangeError("Invalid state number.");
                    }
                    let ctx = context;
                    let s = this.states[stateNumber];
                    let following = this.nextTokens(s);
                    if (!following.contains(Token_1.Token.EPSILON)) {
                        return following;
                    }
                    let expected = new IntervalSet_1.IntervalSet();
                    expected.addAll(following);
                    expected.remove(Token_1.Token.EPSILON);
                    while (ctx != null && ctx.invokingState >= 0 && following.contains(Token_1.Token.EPSILON)) {
                        let invokingState = this.states[ctx.invokingState];
                        let rt = invokingState.transition(0);
                        following = this.nextTokens(rt.followState);
                        expected.addAll(following);
                        expected.remove(Token_1.Token.EPSILON);
                        ctx = ctx._parent;
                    }
                    if (following.contains(Token_1.Token.EPSILON)) {
                        expected.add(Token_1.Token.EOF);
                    }
                    return expected;
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], ATN.prototype, "states", void 0);
            __decorate([
            Decorators_1.NotNull
            ], ATN.prototype, "decisionToState", void 0);
            __decorate([
            Decorators_1.NotNull
            ], ATN.prototype, "modeNameToStartState", void 0);
            __decorate([
            Decorators_1.NotNull
            ], ATN.prototype, "modeToStartState", void 0);
            __decorate([
            Decorators_1.NotNull
            ], ATN.prototype, "decisionToDFA", void 0);
            __decorate([
            Decorators_1.NotNull
            ], ATN.prototype, "modeToDFA", void 0);
            __decorate([
            Decorators_1.NotNull
            ], ATN.prototype, "nextTokens", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], ATN.prototype, "removeState", null);
            __decorate([
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
            ], ATN.prototype, "defineMode", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], ATN.prototype, "defineDecisionState", null);
            __decorate([
            Decorators_1.NotNull
            ], ATN.prototype, "getExpectedTokens", null);
            ATN = __decorate([
            __param(0, Decorators_1.NotNull)
            ], ATN);
            exports.ATN = ATN;
            (function(ATN) {
                ATN.INVALID_ALT_NUMBER = 0;
            })(ATN = exports.ATN || (exports.ATN = {}));
            exports.ATN = ATN;

        }, {
            "../Decorators": 224,
            "../Token": 248,
            "../dfa/DFA": 316,
            "../misc/Array2DHashMap": 321,
            "../misc/IntervalSet": 331,
            "../misc/ObjectEqualityComparator": 334,
            "./InvalidState": 274,
            "./LL1Analyzer": 275,
            "./PredictionContext": 298,
            "assert": 364
        }],
        252: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:25.2796692-07:00
            const Array2DHashMap_1 = require("../misc/Array2DHashMap");
            const DecisionState_1 = require("./DecisionState");
            const MurmurHash_1 = require("../misc/MurmurHash");
            const Decorators_1 = require("../Decorators");
            const ObjectEqualityComparator_1 = require("../misc/ObjectEqualityComparator");
            const PredictionContext_1 = require("./PredictionContext");
            const SemanticContext_1 = require("./SemanticContext");
            const assert = require("assert");
            /**
             * This field stores the bit mask for implementing the
             * {@link #isPrecedenceFilterSuppressed} property as a bit within the
             * existing {@link #altAndOuterContextDepth} field.
             */
            const SUPPRESS_PRECEDENCE_FILTER = 0x80000000;
            /**
             * Represents a location with context in an ATN. The location is identified by the following values:
             *
             * * The current ATN state
             * * The predicted alternative
             * * The semantic context which must be true for this configuration to be enabled
             * * The syntactic context, which is represented as a graph-structured stack whose path(s) lead to the root of the rule
             *   invocations leading to this state
             *
             * In addition to these values, `ATNConfig` stores several properties about paths taken to get to the location which
             * were added over time to help with performance, correctness, and/or debugging.
             *
             * * `reachesIntoOuterContext`:: Used to ensure semantic predicates are not evaluated in the wrong context.
             * * `hasPassedThroughNonGreedyDecision`: Used for enabling first-match-wins instead of longest-match-wins after
             *   crossing a non-greedy decision.
             * * `lexerActionExecutor`: Used for tracking the lexer action(s) to execute should this instance be selected during
             *   lexing.
             * * `isPrecedenceFilterSuppressed`: A state variable for one of the dynamic disambiguation strategies employed by
             *   `ParserATNSimulator.applyPrecedenceFilter`.
             *
             * Due to the use of a graph-structured stack, a single `ATNConfig` is capable of representing many individual ATN
             * configurations which reached the same location in an ATN by following different paths.
             *
             * PERF: To conserve memory, `ATNConfig` is split into several different concrete types. `ATNConfig` itself stores the
             * minimum amount of information typically used to define an `ATNConfig` instance. Various derived types provide
             * additional storage space for cases where a non-default value is used for some of the object properties. The
             * `ATNConfig.create` and `ATNConfig.transform` methods automatically select the smallest concrete type capable of
             * representing the unique information for any given `ATNConfig`.
             */
            let ATNConfig = class ATNConfig {
                constructor(state, altOrConfig, context)
                {
                    if (typeof altOrConfig === "number") {
                        assert((altOrConfig & 0xFFFFFF) === altOrConfig);
                        this._state = state;
                        this.altAndOuterContextDepth = altOrConfig;
                        this._context = context;
                    }
                    else {
                        this._state = state;
                        this.altAndOuterContextDepth = altOrConfig.altAndOuterContextDepth;
                        this._context = context;
                    }
                }
                static create(state, alt, context, semanticContext=SemanticContext_1.SemanticContext.NONE, lexerActionExecutor)
                {
                    if (semanticContext !== SemanticContext_1.SemanticContext.NONE) {
                        if (lexerActionExecutor != null) {
                            return new ActionSemanticContextATNConfig(lexerActionExecutor, semanticContext, state, alt, context, false);
                        }
                        else {
                            return new SemanticContextATNConfig(semanticContext, state, alt, context);
                        }
                    }
                    else if (lexerActionExecutor != null) {
                        return new ActionATNConfig(lexerActionExecutor, state, alt, context, false);
                    }
                    else {
                        return new ATNConfig(state, alt, context);
                    }
                }
                /** Gets the ATN state associated with this configuration */
                get state()
                {
                    return this._state;
                }
                /** What alt (or lexer rule) is predicted by this configuration */
                get alt()
                {
                    return this.altAndOuterContextDepth & 0x00FFFFFF;
                }
                get context()
                {
                    return this._context;
                }
                set context(context)
                {
                    this._context = context;
                }
                get reachesIntoOuterContext()
                {
                    return this.outerContextDepth !== 0;
                }
                /**
                     * We cannot execute predicates dependent upon local context unless
                     * we know for sure we are in the correct context. Because there is
                     * no way to do this efficiently, we simply cannot evaluate
                     * dependent predicates unless we are in the rule that initially
                     * invokes the ATN simulator.
                     *
                     * closure() tracks the depth of how far we dip into the outer context:
                     * depth &gt; 0.  Note that it may not be totally accurate depth since I
                     * don't ever decrement. TODO: make it a boolean then
                     */
                get outerContextDepth()
                {
                    return (this.altAndOuterContextDepth >>> 24) & 0x7F;
                }
                set outerContextDepth(outerContextDepth)
                {
                    assert(outerContextDepth >= 0);
                    // saturate at 0x7F - everything but zero/positive is only used for debug information anyway
                    outerContextDepth = Math.min(outerContextDepth, 0x7F);
                    this.altAndOuterContextDepth = ((outerContextDepth << 24) | (this.altAndOuterContextDepth & ~0x7F000000) >>> 0);
                }
                get lexerActionExecutor()
                {
                    return undefined;
                }
                get semanticContext()
                {
                    return SemanticContext_1.SemanticContext.NONE;
                }
                get hasPassedThroughNonGreedyDecision()
                {
                    return false;
                }
                clone()
                {
                    return this.transform(this.state, false);
                }
                transform(/*@NotNull*/
                state, checkNonGreedy, arg2)
                {
                    if (arg2 == null) {
                        return this.transformImpl(state, this._context, this.semanticContext, checkNonGreedy, this.lexerActionExecutor);
                    }
                    else if (arg2 instanceof PredictionContext_1.PredictionContext) {
                        return this.transformImpl(state, arg2, this.semanticContext, checkNonGreedy, this.lexerActionExecutor);
                    }
                    else if (arg2 instanceof SemanticContext_1.SemanticContext) {
                        return this.transformImpl(state, this._context, arg2, checkNonGreedy, this.lexerActionExecutor);
                    }
                    else {
                        return this.transformImpl(state, this._context, this.semanticContext, checkNonGreedy, arg2);
                    }
                }
                transformImpl(state, context, semanticContext, checkNonGreedy, lexerActionExecutor)
                {
                    let passedThroughNonGreedy = checkNonGreedy && ATNConfig.checkNonGreedyDecision(this, state);
                    if (semanticContext !== SemanticContext_1.SemanticContext.NONE) {
                        if (lexerActionExecutor != null || passedThroughNonGreedy) {
                            return new ActionSemanticContextATNConfig(lexerActionExecutor, semanticContext, state, this, context, passedThroughNonGreedy);
                        }
                        else {
                            return new SemanticContextATNConfig(semanticContext, state, this, context);
                        }
                    }
                    else if (lexerActionExecutor != null || passedThroughNonGreedy) {
                        return new ActionATNConfig(lexerActionExecutor, state, this, context, passedThroughNonGreedy);
                    }
                    else {
                        return new ATNConfig(state, this, context);
                    }
                }
                static checkNonGreedyDecision(source, target)
                {
                    return source.hasPassedThroughNonGreedyDecision
                        || target instanceof DecisionState_1.DecisionState && target.nonGreedy;
                }
                appendContext(context, contextCache)
                {
                    if (typeof context === "number") {
                        let appendedContext = this.context.appendSingleContext(context, contextCache);
                        let result = this.transform(this.state, false, appendedContext);
                        return result;
                    }
                    else {
                        let appendedContext = this.context.appendContext(context, contextCache);
                        let result = this.transform(this.state, false, appendedContext);
                        return result;
                    }
                }
                /**
                     * Determines if this `ATNConfig` fully contains another `ATNConfig`.
                     *
                     * An ATN configuration represents a position (including context) in an ATN during parsing. Since `ATNConfig` stores
                     * the context as a graph, a single `ATNConfig` instance is capable of representing many ATN configurations which
                     * are all in the same "location" but have different contexts. These `ATNConfig` instances are again merged when
                     * they are added to an `ATNConfigSet`. This method supports `ATNConfigSet.contains` by evaluating whether a
                     * particular `ATNConfig` contains all of the ATN configurations represented by another `ATNConfig`.
                     *
                     * An `ATNConfig` _a_ contains another `ATNConfig` _b_ if all of the following conditions are met:
                     *
                     * * The configurations are in the same state (`state`)
                     * * The configurations predict the same alternative (`alt`)
                     * * The semantic context of _a_ implies the semantic context of _b_ (this method performs a weaker equality check)
                     * * Joining the prediction contexts of _a_ and _b_ results in the prediction context of _a_
                     *
                     * This method implements a conservative approximation of containment. As a result, when this method returns `true`
                     * it is known that parsing from `subconfig` can only recognize a subset of the inputs which can be recognized
                     * starting at the current `ATNConfig`. However, due to the imprecise evaluation of implication for the semantic
                     * contexts, no assumptions can be made about the relationship between the configurations when this method returns
                     * `false`.
                     *
                     * @param subconfig The sub configuration.
                     * @returns `true` if this configuration contains `subconfig`; otherwise, `false`.
                     */
                contains(subconfig)
                {
                    if (this.state.stateNumber !== subconfig.state.stateNumber
                    || this.alt !== subconfig.alt
                    || !this.semanticContext.equals(subconfig.semanticContext)) {
                        return false;
                    }
                    let leftWorkList = [];
                    let rightWorkList = [];
                    leftWorkList.push(this.context);
                    rightWorkList.push(subconfig.context);
                    while (true) {
                        let left = leftWorkList.pop();
                        let right = rightWorkList.pop();
                        if (!left || !right) {
                            break;
                        }
                        if (left === right) {
                            return true;
                        }
                        if (left.size < right.size) {
                            return false;
                        }
                        if (right.isEmpty) {
                            return left.hasEmpty;
                        }
                        else {
                            for (let i = 0; i < right.size; i++) {
                                let index = left.findReturnState(right.getReturnState(i));
                                if (index < 0) {
                                    // assumes invokingStates has no duplicate entries
                                    return false;
                                }
                                leftWorkList.push(left.getParent(index));
                                rightWorkList.push(right.getParent(i));
                            }
                        }
                    }
                    return false;
                }
                get isPrecedenceFilterSuppressed()
                {
                    return (this.altAndOuterContextDepth & SUPPRESS_PRECEDENCE_FILTER) !== 0;
                }
                set isPrecedenceFilterSuppressed(value)
                {
                    if (value) {
                        this.altAndOuterContextDepth |= SUPPRESS_PRECEDENCE_FILTER;
                    }
                    else {
                        this.altAndOuterContextDepth &= ~SUPPRESS_PRECEDENCE_FILTER;
                    }
                }
                /** An ATN configuration is equal to another if both have
                     *  the same state, they predict the same alternative, and
                     *  syntactic/semantic contexts are the same.
                     */
                equals(o)
                {
                    if (this === o) {
                        return true;
                    }
                    else if (!(o instanceof ATNConfig)) {
                        return false;
                    }
                    return this.state.stateNumber === o.state.stateNumber
                        && this.alt === o.alt
                        && this.reachesIntoOuterContext === o.reachesIntoOuterContext
                        && this.context.equals(o.context)
                        && this.semanticContext.equals(o.semanticContext)
                        && this.isPrecedenceFilterSuppressed === o.isPrecedenceFilterSuppressed
                        && this.hasPassedThroughNonGreedyDecision === o.hasPassedThroughNonGreedyDecision
                        && ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(this.lexerActionExecutor, o.lexerActionExecutor);
                }
                hashCode()
                {
                    let hashCode = MurmurHash_1.MurmurHash.initialize(7);
                    hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.state.stateNumber);
                    hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.alt);
                    hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.reachesIntoOuterContext ? 1 : 0);
                    hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.context);
                    hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.semanticContext);
                    hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.hasPassedThroughNonGreedyDecision ? 1 : 0);
                    hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.lexerActionExecutor);
                    hashCode = MurmurHash_1.MurmurHash.finish(hashCode, 7);
                    return hashCode;
                }
                /**
                     * Returns a graphical representation of the current `ATNConfig` in Graphviz format. The graph can be stored to a
                     * **.dot** file and then rendered to an image using Graphviz.
                     *
                     * @returns A Graphviz graph representing the current `ATNConfig`.
                     *
                     * @see http://www.graphviz.org/
                     */
                toDotString()
                {
                    let builder = "";
                    builder += ("digraph G {\n");
                    builder += ("rankdir=LR;\n");
                    let visited = new Array2DHashMap_1.Array2DHashMap(PredictionContext_1.PredictionContext.IdentityEqualityComparator.INSTANCE);
                    let workList = [];
                    function getOrAddContext(context) {
                        let newNumber = visited.size;
                        let result = visited.putIfAbsent(context, newNumber);
                        if (result != null) {
                            // Already saw this context
                            return result;
                        }
                        workList.push(context);
                        return newNumber;
                    }
                    workList.push(this.context);
                    visited.put(this.context, 0);
                    while (true) {
                        let current = workList.pop();
                        if (!current) {
                            break;
                        }
                        for (let i = 0; i < current.size; i++) {
                            builder += ("  s") + (getOrAddContext(current));
                            builder += ("->");
                            builder += ("s") + (getOrAddContext(current.getParent(i)));
                            builder += ("[label=\"") + (current.getReturnState(i)) + ("\"];\n");
                        }
                    }
                    builder += ("}\n");
                    return builder.toString();
                }
                toString(recog, showAlt, showContext)
                {
                    // Must check showContext before showAlt to preserve original overload behavior
                    if (showContext == null) {
                        showContext = showAlt != null;
                    }
                    if (showAlt == null) {
                        showAlt = true;
                    }
                    let buf = "";
                    // if (this.state.ruleIndex >= 0) {
                    //  if (recog != null) {
                    //    buf += (recog.ruleNames[this.state.ruleIndex] + ":");
                    //  } else {
                    //    buf += (this.state.ruleIndex + ":");
                    //  }
                    // }
                    let contexts;
                    if (showContext) {
                        contexts = this.context.toStrings(recog, this.state.stateNumber);
                    }
                    else {
                        contexts = ["?"];
                    }
                    let first = true;
                    for (let contextDesc of contexts) {
                        if (first) {
                            first = false;
                        }
                        else {
                            buf += (", ");
                        }
                        buf += ("(");
                        buf += (this.state);
                        if (showAlt) {
                            buf += (",");
                            buf += (this.alt);
                        }
                        if (this.context) {
                            buf += (",");
                            buf += (contextDesc);
                        }
                        if (this.semanticContext !== SemanticContext_1.SemanticContext.NONE) {
                            buf += (",");
                            buf += (this.semanticContext);
                        }
                        if (this.reachesIntoOuterContext) {
                            buf += (",up=") + (this.outerContextDepth);
                        }
                        buf += (")");
                    }
                    return buf.toString();
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], ATNConfig.prototype, "_state", void 0);
            __decorate([
            Decorators_1.NotNull
            ], ATNConfig.prototype, "_context", void 0);
            __decorate([
            Decorators_1.NotNull
            ], ATNConfig.prototype, "state", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], ATNConfig.prototype, "context", null);
            __decorate([
            Decorators_1.NotNull
            ], ATNConfig.prototype, "semanticContext", null);
            __decorate([
            Decorators_1.Override
            ], ATNConfig.prototype, "clone", null);
            __decorate([
            __param(0, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
            ], ATNConfig.prototype, "transformImpl", null);
            __decorate([
            Decorators_1.Override
            ], ATNConfig.prototype, "equals", null);
            __decorate([
            Decorators_1.Override
            ], ATNConfig.prototype, "hashCode", null);
            __decorate([
            __param(0, Decorators_1.NotNull), __param(3, Decorators_1.NotNull)
            ], ATNConfig, "create", null);
            ATNConfig = __decorate([
            __param(0, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
            ], ATNConfig);
            exports.ATNConfig = ATNConfig;
            /**
             * This class was derived from `ATNConfig` purely as a memory optimization. It allows for the creation of an `ATNConfig`
             * with a non-default semantic context.
             *
             * See the `ATNConfig` documentation for more information about conserving memory through the use of several concrete
             * types.
             */
            let SemanticContextATNConfig = class SemanticContextATNConfig extends ATNConfig {
                constructor(semanticContext, state, altOrConfig, context)
                {
                    if (typeof altOrConfig === "number") {
                        super(state, altOrConfig, context);
                    }
                    else {
                        super(state, altOrConfig, context);
                    }
                    this._semanticContext = semanticContext;
                }
                get semanticContext()
                {
                    return this._semanticContext;
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], SemanticContextATNConfig.prototype, "_semanticContext", void 0);
            __decorate([
            Decorators_1.Override
            ], SemanticContextATNConfig.prototype, "semanticContext", null);
            SemanticContextATNConfig = __decorate([
            __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
            ], SemanticContextATNConfig);
            /**
             * This class was derived from `ATNConfig` purely as a memory optimization. It allows for the creation of an `ATNConfig`
             * with a lexer action.
             *
             * See the `ATNConfig` documentation for more information about conserving memory through the use of several concrete
             * types.
             */
            let ActionATNConfig = class ActionATNConfig extends ATNConfig {
                constructor(lexerActionExecutor, state, altOrConfig, context, passedThroughNonGreedyDecision)
                {
                    if (typeof altOrConfig === "number") {
                        super(state, altOrConfig, context);
                    }
                    else {
                        super(state, altOrConfig, context);
                        if (altOrConfig.semanticContext !== SemanticContext_1.SemanticContext.NONE) {
                            throw new Error("Not supported");
                        }
                    }
                    this._lexerActionExecutor = lexerActionExecutor;
                    this.passedThroughNonGreedyDecision = passedThroughNonGreedyDecision;
                }
                get lexerActionExecutor()
                {
                    return this._lexerActionExecutor;
                }
                get hasPassedThroughNonGreedyDecision()
                {
                    return this.passedThroughNonGreedyDecision;
                }
            }
            ;
            __decorate([
            Decorators_1.Override
            ], ActionATNConfig.prototype, "lexerActionExecutor", null);
            __decorate([
            Decorators_1.Override
            ], ActionATNConfig.prototype, "hasPassedThroughNonGreedyDecision", null);
            ActionATNConfig = __decorate([
            __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
            ], ActionATNConfig);
            /**
             * This class was derived from `SemanticContextATNConfig` purely as a memory optimization. It allows for the creation of
             * an `ATNConfig` with both a lexer action and a non-default semantic context.
             *
             * See the `ATNConfig` documentation for more information about conserving memory through the use of several concrete
             * types.
             */
            let ActionSemanticContextATNConfig = class ActionSemanticContextATNConfig extends SemanticContextATNConfig {
                constructor(lexerActionExecutor, semanticContext, state, altOrConfig, context, passedThroughNonGreedyDecision)
                {
                    if (typeof altOrConfig === "number") {
                        super(semanticContext, state, altOrConfig, context);
                    }
                    else {
                        super(semanticContext, state, altOrConfig, context);
                    }
                    this._lexerActionExecutor = lexerActionExecutor;
                    this.passedThroughNonGreedyDecision = passedThroughNonGreedyDecision;
                }
                get lexerActionExecutor()
                {
                    return this._lexerActionExecutor;
                }
                get hasPassedThroughNonGreedyDecision()
                {
                    return this.passedThroughNonGreedyDecision;
                }
            }
            ;
            __decorate([
            Decorators_1.Override
            ], ActionSemanticContextATNConfig.prototype, "lexerActionExecutor", null);
            __decorate([
            Decorators_1.Override
            ], ActionSemanticContextATNConfig.prototype, "hasPassedThroughNonGreedyDecision", null);
            ActionSemanticContextATNConfig = __decorate([
            __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
            ], ActionSemanticContextATNConfig);

        }, {
            "../Decorators": 224,
            "../misc/Array2DHashMap": 321,
            "../misc/MurmurHash": 333,
            "../misc/ObjectEqualityComparator": 334,
            "./DecisionState": 271,
            "./PredictionContext": 298,
            "./SemanticContext": 306,
            "assert": 364
        }],
        253: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:25.5488013-07:00
            const Array2DHashMap_1 = require("../misc/Array2DHashMap");
            const Array2DHashSet_1 = require("../misc/Array2DHashSet");
            const ArrayEqualityComparator_1 = require("../misc/ArrayEqualityComparator");
            const ATN_1 = require("./ATN");
            const ATNConfig_1 = require("./ATNConfig");
            const BitSet_1 = require("../misc/BitSet");
            const Decorators_1 = require("../Decorators");
            const ObjectEqualityComparator_1 = require("../misc/ObjectEqualityComparator");
            const PredictionContext_1 = require("./PredictionContext");
            const PredictionContextCache_1 = require("./PredictionContextCache");
            const SemanticContext_1 = require("./SemanticContext");
            const assert = require("assert");
            const Utils = require("../misc/Utils");
            class KeyTypeEqualityComparer {
                hashCode(key)
                {
                    return key.state ^ key.alt;
                }
                equals(a, b)
                {
                    return a.state === b.state && a.alt === b.alt;
                }
            }
            KeyTypeEqualityComparer.INSTANCE = new KeyTypeEqualityComparer();
            function NewKeyedConfigMap(map) {
                if (map) {
                    return new Array2DHashMap_1.Array2DHashMap(map);
                }
                else {
                    return new Array2DHashMap_1.Array2DHashMap(KeyTypeEqualityComparer.INSTANCE);
                }
            }
            /**
             * Represents a set of ATN configurations (see `ATNConfig`). As configurations are added to the set, they are merged
             * with other `ATNConfig` instances already in the set when possible using the graph-structured stack.
             *
             * An instance of this class represents the complete set of positions (with context) in an ATN which would be associated
             * with a single DFA state. Its internal representation is more complex than traditional state used for NFA to DFA
             * conversion due to performance requirements (both improving speed and reducing memory overhead) as well as supporting
             * features such as semantic predicates and non-greedy operators in a form to support ANTLR's prediction algorithm.
             *
             * @author Sam Harwell
             */
            class ATNConfigSet {
                constructor(set, readonly)
                {
                    this._uniqueAlt = 0;
                    // Used in parser and lexer. In lexer, it indicates we hit a pred
                    // while computing a closure operation.  Don't make a DFA state from this.
                    this._hasSemanticContext = false;
                    this._dipsIntoOuterContext = false;
                    /**
                             * When `true`, this config set represents configurations where the entire
                             * outer context has been consumed by the ATN interpreter. This prevents the
                             * {@link ParserATNSimulator#closure} from pursuing the global FOLLOW when a
                             * rule stop state is reached with an empty prediction context.
                             *
                             * Note: `outermostConfigSet` and {@link #dipsIntoOuterContext} should never
                             * be true at the same time.
                             */
                    this.outermostConfigSet = false;
                    this.cachedHashCode = -1;
                    if (!set) {
                        this.mergedConfigs = NewKeyedConfigMap();
                        this.unmerged = [];
                        this.configs = [];
                        this._uniqueAlt = ATN_1.ATN.INVALID_ALT_NUMBER;
                    }
                    else {
                        if (readonly) {
                            this.mergedConfigs = undefined;
                            this.unmerged = undefined;
                        }
                        else if (!set.isReadOnly) {
                            this.mergedConfigs = NewKeyedConfigMap(set.mergedConfigs);
                            this.unmerged = set.unmerged.slice(0);
                        }
                        else {
                            this.mergedConfigs = NewKeyedConfigMap();
                            this.unmerged = [];
                        }
                        this.configs = set.configs.slice(0);
                        this._dipsIntoOuterContext = set._dipsIntoOuterContext;
                        this._hasSemanticContext = set._hasSemanticContext;
                        this.outermostConfigSet = set.outermostConfigSet;
                        if (readonly || !set.isReadOnly) {
                            this._uniqueAlt = set._uniqueAlt;
                            this._conflictInfo = set._conflictInfo;
                        }

                    }
                }
                // if (!readonly && set.isReadOnly) -> addAll is called from clone()
                /**
                     * Get the set of all alternatives represented by configurations in this
                     * set.
                     */
                getRepresentedAlternatives()
                {
                    if (this._conflictInfo != null) {
                        return this._conflictInfo.conflictedAlts.clone();
                    }
                    let alts = new BitSet_1.BitSet();
                    for (let config of this) {
                        alts.set(config.alt);
                    }
                    return alts;
                }
                get isReadOnly()
                {
                    return this.mergedConfigs == null;
                }
                get isOutermostConfigSet()
                {
                    return this.outermostConfigSet;
                }
                set isOutermostConfigSet(outermostConfigSet)
                {
                    if (this.outermostConfigSet && !outermostConfigSet) {
                        throw new Error("IllegalStateException");
                    }
                    assert(!outermostConfigSet || !this._dipsIntoOuterContext);
                    this.outermostConfigSet = outermostConfigSet;
                }
                getStates()
                {
                    let states = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
                    for (let c of this.configs) {
                        states.add(c.state);
                    }
                    return states;
                }
                optimizeConfigs(interpreter)
                {
                    if (this.configs.length === 0) {
                        return;
                    }
                    for (let config of this.configs) {
                        config.context = interpreter.atn.getCachedContext(config.context);
                    }
                }
                clone(readonly)
                {
                    let copy = new ATNConfigSet(this, readonly);
                    if (!readonly && this.isReadOnly) {
                        copy.addAll(this.configs);
                    }
                    return copy;
                }
                get size()
                {
                    return this.configs.length;
                }
                get isEmpty()
                {
                    return this.configs.length === 0;
                }
                contains(o)
                {
                    if (!(o instanceof ATNConfig_1.ATNConfig)) {
                        return false;
                    }
                    if (this.mergedConfigs && this.unmerged) {
                        let config = o;
                        let configKey = this.getKey(config);
                        let mergedConfig = this.mergedConfigs.get(configKey);
                        if (mergedConfig != null && this.canMerge(config, configKey, mergedConfig)) {
                            return mergedConfig.contains(config);
                        }
                        for (let c of this.unmerged) {
                            if (c.contains(o)) {
                                return true;
                            }
                        }
                    }
                    else {
                        for (let c of this.configs) {
                            if (c.contains(o)) {
                                return true;
                            }
                        }
                    }
                    return false;
                }
                *[Symbol.iterator]()
                {
                    yield *this.configs;
                }
                toArray()
                {
                    return this.configs;
                }
                add(e, contextCache)
                {
                    this.ensureWritable();
                    if (!this.mergedConfigs || !this.unmerged) {
                        throw new Error("Covered by ensureWritable but duplicated here for strict null check limitation");
                    }
                    assert(!this.outermostConfigSet || !e.reachesIntoOuterContext);
                    if (contextCache == null) {
                        contextCache = PredictionContextCache_1.PredictionContextCache.UNCACHED;
                    }
                    let addKey;
                    let key = this.getKey(e);
                    let mergedConfig = this.mergedConfigs.get(key);
                    addKey = (mergedConfig == null);
                    if (mergedConfig != null && this.canMerge(e, key, mergedConfig)) {
                        mergedConfig.outerContextDepth = Math.max(mergedConfig.outerContextDepth, e.outerContextDepth);
                        if (e.isPrecedenceFilterSuppressed) {
                            mergedConfig.isPrecedenceFilterSuppressed = true;
                        }
                        let joined = PredictionContext_1.PredictionContext.join(mergedConfig.context, e.context, contextCache);
                        this.updatePropertiesForMergedConfig(e);
                        if (mergedConfig.context === joined) {
                            return false;
                        }
                        mergedConfig.context = joined;
                        return true;
                    }
                    for (let i = 0; i < this.unmerged.length; i++) {
                        let unmergedConfig = this.unmerged[i];
                        if (this.canMerge(e, key, unmergedConfig)) {
                            unmergedConfig.outerContextDepth = Math.max(unmergedConfig.outerContextDepth, e.outerContextDepth);
                            if (e.isPrecedenceFilterSuppressed) {
                                unmergedConfig.isPrecedenceFilterSuppressed = true;
                            }
                            let joined = PredictionContext_1.PredictionContext.join(unmergedConfig.context, e.context, contextCache);
                            this.updatePropertiesForMergedConfig(e);
                            if (unmergedConfig.context === joined) {
                                return false;
                            }
                            unmergedConfig.context = joined;
                            if (addKey) {
                                this.mergedConfigs.put(key, unmergedConfig);
                                this.unmerged.splice(i, 1);
                            }
                            return true;
                        }
                    }
                    this.configs.push(e);
                    if (addKey) {
                        this.mergedConfigs.put(key, e);
                    }
                    else {
                        this.unmerged.push(e);
                    }
                    this.updatePropertiesForAddedConfig(e);
                    return true;
                }
                updatePropertiesForMergedConfig(config)
                {
                    // merged configs can't change the alt or semantic context
                    this._dipsIntoOuterContext = this._dipsIntoOuterContext || config.reachesIntoOuterContext;
                    assert(!this.outermostConfigSet || !this._dipsIntoOuterContext);
                }
                updatePropertiesForAddedConfig(config)
                {
                    if (this.configs.length === 1) {
                        this._uniqueAlt = config.alt;
                    }
                    else if (this._uniqueAlt !== config.alt) {
                        this._uniqueAlt = ATN_1.ATN.INVALID_ALT_NUMBER;
                    }
                    this._hasSemanticContext = this._hasSemanticContext || !SemanticContext_1.SemanticContext.NONE.equals(config.semanticContext);
                    this._dipsIntoOuterContext = this._dipsIntoOuterContext || config.reachesIntoOuterContext;
                    assert(!this.outermostConfigSet || !this._dipsIntoOuterContext);
                }
                canMerge(left, leftKey, right)
                {
                    if (left.state.stateNumber !== right.state.stateNumber) {
                        return false;
                    }
                    if (leftKey.alt !== right.alt) {
                        return false;
                    }
                    return left.semanticContext.equals(right.semanticContext);
                }
                getKey(e)
                {
                    return {
                        state: e.state.stateNumber,
                        alt: e.alt
                    };
                }
                containsAll(c)
                {
                    for (let o of c) {
                        if (!(o instanceof ATNConfig_1.ATNConfig)) {
                            return false;
                        }
                        if (!this.contains(o)) {
                            return false;
                        }
                    }
                    return true;
                }
                addAll(c, contextCache)
                {
                    this.ensureWritable();
                    let changed = false;
                    for (let group of c) {
                        if (this.add(group, contextCache)) {
                            changed = true;
                        }
                    }
                    return changed;
                }
                clear()
                {
                    this.ensureWritable();
                    if (!this.mergedConfigs || !this.unmerged) {
                        throw new Error("Covered by ensureWritable but duplicated here for strict null check limitation");
                    }
                    this.mergedConfigs.clear();
                    this.unmerged.length = 0;
                    this.configs.length = 0;
                    this._dipsIntoOuterContext = false;
                    this._hasSemanticContext = false;
                    this._uniqueAlt = ATN_1.ATN.INVALID_ALT_NUMBER;
                    this._conflictInfo = undefined;
                }
                equals(obj)
                {
                    if (this === obj) {
                        return true;
                    }
                    if (!(obj instanceof ATNConfigSet)) {
                        return false;
                    }
                    return this.outermostConfigSet === obj.outermostConfigSet
                        && Utils.equals(this._conflictInfo, obj._conflictInfo)
                        && ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this.configs, obj.configs);
                }
                hashCode()
                {
                    if (this.isReadOnly && this.cachedHashCode !== -1) {
                        return this.cachedHashCode;
                    }
                    let hashCode = 1;
                    hashCode = 5 * hashCode ^ (this.outermostConfigSet ? 1 : 0);
                    hashCode = 5 * hashCode ^ ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.hashCode(this.configs);
                    if (this.isReadOnly) {
                        this.cachedHashCode = hashCode;
                    }
                    return hashCode;
                }
                toString(showContext)
                {
                    if (showContext == null) {
                        showContext = false;
                    }
                    let buf = "";
                    let sortedConfigs = this.configs.slice(0);
                    sortedConfigs.sort((o1, o2) => {
                        if (o1.alt !== o2.alt) {
                            return o1.alt - o2.alt;
                        }
                        else if (o1.state.stateNumber !== o2.state.stateNumber) {
                            return o1.state.stateNumber - o2.state.stateNumber;
                        }
                        else {
                            return o1.semanticContext.toString().localeCompare(o2.semanticContext.toString());
                        }
                    });
                    buf += ("[");
                    for (let i = 0; i < sortedConfigs.length; i++) {
                        if (i > 0) {
                            buf += (", ");
                        }
                        buf += (sortedConfigs[i].toString(undefined, true, showContext));
                    }
                    buf += ("]");
                    if (this._hasSemanticContext) {
                        buf += (",hasSemanticContext=") + (this._hasSemanticContext);
                    }
                    if (this._uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                        buf += (",uniqueAlt=") + (this._uniqueAlt);
                    }
                    if (this._conflictInfo != null) {
                        buf += (",conflictingAlts=") + (this._conflictInfo.conflictedAlts);
                        if (!this._conflictInfo.isExact) {
                            buf += ("*");
                        }
                    }
                    if (this._dipsIntoOuterContext) {
                        buf += (",dipsIntoOuterContext");
                    }
                    return buf.toString();
                }
                get uniqueAlt()
                {
                    return this._uniqueAlt;
                }
                get hasSemanticContext()
                {
                    return this._hasSemanticContext;
                }
                set hasSemanticContext(value)
                {
                    this.ensureWritable();
                    this._hasSemanticContext = value;
                }
                get conflictInfo()
                {
                    return this._conflictInfo;
                }
                set conflictInfo(conflictInfo)
                {
                    this.ensureWritable();
                    this._conflictInfo = conflictInfo;
                }
                get conflictingAlts()
                {
                    if (this._conflictInfo == null) {
                        return undefined;
                    }
                    return this._conflictInfo.conflictedAlts;
                }
                get isExactConflict()
                {
                    if (this._conflictInfo == null) {
                        return false;
                    }
                    return this._conflictInfo.isExact;
                }
                get dipsIntoOuterContext()
                {
                    return this._dipsIntoOuterContext;
                }
                get(index)
                {
                    return this.configs[index];
                }
                ensureWritable()
                {
                    if (this.isReadOnly) {
                        throw new Error("This ATNConfigSet is read only.");
                    }
                }
            }
            __decorate([
            Decorators_1.NotNull
            ], ATNConfigSet.prototype, "getRepresentedAlternatives", null);
            __decorate([
            Decorators_1.Override
            ], ATNConfigSet.prototype, "size", null);
            __decorate([
            Decorators_1.Override
            ], ATNConfigSet.prototype, "isEmpty", null);
            __decorate([
            Decorators_1.Override
            ], ATNConfigSet.prototype, "contains", null);
            __decorate([
            Decorators_1.Override
            ], ATNConfigSet.prototype, Symbol.iterator, null);
            __decorate([
            Decorators_1.Override
            ], ATNConfigSet.prototype, "toArray", null);
            __decorate([
            Decorators_1.Override
            ], ATNConfigSet.prototype, "containsAll", null);
            __decorate([
            Decorators_1.Override
            ], ATNConfigSet.prototype, "clear", null);
            __decorate([
            Decorators_1.Override
            ], ATNConfigSet.prototype, "equals", null);
            __decorate([
            Decorators_1.Override
            ], ATNConfigSet.prototype, "hashCode", null);
            exports.ATNConfigSet = ATNConfigSet;

        }, {
            "../Decorators": 224,
            "../misc/Array2DHashMap": 321,
            "../misc/Array2DHashSet": 322,
            "../misc/ArrayEqualityComparator": 323,
            "../misc/BitSet": 325,
            "../misc/ObjectEqualityComparator": 334,
            "../misc/Utils": 337,
            "./ATN": 251,
            "./ATNConfig": 252,
            "./PredictionContext": 298,
            "./PredictionContextCache": 299,
            "./SemanticContext": 306,
            "assert": 364
        }],
        254: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:25.8187912-07:00
            const Decorators_1 = require("../Decorators");
            /**
             *
             * @author Sam Harwell
             */
            class ATNDeserializationOptions {
                constructor(options)
                {
                    this.readOnly = false;
                    if (options) {
                        this.verifyATN = options.verifyATN;
                        this.generateRuleBypassTransitions = options.generateRuleBypassTransitions;
                        this.optimize = options.optimize;
                    }
                    else {
                        this.verifyATN = true;
                        this.generateRuleBypassTransitions = false;
                        this.optimize = true;
                    }
                }
                static get defaultOptions()
                {
                    if (ATNDeserializationOptions._defaultOptions == null) {
                        ATNDeserializationOptions._defaultOptions = new ATNDeserializationOptions();
                        ATNDeserializationOptions._defaultOptions.makeReadOnly();
                    }
                    return ATNDeserializationOptions._defaultOptions;
                }
                get isReadOnly()
                {
                    return this.readOnly;
                }
                makeReadOnly()
                {
                    this.readOnly = true;
                }
                get isVerifyATN()
                {
                    return this.verifyATN;
                }
                set isVerifyATN(verifyATN)
                {
                    this.throwIfReadOnly();
                    this.verifyATN = verifyATN;
                }
                get isGenerateRuleBypassTransitions()
                {
                    return this.generateRuleBypassTransitions;
                }
                set isGenerateRuleBypassTransitions(generateRuleBypassTransitions)
                {
                    this.throwIfReadOnly();
                    this.generateRuleBypassTransitions = generateRuleBypassTransitions;
                }
                get isOptimize()
                {
                    return this.optimize;
                }
                set isOptimize(optimize)
                {
                    this.throwIfReadOnly();
                    this.optimize = optimize;
                }
                throwIfReadOnly()
                {
                    if (this.isReadOnly) {
                        throw new Error("The object is read only.");
                    }
                }
            }
            __decorate([
            Decorators_1.NotNull
            ], ATNDeserializationOptions, "defaultOptions", null);
            exports.ATNDeserializationOptions = ATNDeserializationOptions;

        }, {
            "../Decorators": 224
        }],
        255: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:25.9683447-07:00
            const ActionTransition_1 = require("./ActionTransition");
            const Array2DHashSet_1 = require("../misc/Array2DHashSet");
            const ATN_1 = require("./ATN");
            const ATNDeserializationOptions_1 = require("./ATNDeserializationOptions");
            const ATNStateType_1 = require("./ATNStateType");
            const AtomTransition_1 = require("./AtomTransition");
            const BasicBlockStartState_1 = require("./BasicBlockStartState");
            const BasicState_1 = require("./BasicState");
            const BitSet_1 = require("../misc/BitSet");
            const BlockEndState_1 = require("./BlockEndState");
            const BlockStartState_1 = require("./BlockStartState");
            const DecisionState_1 = require("./DecisionState");
            const DFA_1 = require("../dfa/DFA");
            const EpsilonTransition_1 = require("./EpsilonTransition");
            const IntervalSet_1 = require("../misc/IntervalSet");
            const InvalidState_1 = require("./InvalidState");
            const LexerChannelAction_1 = require("./LexerChannelAction");
            const LexerCustomAction_1 = require("./LexerCustomAction");
            const LexerModeAction_1 = require("./LexerModeAction");
            const LexerMoreAction_1 = require("./LexerMoreAction");
            const LexerPopModeAction_1 = require("./LexerPopModeAction");
            const LexerPushModeAction_1 = require("./LexerPushModeAction");
            const LexerSkipAction_1 = require("./LexerSkipAction");
            const LexerTypeAction_1 = require("./LexerTypeAction");
            const LoopEndState_1 = require("./LoopEndState");
            const Decorators_1 = require("../Decorators");
            const NotSetTransition_1 = require("./NotSetTransition");
            const ParserATNSimulator_1 = require("./ParserATNSimulator");
            const PlusBlockStartState_1 = require("./PlusBlockStartState");
            const PlusLoopbackState_1 = require("./PlusLoopbackState");
            const PrecedencePredicateTransition_1 = require("./PrecedencePredicateTransition");
            const PredicateTransition_1 = require("./PredicateTransition");
            const RangeTransition_1 = require("./RangeTransition");
            const RuleStartState_1 = require("./RuleStartState");
            const RuleStopState_1 = require("./RuleStopState");
            const RuleTransition_1 = require("./RuleTransition");
            const SetTransition_1 = require("./SetTransition");
            const StarBlockStartState_1 = require("./StarBlockStartState");
            const StarLoopbackState_1 = require("./StarLoopbackState");
            const StarLoopEntryState_1 = require("./StarLoopEntryState");
            const Token_1 = require("../Token");
            const TokensStartState_1 = require("./TokensStartState");
            const UUID_1 = require("../misc/UUID");
            const WildcardTransition_1 = require("./WildcardTransition");
            var UnicodeDeserializingMode;
            (function(UnicodeDeserializingMode) {
                UnicodeDeserializingMode[UnicodeDeserializingMode["UNICODE_BMP"] = 0] = "UNICODE_BMP";
                UnicodeDeserializingMode[UnicodeDeserializingMode["UNICODE_SMP"] = 1] = "UNICODE_SMP";
            })(UnicodeDeserializingMode || (UnicodeDeserializingMode = {}));
            /**
             *
             * @author Sam Harwell
             */
            class ATNDeserializer {
                constructor(deserializationOptions)
                {
                    if (deserializationOptions == null) {
                        deserializationOptions = ATNDeserializationOptions_1.ATNDeserializationOptions.defaultOptions;
                    }
                    this.deserializationOptions = deserializationOptions;
                }
                static get SERIALIZED_VERSION()
                {
                    /* This value should never change. Updates following this version are
                             * reflected as change in the unique ID SERIALIZED_UUID.
                             */
                    return 3;
                }
                /**
                     * Determines if a particular serialized representation of an ATN supports
                     * a particular feature, identified by the {@link UUID} used for serializing
                     * the ATN at the time the feature was first introduced.
                     *
                     * @param feature The {@link UUID} marking the first time the feature was
                     * supported in the serialized ATN.
                     * @param actualUuid The {@link UUID} of the actual serialized ATN which is
                     * currently being deserialized.
                     * @returns `true` if the `actualUuid` value represents a
                     * serialized ATN at or after the feature identified by `feature` was
                     * introduced; otherwise, `false`.
                     */
                static isFeatureSupported(feature, actualUuid)
                {
                    let featureIndex = ATNDeserializer.SUPPORTED_UUIDS.findIndex((e) => e.equals(feature));
                    if (featureIndex < 0) {
                        return false;
                    }
                    return ATNDeserializer.SUPPORTED_UUIDS.findIndex((e) => e.equals(actualUuid)) >= featureIndex;
                }
                static getUnicodeDeserializer(mode)
                {
                    if (mode === 0 /* UNICODE_BMP */
                    ) {
                        return {
                            readUnicode: (data, p) => {
                                return ATNDeserializer.toInt(data[p]);
                            },
                            size: 1,
                        };
                    }
                    else {
                        return {
                            readUnicode: (data, p) => {
                                return ATNDeserializer.toInt32(data, p);
                            },
                            size: 2,
                        };
                    }
                }
                deserialize(data)
                {
                    data = data.slice(0);
                    // Each Uint16 value in data is shifted by +2 at the entry to this method. This is an encoding optimization
                    // targeting the serialized values 0 and -1 (serialized to 0xFFFF), each of which are very common in the
                    // serialized form of the ATN. In the modified UTF-8 that Java uses for compiled string literals, these two
                    // character values have multi-byte forms. By shifting each value by +2, they become characters 2 and 1 prior to
                    // writing the string, each of which have single-byte representations. Since the shift occurs in the tool during
                    // ATN serialization, each target is responsible for adjusting the values during deserialization.
                    //
                    // As a special case, note that the first element of data is not adjusted because it contains the major version
                    // number of the serialized ATN, which was fixed at 3 at the time the value shifting was implemented.
                    for (let i = 1; i < data.length; i++) {
                        data[i] = (data[i] - 2) & 0xFFFF;
                    }
                    let p = 0;
                    let version = ATNDeserializer.toInt(data[p++]);
                    if (version !== ATNDeserializer.SERIALIZED_VERSION) {
                        let reason = `Could not deserialize ATN with version ${version} (expected ${ATNDeserializer.SERIALIZED_VERSION}).`;
                        throw new Error(reason);
                    }
                    let uuid = ATNDeserializer.toUUID(data, p);
                    p += 8;
                    if (ATNDeserializer.SUPPORTED_UUIDS.findIndex((e) => e.equals(uuid)) < 0) {
                        let reason = `Could not deserialize ATN with UUID ${uuid} (expected ${ATNDeserializer.SERIALIZED_UUID} or a legacy UUID).`;
                        throw new Error(reason);
                    }
                    let supportsLexerActions = ATNDeserializer.isFeatureSupported(ATNDeserializer.ADDED_LEXER_ACTIONS, uuid);
                    let grammarType = ATNDeserializer.toInt(data[p++]);
                    let maxTokenType = ATNDeserializer.toInt(data[p++]);
                    let atn = new ATN_1.ATN(grammarType, maxTokenType);
                    //
                    // STATES
                    //
                    let loopBackStateNumbers = [];
                    let endStateNumbers = [];
                    let nstates = ATNDeserializer.toInt(data[p++]);
                    for (let i = 0; i < nstates; i++) {
                        let stype = ATNDeserializer.toInt(data[p++]);
                        // ignore bad type of states
                        if (stype === ATNStateType_1.ATNStateType.INVALID_TYPE) {
                            atn.addState(new InvalidState_1.InvalidState());
                            continue;
                        }
                        let ruleIndex = ATNDeserializer.toInt(data[p++]);
                        if (ruleIndex === 0xFFFF) {
                            ruleIndex = -1;
                        }
                        let s = this.stateFactory(stype, ruleIndex);
                        if (stype === ATNStateType_1.ATNStateType.LOOP_END) {
                            // special case
                            let loopBackStateNumber = ATNDeserializer.toInt(data[p++]);
                            loopBackStateNumbers.push([s, loopBackStateNumber]);
                        }
                        else if (s instanceof BlockStartState_1.BlockStartState) {
                            let endStateNumber = ATNDeserializer.toInt(data[p++]);
                            endStateNumbers.push([s, endStateNumber]);
                        }
                        atn.addState(s);
                    }
                    // delay the assignment of loop back and end states until we know all the state instances have been initialized
                    for (let pair of loopBackStateNumbers) {
                        pair[0].loopBackState = atn.states[pair[1]];
                    }
                    for (let pair of endStateNumbers) {
                        pair[0].endState = atn.states[pair[1]];
                    }
                    let numNonGreedyStates = ATNDeserializer.toInt(data[p++]);
                    for (let i = 0; i < numNonGreedyStates; i++) {
                        let stateNumber = ATNDeserializer.toInt(data[p++]);
                        atn.states[stateNumber].nonGreedy = true;
                    }
                    let numSllDecisions = ATNDeserializer.toInt(data[p++]);
                    for (let i = 0; i < numSllDecisions; i++) {
                        let stateNumber = ATNDeserializer.toInt(data[p++]);
                        atn.states[stateNumber].sll = true;
                    }
                    let numPrecedenceStates = ATNDeserializer.toInt(data[p++]);
                    for (let i = 0; i < numPrecedenceStates; i++) {
                        let stateNumber = ATNDeserializer.toInt(data[p++]);
                        atn.states[stateNumber].isPrecedenceRule = true;
                    }
                    //
                    // RULES
                    //
                    let nrules = ATNDeserializer.toInt(data[p++]);
                    if (atn.grammarType === 0 /* LEXER */
                    ) {
                        atn.ruleToTokenType = new Int32Array(nrules);
                    }
                    atn.ruleToStartState = new Array(nrules);
                    for (let i = 0; i < nrules; i++) {
                        let s = ATNDeserializer.toInt(data[p++]);
                        let startState = atn.states[s];
                        startState.leftFactored = ATNDeserializer.toInt(data[p++]) !== 0;
                        atn.ruleToStartState[i] = startState;
                        if (atn.grammarType === 0 /* LEXER */
                        ) {
                            let tokenType = ATNDeserializer.toInt(data[p++]);
                            if (tokenType === 0xFFFF) {
                                tokenType = Token_1.Token.EOF;
                            }
                            atn.ruleToTokenType[i] = tokenType;
                            if (!ATNDeserializer.isFeatureSupported(ATNDeserializer.ADDED_LEXER_ACTIONS, uuid)) {
                                // this piece of unused metadata was serialized prior to the
                                // addition of LexerAction
                                let actionIndexIgnored = ATNDeserializer.toInt(data[p++]);
                                if (actionIndexIgnored === 0xFFFF) {
                                    actionIndexIgnored = -1;
                                }
                            }
                        }
                    }
                    atn.ruleToStopState = new Array(nrules);
                    for (let state of atn.states) {
                        if (!(state instanceof RuleStopState_1.RuleStopState)) {
                            continue;
                        }
                        atn.ruleToStopState[state.ruleIndex] = state;
                        atn.ruleToStartState[state.ruleIndex].stopState = state;
                    }
                    //
                    // MODES
                    //
                    let nmodes = ATNDeserializer.toInt(data[p++]);
                    for (let i = 0; i < nmodes; i++) {
                        let s = ATNDeserializer.toInt(data[p++]);
                        atn.modeToStartState.push(atn.states[s]);
                    }
                    atn.modeToDFA = new Array(nmodes);
                    for (let i = 0; i < nmodes; i++) {
                        atn.modeToDFA[i] = new DFA_1.DFA(atn.modeToStartState[i]);
                    }
                    //
                    // SETS
                    //
                    let sets = [];
                    // First, read all sets with 16-bit Unicode code points <= U+FFFF.
                    p = this.deserializeSets(data, p, sets, ATNDeserializer.getUnicodeDeserializer(0 /* UNICODE_BMP */
                    ));
                    // Next, if the ATN was serialized with the Unicode SMP feature,
                    // deserialize sets with 32-bit arguments <= U+10FFFF.
                    if (ATNDeserializer.isFeatureSupported(ATNDeserializer.ADDED_UNICODE_SMP, uuid)) {
                        p = this.deserializeSets(data, p, sets, ATNDeserializer.getUnicodeDeserializer(1 /* UNICODE_SMP */
                        ));
                    }
                    //
                    // EDGES
                    //
                    let nedges = ATNDeserializer.toInt(data[p++]);
                    for (let i = 0; i < nedges; i++) {
                        let src = ATNDeserializer.toInt(data[p]);
                        let trg = ATNDeserializer.toInt(data[p + 1]);
                        let ttype = ATNDeserializer.toInt(data[p + 2]);
                        let arg1 = ATNDeserializer.toInt(data[p + 3]);
                        let arg2 = ATNDeserializer.toInt(data[p + 4]);
                        let arg3 = ATNDeserializer.toInt(data[p + 5]);
                        let trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
                        // console.log(`EDGE ${trans.constructor.name} ${src}->${trg} ${Transition.serializationNames[ttype]} ${arg1},${arg2},${arg3}`);
                        let srcState = atn.states[src];
                        srcState.addTransition(trans);
                        p += 6;
                    }
                    let returnTransitionsSet = new Array2DHashSet_1.Array2DHashSet({
                        hashCode: (o) => o.stopState ^ o.returnState ^ o.outermostPrecedenceReturn,
                        equals: (a, b) => {
                            return a.stopState === b.stopState
                                && a.returnState === b.returnState
                                && a.outermostPrecedenceReturn === b.outermostPrecedenceReturn;
                        },
                    });
                    let returnTransitions = [];
                    for (let state of atn.states) {
                        let returningToLeftFactored = state.ruleIndex >= 0 && atn.ruleToStartState[state.ruleIndex].leftFactored;
                        for (let i = 0; i < state.numberOfTransitions; i++) {
                            let t = state.transition(i);
                            if (!(t instanceof RuleTransition_1.RuleTransition)) {
                                continue;
                            }
                            let ruleTransition = t;
                            let returningFromLeftFactored = atn.ruleToStartState[ruleTransition.target.ruleIndex].leftFactored;
                            if (!returningFromLeftFactored && returningToLeftFactored) {
                                continue;
                            }
                            let outermostPrecedenceReturn = -1;
                            if (atn.ruleToStartState[ruleTransition.target.ruleIndex].isPrecedenceRule) {
                                if (ruleTransition.precedence === 0) {
                                    outermostPrecedenceReturn = ruleTransition.target.ruleIndex;
                                }
                            }
                            let current = {
                                stopState: ruleTransition.target.ruleIndex,
                                returnState: ruleTransition.followState.stateNumber,
                                outermostPrecedenceReturn
                            };
                            if (returnTransitionsSet.add(current)) {
                                returnTransitions.push(current);
                            }
                        }
                    }
                    // Add all elements from returnTransitions to the ATN
                    for (let returnTransition of returnTransitions) {
                        let transition = new EpsilonTransition_1.EpsilonTransition(atn.states[returnTransition.returnState], returnTransition.outermostPrecedenceReturn);
                        atn.ruleToStopState[returnTransition.stopState].addTransition(transition);
                    }
                    for (let state of atn.states) {
                        if (state instanceof BlockStartState_1.BlockStartState) {
                            // we need to know the end state to set its start state
                            if (state.endState == null) {
                                throw new Error("IllegalStateException");
                            }
                            // block end states can only be associated to a single block start state
                            if (state.endState.startState != null) {
                                throw new Error("IllegalStateException");
                            }
                            state.endState.startState = state;
                        }
                        if (state instanceof PlusLoopbackState_1.PlusLoopbackState) {
                            let loopbackState = state;
                            for (let i = 0; i < loopbackState.numberOfTransitions; i++) {
                                let target = loopbackState.transition(i).target;
                                if (target instanceof PlusBlockStartState_1.PlusBlockStartState) {
                                    target.loopBackState = loopbackState;
                                }
                            }
                        }
                        else if (state instanceof StarLoopbackState_1.StarLoopbackState) {
                            let loopbackState = state;
                            for (let i = 0; i < loopbackState.numberOfTransitions; i++) {
                                let target = loopbackState.transition(i).target;
                                if (target instanceof StarLoopEntryState_1.StarLoopEntryState) {
                                    target.loopBackState = loopbackState;
                                }
                            }
                        }
                    }
                    //
                    // DECISIONS
                    //
                    let ndecisions = ATNDeserializer.toInt(data[p++]);
                    for (let i = 1; i <= ndecisions; i++) {
                        let s = ATNDeserializer.toInt(data[p++]);
                        let decState = atn.states[s];
                        atn.decisionToState.push(decState);
                        decState.decision = i - 1;
                    }
                    //
                    // LEXER ACTIONS
                    //
                    if (atn.grammarType === 0 /* LEXER */
                    ) {
                        if (supportsLexerActions) {
                            atn.lexerActions = new Array(ATNDeserializer.toInt(data[p++]));
                            for (let i = 0; i < atn.lexerActions.length; i++) {
                                let actionType = ATNDeserializer.toInt(data[p++]);
                                let data1 = ATNDeserializer.toInt(data[p++]);
                                if (data1 === 0xFFFF) {
                                    data1 = -1;
                                }
                                let data2 = ATNDeserializer.toInt(data[p++]);
                                if (data2 === 0xFFFF) {
                                    data2 = -1;
                                }
                                let lexerAction = this.lexerActionFactory(actionType, data1, data2);
                                atn.lexerActions[i] = lexerAction;
                            }
                        }
                        else {
                            // for compatibility with older serialized ATNs, convert the old
                            // serialized action index for action transitions to the new
                            // form, which is the index of a LexerCustomAction
                            let legacyLexerActions = [];
                            for (let state of atn.states) {
                                for (let i = 0; i < state.numberOfTransitions; i++) {
                                    let transition = state.transition(i);
                                    if (!(transition instanceof ActionTransition_1.ActionTransition)) {
                                        continue;
                                    }
                                    let ruleIndex = transition.ruleIndex;
                                    let actionIndex = transition.actionIndex;
                                    let lexerAction = new LexerCustomAction_1.LexerCustomAction(ruleIndex, actionIndex);
                                    state.setTransition(i, new ActionTransition_1.ActionTransition(transition.target, ruleIndex, legacyLexerActions.length, false));
                                    legacyLexerActions.push(lexerAction);
                                }
                            }
                            atn.lexerActions = legacyLexerActions;
                        }
                    }
                    this.markPrecedenceDecisions(atn);
                    atn.decisionToDFA = new Array(ndecisions);
                    for (let i = 0; i < ndecisions; i++) {
                        atn.decisionToDFA[i] = new DFA_1.DFA(atn.decisionToState[i], i);
                    }
                    if (this.deserializationOptions.isVerifyATN) {
                        this.verifyATN(atn);
                    }
                    if (this.deserializationOptions.isGenerateRuleBypassTransitions && atn.grammarType === 1 /* PARSER */
                    ) {
                        atn.ruleToTokenType = new Int32Array(atn.ruleToStartState.length);
                        for (let i = 0; i < atn.ruleToStartState.length; i++) {
                            atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
                        }
                        for (let i = 0; i < atn.ruleToStartState.length; i++) {
                            let bypassStart = new BasicBlockStartState_1.BasicBlockStartState();
                            bypassStart.ruleIndex = i;
                            atn.addState(bypassStart);
                            let bypassStop = new BlockEndState_1.BlockEndState();
                            bypassStop.ruleIndex = i;
                            atn.addState(bypassStop);
                            bypassStart.endState = bypassStop;
                            atn.defineDecisionState(bypassStart);
                            bypassStop.startState = bypassStart;
                            let endState;
                            let excludeTransition;
                            if (atn.ruleToStartState[i].isPrecedenceRule) {
                                // wrap from the beginning of the rule to the StarLoopEntryState
                                endState = undefined;
                                for (let state of atn.states) {
                                    if (state.ruleIndex !== i) {
                                        continue;
                                    }
                                    if (!(state instanceof StarLoopEntryState_1.StarLoopEntryState)) {
                                        continue;
                                    }
                                    let maybeLoopEndState = state.transition(state.numberOfTransitions - 1).target;
                                    if (!(maybeLoopEndState instanceof LoopEndState_1.LoopEndState)) {
                                        continue;
                                    }
                                    if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transition(0).target instanceof RuleStopState_1.RuleStopState) {
                                        endState = state;
                                        break;
                                    }
                                }
                                if (!endState) {
                                    throw new Error("Couldn't identify final state of the precedence rule prefix section.");
                                }
                                excludeTransition = endState.loopBackState.transition(0);
                            }
                            else {
                                endState = atn.ruleToStopState[i];
                            }
                            // all non-excluded transitions that currently target end state need to target blockEnd instead
                            for (let state of atn.states) {
                                for (let i = 0; i < state.numberOfTransitions; i++) {
                                    let transition = state.transition(i);
                                    if (transition === excludeTransition) {
                                        continue;
                                    }
                                    if (transition.target === endState) {
                                        transition.target = bypassStop;
                                    }
                                }
                            }
                            // all transitions leaving the rule start state need to leave blockStart instead
                            while (atn.ruleToStartState[i].numberOfTransitions > 0) {
                                let transition = atn.ruleToStartState[i].removeTransition(atn.ruleToStartState[i].numberOfTransitions - 1);
                                bypassStart.addTransition(transition);
                            }
                            // link the new states
                            atn.ruleToStartState[i].addTransition(new EpsilonTransition_1.EpsilonTransition(bypassStart));
                            bypassStop.addTransition(new EpsilonTransition_1.EpsilonTransition(endState));
                            let matchState = new BasicState_1.BasicState();
                            atn.addState(matchState);
                            matchState.addTransition(new AtomTransition_1.AtomTransition(bypassStop, atn.ruleToTokenType[i]));
                            bypassStart.addTransition(new EpsilonTransition_1.EpsilonTransition(matchState));
                        }
                        if (this.deserializationOptions.isVerifyATN) {
                            // reverify after modification
                            this.verifyATN(atn);
                        }
                    }
                    if (this.deserializationOptions.isOptimize) {
                        while (true) {
                            let optimizationCount = 0;
                            optimizationCount += ATNDeserializer.inlineSetRules(atn);
                            optimizationCount += ATNDeserializer.combineChainedEpsilons(atn);
                            let preserveOrder = atn.grammarType === 0 /* LEXER */
                            ;
                            optimizationCount += ATNDeserializer.optimizeSets(atn, preserveOrder);
                            if (optimizationCount === 0) {
                                break;
                            }
                        }
                        if (this.deserializationOptions.isVerifyATN) {
                            // reverify after modification
                            this.verifyATN(atn);
                        }
                    }
                    ATNDeserializer.identifyTailCalls(atn);
                    return atn;
                }
                deserializeSets(data, p, sets, unicodeDeserializer)
                {
                    let nsets = ATNDeserializer.toInt(data[p++]);
                    for (let i = 0; i < nsets; i++) {
                        let nintervals = ATNDeserializer.toInt(data[p]);
                        p++;
                        let set = new IntervalSet_1.IntervalSet();
                        sets.push(set);
                        let containsEof = ATNDeserializer.toInt(data[p++]) !== 0;
                        if (containsEof) {
                            set.add(-1);
                        }
                        for (let j = 0; j < nintervals; j++) {
                            let a = unicodeDeserializer.readUnicode(data, p);
                            p += unicodeDeserializer.size;
                            let b = unicodeDeserializer.readUnicode(data, p);
                            p += unicodeDeserializer.size;
                            set.add(a, b);
                        }
                    }
                    return p;
                }
                /**
                     * Analyze the {@link StarLoopEntryState} states in the specified ATN to set
                     * the {@link StarLoopEntryState#precedenceRuleDecision} field to the
                     * correct value.
                     *
                     * @param atn The ATN.
                     */
                markPrecedenceDecisions(atn)
                {
                    // Map rule index -> precedence decision for that rule
                    let rulePrecedenceDecisions = new Map();
                    for (let state of atn.states) {
                        if (!(state instanceof StarLoopEntryState_1.StarLoopEntryState)) {
                            continue;
                        }
                        /* We analyze the ATN to determine if this ATN decision state is the
                                     * decision for the closure block that determines whether a
                                     * precedence rule should continue or complete.
                                     */
                        if (atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
                            let maybeLoopEndState = state.transition(state.numberOfTransitions - 1).target;
                            if (maybeLoopEndState instanceof LoopEndState_1.LoopEndState) {
                                if (maybeLoopEndState.epsilonOnlyTransitions && maybeLoopEndState.transition(0).target instanceof RuleStopState_1.RuleStopState) {
                                    rulePrecedenceDecisions.set(state.ruleIndex, state);
                                    state.precedenceRuleDecision = true;
                                    state.precedenceLoopbackStates = new BitSet_1.BitSet(atn.states.length);
                                }
                            }
                        }
                    }
                    // After marking precedence decisions, we go back through and fill in
                    // StarLoopEntryState.precedenceLoopbackStates.
                    for (let precedenceDecision of rulePrecedenceDecisions) {
                        for (let transition of atn.ruleToStopState[precedenceDecision[0]].getTransitions()) {
                            if (transition.serializationType !== 1 /* EPSILON */
                            ) {
                                continue;
                            }
                            let epsilonTransition = transition;
                            if (epsilonTransition.outermostPrecedenceReturn !== -1) {
                                continue;
                            }
                            precedenceDecision[1].precedenceLoopbackStates.set(transition.target.stateNumber);
                        }
                    }
                }
                verifyATN(atn)
                {
                    // verify assumptions
                    for (let state of atn.states) {
                        this.checkCondition(state != null, "ATN states should not be null.");
                        if (state.stateType === ATNStateType_1.ATNStateType.INVALID_TYPE) {
                            continue;
                        }
                        this.checkCondition(state.onlyHasEpsilonTransitions || state.numberOfTransitions <= 1);
                        if (state instanceof PlusBlockStartState_1.PlusBlockStartState) {
                            this.checkCondition(state.loopBackState != null);
                        }
                        if (state instanceof StarLoopEntryState_1.StarLoopEntryState) {
                            let starLoopEntryState = state;
                            this.checkCondition(starLoopEntryState.loopBackState != null);
                            this.checkCondition(starLoopEntryState.numberOfTransitions === 2);
                            if (starLoopEntryState.transition(0).target instanceof StarBlockStartState_1.StarBlockStartState) {
                                this.checkCondition(starLoopEntryState.transition(1).target instanceof LoopEndState_1.LoopEndState);
                                this.checkCondition(!starLoopEntryState.nonGreedy);
                            }
                            else if (starLoopEntryState.transition(0).target instanceof LoopEndState_1.LoopEndState) {
                                this.checkCondition(starLoopEntryState.transition(1).target instanceof StarBlockStartState_1.StarBlockStartState);
                                this.checkCondition(starLoopEntryState.nonGreedy);
                            }
                            else {
                                throw new Error("IllegalStateException");
                            }
                        }
                        if (state instanceof StarLoopbackState_1.StarLoopbackState) {
                            this.checkCondition(state.numberOfTransitions === 1);
                            this.checkCondition(state.transition(0).target instanceof StarLoopEntryState_1.StarLoopEntryState);
                        }
                        if (state instanceof LoopEndState_1.LoopEndState) {
                            this.checkCondition(state.loopBackState != null);
                        }
                        if (state instanceof RuleStartState_1.RuleStartState) {
                            this.checkCondition(state.stopState != null);
                        }
                        if (state instanceof BlockStartState_1.BlockStartState) {
                            this.checkCondition(state.endState != null);
                        }
                        if (state instanceof BlockEndState_1.BlockEndState) {
                            this.checkCondition(state.startState != null);
                        }
                        if (state instanceof DecisionState_1.DecisionState) {
                            let decisionState = state;
                            this.checkCondition(decisionState.numberOfTransitions <= 1 || decisionState.decision >= 0);
                        }
                        else {
                            this.checkCondition(state.numberOfTransitions <= 1 || state instanceof RuleStopState_1.RuleStopState);
                        }
                    }
                }
                checkCondition(condition, message)
                {
                    if (!condition) {
                        throw new Error("IllegalStateException: " + message);
                    }
                }
                static inlineSetRules(atn)
                {
                    let inlinedCalls = 0;
                    let ruleToInlineTransition = new Array(atn.ruleToStartState.length);
                    for (let i = 0; i < atn.ruleToStartState.length; i++) {
                        let startState = atn.ruleToStartState[i];
                        let middleState = startState;
                        while (middleState.onlyHasEpsilonTransitions
                        && middleState.numberOfOptimizedTransitions === 1
                        && middleState.getOptimizedTransition(0).serializationType === 1 /* EPSILON */
                        ) {
                            middleState = middleState.getOptimizedTransition(0).target;
                        }
                        if (middleState.numberOfOptimizedTransitions !== 1) {
                            continue;
                        }
                        let matchTransition = middleState.getOptimizedTransition(0);
                        let matchTarget = matchTransition.target;
                        if (matchTransition.isEpsilon
                        || !matchTarget.onlyHasEpsilonTransitions
                        || matchTarget.numberOfOptimizedTransitions !== 1
                        || !(matchTarget.getOptimizedTransition(0).target instanceof RuleStopState_1.RuleStopState)) {
                            continue;
                        }
                        switch (matchTransition.serializationType) {
                        case 5 /* ATOM */
                        :
                        case 2 /* RANGE */
                        :
                        case 7 /* SET */
                        :
                            ruleToInlineTransition[i] = matchTransition;
                            break;
                        case 8 /* NOT_SET */
                        :
                        case 9 /* WILDCARD */
                        :
                            // not implemented yet
                            continue;
                        default:
                            continue;
                        }
                    }
                    for (let state of atn.states) {
                        if (state.ruleIndex < 0) {
                            continue;
                        }
                        let optimizedTransitions;
                        for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {
                            let transition = state.getOptimizedTransition(i);
                            if (!(transition instanceof RuleTransition_1.RuleTransition)) {
                                if (optimizedTransitions != null) {
                                    optimizedTransitions.push(transition);
                                }
                                continue;
                            }
                            let ruleTransition = transition;
                            let effective = ruleToInlineTransition[ruleTransition.target.ruleIndex];
                            if (effective == null) {
                                if (optimizedTransitions != null) {
                                    optimizedTransitions.push(transition);
                                }
                                continue;
                            }
                            if (optimizedTransitions == null) {
                                optimizedTransitions = [];
                                for (let j = 0; j < i; j++) {
                                    optimizedTransitions.push(state.getOptimizedTransition(i));
                                }
                            }
                            inlinedCalls++;
                            let target = ruleTransition.followState;
                            let intermediateState = new BasicState_1.BasicState();
                            intermediateState.setRuleIndex(target.ruleIndex);
                            atn.addState(intermediateState);
                            optimizedTransitions.push(new EpsilonTransition_1.EpsilonTransition(intermediateState));
                            switch (effective.serializationType) {
                            case 5 /* ATOM */
                            :
                                intermediateState.addTransition(new AtomTransition_1.AtomTransition(target, effective._label));
                                break;
                            case 2 /* RANGE */
                            :
                                intermediateState.addTransition(new RangeTransition_1.RangeTransition(target, effective.from, effective.to));
                                break;
                            case 7 /* SET */
                            :
                                intermediateState.addTransition(new SetTransition_1.SetTransition(target, effective.label));
                                break;
                            default:
                                throw new Error("UnsupportedOperationException");
                            }
                        }
                        if (optimizedTransitions != null) {
                            if (state.isOptimized) {
                                while (state.numberOfOptimizedTransitions > 0) {
                                    state.removeOptimizedTransition(state.numberOfOptimizedTransitions - 1);
                                }
                            }
                            for (let transition of optimizedTransitions) {
                                state.addOptimizedTransition(transition);
                            }
                        }
                    }
                    if (ParserATNSimulator_1.ParserATNSimulator.debug) {
                        console.log("ATN runtime optimizer removed " + inlinedCalls + " rule invocations by inlining sets.");
                    }
                    return inlinedCalls;
                }
                static combineChainedEpsilons(atn)
                {
                    let removedEdges = 0;
                    for (let state of atn.states) {
                        if (!state.onlyHasEpsilonTransitions || state instanceof RuleStopState_1.RuleStopState) {
                            continue;
                        }
                        let optimizedTransitions;
                        nextTransition:
                        for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {
                            let transition = state.getOptimizedTransition(i);
                            let intermediate = transition.target;
                            if (transition.serializationType !== 1 /* EPSILON */
                            || transition.outermostPrecedenceReturn !== -1
                            || intermediate.stateType !== ATNStateType_1.ATNStateType.BASIC
                            || !intermediate.onlyHasEpsilonTransitions) {
                                if (optimizedTransitions != null) {
                                    optimizedTransitions.push(transition);
                                }
                                continue nextTransition;
                            }
                            for (let j = 0; j < intermediate.numberOfOptimizedTransitions; j++) {
                                if (intermediate.getOptimizedTransition(j).serializationType !== 1 /* EPSILON */
                                || intermediate.getOptimizedTransition(j).outermostPrecedenceReturn !== -1) {
                                    if (optimizedTransitions != null) {
                                        optimizedTransitions.push(transition);
                                    }
                                    continue nextTransition;
                                }
                            }
                            removedEdges++;
                            if (optimizedTransitions == null) {
                                optimizedTransitions = [];
                                for (let j = 0; j < i; j++) {
                                    optimizedTransitions.push(state.getOptimizedTransition(j));
                                }
                            }
                            for (let j = 0; j < intermediate.numberOfOptimizedTransitions; j++) {
                                let target = intermediate.getOptimizedTransition(j).target;
                                optimizedTransitions.push(new EpsilonTransition_1.EpsilonTransition(target));
                            }
                        }
                        if (optimizedTransitions != null) {
                            if (state.isOptimized) {
                                while (state.numberOfOptimizedTransitions > 0) {
                                    state.removeOptimizedTransition(state.numberOfOptimizedTransitions - 1);
                                }
                            }
                            for (let transition of optimizedTransitions) {
                                state.addOptimizedTransition(transition);
                            }
                        }
                    }
                    if (ParserATNSimulator_1.ParserATNSimulator.debug) {
                        console.log("ATN runtime optimizer removed " + removedEdges + " transitions by combining chained epsilon transitions.");
                    }
                    return removedEdges;
                }
                static optimizeSets(atn, preserveOrder)
                {
                    if (preserveOrder) {
                        // this optimization currently doesn't preserve edge order.
                        return 0;
                    }
                    let removedPaths = 0;
                    let decisions = atn.decisionToState;
                    for (let decision of decisions) {
                        let setTransitions = new IntervalSet_1.IntervalSet();
                        for (let i = 0; i < decision.numberOfOptimizedTransitions; i++) {
                            let epsTransition = decision.getOptimizedTransition(i);
                            if (!(epsTransition instanceof EpsilonTransition_1.EpsilonTransition)) {
                                continue;
                            }
                            if (epsTransition.target.numberOfOptimizedTransitions !== 1) {
                                continue;
                            }
                            let transition = epsTransition.target.getOptimizedTransition(0);
                            if (!(transition.target instanceof BlockEndState_1.BlockEndState)) {
                                continue;
                            }
                            if (transition instanceof NotSetTransition_1.NotSetTransition) {
                                // TODO: not yet implemented
                                continue;
                            }
                            if (transition instanceof AtomTransition_1.AtomTransition
                            || transition instanceof RangeTransition_1.RangeTransition
                            || transition instanceof SetTransition_1.SetTransition) {
                                setTransitions.add(i);
                            }
                        }
                        if (setTransitions.size <= 1) {
                            continue;
                        }
                        let optimizedTransitions = [];
                        for (let i = 0; i < decision.numberOfOptimizedTransitions; i++) {
                            if (!setTransitions.contains(i)) {
                                optimizedTransitions.push(decision.getOptimizedTransition(i));
                            }
                        }
                        let blockEndState = decision.getOptimizedTransition(setTransitions.minElement).target.getOptimizedTransition(0).target;
                        let matchSet = new IntervalSet_1.IntervalSet();
                        for (let interval of setTransitions.intervals) {
                            for (let j = interval.a; j <= interval.b; j++) {
                                let matchTransition = decision.getOptimizedTransition(j).target.getOptimizedTransition(0);
                                if (matchTransition instanceof NotSetTransition_1.NotSetTransition) {
                                    throw new Error("Not yet implemented.");
                                }
                                else {
                                    matchSet.addAll(matchTransition.label);
                                }
                            }
                        }
                        let newTransition;
                        if (matchSet.intervals.length === 1) {
                            if (matchSet.size === 1) {
                                newTransition = new AtomTransition_1.AtomTransition(blockEndState, matchSet.minElement);
                            }
                            else {
                                let matchInterval = matchSet.intervals[0];
                                newTransition = new RangeTransition_1.RangeTransition(blockEndState, matchInterval.a, matchInterval.b);
                            }
                        }
                        else {
                            newTransition = new SetTransition_1.SetTransition(blockEndState, matchSet);
                        }
                        let setOptimizedState = new BasicState_1.BasicState();
                        setOptimizedState.setRuleIndex(decision.ruleIndex);
                        atn.addState(setOptimizedState);
                        setOptimizedState.addTransition(newTransition);
                        optimizedTransitions.push(new EpsilonTransition_1.EpsilonTransition(setOptimizedState));
                        removedPaths += decision.numberOfOptimizedTransitions - optimizedTransitions.length;
                        if (decision.isOptimized) {
                            while (decision.numberOfOptimizedTransitions > 0) {
                                decision.removeOptimizedTransition(decision.numberOfOptimizedTransitions - 1);
                            }
                        }
                        for (let transition of optimizedTransitions) {
                            decision.addOptimizedTransition(transition);
                        }
                    }
                    if (ParserATNSimulator_1.ParserATNSimulator.debug) {
                        console.log("ATN runtime optimizer removed " + removedPaths + " paths by collapsing sets.");
                    }
                    return removedPaths;
                }
                static identifyTailCalls(atn)
                {
                    for (let state of atn.states) {
                        for (let i = 0; i < state.numberOfTransitions; i++) {
                            let transition = state.transition(i);
                            if (!(transition instanceof RuleTransition_1.RuleTransition)) {
                                continue;
                            }
                            transition.tailCall = this.testTailCall(atn, transition, false);
                            transition.optimizedTailCall = this.testTailCall(atn, transition, true);
                        }
                        if (!state.isOptimized) {
                            continue;
                        }
                        for (let i = 0; i < state.numberOfOptimizedTransitions; i++) {
                            let transition = state.getOptimizedTransition(i);
                            if (!(transition instanceof RuleTransition_1.RuleTransition)) {
                                continue;
                            }
                            transition.tailCall = this.testTailCall(atn, transition, false);
                            transition.optimizedTailCall = this.testTailCall(atn, transition, true);
                        }
                    }
                }
                static testTailCall(atn, transition, optimizedPath)
                {
                    if (!optimizedPath && transition.tailCall) {
                        return true;
                    }
                    if (optimizedPath && transition.optimizedTailCall) {
                        return true;
                    }
                    let reachable = new BitSet_1.BitSet(atn.states.length);
                    let worklist = [];
                    worklist.push(transition.followState);
                    while (true) {
                        let state = worklist.pop();
                        if (!state) {
                            break;
                        }
                        if (reachable.get(state.stateNumber)) {
                            continue;
                        }
                        if (state instanceof RuleStopState_1.RuleStopState) {
                            continue;
                        }
                        if (!state.onlyHasEpsilonTransitions) {
                            return false;
                        }
                        let transitionCount = optimizedPath ? state.numberOfOptimizedTransitions : state.numberOfTransitions;
                        for (let i = 0; i < transitionCount; i++) {
                            let t = optimizedPath ? state.getOptimizedTransition(i) : state.transition(i);
                            if (t.serializationType !== 1 /* EPSILON */
                            ) {
                                return false;
                            }
                            worklist.push(t.target);
                        }
                    }
                    return true;
                }
                static toInt(c)
                {
                    return c;
                }
                static toInt32(data, offset)
                {
                    return (data[offset] | (data[offset + 1] << 16)) >>> 0;
                }
                static toUUID(data, offset)
                {
                    let leastSigBits = ATNDeserializer.toInt32(data, offset);
                    let lessSigBits = ATNDeserializer.toInt32(data, offset + 2);
                    let moreSigBits = ATNDeserializer.toInt32(data, offset + 4);
                    let mostSigBits = ATNDeserializer.toInt32(data, offset + 6);
                    return new UUID_1.UUID(mostSigBits, moreSigBits, lessSigBits, leastSigBits);
                }
                edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets)
                {
                    let target = atn.states[trg];
                    switch (type) {
                    case 1 /* EPSILON */
                    :
                        return new EpsilonTransition_1.EpsilonTransition(target);
                    case 2 /* RANGE */
                    :
                        if (arg3 !== 0) {
                            return new RangeTransition_1.RangeTransition(target, Token_1.Token.EOF, arg2);
                        }
                        else {
                            return new RangeTransition_1.RangeTransition(target, arg1, arg2);
                        }
                    case 3 /* RULE */
                    :
                        let rt = new RuleTransition_1.RuleTransition(atn.states[arg1], arg2, arg3, target);
                        return rt;
                    case 4 /* PREDICATE */
                    :
                        let pt = new PredicateTransition_1.PredicateTransition(target, arg1, arg2, arg3 !== 0);
                        return pt;
                    case 10 /* PRECEDENCE */
                    :
                        return new PrecedencePredicateTransition_1.PrecedencePredicateTransition(target, arg1);
                    case 5 /* ATOM */
                    :
                        if (arg3 !== 0) {
                            return new AtomTransition_1.AtomTransition(target, Token_1.Token.EOF);
                        }
                        else {
                            return new AtomTransition_1.AtomTransition(target, arg1);
                        }
                    case 6 /* ACTION */
                    :
                        let a = new ActionTransition_1.ActionTransition(target, arg1, arg2, arg3 !== 0);
                        return a;
                    case 7 /* SET */
                    :
                        return new SetTransition_1.SetTransition(target, sets[arg1]);
                    case 8 /* NOT_SET */
                    :
                        return new NotSetTransition_1.NotSetTransition(target, sets[arg1]);
                    case 9 /* WILDCARD */
                    :
                        return new WildcardTransition_1.WildcardTransition(target);
                    }
                    throw new Error("The specified transition type is not valid.");
                }
                stateFactory(type, ruleIndex)
                {
                    let s;
                    switch (type) {
                    case ATNStateType_1.ATNStateType.INVALID_TYPE:
                        return new InvalidState_1.InvalidState();
                    case ATNStateType_1.ATNStateType.BASIC:
                        s = new BasicState_1.BasicState();
                        break;
                    case ATNStateType_1.ATNStateType.RULE_START:
                        s = new RuleStartState_1.RuleStartState();
                        break;
                    case ATNStateType_1.ATNStateType.BLOCK_START:
                        s = new BasicBlockStartState_1.BasicBlockStartState();
                        break;
                    case ATNStateType_1.ATNStateType.PLUS_BLOCK_START:
                        s = new PlusBlockStartState_1.PlusBlockStartState();
                        break;
                    case ATNStateType_1.ATNStateType.STAR_BLOCK_START:
                        s = new StarBlockStartState_1.StarBlockStartState();
                        break;
                    case ATNStateType_1.ATNStateType.TOKEN_START:
                        s = new TokensStartState_1.TokensStartState();
                        break;
                    case ATNStateType_1.ATNStateType.RULE_STOP:
                        s = new RuleStopState_1.RuleStopState();
                        break;
                    case ATNStateType_1.ATNStateType.BLOCK_END:
                        s = new BlockEndState_1.BlockEndState();
                        break;
                    case ATNStateType_1.ATNStateType.STAR_LOOP_BACK:
                        s = new StarLoopbackState_1.StarLoopbackState();
                        break;
                    case ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY:
                        s = new StarLoopEntryState_1.StarLoopEntryState();
                        break;
                    case ATNStateType_1.ATNStateType.PLUS_LOOP_BACK:
                        s = new PlusLoopbackState_1.PlusLoopbackState();
                        break;
                    case ATNStateType_1.ATNStateType.LOOP_END:
                        s = new LoopEndState_1.LoopEndState();
                        break;
                    default:
                        let message = `The specified state type ${type} is not valid.`;
                        throw new Error(message);
                    }
                    s.ruleIndex = ruleIndex;
                    return s;
                }
                lexerActionFactory(type, data1, data2)
                {
                    switch (type) {
                    case 0 /* CHANNEL */
                    :
                        return new LexerChannelAction_1.LexerChannelAction(data1);
                    case 1 /* CUSTOM */
                    :
                        return new LexerCustomAction_1.LexerCustomAction(data1, data2);
                    case 2 /* MODE */
                    :
                        return new LexerModeAction_1.LexerModeAction(data1);
                    case 3 /* MORE */
                    :
                        return LexerMoreAction_1.LexerMoreAction.INSTANCE;
                    case 4 /* POP_MODE */
                    :
                        return LexerPopModeAction_1.LexerPopModeAction.INSTANCE;
                    case 5 /* PUSH_MODE */
                    :
                        return new LexerPushModeAction_1.LexerPushModeAction(data1);
                    case 6 /* SKIP */
                    :
                        return LexerSkipAction_1.LexerSkipAction.INSTANCE;
                    case 7 /* TYPE */
                    :
                        return new LexerTypeAction_1.LexerTypeAction(data1);
                    default:
                        let message = `The specified lexer action type ${type} is not valid.`;
                        throw new Error(message);
                    }
                }
            }
            /* WARNING: DO NOT MERGE THESE LINES. If UUIDs differ during a merge,
             * resolve the conflict by generating a new ID!
             */
            /**
             * This is the earliest supported serialized UUID.
             */
            ATNDeserializer.BASE_SERIALIZED_UUID = UUID_1.UUID.fromString("E4178468-DF95-44D0-AD87-F22A5D5FB6D3");
            /**
             * This UUID indicates an extension of {@link #ADDED_PRECEDENCE_TRANSITIONS}
             * for the addition of lexer actions encoded as a sequence of
             * {@link LexerAction} instances.
             */
            ATNDeserializer.ADDED_LEXER_ACTIONS = UUID_1.UUID.fromString("AB35191A-1603-487E-B75A-479B831EAF6D");
            /**
             * This UUID indicates the serialized ATN contains two sets of
             * IntervalSets, where the second set's values are encoded as
             * 32-bit integers to support the full Unicode SMP range up to U+10FFFF.
             */
            ATNDeserializer.ADDED_UNICODE_SMP = UUID_1.UUID.fromString("C23FEA89-0605-4f51-AFB8-058BCAB8C91B");
            /**
             * This list contains all of the currently supported UUIDs, ordered by when
             * the feature first appeared in this branch.
             */
            ATNDeserializer.SUPPORTED_UUIDS = [
            ATNDeserializer.BASE_SERIALIZED_UUID,
            ATNDeserializer.ADDED_LEXER_ACTIONS,
            ATNDeserializer.ADDED_UNICODE_SMP,
            ];
            /**
             * This is the current serialized UUID.
             */
            ATNDeserializer.SERIALIZED_UUID = ATNDeserializer.ADDED_UNICODE_SMP;
            __decorate([
            Decorators_1.NotNull
            ], ATNDeserializer.prototype, "deserializationOptions", void 0);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], ATNDeserializer.prototype, "deserialize", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], ATNDeserializer.prototype, "markPrecedenceDecisions", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], ATNDeserializer.prototype, "edgeFactory", null);
            exports.ATNDeserializer = ATNDeserializer;

        }, {
            "../Decorators": 224,
            "../Token": 248,
            "../dfa/DFA": 316,
            "../misc/Array2DHashSet": 322,
            "../misc/BitSet": 325,
            "../misc/IntervalSet": 331,
            "../misc/UUID": 336,
            "./ATN": 251,
            "./ATNDeserializationOptions": 254,
            "./ATNStateType": 258,
            "./ActionTransition": 260,
            "./AtomTransition": 262,
            "./BasicBlockStartState": 263,
            "./BasicState": 264,
            "./BlockEndState": 265,
            "./BlockStartState": 266,
            "./DecisionState": 271,
            "./EpsilonTransition": 272,
            "./InvalidState": 274,
            "./LexerChannelAction": 278,
            "./LexerCustomAction": 279,
            "./LexerModeAction": 281,
            "./LexerMoreAction": 282,
            "./LexerPopModeAction": 283,
            "./LexerPushModeAction": 284,
            "./LexerSkipAction": 285,
            "./LexerTypeAction": 286,
            "./LoopEndState": 288,
            "./NotSetTransition": 289,
            "./ParserATNSimulator": 292,
            "./PlusBlockStartState": 293,
            "./PlusLoopbackState": 294,
            "./PrecedencePredicateTransition": 295,
            "./PredicateTransition": 297,
            "./RangeTransition": 302,
            "./RuleStartState": 303,
            "./RuleStopState": 304,
            "./RuleTransition": 305,
            "./SetTransition": 307,
            "./StarBlockStartState": 309,
            "./StarLoopEntryState": 310,
            "./StarLoopbackState": 311,
            "./TokensStartState": 312,
            "./WildcardTransition": 314
        }],
        256: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const ATNConfigSet_1 = require("./ATNConfigSet");
            const DFAState_1 = require("../dfa/DFAState");
            const Decorators_1 = require("../Decorators");
            const PredictionContext_1 = require("./PredictionContext");
            let ATNSimulator = class ATNSimulator {
                constructor(atn)
                {
                    this.atn = atn;
                }
                static get ERROR()
                {
                    if (!ATNSimulator._ERROR) {
                        ATNSimulator._ERROR = new DFAState_1.DFAState(new ATNConfigSet_1.ATNConfigSet());
                        ATNSimulator._ERROR.stateNumber = PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;
                    }
                    return ATNSimulator._ERROR;
                }
                /**
                     * Clear the DFA cache used by the current instance. Since the DFA cache may
                     * be shared by multiple ATN simulators, this method may affect the
                     * performance (but not accuracy) of other parsers which are being used
                     * concurrently.
                     *
                     * @ if the current instance does not
                     * support clearing the DFA.
                     *
                     * @since 4.3
                     */
                clearDFA()
                {
                    this.atn.clearDFA();
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], ATNSimulator.prototype, "atn", void 0);
            __decorate([
            Decorators_1.NotNull
            ], ATNSimulator, "ERROR", null);
            ATNSimulator = __decorate([
            __param(0, Decorators_1.NotNull)
            ], ATNSimulator);
            exports.ATNSimulator = ATNSimulator;
            (function(ATNSimulator) {
                const RULE_VARIANT_DELIMITER = "$";
                const RULE_LF_VARIANT_MARKER = "$lf$";
                const RULE_NOLF_VARIANT_MARKER = "$nolf$";
            })(ATNSimulator = exports.ATNSimulator || (exports.ATNSimulator = {}));
            exports.ATNSimulator = ATNSimulator;

        }, {
            "../Decorators": 224,
            "../dfa/DFAState": 318,
            "./ATNConfigSet": 253,
            "./PredictionContext": 298
        }],
        257: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../Decorators");
            const INITIAL_NUM_TRANSITIONS = 4;
            /**
             * The following images show the relation of states and
             * {@link ATNState#transitions} for various grammar constructs.
             *
             * * Solid edges marked with an &#0949; indicate a required
             *   {@link EpsilonTransition}.
             *
             * * Dashed edges indicate locations where any transition derived from
             *   {@link Transition} might appear.
             *
             * * Dashed nodes are place holders for either a sequence of linked
             *   {@link BasicState} states or the inclusion of a block representing a nested
             *   construct in one of the forms below.
             *
             * * Nodes showing multiple outgoing alternatives with a `...` support
             *   any number of alternatives (one or more). Nodes without the `...` only
             *   support the exact number of alternatives shown in the diagram.
             *
             * <h2>Basic Blocks</h2>
             *
             * <h3>Rule</h3>
             *
             * <embed src="images/Rule.svg" type="image/svg+xml"/>
             *
             * <h3>Block of 1 or more alternatives</h3>
             *
             * <embed src="images/Block.svg" type="image/svg+xml"/>
             *
             * <h2>Greedy Loops</h2>
             *
             * <h3>Greedy Closure: `(...)*`</h3>
             *
             * <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
             *
             * <h3>Greedy Positive Closure: `(...)+`</h3>
             *
             * <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
             *
             * <h3>Greedy Optional: `(...)?`</h3>
             *
             * <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
             *
             * <h2>Non-Greedy Loops</h2>
             *
             * <h3>Non-Greedy Closure: `(...)*?`</h3>
             *
             * <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
             *
             * <h3>Non-Greedy Positive Closure: `(...)+?`</h3>
             *
             * <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
             *
             * <h3>Non-Greedy Optional: `(...)??`</h3>
             *
             * <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
             */
            class ATNState {
                constructor()
                {
                    this.stateNumber = ATNState.INVALID_STATE_NUMBER;
                    this.ruleIndex = 0; // at runtime, we don't have Rule objects
                    this.epsilonOnlyTransitions = false;
                    /** Track the transitions emanating from this ATN state. */
                    this.transitions = [];
                    this.optimizedTransitions = this.transitions;
                }
                /**
                     * Gets the state number.
                     *
                     * @returns the state number
                     */
                getStateNumber()
                {
                    return this.stateNumber;
                }
                /**
                     * For all states except {@link RuleStopState}, this returns the state
                     * number. Returns -1 for stop states.
                     *
                     * @returns -1 for {@link RuleStopState}, otherwise the state number
                     */
                get nonStopStateNumber()
                {
                    return this.getStateNumber();
                }
                hashCode()
                {
                    return this.stateNumber;
                }
                equals(o)
                {
                    // are these states same object?
                    if (o instanceof ATNState) {
                        return this.stateNumber === o.stateNumber;
                    }
                    return false;
                }
                get isNonGreedyExitState()
                {
                    return false;
                }
                toString()
                {
                    return String(this.stateNumber);
                }
                getTransitions()
                {
                    return this.transitions.slice(0);
                }
                get numberOfTransitions()
                {
                    return this.transitions.length;
                }
                addTransition(e, index)
                {
                    if (this.transitions.length === 0) {
                        this.epsilonOnlyTransitions = e.isEpsilon;
                    }
                    else if (this.epsilonOnlyTransitions !== e.isEpsilon) {
                        this.epsilonOnlyTransitions = false;
                        throw new Error("ATN state " + this.stateNumber + " has both epsilon and non-epsilon transitions.");
                    }
                    this.transitions.splice(index !== undefined ? index : this.transitions.length, 0, e);
                }
                transition(i)
                {
                    return this.transitions[i];
                }
                setTransition(i, e)
                {
                    this.transitions[i] = e;
                }
                removeTransition(index)
                {
                    return this.transitions.splice(index, 1)[0];
                }
                get onlyHasEpsilonTransitions()
                {
                    return this.epsilonOnlyTransitions;
                }
                setRuleIndex(ruleIndex)
                {
                    this.ruleIndex = ruleIndex;
                }
                get isOptimized()
                {
                    return this.optimizedTransitions !== this.transitions;
                }
                get numberOfOptimizedTransitions()
                {
                    return this.optimizedTransitions.length;
                }
                getOptimizedTransition(i)
                {
                    return this.optimizedTransitions[i];
                }
                addOptimizedTransition(e)
                {
                    if (!this.isOptimized) {
                        this.optimizedTransitions = new Array();
                    }
                    this.optimizedTransitions.push(e);
                }
                setOptimizedTransition(i, e)
                {
                    if (!this.isOptimized) {
                        throw new Error("This ATNState is not optimized.");
                    }
                    this.optimizedTransitions[i] = e;
                }
                removeOptimizedTransition(i)
                {
                    if (!this.isOptimized) {
                        throw new Error("This ATNState is not optimized.");
                    }
                    this.optimizedTransitions.splice(i, 1);
                }
            }
            __decorate([
            Decorators_1.Override
            ], ATNState.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], ATNState.prototype, "equals", null);
            __decorate([
            Decorators_1.Override
            ], ATNState.prototype, "toString", null);
            exports.ATNState = ATNState;
            (function(ATNState) {
                ATNState.INVALID_STATE_NUMBER = -1;
            })(ATNState = exports.ATNState || (exports.ATNState = {}));

        }, {
            "../Decorators": 224
        }],
        258: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:27.4734328-07:00
            var ATNStateType;
            (function(ATNStateType) {
                ATNStateType[ATNStateType["INVALID_TYPE"] = 0] = "INVALID_TYPE";
                ATNStateType[ATNStateType["BASIC"] = 1] = "BASIC";
                ATNStateType[ATNStateType["RULE_START"] = 2] = "RULE_START";
                ATNStateType[ATNStateType["BLOCK_START"] = 3] = "BLOCK_START";
                ATNStateType[ATNStateType["PLUS_BLOCK_START"] = 4] = "PLUS_BLOCK_START";
                ATNStateType[ATNStateType["STAR_BLOCK_START"] = 5] = "STAR_BLOCK_START";
                ATNStateType[ATNStateType["TOKEN_START"] = 6] = "TOKEN_START";
                ATNStateType[ATNStateType["RULE_STOP"] = 7] = "RULE_STOP";
                ATNStateType[ATNStateType["BLOCK_END"] = 8] = "BLOCK_END";
                ATNStateType[ATNStateType["STAR_LOOP_BACK"] = 9] = "STAR_LOOP_BACK";
                ATNStateType[ATNStateType["STAR_LOOP_ENTRY"] = 10] = "STAR_LOOP_ENTRY";
                ATNStateType[ATNStateType["PLUS_LOOP_BACK"] = 11] = "PLUS_LOOP_BACK";
                ATNStateType[ATNStateType["LOOP_END"] = 12] = "LOOP_END";
            })(ATNStateType = exports.ATNStateType || (exports.ATNStateType = {}));

        }, {}],
        259: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Transition_1 = require("./Transition");
            /**
             *
             * @author Sam Harwell
             */
            class AbstractPredicateTransition extends Transition_1.Transition {
                constructor(target)
                {
                    super(target);
                }
            }
            exports.AbstractPredicateTransition = AbstractPredicateTransition;

        }, {
            "./Transition": 313
        }],
        260: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../Decorators");
            const Transition_1 = require("./Transition");
            let ActionTransition = class ActionTransition extends Transition_1.Transition {
                constructor(target, ruleIndex, actionIndex=-1, isCtxDependent=false)
                {
                    super(target);
                    this.ruleIndex = ruleIndex;
                    this.actionIndex = actionIndex;
                    this.isCtxDependent = isCtxDependent;
                }
                get serializationType()
                {
                    return 6 /* ACTION */
                    ;
                }
                get isEpsilon()
                {
                    return true; // we are to be ignored by analysis 'cept for predicates
                }
                matches(symbol, minVocabSymbol, maxVocabSymbol)
                {
                    return false;
                }
                toString()
                {
                    return "action_" + this.ruleIndex + ":" + this.actionIndex;
                }
            }
            ;
            __decorate([
            Decorators_1.Override
            ], ActionTransition.prototype, "serializationType", null);
            __decorate([
            Decorators_1.Override
            ], ActionTransition.prototype, "isEpsilon", null);
            __decorate([
            Decorators_1.Override
            ], ActionTransition.prototype, "matches", null);
            __decorate([
            Decorators_1.Override
            ], ActionTransition.prototype, "toString", null);
            ActionTransition = __decorate([
            __param(0, Decorators_1.NotNull)
            ], ActionTransition);
            exports.ActionTransition = ActionTransition;

        }, {
            "../Decorators": 224,
            "./Transition": 313
        }],
        261: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const DecisionEventInfo_1 = require("./DecisionEventInfo");
            const Decorators_1 = require("../Decorators");
            /**
             * This class represents profiling event information for an ambiguity.
             * Ambiguities are decisions where a particular input resulted in an SLL
             * conflict, followed by LL prediction also reaching a conflict state
             * (indicating a true ambiguity in the grammar).
             *
             * This event may be reported during SLL prediction in cases where the
             * conflicting SLL configuration set provides sufficient information to
             * determine that the SLL conflict is truly an ambiguity. For example, if none
             * of the ATN configurations in the conflicting SLL configuration set have
             * traversed a global follow transition (i.e.
             * {@link ATNConfig#getReachesIntoOuterContext} is `false` for all
             * configurations), then the result of SLL prediction for that input is known to
             * be equivalent to the result of LL prediction for that input.
             *
             * In some cases, the minimum represented alternative in the conflicting LL
             * configuration set is not equal to the minimum represented alternative in the
             * conflicting SLL configuration set. Grammars and inputs which result in this
             * scenario are unable to use {@link PredictionMode#SLL}, which in turn means
             * they cannot use the two-stage parsing strategy to improve parsing performance
             * for that input.
             *
             * @see ParserATNSimulator#reportAmbiguity
             * @see ParserErrorListener#reportAmbiguity
             *
             * @since 4.3
             */
            let AmbiguityInfo = class AmbiguityInfo extends DecisionEventInfo_1.DecisionEventInfo {
                /**
                     * Constructs a new instance of the {@link AmbiguityInfo} class with the
                     * specified detailed ambiguity information.
                     *
                     * @param decision The decision number
                     * @param state The final simulator state identifying the ambiguous
                     * alternatives for the current input
                     * @param ambigAlts The set of alternatives in the decision that lead to a valid parse.
                     *                  The predicted alt is the min(ambigAlts)
                     * @param input The input token stream
                     * @param startIndex The start index for the current prediction
                     * @param stopIndex The index at which the ambiguity was identified during
                     * prediction
                     */
                constructor(decision, state, ambigAlts, input, startIndex, stopIndex)
                {
                    super(decision, state, input, startIndex, stopIndex, state.useContext);
                    this.ambigAlts = ambigAlts;
                }
                /**
                     * Gets the set of alternatives in the decision that lead to a valid parse.
                     *
                     * @since 4.5
                     */
                get ambiguousAlternatives()
                {
                    return this.ambigAlts;
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], AmbiguityInfo.prototype, "ambigAlts", void 0);
            __decorate([
            Decorators_1.NotNull
            ], AmbiguityInfo.prototype, "ambiguousAlternatives", null);
            AmbiguityInfo = __decorate([
            __param(1, Decorators_1.NotNull),
            __param(2, Decorators_1.NotNull),
            __param(3, Decorators_1.NotNull)
            ], AmbiguityInfo);
            exports.AmbiguityInfo = AmbiguityInfo;

        }, {
            "../Decorators": 224,
            "./DecisionEventInfo": 269
        }],
        262: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const IntervalSet_1 = require("../misc/IntervalSet");
            const Decorators_1 = require("../Decorators");
            const Transition_1 = require("./Transition");
            /** TODO: make all transitions sets? no, should remove set edges */
            let AtomTransition = class AtomTransition extends Transition_1.Transition {
                constructor(target, label)
                {
                    super(target);
                    this._label = label;
                }
                get serializationType()
                {
                    return 5 /* ATOM */
                    ;
                }
                get label()
                {
                    return IntervalSet_1.IntervalSet.of(this._label);
                }
                matches(symbol, minVocabSymbol, maxVocabSymbol)
                {
                    return this._label === symbol;
                }
                toString()
                {
                    return String(this.label);
                }
            }
            ;
            __decorate([
            Decorators_1.Override
            ], AtomTransition.prototype, "serializationType", null);
            __decorate([
            Decorators_1.Override,
            Decorators_1.NotNull
            ], AtomTransition.prototype, "label", null);
            __decorate([
            Decorators_1.Override
            ], AtomTransition.prototype, "matches", null);
            __decorate([
            Decorators_1.Override,
            Decorators_1.NotNull
            ], AtomTransition.prototype, "toString", null);
            AtomTransition = __decorate([
            __param(0, Decorators_1.NotNull)
            ], AtomTransition);
            exports.AtomTransition = AtomTransition;

        }, {
            "../Decorators": 224,
            "../misc/IntervalSet": 331,
            "./Transition": 313
        }],
        263: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:27.7669801-07:00
            const ATNStateType_1 = require("./ATNStateType");
            const BlockStartState_1 = require("./BlockStartState");
            const Decorators_1 = require("../Decorators");
            /**
             *
             * @author Sam Harwell
             */
            class BasicBlockStartState extends BlockStartState_1.BlockStartState {
                get stateType()
                {
                    return ATNStateType_1.ATNStateType.BLOCK_START;
                }
            }
            __decorate([
            Decorators_1.Override
            ], BasicBlockStartState.prototype, "stateType", null);
            exports.BasicBlockStartState = BasicBlockStartState;

        }, {
            "../Decorators": 224,
            "./ATNStateType": 258,
            "./BlockStartState": 266
        }],
        264: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:27.8389930-07:00
            const ATNState_1 = require("./ATNState");
            const ATNStateType_1 = require("./ATNStateType");
            const Decorators_1 = require("../Decorators");
            /**
             *
             * @author Sam Harwell
             */
            class BasicState extends ATNState_1.ATNState {
                get stateType()
                {
                    return ATNStateType_1.ATNStateType.BASIC;
                }
            }
            __decorate([
            Decorators_1.Override
            ], BasicState.prototype, "stateType", null);
            exports.BasicState = BasicState;

        }, {
            "../Decorators": 224,
            "./ATNState": 257,
            "./ATNStateType": 258
        }],
        265: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:27.9125304-07:00
            const ATNState_1 = require("./ATNState");
            const ATNStateType_1 = require("./ATNStateType");
            const Decorators_1 = require("../Decorators");
            /** Terminal node of a simple `(a|b|c)` block. */
            class BlockEndState extends ATNState_1.ATNState {
                get stateType()
                {
                    return ATNStateType_1.ATNStateType.BLOCK_END;
                }
            }
            __decorate([
            Decorators_1.Override
            ], BlockEndState.prototype, "stateType", null);
            exports.BlockEndState = BlockEndState;

        }, {
            "../Decorators": 224,
            "./ATNState": 257,
            "./ATNStateType": 258
        }],
        266: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const DecisionState_1 = require("./DecisionState");
            /**  The start of a regular `(...)` block. */
            class BlockStartState extends DecisionState_1.DecisionState {
            }
            exports.BlockStartState = BlockStartState;

        }, {
            "./DecisionState": 271
        }],
        267: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../Decorators");
            const Utils = require("../misc/Utils");
            /**
             * This class stores information about a configuration conflict.
             *
             * @author Sam Harwell
             */
            class ConflictInfo {
                constructor(conflictedAlts, exact)
                {
                    this._conflictedAlts = conflictedAlts;
                    this.exact = exact;
                }
                /**
                     * Gets the set of conflicting alternatives for the configuration set.
                     */
                get conflictedAlts()
                {
                    return this._conflictedAlts;
                }
                /**
                     * Gets whether or not the configuration conflict is an exact conflict.
                     * An exact conflict occurs when the prediction algorithm determines that
                     * the represented alternatives for a particular configuration set cannot be
                     * further reduced by consuming additional input. After reaching an exact
                     * conflict during an SLL prediction, only switch to full-context prediction
                     * could reduce the set of viable alternatives. In LL prediction, an exact
                     * conflict indicates a true ambiguity in the input.
                     *
                     * For the {@link PredictionMode#LL_EXACT_AMBIG_DETECTION} prediction mode,
                     * accept states are conflicting but not exact are treated as non-accept
                     * states.
                     */
                get isExact()
                {
                    return this.exact;
                }
                equals(obj)
                {
                    if (obj === this) {
                        return true;
                    }
                    else if (!(obj instanceof ConflictInfo)) {
                        return false;
                    }
                    return this.isExact === obj.isExact
                        && Utils.equals(this.conflictedAlts, obj.conflictedAlts);
                }
                hashCode()
                {
                    return this.conflictedAlts.hashCode();
                }
            }
            __decorate([
            Decorators_1.Override
            ], ConflictInfo.prototype, "equals", null);
            __decorate([
            Decorators_1.Override
            ], ConflictInfo.prototype, "hashCode", null);
            exports.ConflictInfo = ConflictInfo;

        }, {
            "../Decorators": 224,
            "../misc/Utils": 337
        }],
        268: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:28.1575933-07:00
            const DecisionEventInfo_1 = require("./DecisionEventInfo");
            const Decorators_1 = require("../Decorators");
            /**
             * This class represents profiling event information for a context sensitivity.
             * Context sensitivities are decisions where a particular input resulted in an
             * SLL conflict, but LL prediction produced a single unique alternative.
             *
             * In some cases, the unique alternative identified by LL prediction is not
             * equal to the minimum represented alternative in the conflicting SLL
             * configuration set. Grammars and inputs which result in this scenario are
             * unable to use {@link PredictionMode#SLL}, which in turn means they cannot use
             * the two-stage parsing strategy to improve parsing performance for that
             * input.
             *
             * @see ParserATNSimulator#reportContextSensitivity
             * @see ParserErrorListener#reportContextSensitivity
             *
             * @since 4.3
             */
            let ContextSensitivityInfo = class ContextSensitivityInfo extends DecisionEventInfo_1.DecisionEventInfo {
                /**
                     * Constructs a new instance of the {@link ContextSensitivityInfo} class
                     * with the specified detailed context sensitivity information.
                     *
                     * @param decision The decision number
                     * @param state The final simulator state containing the unique
                     * alternative identified by full-context prediction
                     * @param input The input token stream
                     * @param startIndex The start index for the current prediction
                     * @param stopIndex The index at which the context sensitivity was
                     * identified during full-context prediction
                     */
                constructor(decision, state, input, startIndex, stopIndex)
                {
                    super(decision, state, input, startIndex, stopIndex, true);
                }
            }
            ;
            ContextSensitivityInfo = __decorate([
            __param(1, Decorators_1.NotNull),
            __param(2, Decorators_1.NotNull)
            ], ContextSensitivityInfo);
            exports.ContextSensitivityInfo = ContextSensitivityInfo;

        }, {
            "../Decorators": 224,
            "./DecisionEventInfo": 269
        }],
        269: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:28.2401032-07:00
            const Decorators_1 = require("../Decorators");
            /**
             * This is the base class for gathering detailed information about prediction
             * events which occur during parsing.
             *
             * Note that we could record the parser call stack at the time this event
             * occurred but in the presence of left recursive rules, the stack is kind of
             * meaningless. It's better to look at the individual configurations for their
             * individual stacks. Of course that is a {@link PredictionContext} object
             * not a parse tree node and so it does not have information about the extent
             * (start...stop) of the various subtrees. Examining the stack tops of all
             * configurations provide the return states for the rule invocations.
             * From there you can get the enclosing rule.
             *
             * @since 4.3
             */
            let DecisionEventInfo = class DecisionEventInfo {
                constructor(decision, state, input, startIndex, stopIndex, fullCtx)
                {
                    this.decision = decision;
                    this.fullCtx = fullCtx;
                    this.stopIndex = stopIndex;
                    this.input = input;
                    this.startIndex = startIndex;
                    this.state = state;
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], DecisionEventInfo.prototype, "input", void 0);
            DecisionEventInfo = __decorate([
            __param(2, Decorators_1.NotNull)
            ], DecisionEventInfo);
            exports.DecisionEventInfo = DecisionEventInfo;

        }, {
            "../Decorators": 224
        }],
        270: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../Decorators");
            /**
             * This class contains profiling gathered for a particular decision.
             *
             * Parsing performance in ANTLR 4 is heavily influenced by both static factors
             * (e.g. the form of the rules in the grammar) and dynamic factors (e.g. the
             * choice of input and the state of the DFA cache at the time profiling
             * operations are started). For best results, gather and use aggregate
             * statistics from a large sample of inputs representing the inputs expected in
             * production before using the results to make changes in the grammar.
             *
             * @since 4.3
             */
            class DecisionInfo {
                /**
                     * Constructs a new instance of the {@link DecisionInfo} class to contain
                     * statistics for a particular decision.
                     *
                     * @param decision The decision number
                     */
                constructor(decision)
                {
                    /**
                             * The total number of times {@link ParserATNSimulator#adaptivePredict} was
                             * invoked for this decision.
                             */
                    this.invocations = 0;
                    /**
                             * The total time spent in {@link ParserATNSimulator#adaptivePredict} for
                             * this decision, in nanoseconds.
                             *
                             * The value of this field contains the sum of differential results obtained
                             * by {@link System#nanoTime()}, and is not adjusted to compensate for JIT
                             * and/or garbage collection overhead. For best accuracy, use a modern JVM
                             * implementation that provides precise results from
                             * {@link System#nanoTime()}, and perform profiling in a separate process
                             * which is warmed up by parsing the input prior to profiling. If desired,
                             * call {@link ATNSimulator#clearDFA} to reset the DFA cache to its initial
                             * state before starting the profiling measurement pass.
                             */
                    this.timeInPrediction = 0;
                    /**
                             * The sum of the lookahead required for SLL prediction for this decision.
                             * Note that SLL prediction is used before LL prediction for performance
                             * reasons even when {@link PredictionMode#LL} or
                             * {@link PredictionMode#LL_EXACT_AMBIG_DETECTION} is used.
                             */
                    this.SLL_TotalLook = 0;
                    /**
                             * Gets the minimum lookahead required for any single SLL prediction to
                             * complete for this decision, by reaching a unique prediction, reaching an
                             * SLL conflict state, or encountering a syntax error.
                             */
                    this.SLL_MinLook = 0;
                    /**
                             * Gets the maximum lookahead required for any single SLL prediction to
                             * complete for this decision, by reaching a unique prediction, reaching an
                             * SLL conflict state, or encountering a syntax error.
                             */
                    this.SLL_MaxLook = 0;
                    /**
                             * The sum of the lookahead required for LL prediction for this decision.
                             * Note that LL prediction is only used when SLL prediction reaches a
                             * conflict state.
                             */
                    this.LL_TotalLook = 0;
                    /**
                             * Gets the minimum lookahead required for any single LL prediction to
                             * complete for this decision. An LL prediction completes when the algorithm
                             * reaches a unique prediction, a conflict state (for
                             * {@link PredictionMode#LL}, an ambiguity state (for
                             * {@link PredictionMode#LL_EXACT_AMBIG_DETECTION}, or a syntax error.
                             */
                    this.LL_MinLook = 0;
                    /**
                             * Gets the maximum lookahead required for any single LL prediction to
                             * complete for this decision. An LL prediction completes when the algorithm
                             * reaches a unique prediction, a conflict state (for
                             * {@link PredictionMode#LL}, an ambiguity state (for
                             * {@link PredictionMode#LL_EXACT_AMBIG_DETECTION}, or a syntax error.
                             */
                    this.LL_MaxLook = 0;
                    /**
                             * A collection of {@link ContextSensitivityInfo} instances describing the
                             * context sensitivities encountered during LL prediction for this decision.
                             *
                             * @see ContextSensitivityInfo
                             */
                    this.contextSensitivities = [];
                    /**
                             * A collection of {@link ErrorInfo} instances describing the parse errors
                             * identified during calls to {@link ParserATNSimulator#adaptivePredict} for
                             * this decision.
                             *
                             * @see ErrorInfo
                             */
                    this.errors = [];
                    /**
                             * A collection of {@link AmbiguityInfo} instances describing the
                             * ambiguities encountered during LL prediction for this decision.
                             *
                             * @see AmbiguityInfo
                             */
                    this.ambiguities = [];
                    /**
                             * A collection of {@link PredicateEvalInfo} instances describing the
                             * results of evaluating individual predicates during prediction for this
                             * decision.
                             *
                             * @see PredicateEvalInfo
                             */
                    this.predicateEvals = [];
                    /**
                             * The total number of ATN transitions required during SLL prediction for
                             * this decision. An ATN transition is determined by the number of times the
                             * DFA does not contain an edge that is required for prediction, resulting
                             * in on-the-fly computation of that edge.
                             *
                             * If DFA caching of SLL transitions is employed by the implementation, ATN
                             * computation may cache the computed edge for efficient lookup during
                             * future parsing of this decision. Otherwise, the SLL parsing algorithm
                             * will use ATN transitions exclusively.
                             *
                             * @see #SLL_ATNTransitions
                             * @see ParserATNSimulator#computeTargetState
                             * @see LexerATNSimulator#computeTargetState
                             */
                    this.SLL_ATNTransitions = 0;
                    /**
                             * The total number of DFA transitions required during SLL prediction for
                             * this decision.
                             *
                             * If the ATN simulator implementation does not use DFA caching for SLL
                             * transitions, this value will be 0.
                             *
                             * @see ParserATNSimulator#getExistingTargetState
                             * @see LexerATNSimulator#getExistingTargetState
                             */
                    this.SLL_DFATransitions = 0;
                    /**
                             * Gets the total number of times SLL prediction completed in a conflict
                             * state, resulting in fallback to LL prediction.
                             *
                             * Note that this value is not related to whether or not
                             * {@link PredictionMode#SLL} may be used successfully with a particular
                             * grammar. If the ambiguity resolution algorithm applied to the SLL
                             * conflicts for this decision produce the same result as LL prediction for
                             * this decision, {@link PredictionMode#SLL} would produce the same overall
                             * parsing result as {@link PredictionMode#LL}.
                             */
                    this.LL_Fallback = 0;
                    /**
                             * The total number of ATN transitions required during LL prediction for
                             * this decision. An ATN transition is determined by the number of times the
                             * DFA does not contain an edge that is required for prediction, resulting
                             * in on-the-fly computation of that edge.
                             *
                             * If DFA caching of LL transitions is employed by the implementation, ATN
                             * computation may cache the computed edge for efficient lookup during
                             * future parsing of this decision. Otherwise, the LL parsing algorithm will
                             * use ATN transitions exclusively.
                             *
                             * @see #LL_DFATransitions
                             * @see ParserATNSimulator#computeTargetState
                             * @see LexerATNSimulator#computeTargetState
                             */
                    this.LL_ATNTransitions = 0;
                    /**
                             * The total number of DFA transitions required during LL prediction for
                             * this decision.
                             *
                             * If the ATN simulator implementation does not use DFA caching for LL
                             * transitions, this value will be 0.
                             *
                             * @see ParserATNSimulator#getExistingTargetState
                             * @see LexerATNSimulator#getExistingTargetState
                             */
                    this.LL_DFATransitions = 0;
                    this.decision = decision;
                }
                toString()
                {
                    return "{" +
                    "decision=" + this.decision +
                    ", contextSensitivities=" + this.contextSensitivities.length +
                    ", errors=" + this.errors.length +
                    ", ambiguities=" + this.ambiguities.length +
                    ", SLL_lookahead=" + this.SLL_TotalLook +
                    ", SLL_ATNTransitions=" + this.SLL_ATNTransitions +
                    ", SLL_DFATransitions=" + this.SLL_DFATransitions +
                    ", LL_Fallback=" + this.LL_Fallback +
                    ", LL_lookahead=" + this.LL_TotalLook +
                    ", LL_ATNTransitions=" + this.LL_ATNTransitions +
                    "}";
                }
            }
            __decorate([
            Decorators_1.Override
            ], DecisionInfo.prototype, "toString", null);
            exports.DecisionInfo = DecisionInfo;

        }, {
            "../Decorators": 224
        }],
        271: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:28.4381103-07:00
            const ATNState_1 = require("./ATNState");
            class DecisionState extends ATNState_1.ATNState {
                constructor()
                {
                    super(...arguments);
                    this.decision = -1;
                    this.nonGreedy = false;
                    this.sll = false;
                }
            }
            exports.DecisionState = DecisionState;

        }, {
            "./ATNState": 257
        }],
        272: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../Decorators");
            const Transition_1 = require("./Transition");
            let EpsilonTransition = class EpsilonTransition extends Transition_1.Transition {
                constructor(target, outermostPrecedenceReturn=-1)
                {
                    super(target);
                    this._outermostPrecedenceReturn = outermostPrecedenceReturn;
                }
                /**
                     * @returns the rule index of a precedence rule for which this transition is
                     * returning from, where the precedence value is 0; otherwise, -1.
                     *
                     * @see ATNConfig.isPrecedenceFilterSuppressed
                     * @see ParserATNSimulator#applyPrecedenceFilter(ATNConfigSet, ParserRuleContext, PredictionContextCache)
                     * @since 4.4.1
                     */
                get outermostPrecedenceReturn()
                {
                    return this._outermostPrecedenceReturn;
                }
                get serializationType()
                {
                    return 1 /* EPSILON */
                    ;
                }
                get isEpsilon()
                {
                    return true;
                }
                matches(symbol, minVocabSymbol, maxVocabSymbol)
                {
                    return false;
                }
                toString()
                {
                    return "epsilon";
                }
            }
            ;
            __decorate([
            Decorators_1.Override
            ], EpsilonTransition.prototype, "serializationType", null);
            __decorate([
            Decorators_1.Override
            ], EpsilonTransition.prototype, "isEpsilon", null);
            __decorate([
            Decorators_1.Override
            ], EpsilonTransition.prototype, "matches", null);
            __decorate([
            Decorators_1.Override,
            Decorators_1.NotNull
            ], EpsilonTransition.prototype, "toString", null);
            EpsilonTransition = __decorate([
            __param(0, Decorators_1.NotNull)
            ], EpsilonTransition);
            exports.EpsilonTransition = EpsilonTransition;

        }, {
            "../Decorators": 224,
            "./Transition": 313
        }],
        273: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:28.7213647-07:00
            const DecisionEventInfo_1 = require("./DecisionEventInfo");
            const Decorators_1 = require("../Decorators");
            /**
             * This class represents profiling event information for a syntax error
             * identified during prediction. Syntax errors occur when the prediction
             * algorithm is unable to identify an alternative which would lead to a
             * successful parse.
             *
             * @see Parser#notifyErrorListeners(Token, String, RecognitionException)
             * @see ANTLRErrorListener#syntaxError
             *
             * @since 4.3
             */
            let ErrorInfo = class ErrorInfo extends DecisionEventInfo_1.DecisionEventInfo {
                /**
                     * Constructs a new instance of the {@link ErrorInfo} class with the
                     * specified detailed syntax error information.
                     *
                     * @param decision The decision number
                     * @param state The final simulator state reached during prediction
                     * prior to reaching the {@link ATNSimulator#ERROR} state
                     * @param input The input token stream
                     * @param startIndex The start index for the current prediction
                     * @param stopIndex The index at which the syntax error was identified
                     */
                constructor(decision, state, input, startIndex, stopIndex)
                {
                    super(decision, state, input, startIndex, stopIndex, state.useContext);
                }
            }
            ;
            ErrorInfo = __decorate([
            __param(1, Decorators_1.NotNull),
            __param(2, Decorators_1.NotNull)
            ], ErrorInfo);
            exports.ErrorInfo = ErrorInfo;

        }, {
            "../Decorators": 224,
            "./DecisionEventInfo": 269
        }],
        274: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const ATNStateType_1 = require("./ATNStateType");
            const BasicState_1 = require("./BasicState");
            const Decorators_1 = require("../Decorators");
            /**
             *
             * @author Sam Harwell
             */
            class InvalidState extends BasicState_1.BasicState {
                get stateType()
                {
                    return ATNStateType_1.ATNStateType.INVALID_TYPE;
                }
            }
            __decorate([
            Decorators_1.Override
            ], InvalidState.prototype, "stateType", null);
            exports.InvalidState = InvalidState;

        }, {
            "../Decorators": 224,
            "./ATNStateType": 258,
            "./BasicState": 264
        }],
        275: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:30.4445360-07:00
            const AbstractPredicateTransition_1 = require("./AbstractPredicateTransition");
            const Array2DHashSet_1 = require("../misc/Array2DHashSet");
            const ATNConfig_1 = require("./ATNConfig");
            const BitSet_1 = require("../misc/BitSet");
            const IntervalSet_1 = require("../misc/IntervalSet");
            const Decorators_1 = require("../Decorators");
            const NotSetTransition_1 = require("./NotSetTransition");
            const ObjectEqualityComparator_1 = require("../misc/ObjectEqualityComparator");
            const PredictionContext_1 = require("./PredictionContext");
            const RuleStopState_1 = require("./RuleStopState");
            const RuleTransition_1 = require("./RuleTransition");
            const Token_1 = require("../Token");
            const WildcardTransition_1 = require("./WildcardTransition");
            let LL1Analyzer = class LL1Analyzer {
                constructor(atn)
                {
                    this.atn = atn;
                }
                /**
                     * Calculates the SLL(1) expected lookahead set for each outgoing transition
                     * of an {@link ATNState}. The returned array has one element for each
                     * outgoing transition in `s`. If the closure from transition
                     * *i* leads to a semantic predicate before matching a symbol, the
                     * element at index *i* of the result will be `undefined`.
                     *
                     * @param s the ATN state
                     * @returns the expected symbols for each outgoing transition of `s`.
                     */
                getDecisionLookahead(s)
                {
                    //    System.out.println("LOOK("+s.stateNumber+")");
                    if (s == null) {
                        return undefined;
                    }
                    let look = new Array(s.numberOfTransitions);
                    for (let alt = 0; alt < s.numberOfTransitions; alt++) {
                        let current = new IntervalSet_1.IntervalSet();
                        look[alt] = current;
                        let lookBusy = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
                        let seeThruPreds = false; // fail to get lookahead upon pred
                        this._LOOK(s.transition(alt).target, undefined, PredictionContext_1.PredictionContext.EMPTY_LOCAL, current, lookBusy, new BitSet_1.BitSet(), seeThruPreds, false);
                        // Wipe out lookahead for this alternative if we found nothing
                        // or we had a predicate when we !seeThruPreds
                        if (current.size === 0 || current.contains(LL1Analyzer.HIT_PRED)) {
                            current = undefined;
                            look[alt] = current;
                        }
                    }
                    return look;
                }
                LOOK(s, ctx, stopState)
                {
                    if (stopState === undefined) {
                        if (s.atn == null) {
                            throw new Error("Illegal state");
                        }
                        stopState = s.atn.ruleToStopState[s.ruleIndex];
                    }
                    else if (stopState === null) {
                        // This is an explicit request to pass undefined as the stopState to _LOOK. Used to distinguish an overload
                        // from the method which simply omits the stopState parameter.
                        stopState = undefined;
                    }
                    let r = new IntervalSet_1.IntervalSet();
                    let seeThruPreds = true; // ignore preds; get all lookahead
                    let addEOF = true;
                    this._LOOK(s, stopState, ctx, r, new Array2DHashSet_1.Array2DHashSet(), new BitSet_1.BitSet(), seeThruPreds, addEOF);
                    return r;
                }
                /**
                     * Compute set of tokens that can follow `s` in the ATN in the
                     * specified `ctx`.
                     * <p/>
                     * If `ctx` is {@link PredictionContext#EMPTY_LOCAL} and
                     * `stopState` or the end of the rule containing `s` is reached,
                     * {@link Token#EPSILON} is added to the result set. If `ctx` is not
                     * {@link PredictionContext#EMPTY_LOCAL} and `addEOF` is `true`
                     * and `stopState` or the end of the outermost rule is reached,
                     * {@link Token#EOF} is added to the result set.
                     *
                     * @param s the ATN state.
                     * @param stopState the ATN state to stop at. This can be a
                     * {@link BlockEndState} to detect epsilon paths through a closure.
                     * @param ctx The outer context, or {@link PredictionContext#EMPTY_LOCAL} if
                     * the outer context should not be used.
                     * @param look The result lookahead set.
                     * @param lookBusy A set used for preventing epsilon closures in the ATN
                     * from causing a stack overflow. Outside code should pass
                     * `new HashSet<ATNConfig>` for this argument.
                     * @param calledRuleStack A set used for preventing left recursion in the
                     * ATN from causing a stack overflow. Outside code should pass
                     * `new BitSet()` for this argument.
                     * @param seeThruPreds `true` to true semantic predicates as
                     * implicitly `true` and "see through them", otherwise `false`
                     * to treat semantic predicates as opaque and add {@link #HIT_PRED} to the
                     * result if one is encountered.
                     * @param addEOF Add {@link Token#EOF} to the result if the end of the
                     * outermost context is reached. This parameter has no effect if `ctx`
                     * is {@link PredictionContext#EMPTY_LOCAL}.
                     */
                _LOOK(s, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF)
                {
                    //    System.out.println("_LOOK("+s.stateNumber+", ctx="+ctx);
                    let c = ATNConfig_1.ATNConfig.create(s, 0, ctx);
                    if (!lookBusy.add(c)) {
                        return;
                    }
                    if (s === stopState) {
                        if (PredictionContext_1.PredictionContext.isEmptyLocal(ctx)) {
                            look.add(Token_1.Token.EPSILON);
                            return;
                        }
                        else if (ctx.isEmpty) {
                            if (addEOF) {
                                look.add(Token_1.Token.EOF);
                            }
                            return;
                        }
                    }
                    if (s instanceof RuleStopState_1.RuleStopState) {
                        if (ctx.isEmpty && !PredictionContext_1.PredictionContext.isEmptyLocal(ctx)) {
                            if (addEOF) {
                                look.add(Token_1.Token.EOF);
                            }
                            return;
                        }
                        let removed = calledRuleStack.get(s.ruleIndex);
                        try {
                            calledRuleStack.clear(s.ruleIndex);
                            for (let i = 0; i < ctx.size; i++) {
                                if (ctx.getReturnState(i) === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                                    continue;
                                }
                                let returnState = this.atn.states[ctx.getReturnState(i)];
                                //          System.out.println("popping back to "+retState);
                                this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                            }
                        }
                        finally {
                            if (removed) {
                                calledRuleStack.set(s.ruleIndex);
                            }
                        }
                    }
                    let n = s.numberOfTransitions;
                    for (let i = 0; i < n; i++) {
                        let t = s.transition(i);
                        if (t instanceof RuleTransition_1.RuleTransition) {
                            if (calledRuleStack.get(t.ruleIndex)) {
                                continue;
                            }
                            let newContext = ctx.getChild(t.followState.stateNumber);
                            try {
                                calledRuleStack.set(t.ruleIndex);
                                this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                            }
                            finally {
                                calledRuleStack.clear(t.ruleIndex);
                            }
                        }
                        else if (t instanceof AbstractPredicateTransition_1.AbstractPredicateTransition) {
                            if (seeThruPreds) {
                                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                            }
                            else {
                                look.add(LL1Analyzer.HIT_PRED);
                            }
                        }
                        else if (t.isEpsilon) {
                            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                        }
                        else if (t instanceof WildcardTransition_1.WildcardTransition) {
                            look.addAll(IntervalSet_1.IntervalSet.of(Token_1.Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType));
                        }
                        else {
                            //        System.out.println("adding "+ t);
                            let set = t.label;
                            if (set != null) {
                                if (t instanceof NotSetTransition_1.NotSetTransition) {
                                    set = set.complement(IntervalSet_1.IntervalSet.of(Token_1.Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType));
                                }
                                look.addAll(set);
                            }
                        }
                    }
                }
            }
            ;
            /** Special value added to the lookahead sets to indicate that we hit
             *  a predicate during analysis if `seeThruPreds==false`.
             */
            LL1Analyzer.HIT_PRED = Token_1.Token.INVALID_TYPE;
            __decorate([
            Decorators_1.NotNull
            ], LL1Analyzer.prototype, "atn", void 0);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
            ], LL1Analyzer.prototype, "LOOK", null);
            __decorate([
            __param(0, Decorators_1.NotNull),
            __param(2, Decorators_1.NotNull),
            __param(3, Decorators_1.NotNull),
            __param(4, Decorators_1.NotNull),
            __param(5, Decorators_1.NotNull)
            ], LL1Analyzer.prototype, "_LOOK", null);
            LL1Analyzer = __decorate([
            __param(0, Decorators_1.NotNull)
            ], LL1Analyzer);
            exports.LL1Analyzer = LL1Analyzer;

        }, {
            "../Decorators": 224,
            "../Token": 248,
            "../misc/Array2DHashSet": 322,
            "../misc/BitSet": 325,
            "../misc/IntervalSet": 331,
            "../misc/ObjectEqualityComparator": 334,
            "./ATNConfig": 252,
            "./AbstractPredicateTransition": 259,
            "./NotSetTransition": 289,
            "./PredictionContext": 298,
            "./RuleStopState": 304,
            "./RuleTransition": 305,
            "./WildcardTransition": 314
        }],
        276: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:29.1083066-07:00
            const AcceptStateInfo_1 = require("../dfa/AcceptStateInfo");
            const ATN_1 = require("./ATN");
            const ATNConfig_1 = require("./ATNConfig");
            const ATNConfigSet_1 = require("./ATNConfigSet");
            const ATNSimulator_1 = require("./ATNSimulator");
            const DFAState_1 = require("../dfa/DFAState");
            const Interval_1 = require("../misc/Interval");
            const IntStream_1 = require("../IntStream");
            const Lexer_1 = require("../Lexer");
            const LexerActionExecutor_1 = require("./LexerActionExecutor");
            const LexerNoViableAltException_1 = require("../LexerNoViableAltException");
            const Decorators_1 = require("../Decorators");
            const OrderedATNConfigSet_1 = require("./OrderedATNConfigSet");
            const PredictionContext_1 = require("./PredictionContext");
            const RuleStopState_1 = require("./RuleStopState");
            const Token_1 = require("../Token");
            const assert = require("assert");
            /** "dup" of ParserInterpreter */
            let LexerATNSimulator = class LexerATNSimulator extends ATNSimulator_1.ATNSimulator {
                constructor(atn, recog)
                {
                    super(atn);
                    this.optimize_tail_calls = true;
                    /** The current token's starting index into the character stream.
                             *  Shared across DFA to ATN simulation in case the ATN fails and the
                             *  DFA did not have a previous accept state. In this case, we use the
                             *  ATN-generated exception object.
                             */
                    this.startIndex = -1;
                    /** line number 1..n within the input */
                    this._line = 1;
                    /** The index of the character relative to the beginning of the line 0..n-1 */
                    this._charPositionInLine = 0;
                    this.mode = Lexer_1.Lexer.DEFAULT_MODE;
                    /** Used during DFA/ATN exec to record the most recent accept configuration info */
                    this.prevAccept = new LexerATNSimulator.SimState();
                    this.recog = recog;
                }
                copyState(simulator)
                {
                    this._charPositionInLine = simulator.charPositionInLine;
                    this._line = simulator._line;
                    this.mode = simulator.mode;
                    this.startIndex = simulator.startIndex;
                }
                match(input, mode)
                {
                    LexerATNSimulator.match_calls++;
                    this.mode = mode;
                    let mark = input.mark();
                    try {
                        this.startIndex = input.index;
                        this.prevAccept.reset();
                        let s0 = this.atn.modeToDFA[mode].s0;
                        if (s0 == null) {
                            return this.matchATN(input);
                        }
                        else {
                            return this.execATN(input, s0);
                        }
                    }
                    finally {
                        input.release(mark);
                    }
                }
                reset()
                {
                    this.prevAccept.reset();
                    this.startIndex = -1;
                    this._line = 1;
                    this._charPositionInLine = 0;
                    this.mode = Lexer_1.Lexer.DEFAULT_MODE;
                }
                matchATN(input)
                {
                    let startState = this.atn.modeToStartState[this.mode];
                    if (LexerATNSimulator.debug) {
                        console.log(`matchATN mode ${this.mode} start: ${startState}`);
                    }
                    let old_mode = this.mode;
                    let s0_closure = this.computeStartState(input, startState);
                    let suppressEdge = s0_closure.hasSemanticContext;
                    if (suppressEdge) {
                        s0_closure.hasSemanticContext = false;
                    }
                    let next = this.addDFAState(s0_closure);
                    if (!suppressEdge) {
                        let dfa = this.atn.modeToDFA[this.mode];
                        if (!dfa.s0) {
                            dfa.s0 = next;
                        }
                        else {
                            next = dfa.s0;
                        }
                    }
                    let predict = this.execATN(input, next);
                    if (LexerATNSimulator.debug) {
                        console.log(`DFA after matchATN: ${this.atn.modeToDFA[old_mode].toLexerString()}`);
                    }
                    return predict;
                }
                execATN(input, ds0)
                {
                    // console.log("enter exec index "+input.index+" from "+ds0.configs);
                    if (LexerATNSimulator.debug) {
                        console.log(`start state closure=${ds0.configs}`);
                    }
                    if (ds0.isAcceptState) {
                        // allow zero-length tokens
                        this.captureSimState(this.prevAccept, input, ds0);
                    }
                    let t = input.LA(1);
                    // @NotNull
                    let s = ds0; // s is current/from DFA state
                    while (true) {
                        // while more work
                        if (LexerATNSimulator.debug) {
                            console.log(`execATN loop starting closure: ${s.configs}`);
                        }
                        // As we move src->trg, src->trg, we keep track of the previous trg to
                        // avoid looking up the DFA state again, which is expensive.
                        // If the previous target was already part of the DFA, we might
                        // be able to avoid doing a reach operation upon t. If s!=null,
                        // it means that semantic predicates didn't prevent us from
                        // creating a DFA state. Once we know s!=null, we check to see if
                        // the DFA state has an edge already for t. If so, we can just reuse
                        // it's configuration set; there's no point in re-computing it.
                        // This is kind of like doing DFA simulation within the ATN
                        // simulation because DFA simulation is really just a way to avoid
                        // computing reach/closure sets. Technically, once we know that
                        // we have a previously added DFA state, we could jump over to
                        // the DFA simulator. But, that would mean popping back and forth
                        // a lot and making things more complicated algorithmically.
                        // This optimization makes a lot of sense for loops within DFA.
                        // A character will take us back to an existing DFA state
                        // that already has lots of edges out of it. e.g., .* in comments.
                        let target = this.getExistingTargetState(s, t);
                        if (target == null) {
                            target = this.computeTargetState(input, s, t);
                        }
                        if (target === ATNSimulator_1.ATNSimulator.ERROR) {
                            break;
                        }
                        // If this is a consumable input element, make sure to consume before
                        // capturing the accept state so the input index, line, and char
                        // position accurately reflect the state of the interpreter at the
                        // end of the token.
                        if (t !== IntStream_1.IntStream.EOF) {
                            this.consume(input);
                        }
                        if (target.isAcceptState) {
                            this.captureSimState(this.prevAccept, input, target);
                            if (t === IntStream_1.IntStream.EOF) {
                                break;
                            }
                        }
                        t = input.LA(1);
                        s = target; // flip; current DFA target becomes new src/from state
                    }
                    return this.failOrAccept(this.prevAccept, input, s.configs, t);
                }
                /**
                     * Get an existing target state for an edge in the DFA. If the target state
                     * for the edge has not yet been computed or is otherwise not available,
                     * this method returns `undefined`.
                     *
                     * @param s The current DFA state
                     * @param t The next input symbol
                     * @returns The existing target DFA state for the given input symbol
                     * `t`, or `undefined` if the target state for this edge is not
                     * already cached
                     */
                getExistingTargetState(s, t)
                {
                    let target = s.getTarget(t);
                    if (LexerATNSimulator.debug && target != null) {
                        console.log("reuse state " + s.stateNumber +
                        " edge to " + target.stateNumber);
                    }
                    return target;
                }
                /**
                     * Compute a target state for an edge in the DFA, and attempt to add the
                     * computed state and corresponding edge to the DFA.
                     *
                     * @param input The input stream
                     * @param s The current DFA state
                     * @param t The next input symbol
                     *
                     * @returns The computed target DFA state for the given input symbol
                     * `t`. If `t` does not lead to a valid DFA state, this method
                     * returns {@link #ERROR}.
                     */
                computeTargetState(input, s, t)
                {
                    let reach = new OrderedATNConfigSet_1.OrderedATNConfigSet();
                    // if we don't find an existing DFA state
                    // Fill reach starting from closure, following t transitions
                    this.getReachableConfigSet(input, s.configs, reach, t);
                    if (reach.isEmpty) {
                        // we got nowhere on t from s
                        if (!reach.hasSemanticContext) {
                            // we got nowhere on t, don't throw out this knowledge; it'd
                            // cause a failover from DFA later.
                            this.addDFAEdge(s, t, ATNSimulator_1.ATNSimulator.ERROR);
                        }
                        // stop when we can't match any more char
                        return ATNSimulator_1.ATNSimulator.ERROR;
                    }
                    // Add an edge from s to target DFA found/created for reach
                    return this.addDFAEdge(s, t, reach);
                }
                failOrAccept(prevAccept, input, reach, t)
                {
                    if (prevAccept.dfaState != null) {
                        let lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
                        this.accept(input, lexerActionExecutor, this.startIndex, prevAccept.index, prevAccept.line, prevAccept.charPos);
                        return prevAccept.dfaState.prediction;
                    }
                    else {
                        // if no accept and EOF is first char, return EOF
                        if (t === IntStream_1.IntStream.EOF && input.index === this.startIndex) {
                            return Token_1.Token.EOF;
                        }
                        throw new LexerNoViableAltException_1.LexerNoViableAltException(this.recog, input, this.startIndex, reach);
                    }
                }
                /** Given a starting configuration set, figure out all ATN configurations
                     *  we can reach upon input `t`. Parameter `reach` is a return
                     *  parameter.
                     */
                getReachableConfigSet(input, closure, reach, t)
                {
                    // this is used to skip processing for configs which have a lower priority
                    // than a config that already reached an accept state for the same rule
                    let skipAlt = ATN_1.ATN.INVALID_ALT_NUMBER;
                    for (let c of closure) {
                        let currentAltReachedAcceptState = c.alt === skipAlt;
                        if (currentAltReachedAcceptState && c.hasPassedThroughNonGreedyDecision) {
                            continue;
                        }
                        if (LexerATNSimulator.debug) {
                            console.log(`testing ${this.getTokenName(t)} at ${c.toString(this.recog, true)}`);
                        }
                        let n = c.state.numberOfOptimizedTransitions;
                        for (let ti = 0; ti < n; ti++) {
                            // for each optimized transition
                            let trans = c.state.getOptimizedTransition(ti);
                            let target = this.getReachableTarget(trans, t);
                            if (target != null) {
                                let lexerActionExecutor = c.lexerActionExecutor;
                                let config;
                                if (lexerActionExecutor != null) {
                                    lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
                                    config = c.transform(target, true, lexerActionExecutor);
                                }
                                else {
                                    assert(c.lexerActionExecutor == null);
                                    config = c.transform(target, true);
                                }
                                let treatEofAsEpsilon = t === IntStream_1.IntStream.EOF;
                                if (this.closure(input, config, reach, currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
                                    // any remaining configs for this alt have a lower priority than
                                    // the one that just reached an accept state.
                                    skipAlt = c.alt;
                                    break;
                                }
                            }
                        }
                    }
                }
                accept(input, lexerActionExecutor, startIndex, index, line, charPos)
                {
                    if (LexerATNSimulator.debug) {
                        console.log(`ACTION ${lexerActionExecutor}`);
                    }
                    // seek to after last char in token
                    input.seek(index);
                    this._line = line;
                    this._charPositionInLine = charPos;
                    if (lexerActionExecutor != null && this.recog != null) {
                        lexerActionExecutor.execute(this.recog, input, startIndex);
                    }
                }
                getReachableTarget(trans, t)
                {
                    if (trans.matches(t, Lexer_1.Lexer.MIN_CHAR_VALUE, Lexer_1.Lexer.MAX_CHAR_VALUE)) {
                        return trans.target;
                    }
                    return undefined;
                }
                computeStartState(input, p)
                {
                    let initialContext = PredictionContext_1.PredictionContext.EMPTY_FULL;
                    let configs = new OrderedATNConfigSet_1.OrderedATNConfigSet();
                    for (let i = 0; i < p.numberOfTransitions; i++) {
                        let target = p.transition(i).target;
                        let c = ATNConfig_1.ATNConfig.create(target, i + 1, initialContext);
                        this.closure(input, c, configs, false, false, false);
                    }
                    return configs;
                }
                /**
                     * Since the alternatives within any lexer decision are ordered by
                     * preference, this method stops pursuing the closure as soon as an accept
                     * state is reached. After the first accept state is reached by depth-first
                     * search from `config`, all other (potentially reachable) states for
                     * this rule would have a lower priority.
                     *
                     * @returns `true` if an accept state is reached, otherwise
                     * `false`.
                     */
                closure(input, config, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon)
                {
                    if (LexerATNSimulator.debug) {
                        console.log("closure(" + config.toString(this.recog, true) + ")");
                    }
                    if (config.state instanceof RuleStopState_1.RuleStopState) {
                        if (LexerATNSimulator.debug) {
                            if (this.recog != null) {
                                console.log(`closure at ${this.recog.ruleNames[config.state.ruleIndex]} rule stop ${config}`);
                            }
                            else {
                                console.log(`closure at rule stop ${config}`);
                            }
                        }
                        let context = config.context;
                        if (context.isEmpty) {
                            configs.add(config);
                            return true;
                        }
                        else if (context.hasEmpty) {
                            configs.add(config.transform(config.state, true, PredictionContext_1.PredictionContext.EMPTY_FULL));
                            currentAltReachedAcceptState = true;
                        }
                        for (let i = 0; i < context.size; i++) {
                            let returnStateNumber = context.getReturnState(i);
                            if (returnStateNumber === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                                continue;
                            }
                            let newContext = context.getParent(i); // "pop" return state
                            let returnState = this.atn.states[returnStateNumber];
                            let c = config.transform(returnState, false, newContext);
                            currentAltReachedAcceptState = this.closure(input, c, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
                        }
                        return currentAltReachedAcceptState;
                    }
                    // optimization
                    if (!config.state.onlyHasEpsilonTransitions) {
                        if (!currentAltReachedAcceptState || !config.hasPassedThroughNonGreedyDecision) {
                            configs.add(config);
                        }
                    }
                    let p = config.state;
                    for (let i = 0; i < p.numberOfOptimizedTransitions; i++) {
                        let t = p.getOptimizedTransition(i);
                        let c = this.getEpsilonTarget(input, config, t, configs, speculative, treatEofAsEpsilon);
                        if (c != null) {
                            currentAltReachedAcceptState = this.closure(input, c, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
                        }
                    }
                    return currentAltReachedAcceptState;
                }
                // side-effect: can alter configs.hasSemanticContext
                getEpsilonTarget(input, config, t, configs, speculative, treatEofAsEpsilon)
                {
                    let c;
                    switch (t.serializationType) {
                    case 3 /* RULE */
                    :
                        let ruleTransition = t;
                        if (this.optimize_tail_calls && ruleTransition.optimizedTailCall && !config.context.hasEmpty) {
                            c = config.transform(t.target, true);
                        }
                        else {
                            let newContext = config.context.getChild(ruleTransition.followState.stateNumber);
                            c = config.transform(t.target, true, newContext);
                        }
                        break;
                    case 10 /* PRECEDENCE */
                    :
                        throw new Error("Precedence predicates are not supported in lexers.");
                    case 4 /* PREDICATE */
                    :
                        /*  Track traversing semantic predicates. If we traverse,
                                            we cannot add a DFA state for this "reach" computation
                                            because the DFA would not test the predicate again in the
                                            future. Rather than creating collections of semantic predicates
                                            like v3 and testing them on prediction, v4 will test them on the
                                            fly all the time using the ATN not the DFA. This is slower but
                                            semantically it's not used that often. One of the key elements to
                                            this predicate mechanism is not adding DFA states that see
                                            predicates immediately afterwards in the ATN. For example,
                            
                                            a : ID {p1}? | ID {p2}? ;
                            
                                            should create the start state for rule 'a' (to save start state
                                            competition), but should not create target of ID state. The
                                            collection of ATN states the following ID references includes
                                            states reached by traversing predicates. Since this is when we
                                            test them, we cannot cash the DFA state target of ID.
                                        */
                        let pt = t;
                        if (LexerATNSimulator.debug) {
                            console.log("EVAL rule " + pt.ruleIndex + ":" + pt.predIndex);
                        }
                        configs.hasSemanticContext = true;
                        if (this.evaluatePredicate(input, pt.ruleIndex, pt.predIndex, speculative)) {
                            c = config.transform(t.target, true);
                        }
                        else {
                            c = undefined;
                        }
                        break;
                    case 6 /* ACTION */
                    :
                        if (config.context.hasEmpty) {
                            // execute actions anywhere in the start rule for a token.
                            //
                            // TODO: if the entry rule is invoked recursively, some
                            // actions may be executed during the recursive call. The
                            // problem can appear when hasEmpty is true but
                            // isEmpty is false. In this case, the config needs to be
                            // split into two contexts - one with just the empty path
                            // and another with everything but the empty path.
                            // Unfortunately, the current algorithm does not allow
                            // getEpsilonTarget to return two configurations, so
                            // additional modifications are needed before we can support
                            // the split operation.
                            let lexerActionExecutor = LexerActionExecutor_1.LexerActionExecutor.append(config.lexerActionExecutor, this.atn.lexerActions[t.actionIndex]);
                            c = config.transform(t.target, true, lexerActionExecutor);
                            break;
                        }
                        else {
                            // ignore actions in referenced rules
                            c = config.transform(t.target, true);
                            break;
                        }
                    case 1 /* EPSILON */
                    :
                        c = config.transform(t.target, true);
                        break;
                    case 5 /* ATOM */
                    :
                    case 2 /* RANGE */
                    :
                    case 7 /* SET */
                    :
                        if (treatEofAsEpsilon) {
                            if (t.matches(IntStream_1.IntStream.EOF, Lexer_1.Lexer.MIN_CHAR_VALUE, Lexer_1.Lexer.MAX_CHAR_VALUE)) {
                                c = config.transform(t.target, false);
                                break;
                            }
                        }
                        c = undefined;
                        break;
                    default:
                        c = undefined;
                        break;
                    }
                    return c;
                }
                /**
                     * Evaluate a predicate specified in the lexer.
                     *
                     * If `speculative` is `true`, this method was called before
                     * {@link #consume} for the matched character. This method should call
                     * {@link #consume} before evaluating the predicate to ensure position
                     * sensitive values, including {@link Lexer#getText}, {@link Lexer#getLine},
                     * and {@link Lexer#getCharPositionInLine}, properly reflect the current
                     * lexer state. This method should restore `input` and the simulator
                     * to the original state before returning (i.e. undo the actions made by the
                     * call to {@link #consume}.
                     *
                     * @param input The input stream.
                     * @param ruleIndex The rule containing the predicate.
                     * @param predIndex The index of the predicate within the rule.
                     * @param speculative `true` if the current index in `input` is
                     * one character before the predicate's location.
                     *
                     * @returns `true` if the specified predicate evaluates to
                     * `true`.
                     */
                evaluatePredicate(input, ruleIndex, predIndex, speculative)
                {
                    // assume true if no recognizer was provided
                    if (this.recog == null) {
                        return true;
                    }
                    if (!speculative) {
                        return this.recog.sempred(undefined, ruleIndex, predIndex);
                    }
                    let savedCharPositionInLine = this._charPositionInLine;
                    let savedLine = this._line;
                    let index = input.index;
                    let marker = input.mark();
                    try {
                        this.consume(input);
                        return this.recog.sempred(undefined, ruleIndex, predIndex);
                    }
                    finally {
                        this._charPositionInLine = savedCharPositionInLine;
                        this._line = savedLine;
                        input.seek(index);
                        input.release(marker);
                    }
                }
                captureSimState(settings, input, dfaState)
                {
                    settings.index = input.index;
                    settings.line = this._line;
                    settings.charPos = this._charPositionInLine;
                    settings.dfaState = dfaState;
                }
                addDFAEdge(p, t, q)
                {
                    if (q instanceof ATNConfigSet_1.ATNConfigSet) {
                        /* leading to this call, ATNConfigSet.hasSemanticContext is used as a
                                    * marker indicating dynamic predicate evaluation makes this edge
                                    * dependent on the specific input sequence, so the static edge in the
                                    * DFA should be omitted. The target DFAState is still created since
                                    * execATN has the ability to resynchronize with the DFA state cache
                                    * following the predicate evaluation step.
                                    *
                                    * TJP notes: next time through the DFA, we see a pred again and eval.
                                    * If that gets us to a previously created (but dangling) DFA
                                    * state, we can continue in pure DFA mode from there.
                                    */
                        let suppressEdge = q.hasSemanticContext;
                        if (suppressEdge) {
                            q.hasSemanticContext = false;
                        }
                        // @NotNull
                        let to = this.addDFAState(q);
                        if (suppressEdge) {
                            return to;
                        }
                        this.addDFAEdge(p, t, to);
                        return to;
                    }
                    else {
                        if (LexerATNSimulator.debug) {
                            console.log("EDGE " + p + " -> " + q + " upon " + String.fromCharCode(t));
                        }
                        if (p != null) {
                            p.setTarget(t, q);
                        }
                    }
                }
                /** Add a new DFA state if there isn't one with this set of
                     *  configurations already. This method also detects the first
                     *  configuration containing an ATN rule stop state. Later, when
                     *  traversing the DFA, we will know which rule to accept.
                     */
                addDFAState(configs)
                {
                    /* the lexer evaluates predicates on-the-fly; by this point configs
                             * should not contain any configurations with unevaluated predicates.
                             */
                    assert(!configs.hasSemanticContext);
                    let proposed = new DFAState_1.DFAState(configs);
                    let existing = this.atn.modeToDFA[this.mode].states.get(proposed);
                    if (existing != null) {
                        return existing;
                    }
                    configs.optimizeConfigs(this);
                    let newState = new DFAState_1.DFAState(configs.clone(true));
                    let firstConfigWithRuleStopState;
                    for (let c of configs) {
                        if (c.state instanceof RuleStopState_1.RuleStopState) {
                            firstConfigWithRuleStopState = c;
                            break;
                        }
                    }
                    if (firstConfigWithRuleStopState != null) {
                        let prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
                        let lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
                        newState.acceptStateInfo = new AcceptStateInfo_1.AcceptStateInfo(prediction, lexerActionExecutor);
                    }
                    return this.atn.modeToDFA[this.mode].addState(newState);
                }
                getDFA(mode)
                {
                    return this.atn.modeToDFA[mode];
                }
                /** Get the text matched so far for the current token.
                     */
                getText(input)
                {
                    // index is first lookahead char, don't include.
                    return input.getText(Interval_1.Interval.of(this.startIndex, input.index - 1));
                }
                get line()
                {
                    return this._line;
                }
                set line(line)
                {
                    this._line = line;
                }
                get charPositionInLine()
                {
                    return this._charPositionInLine;
                }
                set charPositionInLine(charPositionInLine)
                {
                    this._charPositionInLine = charPositionInLine;
                }
                consume(input)
                {
                    let curChar = input.LA(1);
                    if (curChar === "\n".charCodeAt(0)) {
                        this._line++;
                        this._charPositionInLine = 0;
                    }
                    else {
                        this._charPositionInLine++;
                    }
                    input.consume();
                }
                getTokenName(t)
                {
                    if (t === -1) {
                        return "EOF";
                    }
                    //if ( atn.g!=null ) return atn.g.getTokenDisplayName(t);
                    return "'" + String.fromCharCode(t) + "'";
                }
            }
            ;
            LexerATNSimulator.match_calls = 0;
            __decorate([
            Decorators_1.NotNull
            ], LexerATNSimulator.prototype, "prevAccept", void 0);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], LexerATNSimulator.prototype, "copyState", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], LexerATNSimulator.prototype, "match", null);
            __decorate([
            Decorators_1.Override
            ], LexerATNSimulator.prototype, "reset", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], LexerATNSimulator.prototype, "matchATN", null);
            __decorate([
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
            ], LexerATNSimulator.prototype, "execATN", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], LexerATNSimulator.prototype, "getExistingTargetState", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
            ], LexerATNSimulator.prototype, "computeTargetState", null);
            __decorate([
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
            ], LexerATNSimulator.prototype, "getReachableConfigSet", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], LexerATNSimulator.prototype, "accept", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull)
            ], LexerATNSimulator.prototype, "computeStartState", null);
            __decorate([
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
            ], LexerATNSimulator.prototype, "closure", null);
            __decorate([
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull),
            __param(2, Decorators_1.NotNull),
            __param(3, Decorators_1.NotNull)
            ], LexerATNSimulator.prototype, "getEpsilonTarget", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], LexerATNSimulator.prototype, "evaluatePredicate", null);
            __decorate([
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull),
            __param(2, Decorators_1.NotNull)
            ], LexerATNSimulator.prototype, "captureSimState", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], LexerATNSimulator.prototype, "addDFAState", null);
            __decorate([
            Decorators_1.NotNull
            ], LexerATNSimulator.prototype, "getDFA", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], LexerATNSimulator.prototype, "getText", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], LexerATNSimulator.prototype, "consume", null);
            __decorate([
            Decorators_1.NotNull
            ], LexerATNSimulator.prototype, "getTokenName", null);
            LexerATNSimulator = __decorate([
            __param(0, Decorators_1.NotNull)
            ], LexerATNSimulator);
            exports.LexerATNSimulator = LexerATNSimulator;
            (function(LexerATNSimulator) {
                LexerATNSimulator.debug = false;
                LexerATNSimulator.dfa_debug = false;
                /** When we hit an accept state in either the DFA or the ATN, we
                     *  have to notify the character stream to start buffering characters
                     *  via {@link IntStream#mark} and record the current state. The current sim state
                     *  includes the current index into the input, the current line,
                     *  and current character position in that line. Note that the Lexer is
                     *  tracking the starting line and characterization of the token. These
                     *  variables track the "state" of the simulator when it hits an accept state.
                     *
                     *  We track these variables separately for the DFA and ATN simulation
                     *  because the DFA simulation often has to fail over to the ATN
                     *  simulation. If the ATN simulation fails, we need the DFA to fall
                     *  back to its previously accepted state, if any. If the ATN succeeds,
                     *  then the ATN does the accept and the DFA simulator that invoked it
                     *  can simply return the predicted token type.
                     */
                class SimState {
                    constructor()
                    {
                        this.index = -1;
                        this.line = 0;
                        this.charPos = -1;
                    }
                    reset()
                    {
                        this.index = -1;
                        this.line = 0;
                        this.charPos = -1;
                        this.dfaState = undefined;
                    }
                }
                LexerATNSimulator.SimState = SimState;
            })(LexerATNSimulator = exports.LexerATNSimulator || (exports.LexerATNSimulator = {}));
            exports.LexerATNSimulator = LexerATNSimulator;

        }, {
            "../Decorators": 224,
            "../IntStream": 230,
            "../Lexer": 232,
            "../LexerNoViableAltException": 234,
            "../Token": 248,
            "../dfa/AcceptStateInfo": 315,
            "../dfa/DFAState": 318,
            "../misc/Interval": 330,
            "./ATN": 251,
            "./ATNConfig": 252,
            "./ATNConfigSet": 253,
            "./ATNSimulator": 256,
            "./LexerActionExecutor": 277,
            "./OrderedATNConfigSet": 290,
            "./PredictionContext": 298,
            "./RuleStopState": 304,
            "assert": 364
        }],
        277: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:28.8810453-07:00
            const ArrayEqualityComparator_1 = require("../misc/ArrayEqualityComparator");
            const LexerIndexedCustomAction_1 = require("./LexerIndexedCustomAction");
            const MurmurHash_1 = require("../misc/MurmurHash");
            const Decorators_1 = require("../Decorators");
            /**
             * Represents an executor for a sequence of lexer actions which traversed during
             * the matching operation of a lexer rule (token).
             *
             * The executor tracks position information for position-dependent lexer actions
             * efficiently, ensuring that actions appearing only at the end of the rule do
             * not cause bloating of the {@link DFA} created for the lexer.
             *
             * @author Sam Harwell
             * @since 4.2
             */
            let LexerActionExecutor = class LexerActionExecutor {
                /**
                     * Constructs an executor for a sequence of {@link LexerAction} actions.
                     * @param lexerActions The lexer actions to execute.
                     */
                constructor(lexerActions)
                {
                    this._lexerActions = lexerActions;
                    let hash = MurmurHash_1.MurmurHash.initialize();
                    for (let lexerAction of lexerActions) {
                        hash = MurmurHash_1.MurmurHash.update(hash, lexerAction);
                    }
                    this.cachedHashCode = MurmurHash_1.MurmurHash.finish(hash, lexerActions.length);
                }
                /**
                     * Creates a {@link LexerActionExecutor} which executes the actions for
                     * the input `lexerActionExecutor` followed by a specified
                     * `lexerAction`.
                     *
                     * @param lexerActionExecutor The executor for actions already traversed by
                     * the lexer while matching a token within a particular
                     * {@link ATNConfig}. If this is `undefined`, the method behaves as though
                     * it were an empty executor.
                     * @param lexerAction The lexer action to execute after the actions
                     * specified in `lexerActionExecutor`.
                     *
                     * @returns A {@link LexerActionExecutor} for executing the combine actions
                     * of `lexerActionExecutor` and `lexerAction`.
                     */
                static append(lexerActionExecutor, lexerAction)
                {
                    if (!lexerActionExecutor) {
                        return new LexerActionExecutor([lexerAction]);
                    }
                    let lexerActions = lexerActionExecutor._lexerActions.slice(0);
                    lexerActions.push(lexerAction);
                    return new LexerActionExecutor(lexerActions);
                }
                /**
                     * Creates a {@link LexerActionExecutor} which encodes the current offset
                     * for position-dependent lexer actions.
                     *
                     * Normally, when the executor encounters lexer actions where
                     * {@link LexerAction#isPositionDependent} returns `true`, it calls
                     * {@link IntStream#seek} on the input {@link CharStream} to set the input
                     * position to the *end* of the current token. This behavior provides
                     * for efficient DFA representation of lexer actions which appear at the end
                     * of a lexer rule, even when the lexer rule matches a variable number of
                     * characters.
                     *
                     * Prior to traversing a match transition in the ATN, the current offset
                     * from the token start index is assigned to all position-dependent lexer
                     * actions which have not already been assigned a fixed offset. By storing
                     * the offsets relative to the token start index, the DFA representation of
                     * lexer actions which appear in the middle of tokens remains efficient due
                     * to sharing among tokens of the same length, regardless of their absolute
                     * position in the input stream.
                     *
                     * If the current executor already has offsets assigned to all
                     * position-dependent lexer actions, the method returns `this`.
                     *
                     * @param offset The current offset to assign to all position-dependent
                     * lexer actions which do not already have offsets assigned.
                     *
                     * @returns A {@link LexerActionExecutor} which stores input stream offsets
                     * for all position-dependent lexer actions.
                     */
                fixOffsetBeforeMatch(offset)
                {
                    let updatedLexerActions;
                    for (let i = 0; i < this._lexerActions.length; i++) {
                        if (this._lexerActions[i].isPositionDependent && !(this._lexerActions[i] instanceof LexerIndexedCustomAction_1.LexerIndexedCustomAction)) {
                            if (!updatedLexerActions) {
                                updatedLexerActions = this._lexerActions.slice(0);
                            }
                            updatedLexerActions[i] = new LexerIndexedCustomAction_1.LexerIndexedCustomAction(offset, this._lexerActions[i]);
                        }
                    }
                    if (!updatedLexerActions) {
                        return this;
                    }
                    return new LexerActionExecutor(updatedLexerActions);
                }
                /**
                     * Gets the lexer actions to be executed by this executor.
                     * @returns The lexer actions to be executed by this executor.
                     */
                get lexerActions()
                {
                    return this._lexerActions;
                }
                /**
                     * Execute the actions encapsulated by this executor within the context of a
                     * particular {@link Lexer}.
                     *
                     * This method calls {@link IntStream#seek} to set the position of the
                     * `input` {@link CharStream} prior to calling
                     * {@link LexerAction#execute} on a position-dependent action. Before the
                     * method returns, the input position will be restored to the same position
                     * it was in when the method was invoked.
                     *
                     * @param lexer The lexer instance.
                     * @param input The input stream which is the source for the current token.
                     * When this method is called, the current {@link IntStream#index} for
                     * `input` should be the start of the following token, i.e. 1
                     * character past the end of the current token.
                     * @param startIndex The token start index. This value may be passed to
                     * {@link IntStream#seek} to set the `input` position to the beginning
                     * of the token.
                     */
                execute(lexer, input, startIndex)
                {
                    let requiresSeek = false;
                    let stopIndex = input.index;
                    try {
                        for (let lexerAction of this._lexerActions) {
                            if (lexerAction instanceof LexerIndexedCustomAction_1.LexerIndexedCustomAction) {
                                let offset = lexerAction.offset;
                                input.seek(startIndex + offset);
                                lexerAction = lexerAction.action;
                                requiresSeek = (startIndex + offset) !== stopIndex;
                            }
                            else if (lexerAction.isPositionDependent) {
                                input.seek(stopIndex);
                                requiresSeek = false;
                            }
                            lexerAction.execute(lexer);
                        }
                    }
                    finally {
                        if (requiresSeek) {
                            input.seek(stopIndex);
                        }
                    }
                }
                hashCode()
                {
                    return this.cachedHashCode;
                }
                equals(obj)
                {
                    if (obj === this) {
                        return true;
                    }
                    else if (!(obj instanceof LexerActionExecutor)) {
                        return false;
                    }
                    return this.cachedHashCode === obj.cachedHashCode
                        && ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this._lexerActions, obj._lexerActions);
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], LexerActionExecutor.prototype, "_lexerActions", void 0);
            __decorate([
            Decorators_1.NotNull
            ], LexerActionExecutor.prototype, "lexerActions", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], LexerActionExecutor.prototype, "execute", null);
            __decorate([
            Decorators_1.Override
            ], LexerActionExecutor.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], LexerActionExecutor.prototype, "equals", null);
            __decorate([
            Decorators_1.NotNull,
            __param(1, Decorators_1.NotNull)
            ], LexerActionExecutor, "append", null);
            LexerActionExecutor = __decorate([
            __param(0, Decorators_1.NotNull)
            ], LexerActionExecutor);
            exports.LexerActionExecutor = LexerActionExecutor;

        }, {
            "../Decorators": 224,
            "../misc/ArrayEqualityComparator": 323,
            "../misc/MurmurHash": 333,
            "./LexerIndexedCustomAction": 280
        }],
        278: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const MurmurHash_1 = require("../misc/MurmurHash");
            const Decorators_1 = require("../Decorators");
            /**
             * Implements the `channel` lexer action by calling
             * {@link Lexer#setChannel} with the assigned channel.
             *
             * @author Sam Harwell
             * @since 4.2
             */
            class LexerChannelAction {
                /**
                     * Constructs a new `channel` action with the specified channel value.
                     * @param channel The channel value to pass to {@link Lexer#setChannel}.
                     */
                constructor(channel)
                {
                    this._channel = channel;
                }
                /**
                     * Gets the channel to use for the {@link Token} created by the lexer.
                     *
                     * @returns The channel to use for the {@link Token} created by the lexer.
                     */
                get channel()
                {
                    return this._channel;
                }
                /**
                     * {@inheritDoc}
                     * @returns This method returns {@link LexerActionType#CHANNEL}.
                     */
                get actionType()
                {
                    return 0 /* CHANNEL */
                    ;
                }
                /**
                     * {@inheritDoc}
                     * @returns This method returns `false`.
                     */
                get isPositionDependent()
                {
                    return false;
                }
                /**
                     * {@inheritDoc}
                     *
                     * This action is implemented by calling {@link Lexer#setChannel} with the
                     * value provided by {@link #getChannel}.
                     */
                execute(lexer)
                {
                    lexer.channel = this._channel;
                }
                hashCode()
                {
                    let hash = MurmurHash_1.MurmurHash.initialize();
                    hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
                    hash = MurmurHash_1.MurmurHash.update(hash, this._channel);
                    return MurmurHash_1.MurmurHash.finish(hash, 2);
                }
                equals(obj)
                {
                    if (obj === this) {
                        return true;
                    }
                    else if (!(obj instanceof LexerChannelAction)) {
                        return false;
                    }
                    return this._channel === obj._channel;
                }
                toString()
                {
                    return `channel(${this._channel})`;
                }
            }
            __decorate([
            Decorators_1.Override
            ], LexerChannelAction.prototype, "actionType", null);
            __decorate([
            Decorators_1.Override
            ], LexerChannelAction.prototype, "isPositionDependent", null);
            __decorate([
            Decorators_1.Override,
            __param(0, Decorators_1.NotNull)
            ], LexerChannelAction.prototype, "execute", null);
            __decorate([
            Decorators_1.Override
            ], LexerChannelAction.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], LexerChannelAction.prototype, "equals", null);
            __decorate([
            Decorators_1.Override
            ], LexerChannelAction.prototype, "toString", null);
            exports.LexerChannelAction = LexerChannelAction;

        }, {
            "../Decorators": 224,
            "../misc/MurmurHash": 333
        }],
        279: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const MurmurHash_1 = require("../misc/MurmurHash");
            const Decorators_1 = require("../Decorators");
            /**
             * Executes a custom lexer action by calling {@link Recognizer#action} with the
             * rule and action indexes assigned to the custom action. The implementation of
             * a custom action is added to the generated code for the lexer in an override
             * of {@link Recognizer#action} when the grammar is compiled.
             *
             * This class may represent embedded actions created with the `{...}`
             * syntax in ANTLR 4, as well as actions created for lexer commands where the
             * command argument could not be evaluated when the grammar was compiled.
             *
             * @author Sam Harwell
             * @since 4.2
             */
            class LexerCustomAction {
                /**
                     * Constructs a custom lexer action with the specified rule and action
                     * indexes.
                     *
                     * @param ruleIndex The rule index to use for calls to
                     * {@link Recognizer#action}.
                     * @param actionIndex The action index to use for calls to
                     * {@link Recognizer#action}.
                     */
                constructor(ruleIndex, actionIndex)
                {
                    this._ruleIndex = ruleIndex;
                    this._actionIndex = actionIndex;
                }
                /**
                     * Gets the rule index to use for calls to {@link Recognizer#action}.
                     *
                     * @returns The rule index for the custom action.
                     */
                get ruleIndex()
                {
                    return this._ruleIndex;
                }
                /**
                     * Gets the action index to use for calls to {@link Recognizer#action}.
                     *
                     * @returns The action index for the custom action.
                     */
                get actionIndex()
                {
                    return this._actionIndex;
                }
                /**
                     * {@inheritDoc}
                     *
                     * @returns This method returns {@link LexerActionType#CUSTOM}.
                     */
                get actionType()
                {
                    return 1 /* CUSTOM */
                    ;
                }
                /**
                     * Gets whether the lexer action is position-dependent. Position-dependent
                     * actions may have different semantics depending on the {@link CharStream}
                     * index at the time the action is executed.
                     *
                     * Custom actions are position-dependent since they may represent a
                     * user-defined embedded action which makes calls to methods like
                     * {@link Lexer#getText}.
                     *
                     * @returns This method returns `true`.
                     */
                get isPositionDependent()
                {
                    return true;
                }
                /**
                     * {@inheritDoc}
                     *
                     * Custom actions are implemented by calling {@link Lexer#action} with the
                     * appropriate rule and action indexes.
                     */
                execute(lexer)
                {
                    lexer.action(undefined, this._ruleIndex, this._actionIndex);
                }
                hashCode()
                {
                    let hash = MurmurHash_1.MurmurHash.initialize();
                    hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
                    hash = MurmurHash_1.MurmurHash.update(hash, this._ruleIndex);
                    hash = MurmurHash_1.MurmurHash.update(hash, this._actionIndex);
                    return MurmurHash_1.MurmurHash.finish(hash, 3);
                }
                equals(obj)
                {
                    if (obj === this) {
                        return true;
                    }
                    else if (!(obj instanceof LexerCustomAction)) {
                        return false;
                    }
                    return this._ruleIndex === obj._ruleIndex
                        && this._actionIndex === obj._actionIndex;
                }
            }
            __decorate([
            Decorators_1.Override
            ], LexerCustomAction.prototype, "actionType", null);
            __decorate([
            Decorators_1.Override
            ], LexerCustomAction.prototype, "isPositionDependent", null);
            __decorate([
            Decorators_1.Override,
            __param(0, Decorators_1.NotNull)
            ], LexerCustomAction.prototype, "execute", null);
            __decorate([
            Decorators_1.Override
            ], LexerCustomAction.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], LexerCustomAction.prototype, "equals", null);
            exports.LexerCustomAction = LexerCustomAction;

        }, {
            "../Decorators": 224,
            "../misc/MurmurHash": 333
        }],
        280: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const MurmurHash_1 = require("../misc/MurmurHash");
            const Decorators_1 = require("../Decorators");
            /**
             * This implementation of {@link LexerAction} is used for tracking input offsets
             * for position-dependent actions within a {@link LexerActionExecutor}.
             *
             * This action is not serialized as part of the ATN, and is only required for
             * position-dependent lexer actions which appear at a location other than the
             * end of a rule. For more information about DFA optimizations employed for
             * lexer actions, see {@link LexerActionExecutor#append} and
             * {@link LexerActionExecutor#fixOffsetBeforeMatch}.
             *
             * @author Sam Harwell
             * @since 4.2
             */
            let LexerIndexedCustomAction = class LexerIndexedCustomAction {
                /**
                     * Constructs a new indexed custom action by associating a character offset
                     * with a {@link LexerAction}.
                     *
                     * Note: This class is only required for lexer actions for which
                     * {@link LexerAction#isPositionDependent} returns `true`.
                     *
                     * @param offset The offset into the input {@link CharStream}, relative to
                     * the token start index, at which the specified lexer action should be
                     * executed.
                     * @param action The lexer action to execute at a particular offset in the
                     * input {@link CharStream}.
                     */
                constructor(offset, action)
                {
                    this._offset = offset;
                    this._action = action;
                }
                /**
                     * Gets the location in the input {@link CharStream} at which the lexer
                     * action should be executed. The value is interpreted as an offset relative
                     * to the token start index.
                     *
                     * @returns The location in the input {@link CharStream} at which the lexer
                     * action should be executed.
                     */
                get offset()
                {
                    return this._offset;
                }
                /**
                     * Gets the lexer action to execute.
                     *
                     * @returns A {@link LexerAction} object which executes the lexer action.
                     */
                get action()
                {
                    return this._action;
                }
                /**
                     * {@inheritDoc}
                     *
                     * @returns This method returns the result of calling {@link #getActionType}
                     * on the {@link LexerAction} returned by {@link #getAction}.
                     */
                get actionType()
                {
                    return this._action.actionType;
                }
                /**
                     * {@inheritDoc}
                     * @returns This method returns `true`.
                     */
                get isPositionDependent()
                {
                    return true;
                }
                /**
                     * {@inheritDoc}
                     *
                     * This method calls {@link #execute} on the result of {@link #getAction}
                     * using the provided `lexer`.
                     */
                execute(lexer)
                {
                    // assume the input stream position was properly set by the calling code
                    this._action.execute(lexer);
                }
                hashCode()
                {
                    let hash = MurmurHash_1.MurmurHash.initialize();
                    hash = MurmurHash_1.MurmurHash.update(hash, this._offset);
                    hash = MurmurHash_1.MurmurHash.update(hash, this._action);
                    return MurmurHash_1.MurmurHash.finish(hash, 2);
                }
                equals(obj)
                {
                    if (obj === this) {
                        return true;
                    }
                    else if (!(obj instanceof LexerIndexedCustomAction)) {
                        return false;
                    }
                    return this._offset === obj._offset
                        && this._action.equals(obj._action);
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], LexerIndexedCustomAction.prototype, "action", null);
            __decorate([
            Decorators_1.Override
            ], LexerIndexedCustomAction.prototype, "actionType", null);
            __decorate([
            Decorators_1.Override
            ], LexerIndexedCustomAction.prototype, "isPositionDependent", null);
            __decorate([
            Decorators_1.Override
            ], LexerIndexedCustomAction.prototype, "execute", null);
            __decorate([
            Decorators_1.Override
            ], LexerIndexedCustomAction.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], LexerIndexedCustomAction.prototype, "equals", null);
            LexerIndexedCustomAction = __decorate([
            __param(1, Decorators_1.NotNull)
            ], LexerIndexedCustomAction);
            exports.LexerIndexedCustomAction = LexerIndexedCustomAction;

        }, {
            "../Decorators": 224,
            "../misc/MurmurHash": 333
        }],
        281: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const MurmurHash_1 = require("../misc/MurmurHash");
            const Decorators_1 = require("../Decorators");
            /**
             * Implements the `mode` lexer action by calling {@link Lexer#mode} with
             * the assigned mode.
             *
             * @author Sam Harwell
             * @since 4.2
             */
            class LexerModeAction {
                /**
                     * Constructs a new `mode` action with the specified mode value.
                     * @param mode The mode value to pass to {@link Lexer#mode}.
                     */
                constructor(mode)
                {
                    this._mode = mode;
                }
                /**
                     * Get the lexer mode this action should transition the lexer to.
                     *
                     * @returns The lexer mode for this `mode` command.
                     */
                get mode()
                {
                    return this._mode;
                }
                /**
                     * {@inheritDoc}
                     * @returns This method returns {@link LexerActionType#MODE}.
                     */
                get actionType()
                {
                    return 2 /* MODE */
                    ;
                }
                /**
                     * {@inheritDoc}
                     * @returns This method returns `false`.
                     */
                get isPositionDependent()
                {
                    return false;
                }
                /**
                     * {@inheritDoc}
                     *
                     * This action is implemented by calling {@link Lexer#mode} with the
                     * value provided by {@link #getMode}.
                     */
                execute(lexer)
                {
                    lexer.mode(this._mode);
                }
                hashCode()
                {
                    let hash = MurmurHash_1.MurmurHash.initialize();
                    hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
                    hash = MurmurHash_1.MurmurHash.update(hash, this._mode);
                    return MurmurHash_1.MurmurHash.finish(hash, 2);
                }
                equals(obj)
                {
                    if (obj === this) {
                        return true;
                    }
                    else if (!(obj instanceof LexerModeAction)) {
                        return false;
                    }
                    return this._mode === obj._mode;
                }
                toString()
                {
                    return `mode(${this._mode})`;
                }
            }
            __decorate([
            Decorators_1.Override
            ], LexerModeAction.prototype, "actionType", null);
            __decorate([
            Decorators_1.Override
            ], LexerModeAction.prototype, "isPositionDependent", null);
            __decorate([
            Decorators_1.Override,
            __param(0, Decorators_1.NotNull)
            ], LexerModeAction.prototype, "execute", null);
            __decorate([
            Decorators_1.Override
            ], LexerModeAction.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], LexerModeAction.prototype, "equals", null);
            __decorate([
            Decorators_1.Override
            ], LexerModeAction.prototype, "toString", null);
            exports.LexerModeAction = LexerModeAction;

        }, {
            "../Decorators": 224,
            "../misc/MurmurHash": 333
        }],
        282: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const MurmurHash_1 = require("../misc/MurmurHash");
            const Decorators_1 = require("../Decorators");
            /**
             * Implements the `more` lexer action by calling {@link Lexer#more}.
             *
             * The `more` command does not have any parameters, so this action is
             * implemented as a singleton instance exposed by {@link #INSTANCE}.
             *
             * @author Sam Harwell
             * @since 4.2
             */
            class LexerMoreAction {
                /**
                     * Constructs the singleton instance of the lexer `more` command.
                     */
                constructor() {

                }
                /**
                     * {@inheritDoc}
                     * @returns This method returns {@link LexerActionType#MORE}.
                     */
                get actionType()
                {
                    return 3 /* MORE */
                    ;
                }
                /**
                     * {@inheritDoc}
                     * @returns This method returns `false`.
                     */
                get isPositionDependent()
                {
                    return false;
                }
                /**
                     * {@inheritDoc}
                     *
                     * This action is implemented by calling {@link Lexer#more}.
                     */
                execute(lexer)
                {
                    lexer.more();
                }
                hashCode()
                {
                    let hash = MurmurHash_1.MurmurHash.initialize();
                    hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
                    return MurmurHash_1.MurmurHash.finish(hash, 1);
                }
                equals(obj)
                {
                    return obj === this;
                }
                toString()
                {
                    return "more";
                }
            }
            __decorate([
            Decorators_1.Override
            ], LexerMoreAction.prototype, "actionType", null);
            __decorate([
            Decorators_1.Override
            ], LexerMoreAction.prototype, "isPositionDependent", null);
            __decorate([
            Decorators_1.Override,
            __param(0, Decorators_1.NotNull)
            ], LexerMoreAction.prototype, "execute", null);
            __decorate([
            Decorators_1.Override
            ], LexerMoreAction.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], LexerMoreAction.prototype, "equals", null);
            __decorate([
            Decorators_1.Override
            ], LexerMoreAction.prototype, "toString", null);
            exports.LexerMoreAction = LexerMoreAction;
            (function(LexerMoreAction) {
                /**
                     * Provides a singleton instance of this parameterless lexer action.
                     */
                LexerMoreAction.INSTANCE = new LexerMoreAction();
            })(LexerMoreAction = exports.LexerMoreAction || (exports.LexerMoreAction = {}));

        }, {
            "../Decorators": 224,
            "../misc/MurmurHash": 333
        }],
        283: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const MurmurHash_1 = require("../misc/MurmurHash");
            const Decorators_1 = require("../Decorators");
            /**
             * Implements the `popMode` lexer action by calling {@link Lexer#popMode}.
             *
             * The `popMode` command does not have any parameters, so this action is
             * implemented as a singleton instance exposed by {@link #INSTANCE}.
             *
             * @author Sam Harwell
             * @since 4.2
             */
            class LexerPopModeAction {
                /**
                     * Constructs the singleton instance of the lexer `popMode` command.
                     */
                constructor() {

                }
                /**
                     * {@inheritDoc}
                     * @returns This method returns {@link LexerActionType#POP_MODE}.
                     */
                get actionType()
                {
                    return 4 /* POP_MODE */
                    ;
                }
                /**
                     * {@inheritDoc}
                     * @returns This method returns `false`.
                     */
                get isPositionDependent()
                {
                    return false;
                }
                /**
                     * {@inheritDoc}
                     *
                     * This action is implemented by calling {@link Lexer#popMode}.
                     */
                execute(lexer)
                {
                    lexer.popMode();
                }
                hashCode()
                {
                    let hash = MurmurHash_1.MurmurHash.initialize();
                    hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
                    return MurmurHash_1.MurmurHash.finish(hash, 1);
                }
                equals(obj)
                {
                    return obj === this;
                }
                toString()
                {
                    return "popMode";
                }
            }
            __decorate([
            Decorators_1.Override
            ], LexerPopModeAction.prototype, "actionType", null);
            __decorate([
            Decorators_1.Override
            ], LexerPopModeAction.prototype, "isPositionDependent", null);
            __decorate([
            Decorators_1.Override,
            __param(0, Decorators_1.NotNull)
            ], LexerPopModeAction.prototype, "execute", null);
            __decorate([
            Decorators_1.Override
            ], LexerPopModeAction.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], LexerPopModeAction.prototype, "equals", null);
            __decorate([
            Decorators_1.Override
            ], LexerPopModeAction.prototype, "toString", null);
            exports.LexerPopModeAction = LexerPopModeAction;
            (function(LexerPopModeAction) {
                /**
                     * Provides a singleton instance of this parameterless lexer action.
                     */
                LexerPopModeAction.INSTANCE = new LexerPopModeAction();
            })(LexerPopModeAction = exports.LexerPopModeAction || (exports.LexerPopModeAction = {}));

        }, {
            "../Decorators": 224,
            "../misc/MurmurHash": 333
        }],
        284: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const MurmurHash_1 = require("../misc/MurmurHash");
            const Decorators_1 = require("../Decorators");
            /**
             * Implements the `pushMode` lexer action by calling
             * {@link Lexer#pushMode} with the assigned mode.
             *
             * @author Sam Harwell
             * @since 4.2
             */
            class LexerPushModeAction {
                /**
                     * Constructs a new `pushMode` action with the specified mode value.
                     * @param mode The mode value to pass to {@link Lexer#pushMode}.
                     */
                constructor(mode)
                {
                    this._mode = mode;
                }
                /**
                     * Get the lexer mode this action should transition the lexer to.
                     *
                     * @returns The lexer mode for this `pushMode` command.
                     */
                get mode()
                {
                    return this._mode;
                }
                /**
                     * {@inheritDoc}
                     * @returns This method returns {@link LexerActionType#PUSH_MODE}.
                     */
                get actionType()
                {
                    return 5 /* PUSH_MODE */
                    ;
                }
                /**
                     * {@inheritDoc}
                     * @returns This method returns `false`.
                     */
                get isPositionDependent()
                {
                    return false;
                }
                /**
                     * {@inheritDoc}
                     *
                     * This action is implemented by calling {@link Lexer#pushMode} with the
                     * value provided by {@link #getMode}.
                     */
                execute(lexer)
                {
                    lexer.pushMode(this._mode);
                }
                hashCode()
                {
                    let hash = MurmurHash_1.MurmurHash.initialize();
                    hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
                    hash = MurmurHash_1.MurmurHash.update(hash, this._mode);
                    return MurmurHash_1.MurmurHash.finish(hash, 2);
                }
                equals(obj)
                {
                    if (obj === this) {
                        return true;
                    }
                    else if (!(obj instanceof LexerPushModeAction)) {
                        return false;
                    }
                    return this._mode === obj._mode;
                }
                toString()
                {
                    return `pushMode(${this._mode})`;
                }
            }
            __decorate([
            Decorators_1.Override
            ], LexerPushModeAction.prototype, "actionType", null);
            __decorate([
            Decorators_1.Override
            ], LexerPushModeAction.prototype, "isPositionDependent", null);
            __decorate([
            Decorators_1.Override,
            __param(0, Decorators_1.NotNull)
            ], LexerPushModeAction.prototype, "execute", null);
            __decorate([
            Decorators_1.Override
            ], LexerPushModeAction.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], LexerPushModeAction.prototype, "equals", null);
            __decorate([
            Decorators_1.Override
            ], LexerPushModeAction.prototype, "toString", null);
            exports.LexerPushModeAction = LexerPushModeAction;

        }, {
            "../Decorators": 224,
            "../misc/MurmurHash": 333
        }],
        285: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const MurmurHash_1 = require("../misc/MurmurHash");
            const Decorators_1 = require("../Decorators");
            /**
             * Implements the `skip` lexer action by calling {@link Lexer#skip}.
             *
             * The `skip` command does not have any parameters, so this action is
             * implemented as a singleton instance exposed by {@link #INSTANCE}.
             *
             * @author Sam Harwell
             * @since 4.2
             */
            class LexerSkipAction {
                /**
                     * Constructs the singleton instance of the lexer `skip` command.
                     */
                constructor() {

                }
                /**
                     * {@inheritDoc}
                     * @returns This method returns {@link LexerActionType#SKIP}.
                     */
                get actionType()
                {
                    return 6 /* SKIP */
                    ;
                }
                /**
                     * {@inheritDoc}
                     * @returns This method returns `false`.
                     */
                get isPositionDependent()
                {
                    return false;
                }
                /**
                     * {@inheritDoc}
                     *
                     * This action is implemented by calling {@link Lexer#skip}.
                     */
                execute(lexer)
                {
                    lexer.skip();
                }
                hashCode()
                {
                    let hash = MurmurHash_1.MurmurHash.initialize();
                    hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
                    return MurmurHash_1.MurmurHash.finish(hash, 1);
                }
                equals(obj)
                {
                    return obj === this;
                }
                toString()
                {
                    return "skip";
                }
            }
            __decorate([
            Decorators_1.Override
            ], LexerSkipAction.prototype, "actionType", null);
            __decorate([
            Decorators_1.Override
            ], LexerSkipAction.prototype, "isPositionDependent", null);
            __decorate([
            Decorators_1.Override,
            __param(0, Decorators_1.NotNull)
            ], LexerSkipAction.prototype, "execute", null);
            __decorate([
            Decorators_1.Override
            ], LexerSkipAction.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], LexerSkipAction.prototype, "equals", null);
            __decorate([
            Decorators_1.Override
            ], LexerSkipAction.prototype, "toString", null);
            exports.LexerSkipAction = LexerSkipAction;
            (function(LexerSkipAction) {
                /**
                     * Provides a singleton instance of this parameterless lexer action.
                     */
                LexerSkipAction.INSTANCE = new LexerSkipAction();
            })(LexerSkipAction = exports.LexerSkipAction || (exports.LexerSkipAction = {}));

        }, {
            "../Decorators": 224,
            "../misc/MurmurHash": 333
        }],
        286: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const MurmurHash_1 = require("../misc/MurmurHash");
            const Decorators_1 = require("../Decorators");
            /**
             * Implements the `type` lexer action by setting `Lexer.type`
             * with the assigned type.
             *
             * @author Sam Harwell
             * @since 4.2
             */
            class LexerTypeAction {
                /**
                     * Constructs a new `type` action with the specified token type value.
                     * @param type The type to assign to the token using `Lexer.type`.
                     */
                constructor(type)
                {
                    this._type = type;
                }
                /**
                     * Gets the type to assign to a token created by the lexer.
                     * @returns The type to assign to a token created by the lexer.
                     */
                get type()
                {
                    return this._type;
                }
                /**
                     * {@inheritDoc}
                     * @returns This method returns {@link LexerActionType#TYPE}.
                     */
                get actionType()
                {
                    return 7 /* TYPE */
                    ;
                }
                /**
                     * {@inheritDoc}
                     * @returns This method returns `false`.
                     */
                get isPositionDependent()
                {
                    return false;
                }
                /**
                     * {@inheritDoc}
                     *
                     * This action is implemented by setting `Lexer.type` with the
                     * value provided by `type`.
                     */
                execute(lexer)
                {
                    lexer.type = this._type;
                }
                hashCode()
                {
                    let hash = MurmurHash_1.MurmurHash.initialize();
                    hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);
                    hash = MurmurHash_1.MurmurHash.update(hash, this._type);
                    return MurmurHash_1.MurmurHash.finish(hash, 2);
                }
                equals(obj)
                {
                    if (obj === this) {
                        return true;
                    }
                    else if (!(obj instanceof LexerTypeAction)) {
                        return false;
                    }
                    return this._type === obj._type;
                }
                toString()
                {
                    return `type(${this._type})`;
                }
            }
            __decorate([
            Decorators_1.Override
            ], LexerTypeAction.prototype, "actionType", null);
            __decorate([
            Decorators_1.Override
            ], LexerTypeAction.prototype, "isPositionDependent", null);
            __decorate([
            Decorators_1.Override,
            __param(0, Decorators_1.NotNull)
            ], LexerTypeAction.prototype, "execute", null);
            __decorate([
            Decorators_1.Override
            ], LexerTypeAction.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], LexerTypeAction.prototype, "equals", null);
            __decorate([
            Decorators_1.Override
            ], LexerTypeAction.prototype, "toString", null);
            exports.LexerTypeAction = LexerTypeAction;

        }, {
            "../Decorators": 224,
            "../misc/MurmurHash": 333
        }],
        287: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:30.6852565-07:00
            const DecisionEventInfo_1 = require("./DecisionEventInfo");
            const Decorators_1 = require("../Decorators");
            /**
             * This class represents profiling event information for tracking the lookahead
             * depth required in order to make a prediction.
             *
             * @since 4.3
             */
            let LookaheadEventInfo = class LookaheadEventInfo extends DecisionEventInfo_1.DecisionEventInfo {
                /**
                     * Constructs a new instance of the {@link LookaheadEventInfo} class with
                     * the specified detailed lookahead information.
                     *
                     * @param decision The decision number
                     * @param state The final simulator state containing the necessary
                     * information to determine the result of a prediction, or `undefined` if
                     * the final state is not available
                     * @param input The input token stream
                     * @param startIndex The start index for the current prediction
                     * @param stopIndex The index at which the prediction was finally made
                     * @param fullCtx `true` if the current lookahead is part of an LL
                     * prediction; otherwise, `false` if the current lookahead is part of
                     * an SLL prediction
                     */
                constructor(decision, state, predictedAlt, input, startIndex, stopIndex, fullCtx)
                {
                    super(decision, state, input, startIndex, stopIndex, fullCtx);
                    this.predictedAlt = predictedAlt;
                }
            }
            ;
            LookaheadEventInfo = __decorate([
            __param(3, Decorators_1.NotNull)
            ], LookaheadEventInfo);
            exports.LookaheadEventInfo = LookaheadEventInfo;

        }, {
            "../Decorators": 224,
            "./DecisionEventInfo": 269
        }],
        288: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:30.7737978-07:00
            const ATNState_1 = require("./ATNState");
            const ATNStateType_1 = require("./ATNStateType");
            const Decorators_1 = require("../Decorators");
            /** Mark the end of a * or + loop. */
            class LoopEndState extends ATNState_1.ATNState {
                get stateType()
                {
                    return ATNStateType_1.ATNStateType.LOOP_END;
                }
            }
            __decorate([
            Decorators_1.Override
            ], LoopEndState.prototype, "stateType", null);
            exports.LoopEndState = LoopEndState;

        }, {
            "../Decorators": 224,
            "./ATNState": 257,
            "./ATNStateType": 258
        }],
        289: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../Decorators");
            const SetTransition_1 = require("./SetTransition");
            let NotSetTransition = class NotSetTransition extends SetTransition_1.SetTransition {
                constructor(target, set)
                {
                    super(target, set);
                }
                get serializationType()
                {
                    return 8 /* NOT_SET */
                    ;
                }
                matches(symbol, minVocabSymbol, maxVocabSymbol)
                {
                    return symbol >= minVocabSymbol
                        && symbol <= maxVocabSymbol
                        && !super.matches(symbol, minVocabSymbol, maxVocabSymbol);
                }
                toString()
                {
                    return "~" + super.toString();
                }
            }
            ;
            __decorate([
            Decorators_1.Override
            ], NotSetTransition.prototype, "serializationType", null);
            __decorate([
            Decorators_1.Override
            ], NotSetTransition.prototype, "matches", null);
            __decorate([
            Decorators_1.Override
            ], NotSetTransition.prototype, "toString", null);
            NotSetTransition = __decorate([
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.Nullable)
            ], NotSetTransition);
            exports.NotSetTransition = NotSetTransition;

        }, {
            "../Decorators": 224,
            "./SetTransition": 307
        }],
        290: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const ATNConfigSet_1 = require("./ATNConfigSet");
            const Decorators_1 = require("../Decorators");
            /**
             *
             * @author Sam Harwell
             */
            class OrderedATNConfigSet extends ATNConfigSet_1.ATNConfigSet {
                constructor(set, readonly)
                {
                    if (set != null && readonly != null) {
                        super(set, readonly);
                    }
                    else {
                        super();
                    }
                }
                clone(readonly)
                {
                    let copy = new OrderedATNConfigSet(this, readonly);
                    if (!readonly && this.isReadOnly) {
                        copy.addAll(this);
                    }
                    return copy;
                }
                getKey(e)
                {
                    // This is a specially crafted key to ensure configurations are only merged if they are equal
                    return {
                        state: 0,
                        alt: e.hashCode()
                    };
                }
                canMerge(left, leftKey, right)
                {
                    return left.equals(right);
                }
            }
            __decorate([
            Decorators_1.Override
            ], OrderedATNConfigSet.prototype, "clone", null);
            __decorate([
            Decorators_1.Override
            ], OrderedATNConfigSet.prototype, "getKey", null);
            __decorate([
            Decorators_1.Override
            ], OrderedATNConfigSet.prototype, "canMerge", null);
            exports.OrderedATNConfigSet = OrderedATNConfigSet;

        }, {
            "../Decorators": 224,
            "./ATNConfigSet": 253
        }],
        291: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../Decorators");
            /**
             * This class provides access to specific and aggregate statistics gathered
             * during profiling of a parser.
             *
             * @since 4.3
             */
            let ParseInfo = class ParseInfo {
                constructor(atnSimulator)
                {
                    this.atnSimulator = atnSimulator;
                }
                /**
                     * Gets an array of {@link DecisionInfo} instances containing the profiling
                     * information gathered for each decision in the ATN.
                     *
                     * @returns An array of {@link DecisionInfo} instances, indexed by decision
                     * number.
                     */
                getDecisionInfo()
                {
                    return this.atnSimulator.getDecisionInfo();
                }
                /**
                     * Gets the decision numbers for decisions that required one or more
                     * full-context predictions during parsing. These are decisions for which
                     * {@link DecisionInfo#LL_Fallback} is non-zero.
                     *
                     * @returns A list of decision numbers which required one or more
                     * full-context predictions during parsing.
                     */
                getLLDecisions()
                {
                    let decisions = this.atnSimulator.getDecisionInfo();
                    let LL = [];
                    for (let i = 0; i < decisions.length; i++) {
                        let fallBack = decisions[i].LL_Fallback;
                        if (fallBack > 0) {
                            LL.push(i);
                        }
                    }
                    return LL;
                }
                /**
                     * Gets the total time spent during prediction across all decisions made
                     * during parsing. This value is the sum of
                     * {@link DecisionInfo#timeInPrediction} for all decisions.
                     */
                getTotalTimeInPrediction()
                {
                    let decisions = this.atnSimulator.getDecisionInfo();
                    let t = 0;
                    for (let decision of decisions) {
                        t += decision.timeInPrediction;
                    }
                    return t;
                }
                /**
                     * Gets the total number of SLL lookahead operations across all decisions
                     * made during parsing. This value is the sum of
                     * {@link DecisionInfo#SLL_TotalLook} for all decisions.
                     */
                getTotalSLLLookaheadOps()
                {
                    let decisions = this.atnSimulator.getDecisionInfo();
                    let k = 0;
                    for (let decision of decisions) {
                        k += decision.SLL_TotalLook;
                    }
                    return k;
                }
                /**
                     * Gets the total number of LL lookahead operations across all decisions
                     * made during parsing. This value is the sum of
                     * {@link DecisionInfo#LL_TotalLook} for all decisions.
                     */
                getTotalLLLookaheadOps()
                {
                    let decisions = this.atnSimulator.getDecisionInfo();
                    let k = 0;
                    for (let decision of decisions) {
                        k += decision.LL_TotalLook;
                    }
                    return k;
                }
                /**
                     * Gets the total number of ATN lookahead operations for SLL prediction
                     * across all decisions made during parsing.
                     */
                getTotalSLLATNLookaheadOps()
                {
                    let decisions = this.atnSimulator.getDecisionInfo();
                    let k = 0;
                    for (let decision of decisions) {
                        k += decision.SLL_ATNTransitions;
                    }
                    return k;
                }
                /**
                     * Gets the total number of ATN lookahead operations for LL prediction
                     * across all decisions made during parsing.
                     */
                getTotalLLATNLookaheadOps()
                {
                    let decisions = this.atnSimulator.getDecisionInfo();
                    let k = 0;
                    for (let decision of decisions) {
                        k += decision.LL_ATNTransitions;
                    }
                    return k;
                }
                /**
                     * Gets the total number of ATN lookahead operations for SLL and LL
                     * prediction across all decisions made during parsing.
                     *
                     * This value is the sum of {@link #getTotalSLLATNLookaheadOps} and
                     * {@link #getTotalLLATNLookaheadOps}.
                     */
                getTotalATNLookaheadOps()
                {
                    let decisions = this.atnSimulator.getDecisionInfo();
                    let k = 0;
                    for (let decision of decisions) {
                        k += decision.SLL_ATNTransitions;
                        k += decision.LL_ATNTransitions;
                    }
                    return k;
                }
                getDFASize(decision)
                {
                    if (decision) {
                        let decisionToDFA = this.atnSimulator.atn.decisionToDFA[decision];
                        return decisionToDFA.states.size;
                    }
                    else {
                        let n = 0;
                        let decisionToDFA = this.atnSimulator.atn.decisionToDFA;
                        for (let i = 0; i < decisionToDFA.length; i++) {
                            n += this.getDFASize(i);
                        }
                        return n;
                    }
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], ParseInfo.prototype, "getDecisionInfo", null);
            __decorate([
            Decorators_1.NotNull
            ], ParseInfo.prototype, "getLLDecisions", null);
            ParseInfo = __decorate([
            __param(0, Decorators_1.NotNull)
            ], ParseInfo);
            exports.ParseInfo = ParseInfo;

        }, {
            "../Decorators": 224
        }],
        292: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:31.1989835-07:00
            const AcceptStateInfo_1 = require("../dfa/AcceptStateInfo");
            const ActionTransition_1 = require("./ActionTransition");
            const Array2DHashSet_1 = require("../misc/Array2DHashSet");
            const Arrays_1 = require("../misc/Arrays");
            const ATN_1 = require("./ATN");
            const ATNConfig_1 = require("./ATNConfig");
            const ATNConfigSet_1 = require("./ATNConfigSet");
            const ATNSimulator_1 = require("./ATNSimulator");
            const ATNStateType_1 = require("./ATNStateType");
            const AtomTransition_1 = require("./AtomTransition");
            const BitSet_1 = require("../misc/BitSet");
            const ConflictInfo_1 = require("./ConflictInfo");
            const DecisionState_1 = require("./DecisionState");
            const DFAState_1 = require("../dfa/DFAState");
            const IntegerList_1 = require("../misc/IntegerList");
            const Interval_1 = require("../misc/Interval");
            const IntStream_1 = require("../IntStream");
            const Decorators_1 = require("../Decorators");
            const NotSetTransition_1 = require("./NotSetTransition");
            const NoViableAltException_1 = require("../NoViableAltException");
            const ObjectEqualityComparator_1 = require("../misc/ObjectEqualityComparator");
            const ParserRuleContext_1 = require("../ParserRuleContext");
            const PredictionContext_1 = require("./PredictionContext");
            const PredictionContextCache_1 = require("./PredictionContextCache");
            const PredictionMode_1 = require("./PredictionMode");
            const RuleStopState_1 = require("./RuleStopState");
            const RuleTransition_1 = require("./RuleTransition");
            const SemanticContext_1 = require("./SemanticContext");
            const SetTransition_1 = require("./SetTransition");
            const SimulatorState_1 = require("./SimulatorState");
            const Token_1 = require("../Token");
            const VocabularyImpl_1 = require("../VocabularyImpl");
            const assert = require("assert");
            const MAX_SHORT_VALUE = 0xFFFF;
            const MIN_INTEGER_VALUE = -((1 << 31) >>> 0);
            /**
             * The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
             *
             * The basic complexity of the adaptive strategy makes it harder to understand.
             * We begin with ATN simulation to build paths in a DFA. Subsequent prediction
             * requests go through the DFA first. If they reach a state without an edge for
             * the current symbol, the algorithm fails over to the ATN simulation to
             * complete the DFA path for the current input (until it finds a conflict state
             * or uniquely predicting state).
             *
             * All of that is done without using the outer context because we want to create
             * a DFA that is not dependent upon the rule invocation stack when we do a
             * prediction. One DFA works in all contexts. We avoid using context not
             * necessarily because it's slower, although it can be, but because of the DFA
             * caching problem. The closure routine only considers the rule invocation stack
             * created during prediction beginning in the decision rule. For example, if
             * prediction occurs without invoking another rule's ATN, there are no context
             * stacks in the configurations. When lack of context leads to a conflict, we
             * don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
             * strategy (versus full LL(*)).
             *
             * When SLL yields a configuration set with conflict, we rewind the input and
             * retry the ATN simulation, this time using full outer context without adding
             * to the DFA. Configuration context stacks will be the full invocation stacks
             * from the start rule. If we get a conflict using full context, then we can
             * definitively say we have a true ambiguity for that input sequence. If we
             * don't get a conflict, it implies that the decision is sensitive to the outer
             * context. (It is not context-sensitive in the sense of context-sensitive
             * grammars.)
             *
             * The next time we reach this DFA state with an SLL conflict, through DFA
             * simulation, we will again retry the ATN simulation using full context mode.
             * This is slow because we can't save the results and have to "interpret" the
             * ATN each time we get that input.
             *
             * **CACHING FULL CONTEXT PREDICTIONS**
             *
             * We could cache results from full context to predicted alternative easily and
             * that saves a lot of time but doesn't work in presence of predicates. The set
             * of visible predicates from the ATN start state changes depending on the
             * context, because closure can fall off the end of a rule. I tried to cache
             * tuples (stack context, semantic context, predicted alt) but it was slower
             * than interpreting and much more complicated. Also required a huge amount of
             * memory. The goal is not to create the world's fastest parser anyway. I'd like
             * to keep this algorithm simple. By launching multiple threads, we can improve
             * the speed of parsing across a large number of files.
             *
             * There is no strict ordering between the amount of input used by SLL vs LL,
             * which makes it really hard to build a cache for full context. Let's say that
             * we have input A B C that leads to an SLL conflict with full context X. That
             * implies that using X we might only use A B but we could also use A B C D to
             * resolve conflict. Input A B C D could predict alternative 1 in one position
             * in the input and A B C E could predict alternative 2 in another position in
             * input. The conflicting SLL configurations could still be non-unique in the
             * full context prediction, which would lead us to requiring more input than the
             * original A B C.  To make a prediction cache work, we have to track the exact
             * input  used during the previous prediction. That amounts to a cache that maps
             * X to a specific DFA for that context.
             *
             * Something should be done for left-recursive expression predictions. They are
             * likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
             * with full LL thing Sam does.
             *
             * **AVOIDING FULL CONTEXT PREDICTION**
             *
             * We avoid doing full context retry when the outer context is empty, we did not
             * dip into the outer context by falling off the end of the decision state rule,
             * or when we force SLL mode.
             *
             * As an example of the not dip into outer context case, consider as super
             * constructor calls versus function calls. One grammar might look like
             * this:
             *
             * ```antlr
             * ctorBody
             *   : '{' superCall? stat* '}'
             *   ;
             * ```
             *
             * Or, you might see something like
             *
             * ```antlr
             * stat
             *   : superCall ';'
             *   | expression ';'
             *   | ...
             *   ;
             * ```
             *
             * In both cases I believe that no closure operations will dip into the outer
             * context. In the first case ctorBody in the worst case will stop at the '}'.
             * In the 2nd case it should stop at the ';'. Both cases should stay within the
             * entry rule and not dip into the outer context.
             *
             * **PREDICATES**
             *
             * Predicates are always evaluated if present in either SLL or LL both. SLL and
             * LL simulation deals with predicates differently. SLL collects predicates as
             * it performs closure operations like ANTLR v3 did. It delays predicate
             * evaluation until it reaches and accept state. This allows us to cache the SLL
             * ATN simulation whereas, if we had evaluated predicates on-the-fly during
             * closure, the DFA state configuration sets would be different and we couldn't
             * build up a suitable DFA.
             *
             * When building a DFA accept state during ATN simulation, we evaluate any
             * predicates and return the sole semantically valid alternative. If there is
             * more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
             * we throw an exception. Alternatives without predicates act like they have
             * true predicates. The simple way to think about it is to strip away all
             * alternatives with false predicates and choose the minimum alternative that
             * remains.
             *
             * When we start in the DFA and reach an accept state that's predicated, we test
             * those and return the minimum semantically viable alternative. If no
             * alternatives are viable, we throw an exception.
             *
             * During full LL ATN simulation, closure always evaluates predicates and
             * on-the-fly. This is crucial to reducing the configuration set size during
             * closure. It hits a landmine when parsing with the Java grammar, for example,
             * without this on-the-fly evaluation.
             *
             * **SHARING DFA**
             *
             * All instances of the same parser share the same decision DFAs through a
             * static field. Each instance gets its own ATN simulator but they share the
             * same {@link ATN#decisionToDFA} field. They also share a
             * {@link PredictionContextCache} object that makes sure that all
             * {@link PredictionContext} objects are shared among the DFA states. This makes
             * a big size difference.
             *
             * **THREAD SAFETY**
             *
             * The {@link ParserATNSimulator} locks on the {@link ATN#decisionToDFA} field when
             * it adds a new DFA object to that array. {@link #addDFAEdge}
             * locks on the DFA for the current decision when setting the
             * {@link DFAState#edges} field. {@link #addDFAState} locks on
             * the DFA for the current decision when looking up a DFA state to see if it
             * already exists. We must make sure that all requests to add DFA states that
             * are equivalent result in the same shared DFA object. This is because lots of
             * threads will be trying to update the DFA at once. The
             * {@link #addDFAState} method also locks inside the DFA lock
             * but this time on the shared context cache when it rebuilds the
             * configurations' {@link PredictionContext} objects using cached
             * subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
             * safe as long as we can guarantee that all threads referencing
             * `s.edge[t]` get the same physical target {@link DFAState}, or
             * `undefined`. Once into the DFA, the DFA simulation does not reference the
             * {@link DFA#states} map. It follows the {@link DFAState#edges} field to new
             * targets. The DFA simulator will either find {@link DFAState#edges} to be
             * `undefined`, to be non-`undefined` and `dfa.edges[t]` undefined, or
             * `dfa.edges[t]` to be non-undefined. The
             * {@link #addDFAEdge} method could be racing to set the field
             * but in either case the DFA simulator works; if `undefined`, and requests ATN
             * simulation. It could also race trying to get `dfa.edges[t]`, but either
             * way it will work because it's not doing a test and set operation.
             *
             * **Starting with SLL then failing to combined SLL/LL (Two-Stage
             * Parsing)**
             *
             * Sam pointed out that if SLL does not give a syntax error, then there is no
             * point in doing full LL, which is slower. We only have to try LL if we get a
             * syntax error. For maximum speed, Sam starts the parser set to pure SLL
             * mode with the {@link BailErrorStrategy}:
             *
             * ```
             * parser.interpreter.{@link #setPredictionMode setPredictionMode}`(`{@link PredictionMode#SLL}`)`;
             * parser.{@link Parser#setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
             * ```
             *
             * If it does not get a syntax error, then we're done. If it does get a syntax
             * error, we need to retry with the combined SLL/LL strategy.
             *
             * The reason this works is as follows. If there are no SLL conflicts, then the
             * grammar is SLL (at least for that input set). If there is an SLL conflict,
             * the full LL analysis must yield a set of viable alternatives which is a
             * subset of the alternatives reported by SLL. If the LL set is a singleton,
             * then the grammar is LL but not SLL. If the LL set is the same size as the SLL
             * set, the decision is SLL. If the LL set has size &gt; 1, then that decision
             * is truly ambiguous on the current input. If the LL set is smaller, then the
             * SLL conflict resolution might choose an alternative that the full LL would
             * rule out as a possibility based upon better context information. If that's
             * the case, then the SLL parse will definitely get an error because the full LL
             * analysis says it's not viable. If SLL conflict resolution chooses an
             * alternative within the LL set, them both SLL and LL would choose the same
             * alternative because they both choose the minimum of multiple conflicting
             * alternatives.
             *
             * Let's say we have a set of SLL conflicting alternatives `{1, 2, 3}` and
             * a smaller LL set called *s*. If *s* is `{2, 3}`, then SLL
             * parsing will get an error because SLL will pursue alternative 1. If
             * *s* is `{1, 2}` or `{1, 3}` then both SLL and LL will
             * choose the same alternative because alternative one is the minimum of either
             * set. If *s* is `{2}` or `{3}` then SLL will get a syntax
             * error. If *s* is `{1}` then SLL will succeed.
             *
             * Of course, if the input is invalid, then we will get an error for sure in
             * both SLL and LL parsing. Erroneous input will therefore require 2 passes over
             * the input.
             */
            let ParserATNSimulator = class ParserATNSimulator extends ATNSimulator_1.ATNSimulator {
                constructor(atn, parser)
                {
                    super(atn);
                    this.predictionMode = PredictionMode_1.PredictionMode.LL;
                    this.force_global_context = false;
                    this.always_try_local_context = true;
                    /**
                             * Determines whether the DFA is used for full-context predictions. When
                             * `true`, the DFA stores transition information for both full-context
                             * and SLL parsing; otherwise, the DFA only stores SLL transition
                             * information.
                             *
                             * For some grammars, enabling the full-context DFA can result in a
                             * substantial performance improvement. However, this improvement typically
                             * comes at the expense of memory used for storing the cached DFA states,
                             * configuration sets, and prediction contexts.
                             *
                             * The default value is `false`.
                             */
                    this.enable_global_context_dfa = false;
                    this.optimize_unique_closure = true;
                    this.optimize_ll1 = true;
                    this.optimize_tail_calls = true;
                    this.tail_call_preserves_sll = true;
                    this.treat_sllk1_conflict_as_ambiguity = false;
                    /**
                             * When `true`, ambiguous alternatives are reported when they are
                             * encountered within {@link #execATN}. When `false`, these messages
                             * are suppressed. The default is `false`.
                             *
                             * When messages about ambiguous alternatives are not required, setting this
                             * to `false` enables additional internal optimizations which may lose
                             * this information.
                             */
                    this.reportAmbiguities = false;
                    /** By default we do full context-sensitive LL(*) parsing not
                             *  Strong LL(*) parsing. If we fail with Strong LL(*) we
                             *  try full LL(*). That means we rewind and use context information
                             *  when closure operations fall off the end of the rule that
                             *  holds the decision were evaluating.
                             */
                    this.userWantsCtxSensitive = true;
                    this._parser = parser;
                }
                getPredictionMode()
                {
                    return this.predictionMode;
                }
                setPredictionMode(predictionMode)
                {
                    this.predictionMode = predictionMode;
                }
                reset() {

                }
                adaptivePredict(input, decision, outerContext, useContext)
                {
                    if (useContext === undefined) {
                        useContext = false;
                    }
                    let dfa = this.atn.decisionToDFA[decision];
                    assert(dfa != null);
                    if (this.optimize_ll1 && !dfa.isPrecedenceDfa && !dfa.isEmpty) {
                        let ll_1 = input.LA(1);
                        if (ll_1 >= 0 && ll_1 <= 0xFFFF) {
                            let key = ((decision << 16) >>> 0) + ll_1;
                            let alt = this.atn.LL1Table.get(key);
                            if (alt != null) {
                                return alt;
                            }
                        }
                    }
                    this.dfa = dfa;
                    if (this.force_global_context) {
                        useContext = true;
                    }
                    else if (!this.always_try_local_context) {
                        useContext = useContext || dfa.isContextSensitive;
                    }
                    this.userWantsCtxSensitive = useContext || (this.predictionMode !== PredictionMode_1.PredictionMode.SLL && outerContext != null && !this.atn.decisionToState[decision].sll);
                    if (outerContext == null) {
                        outerContext = ParserRuleContext_1.ParserRuleContext.emptyContext();
                    }
                    let state;
                    if (!dfa.isEmpty) {
                        state = this.getStartState(dfa, input, outerContext, useContext);
                    }
                    if (state == null) {
                        if (outerContext == null) {
                            outerContext = ParserRuleContext_1.ParserRuleContext.emptyContext();
                        }
                        if (ParserATNSimulator.debug) {
                            console.log("ATN decision " + dfa.decision +
                            " exec LA(1)==" + this.getLookaheadName(input) +
                            ", outerContext=" + outerContext.toString(this._parser));
                        }
                        state = this.computeStartState(dfa, outerContext, useContext);
                    }
                    let m = input.mark();
                    let index = input.index;
                    try {
                        let alt = this.execDFA(dfa, input, index, state);
                        if (ParserATNSimulator.debug) {
                            console.log("DFA after predictATN: " + dfa.toString(this._parser.vocabulary, this._parser.ruleNames));
                        }
                        return alt;
                    }
                    finally {
                        this.dfa = undefined;
                        input.seek(index);
                        input.release(m);
                    }
                }
                getStartState(dfa, input, outerContext, useContext)
                {
                    if (!useContext) {
                        if (dfa.isPrecedenceDfa) {
                            // the start state for a precedence DFA depends on the current
                            // parser precedence, and is provided by a DFA method.
                            let state = dfa.getPrecedenceStartState(this._parser.precedence, false);
                            if (state == null) {
                                return undefined;
                            }
                            return new SimulatorState_1.SimulatorState(outerContext, state, false, outerContext);
                        }
                        else {
                            if (dfa.s0 == null) {
                                return undefined;
                            }
                            return new SimulatorState_1.SimulatorState(outerContext, dfa.s0, false, outerContext);
                        }
                    }
                    if (!this.enable_global_context_dfa) {
                        return undefined;
                    }
                    let remainingContext = outerContext;
                    assert(outerContext != null);
                    let s0;
                    if (dfa.isPrecedenceDfa) {
                        s0 = dfa.getPrecedenceStartState(this._parser.precedence, true);
                    }
                    else {
                        s0 = dfa.s0full;
                    }
                    while (remainingContext != null && s0 != null && s0.isContextSensitive) {
                        remainingContext = this.skipTailCalls(remainingContext);
                        s0 = s0.getContextTarget(this.getReturnState(remainingContext));
                        if (remainingContext.isEmpty) {
                            assert(s0 == null || !s0.isContextSensitive);
                        }
                        else {
                            remainingContext = remainingContext.parent;
                        }
                    }
                    if (s0 == null) {
                        return undefined;
                    }
                    return new SimulatorState_1.SimulatorState(outerContext, s0, useContext, remainingContext);
                }
                execDFA(dfa, input, startIndex, state)
                {
                    let outerContext = state.outerContext;
                    if (ParserATNSimulator.dfa_debug) {
                        console.log("DFA decision " + dfa.decision +
                        " exec LA(1)==" + this.getLookaheadName(input) +
                        ", outerContext=" + outerContext.toString(this._parser));
                    }
                    if (ParserATNSimulator.dfa_debug) {
                        console.log(dfa.toString(this._parser.vocabulary, this._parser.ruleNames));
                    }
                    let s = state.s0;
                    let t = input.LA(1);
                    let remainingOuterContext = state.remainingOuterContext;
                    while (true) {
                        if (ParserATNSimulator.dfa_debug) {
                            console.log("DFA state " + s.stateNumber + " LA(1)==" + this.getLookaheadName(input));
                        }
                        if (state.useContext) {
                            while (s.isContextSymbol(t)) {
                                let next;
                                if (remainingOuterContext != null) {
                                    remainingOuterContext = this.skipTailCalls(remainingOuterContext);
                                    next = s.getContextTarget(this.getReturnState(remainingOuterContext));
                                }
                                if (next == null) {
                                    // fail over to ATN
                                    let initialState = new SimulatorState_1.SimulatorState(state.outerContext, s, state.useContext, remainingOuterContext);
                                    return this.execATN(dfa, input, startIndex, initialState);
                                }
                                assert(remainingOuterContext != null);
                                remainingOuterContext = remainingOuterContext.parent;
                                s = next;
                            }
                        }
                        if (this.isAcceptState(s, state.useContext)) {
                            if (s.predicates != null) {
                                if (ParserATNSimulator.dfa_debug) {
                                    console.log("accept " + s);
                                }
                            }
                            else {
                                if (ParserATNSimulator.dfa_debug) {
                                    console.log("accept; predict " + s.prediction + " in state " + s.stateNumber);
                                }
                            }
                            // keep going unless we're at EOF or state only has one alt number
                            // mentioned in configs; check if something else could match
                            // TODO: don't we always stop? only lexer would keep going
                            // TODO: v3 dfa don't do this.
                            break;
                        }
                        // t is not updated if one of these states is reached
                        assert(!this.isAcceptState(s, state.useContext));
                        // if no edge, pop over to ATN interpreter, update DFA and return
                        let target = this.getExistingTargetState(s, t);
                        if (target == null) {
                            if (ParserATNSimulator.dfa_debug && t >= 0) {
                                console.log("no edge for " + this._parser.vocabulary.getDisplayName(t));
                            }
                            let alt;
                            if (ParserATNSimulator.dfa_debug) {
                                let interval = Interval_1.Interval.of(startIndex, this._parser.inputStream.index);
                                console.log("ATN exec upon " +
                                this._parser.inputStream.getText(interval) +
                                " at DFA state " + s.stateNumber);
                            }
                            let initialState = new SimulatorState_1.SimulatorState(outerContext, s, state.useContext, remainingOuterContext);
                            alt = this.execATN(dfa, input, startIndex, initialState);
                            if (ParserATNSimulator.dfa_debug) {
                                console.log("back from DFA update, alt=" + alt + ", dfa=\n" + dfa.toString(this._parser.vocabulary, this._parser.ruleNames));

                            }
                            //dump(dfa);
                            // action already executed
                            if (ParserATNSimulator.dfa_debug) {
                                console.log("DFA decision " + dfa.decision +
                                " predicts " + alt);
                            }
                            return alt; // we've updated DFA, exec'd action, and have our deepest answer
                        }
                        else if (target === ATNSimulator_1.ATNSimulator.ERROR) {
                            let errorState = new SimulatorState_1.SimulatorState(outerContext, s, state.useContext, remainingOuterContext);
                            return this.handleNoViableAlt(input, startIndex, errorState);
                        }
                        s = target;
                        if (!this.isAcceptState(s, state.useContext) && t !== IntStream_1.IntStream.EOF) {
                            input.consume();
                            t = input.LA(1);
                        }
                    }
                    //    if ( acceptState==null ) {
                    //      if ( debug ) System.out.println("!!! no viable alt in dfa");
                    //      return -1;
                    //    }
                    if (!state.useContext && s.configs.conflictInfo != null) {
                        if (dfa.atnStartState instanceof DecisionState_1.DecisionState) {
                            if (!this.userWantsCtxSensitive ||
                            (!s.configs.dipsIntoOuterContext && s.configs.isExactConflict) ||
                            (this.treat_sllk1_conflict_as_ambiguity && input.index === startIndex)) {




                            }
                            else {
                                assert(!state.useContext);
                                // Before attempting full context prediction, check to see if there are
                                // disambiguating or validating predicates to evaluate which allow an
                                // immediate decision
                                let conflictingAlts;
                                let predicates = s.predicates;
                                if (predicates != null) {
                                    let conflictIndex = input.index;
                                    if (conflictIndex !== startIndex) {
                                        input.seek(startIndex);
                                    }
                                    conflictingAlts = this.evalSemanticContext(predicates, outerContext, true);
                                    if (conflictingAlts.cardinality() === 1) {
                                        return conflictingAlts.nextSetBit(0);
                                    }
                                    if (conflictIndex !== startIndex) {
                                        // restore the index so reporting the fallback to full
                                        // context occurs with the index at the correct spot
                                        input.seek(conflictIndex);
                                    }
                                }
                                if (this.reportAmbiguities) {
                                    let conflictState = new SimulatorState_1.SimulatorState(outerContext, s, state.useContext, remainingOuterContext);
                                    this.reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, input.index);
                                }
                                input.seek(startIndex);
                                return this.adaptivePredict(input, dfa.decision, outerContext, true);
                            }
                        }
                    }
                    // Before jumping to prediction, check to see if there are
                    // disambiguating or validating predicates to evaluate
                    let predicates = s.predicates;
                    if (predicates != null) {
                        let stopIndex = input.index;
                        if (startIndex !== stopIndex) {
                            input.seek(startIndex);
                        }
                        let alts = this.evalSemanticContext(predicates, outerContext, this.reportAmbiguities && this.predictionMode === PredictionMode_1.PredictionMode.LL_EXACT_AMBIG_DETECTION);
                        switch (alts.cardinality()) {
                        case 0:
                            throw this.noViableAlt(input, outerContext, s.configs, startIndex);
                        case 1:
                            return alts.nextSetBit(0);
                        default:
                            // report ambiguity after predicate evaluation to make sure the correct
                            // set of ambig alts is reported.
                            if (startIndex !== stopIndex) {
                                input.seek(stopIndex);
                            }
                            this.reportAmbiguity(dfa, s, startIndex, stopIndex, s.configs.isExactConflict, alts, s.configs);
                            return alts.nextSetBit(0);
                        }
                    }
                    if (ParserATNSimulator.dfa_debug) {
                        console.log("DFA decision " + dfa.decision +
                        " predicts " + s.prediction);
                    }
                    return s.prediction;
                }
                /**
                     * Determines if a particular DFA state should be treated as an accept state
                     * for the current prediction mode. In addition to the `useContext`
                     * parameter, the {@link #getPredictionMode()} method provides the
                     * prediction mode controlling the prediction algorithm as a whole.
                     *
                     * The default implementation simply returns the value of
                     * `DFAState.isAcceptState` except for conflict states when
                     * `useContext` is `true` and {@link #getPredictionMode()} is
                     * {@link PredictionMode#LL_EXACT_AMBIG_DETECTION}. In that case, only
                     * conflict states where {@link ATNConfigSet#isExactConflict} is
                     * `true` are considered accept states.
                     *
                     * @param state The DFA state to check.
                     * @param useContext `true` if the prediction algorithm is currently
                     * considering the full parser context; otherwise, `false` if the
                     * algorithm is currently performing a local context prediction.
                     *
                     * @returns `true` if the specified `state` is an accept state;
                     * otherwise, `false`.
                     */
                isAcceptState(state, useContext)
                {
                    if (!state.isAcceptState) {
                        return false;
                    }
                    if (state.configs.conflictingAlts == null) {
                        // unambiguous
                        return true;
                    }
                    // More picky when we need exact conflicts
                    if (useContext && this.predictionMode === PredictionMode_1.PredictionMode.LL_EXACT_AMBIG_DETECTION) {
                        return state.configs.isExactConflict;
                    }
                    return true;
                }
                /** Performs ATN simulation to compute a predicted alternative based
                     *  upon the remaining input, but also updates the DFA cache to avoid
                     *  having to traverse the ATN again for the same input sequence.
                     *
                     * There are some key conditions we're looking for after computing a new
                     * set of ATN configs (proposed DFA state):
                     *
                     * * if the set is empty, there is no viable alternative for current symbol
                     * * does the state uniquely predict an alternative?
                     * * does the state have a conflict that would prevent us from
                     *   putting it on the work list?
                     * * if in non-greedy decision is there a config at a rule stop state?
                     *
                     * We also have some key operations to do:
                     *
                     * * add an edge from previous DFA state to potentially new DFA state, D,
                     *   upon current symbol but only if adding to work list, which means in all
                     *   cases except no viable alternative (and possibly non-greedy decisions?)
                     * * collecting predicates and adding semantic context to DFA accept states
                     * * adding rule context to context-sensitive DFA accept states
                     * * consuming an input symbol
                     * * reporting a conflict
                     * * reporting an ambiguity
                     * * reporting a context sensitivity
                     * * reporting insufficient predicates
                     *
                     * We should isolate those operations, which are side-effecting, to the
                     * main work loop. We can isolate lots of code into other functions, but
                     * they should be side effect free. They can return package that
                     * indicates whether we should report something, whether we need to add a
                     * DFA edge, whether we need to augment accept state with semantic
                     * context or rule invocation context. Actually, it seems like we always
                     * add predicates if they exist, so that can simply be done in the main
                     * loop for any accept state creation or modification request.
                     *
                     * cover these cases:
                     *   dead end
                     *   single alt
                     *   single alt + preds
                     *   conflict
                     *   conflict + preds
                     *
                     * TODO: greedy + those
                     */
                execATN(dfa, input, startIndex, initialState)
                {
                    if (ParserATNSimulator.debug) {
                        console.log("execATN decision " + dfa.decision + " exec LA(1)==" + this.getLookaheadName(input));
                    }
                    let outerContext = initialState.outerContext;
                    let useContext = initialState.useContext;
                    let t = input.LA(1);
                    let previous = initialState;
                    let contextCache = new PredictionContextCache_1.PredictionContextCache();
                    while (true) {
                        // while more work
                        let nextState = this.computeReachSet(dfa, previous, t, contextCache);
                        if (nextState == null) {
                            this.setDFAEdge(previous.s0, input.LA(1), ATNSimulator_1.ATNSimulator.ERROR);
                            return this.handleNoViableAlt(input, startIndex, previous);
                        }
                        let D = nextState.s0;
                        // predicted alt => accept state
                        assert(D.isAcceptState || D.prediction === ATN_1.ATN.INVALID_ALT_NUMBER);
                        // conflicted => accept state
                        assert(D.isAcceptState || D.configs.conflictInfo == null);
                        if (this.isAcceptState(D, useContext)) {
                            let conflictingAlts = D.configs.conflictingAlts;
                            let predictedAlt = conflictingAlts == null ? D.prediction : ATN_1.ATN.INVALID_ALT_NUMBER;
                            if (predictedAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                                if (this.optimize_ll1
                                && input.index === startIndex
                                && !dfa.isPrecedenceDfa
                                && nextState.outerContext === nextState.remainingOuterContext
                                && dfa.decision >= 0
                                && !D.configs.hasSemanticContext) {
                                    if (t >= 0 && t <= MAX_SHORT_VALUE) {
                                        let key = ((dfa.decision << 16) >>> 0) + t;
                                        this.atn.LL1Table.set(key, predictedAlt);
                                    }
                                }
                                if (useContext && this.always_try_local_context) {
                                    this.reportContextSensitivity(dfa, predictedAlt, nextState, startIndex, input.index);
                                }
                            }
                            predictedAlt = D.prediction;
                            //        int k = input.index - startIndex + 1; // how much input we used
                            //        System.out.println("used k="+k);
                            let attemptFullContext = conflictingAlts != null && this.userWantsCtxSensitive;
                            if (attemptFullContext) {
                                // Only exact conflicts are known to be ambiguous when local
                                // prediction does not step out of the decision rule.
                                attemptFullContext = !useContext
                                && (D.configs.dipsIntoOuterContext || !D.configs.isExactConflict)
                                && (!this.treat_sllk1_conflict_as_ambiguity || input.index !== startIndex);
                            }
                            if (D.configs.hasSemanticContext) {
                                let predPredictions = D.predicates;
                                if (predPredictions != null) {
                                    let conflictIndex = input.index;
                                    if (conflictIndex !== startIndex) {
                                        input.seek(startIndex);
                                    }
                                    // use complete evaluation here if we'll want to retry with full context if still ambiguous
                                    conflictingAlts = this.evalSemanticContext(predPredictions, outerContext, attemptFullContext || this.reportAmbiguities);
                                    switch (conflictingAlts.cardinality()) {
                                    case 0:
                                        throw this.noViableAlt(input, outerContext, D.configs, startIndex);
                                    case 1:
                                        return conflictingAlts.nextSetBit(0);
                                    default:
                                        break;
                                    }
                                    if (conflictIndex !== startIndex) {
                                        // restore the index so reporting the fallback to full
                                        // context occurs with the index at the correct spot
                                        input.seek(conflictIndex);
                                    }
                                }
                            }
                            if (!attemptFullContext) {
                                if (conflictingAlts != null) {
                                    if (this.reportAmbiguities && conflictingAlts.cardinality() > 1) {
                                        this.reportAmbiguity(dfa, D, startIndex, input.index, D.configs.isExactConflict, conflictingAlts, D.configs);
                                    }
                                    predictedAlt = conflictingAlts.nextSetBit(0);
                                }
                                return predictedAlt;
                            }
                            else {
                                assert(!useContext);
                                assert(this.isAcceptState(D, false));
                                if (ParserATNSimulator.debug) {
                                    console.log("RETRY with outerContext=" + outerContext);
                                }
                                let fullContextState = this.computeStartState(dfa, outerContext, true);
                                if (this.reportAmbiguities) {
                                    this.reportAttemptingFullContext(dfa, conflictingAlts, nextState, startIndex, input.index);
                                }
                                input.seek(startIndex);
                                return this.execATN(dfa, input, startIndex, fullContextState);
                            }
                        }
                        previous = nextState;
                        if (t !== IntStream_1.IntStream.EOF) {
                            input.consume();
                            t = input.LA(1);
                        }
                    }
                }
                /**
                     * This method is used to improve the localization of error messages by
                     * choosing an alternative rather than throwing a
                     * {@link NoViableAltException} in particular prediction scenarios where the
                     * {@link #ERROR} state was reached during ATN simulation.
                     *
                     * The default implementation of this method uses the following
                     * algorithm to identify an ATN configuration which successfully parsed the
                     * decision entry rule. Choosing such an alternative ensures that the
                     * {@link ParserRuleContext} returned by the calling rule will be complete
                     * and valid, and the syntax error will be reported later at a more
                     * localized location.
                     *
                     * * If no configuration in `configs` reached the end of the
                     *   decision rule, return {@link ATN#INVALID_ALT_NUMBER}.
                     * * If all configurations in `configs` which reached the end of the
                     *   decision rule predict the same alternative, return that alternative.
                     * * If the configurations in `configs` which reached the end of the
                     *   decision rule predict multiple alternatives (call this *S*),
                     *   choose an alternative in the following order.
                     *
                     *     1. Filter the configurations in `configs` to only those
                     *        configurations which remain viable after evaluating semantic predicates.
                     *        If the set of these filtered configurations which also reached the end of
                     *        the decision rule is not empty, return the minimum alternative
                     *        represented in this set.
                     *     1. Otherwise, choose the minimum alternative in *S*.
                     *
                     * In some scenarios, the algorithm described above could predict an
                     * alternative which will result in a {@link FailedPredicateException} in
                     * parser. Specifically, this could occur if the *only* configuration
                     * capable of successfully parsing to the end of the decision rule is
                     * blocked by a semantic predicate. By choosing this alternative within
                     * {@link #adaptivePredict} instead of throwing a
                     * {@link NoViableAltException}, the resulting
                     * {@link FailedPredicateException} in the parser will identify the specific
                     * predicate which is preventing the parser from successfully parsing the
                     * decision rule, which helps developers identify and correct logic errors
                     * in semantic predicates.
                     *
                     * @param input The input {@link TokenStream}
                     * @param startIndex The start index for the current prediction, which is
                     * the input index where any semantic context in `configs` should be
                     * evaluated
                     * @param previous The ATN simulation state immediately before the
                     * {@link #ERROR} state was reached
                     *
                     * @returns The value to return from {@link #adaptivePredict}, or
                     * {@link ATN#INVALID_ALT_NUMBER} if a suitable alternative was not
                     * identified and {@link #adaptivePredict} should report an error instead.
                     */
                handleNoViableAlt(input, startIndex, previous)
                {
                    if (previous.s0 != null) {
                        let alts = new BitSet_1.BitSet();
                        let maxAlt = 0;
                        for (let config of previous.s0.configs) {
                            if (config.reachesIntoOuterContext || config.state instanceof RuleStopState_1.RuleStopState) {
                                alts.set(config.alt);
                                maxAlt = Math.max(maxAlt, config.alt);
                            }
                        }
                        switch (alts.cardinality()) {
                        case 0:
                            break;
                        case 1:
                            return alts.nextSetBit(0);
                        default:
                            if (!previous.s0.configs.hasSemanticContext) {
                                // configs doesn't contain any predicates, so the predicate
                                // filtering code below would be pointless
                                return alts.nextSetBit(0);
                            }
                            /*
                                                 * Try to find a configuration set that not only dipped into the outer
                                                 * context, but also isn't eliminated by a predicate.
                                                 */
                            let filteredConfigs = new ATNConfigSet_1.ATNConfigSet();
                            for (let config of previous.s0.configs) {
                                if (config.reachesIntoOuterContext || config.state instanceof RuleStopState_1.RuleStopState) {
                                    filteredConfigs.add(config);
                                }
                            }
                            /* The following code blocks are adapted from predicateDFAState with
                                                 * the following key changes.
                                                 *
                                                 *  1. The code operates on an ATNConfigSet rather than a DFAState.
                                                 *  2. Predicates are collected for all alternatives represented in
                                                 *     filteredConfigs, rather than restricting the evaluation to
                                                 *     conflicting and/or unique configurations.
                                                 */
                            let altToPred = this.getPredsForAmbigAlts(alts, filteredConfigs, maxAlt);
                            if (altToPred != null) {
                                let predicates = this.getPredicatePredictions(alts, altToPred);
                                if (predicates != null) {
                                    let stopIndex = input.index;
                                    try {
                                        input.seek(startIndex);
                                        let filteredAlts = this.evalSemanticContext(predicates, previous.outerContext, false);
                                        if (!filteredAlts.isEmpty) {
                                            return filteredAlts.nextSetBit(0);
                                        }
                                    }
                                    finally {
                                        input.seek(stopIndex);
                                    }
                                }
                            }
                            return alts.nextSetBit(0);
                        }
                    }
                    throw this.noViableAlt(input, previous.outerContext, previous.s0.configs, startIndex);
                }
                computeReachSet(dfa, previous, t, contextCache)
                {
                    let useContext = previous.useContext;
                    let remainingGlobalContext = previous.remainingOuterContext;
                    let s = previous.s0;
                    if (useContext) {
                        while (s.isContextSymbol(t)) {
                            let next;
                            if (remainingGlobalContext != null) {
                                remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);
                                next = s.getContextTarget(this.getReturnState(remainingGlobalContext));
                            }
                            if (next == null) {
                                break;
                            }
                            assert(remainingGlobalContext != null);
                            remainingGlobalContext = remainingGlobalContext.parent;
                            s = next;
                        }
                    }
                    assert(!this.isAcceptState(s, useContext));
                    if (this.isAcceptState(s, useContext)) {
                        return new SimulatorState_1.SimulatorState(previous.outerContext, s, useContext, remainingGlobalContext);
                    }
                    let s0 = s;
                    let target = this.getExistingTargetState(s0, t);
                    if (target == null) {
                        let result = this.computeTargetState(dfa, s0, remainingGlobalContext, t, useContext, contextCache);
                        target = result[0];
                        remainingGlobalContext = result[1];
                    }
                    if (target === ATNSimulator_1.ATNSimulator.ERROR) {
                        return undefined;
                    }
                    assert(!useContext || !target.configs.dipsIntoOuterContext);
                    return new SimulatorState_1.SimulatorState(previous.outerContext, target, useContext, remainingGlobalContext);
                }
                /**
                     * Get an existing target state for an edge in the DFA. If the target state
                     * for the edge has not yet been computed or is otherwise not available,
                     * this method returns `undefined`.
                     *
                     * @param s The current DFA state
                     * @param t The next input symbol
                     * @returns The existing target DFA state for the given input symbol
                     * `t`, or `undefined` if the target state for this edge is not
                     * already cached
                     */
                getExistingTargetState(s, t)
                {
                    return s.getTarget(t);
                }
                /**
                     * Compute a target state for an edge in the DFA, and attempt to add the
                     * computed state and corresponding edge to the DFA.
                     *
                     * @param dfa
                     * @param s The current DFA state
                     * @param remainingGlobalContext
                     * @param t The next input symbol
                     * @param useContext
                     * @param contextCache
                     *
                     * @returns The computed target DFA state for the given input symbol
                     * `t`. If `t` does not lead to a valid DFA state, this method
                     * returns {@link #ERROR}.
                     */
                computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache)
                {
                    let closureConfigs = s.configs.toArray();
                    let contextElements;
                    let reach = new ATNConfigSet_1.ATNConfigSet();
                    let stepIntoGlobal;
                    do {
                        let hasMoreContext = !useContext || remainingGlobalContext != null;
                        if (!hasMoreContext) {
                            reach.isOutermostConfigSet = true;
                        }
                        let reachIntermediate = new ATNConfigSet_1.ATNConfigSet();
                        /* Configurations already in a rule stop state indicate reaching the end
                                     * of the decision rule (local context) or end of the start rule (full
                                     * context). Once reached, these configurations are never updated by a
                                     * closure operation, so they are handled separately for the performance
                                     * advantage of having a smaller intermediate set when calling closure.
                                     *
                                     * For full-context reach operations, separate handling is required to
                                     * ensure that the alternative matching the longest overall sequence is
                                     * chosen when multiple such configurations can match the input.
                                     */
                        let skippedStopStates;
                        for (let c of closureConfigs) {
                            if (ParserATNSimulator.debug) {
                                console.log("testing " + this.getTokenName(t) + " at " + c.toString());
                            }
                            if (c.state instanceof RuleStopState_1.RuleStopState) {
                                assert(c.context.isEmpty);
                                if (useContext && !c.reachesIntoOuterContext || t === IntStream_1.IntStream.EOF) {
                                    if (skippedStopStates == null) {
                                        skippedStopStates = [];
                                    }
                                    skippedStopStates.push(c);
                                }
                                continue;
                            }
                            let n = c.state.numberOfOptimizedTransitions;
                            for (let ti = 0; ti < n; ti++) {
                                // for each optimized transition
                                let trans = c.state.getOptimizedTransition(ti);
                                let target = this.getReachableTarget(c, trans, t);
                                if (target != null) {
                                    reachIntermediate.add(c.transform(target, false), contextCache);
                                }
                            }
                        }
                        /* This block optimizes the reach operation for intermediate sets which
                                     * trivially indicate a termination state for the overall
                                     * adaptivePredict operation.
                                     *
                                     * The conditions assume that intermediate
                                     * contains all configurations relevant to the reach set, but this
                                     * condition is not true when one or more configurations have been
                                     * withheld in skippedStopStates, or when the current symbol is EOF.
                                     */
                        if (this.optimize_unique_closure && skippedStopStates == null && t !== Token_1.Token.EOF && reachIntermediate.uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            reachIntermediate.isOutermostConfigSet = reach.isOutermostConfigSet;
                            reach = reachIntermediate;
                            break;
                        }
                        /* If the reach set could not be trivially determined, perform a closure
                                     * operation on the intermediate set to compute its initial value.
                                     */
                        let collectPredicates = false;
                        let treatEofAsEpsilon = t === Token_1.Token.EOF;
                        this.closure(reachIntermediate, reach, collectPredicates, hasMoreContext, contextCache, treatEofAsEpsilon);
                        stepIntoGlobal = reach.dipsIntoOuterContext;
                        if (t === IntStream_1.IntStream.EOF) {
                            /* After consuming EOF no additional input is possible, so we are
                                             * only interested in configurations which reached the end of the
                                             * decision rule (local context) or end of the start rule (full
                                             * context). Update reach to contain only these configurations. This
                                             * handles both explicit EOF transitions in the grammar and implicit
                                             * EOF transitions following the end of the decision or start rule.
                                             *
                                             * This is handled before the configurations in skippedStopStates,
                                             * because any configurations potentially added from that list are
                                             * already guaranteed to meet this condition whether or not it's
                                             * required.
                                             */
                            reach = this.removeAllConfigsNotInRuleStopState(reach, contextCache);
                        }
                        /* If skippedStopStates is not undefined, then it contains at least one
                                     * configuration. For full-context reach operations, these
                                     * configurations reached the end of the start rule, in which case we
                                     * only add them back to reach if no configuration during the current
                                     * closure operation reached such a state. This ensures adaptivePredict
                                     * chooses an alternative matching the longest overall sequence when
                                     * multiple alternatives are viable.
                                     */
                        if (skippedStopStates != null && (!useContext || !PredictionMode_1.PredictionMode.hasConfigInRuleStopState(reach))) {
                            assert(skippedStopStates.length > 0);
                            for (let c of skippedStopStates) {
                                reach.add(c, contextCache);
                            }
                        }
                        if (useContext && stepIntoGlobal) {
                            reach.clear();
                            // We know remainingGlobalContext is not undefined at this point (why?)
                            remainingGlobalContext = remainingGlobalContext;
                            remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);
                            let nextContextElement = this.getReturnState(remainingGlobalContext);
                            if (contextElements == null) {
                                contextElements = new IntegerList_1.IntegerList();
                            }
                            if (remainingGlobalContext.isEmpty) {
                                remainingGlobalContext = undefined;
                            }
                            else {
                                remainingGlobalContext = remainingGlobalContext.parent;
                            }
                            contextElements.add(nextContextElement);
                            if (nextContextElement !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                                for (let i = 0; i < closureConfigs.length; i++) {
                                    closureConfigs[i] = closureConfigs[i].appendContext(nextContextElement, contextCache);
                                }
                            }
                        }
                    } while (useContext && stepIntoGlobal);
                    if (reach.isEmpty) {
                        this.setDFAEdge(s, t, ATNSimulator_1.ATNSimulator.ERROR);
                        return [ATNSimulator_1.ATNSimulator.ERROR, remainingGlobalContext];
                    }
                    let result = this.addDFAEdge(dfa, s, t, contextElements, reach, contextCache);
                    return [result, remainingGlobalContext];
                }
                /**
                     * Return a configuration set containing only the configurations from
                     * `configs` which are in a {@link RuleStopState}. If all
                     * configurations in `configs` are already in a rule stop state, this
                     * method simply returns `configs`.
                     *
                     * @param configs the configuration set to update
                     * @param contextCache the {@link PredictionContext} cache
                     *
                     * @returns `configs` if all configurations in `configs` are in a
                     * rule stop state, otherwise return a new configuration set containing only
                     * the configurations from `configs` which are in a rule stop state
                     */
                removeAllConfigsNotInRuleStopState(configs, contextCache)
                {
                    if (PredictionMode_1.PredictionMode.allConfigsInRuleStopStates(configs)) {
                        return configs;
                    }
                    let result = new ATNConfigSet_1.ATNConfigSet();
                    for (let config of configs) {
                        if (!(config.state instanceof RuleStopState_1.RuleStopState)) {
                            continue;
                        }
                        result.add(config, contextCache);
                    }
                    return result;
                }
                computeStartState(dfa, globalContext, useContext)
                {
                    let s0 = dfa.isPrecedenceDfa ? dfa.getPrecedenceStartState(this._parser.precedence, useContext) :
                    useContext ? dfa.s0full :
                    dfa.s0;
                    if (s0 != null) {
                        if (!useContext) {
                            return new SimulatorState_1.SimulatorState(globalContext, s0, useContext, globalContext);
                        }
                        s0.setContextSensitive(this.atn);
                    }
                    let decision = dfa.decision;
                    // @NotNull
                    let p = dfa.atnStartState;
                    let previousContext = 0;
                    let remainingGlobalContext = globalContext;
                    let initialContext = useContext ? PredictionContext_1.PredictionContext.EMPTY_FULL : PredictionContext_1.PredictionContext.EMPTY_LOCAL; // always at least the implicit call to start rule
                    let contextCache = new PredictionContextCache_1.PredictionContextCache();
                    if (useContext) {
                        if (!this.enable_global_context_dfa) {
                            while (remainingGlobalContext != null) {
                                if (remainingGlobalContext.isEmpty) {
                                    previousContext = PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;
                                    remainingGlobalContext = undefined;
                                }
                                else {
                                    previousContext = this.getReturnState(remainingGlobalContext);
                                    initialContext = initialContext.appendSingleContext(previousContext, contextCache);
                                    remainingGlobalContext = remainingGlobalContext.parent;
                                }
                            }
                        }
                        while (s0 != null && s0.isContextSensitive && remainingGlobalContext != null) {
                            let next;
                            remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);
                            if (remainingGlobalContext.isEmpty) {
                                next = s0.getContextTarget(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY);
                                previousContext = PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;
                                remainingGlobalContext = undefined;
                            }
                            else {
                                previousContext = this.getReturnState(remainingGlobalContext);
                                next = s0.getContextTarget(previousContext);
                                initialContext = initialContext.appendSingleContext(previousContext, contextCache);
                                remainingGlobalContext = remainingGlobalContext.parent;
                            }
                            if (next == null) {
                                break;
                            }
                            s0 = next;
                        }
                    }
                    if (s0 != null && !s0.isContextSensitive) {
                        return new SimulatorState_1.SimulatorState(globalContext, s0, useContext, remainingGlobalContext);
                    }
                    let configs = new ATNConfigSet_1.ATNConfigSet();
                    while (true) {
                        let reachIntermediate = new ATNConfigSet_1.ATNConfigSet();
                        let n = p.numberOfTransitions;
                        for (let ti = 0; ti < n; ti++) {
                            // for each transition
                            let target = p.transition(ti).target;
                            reachIntermediate.add(ATNConfig_1.ATNConfig.create(target, ti + 1, initialContext));
                        }
                        let hasMoreContext = remainingGlobalContext != null;
                        if (!hasMoreContext) {
                            configs.isOutermostConfigSet = true;
                        }
                        let collectPredicates = true;
                        this.closure(reachIntermediate, configs, collectPredicates, hasMoreContext, contextCache, false);
                        let stepIntoGlobal = configs.dipsIntoOuterContext;
                        let next;
                        if (useContext && !this.enable_global_context_dfa) {
                            s0 = this.addDFAState(dfa, configs, contextCache);
                            break;
                        }
                        else if (s0 == null) {
                            if (!dfa.isPrecedenceDfa) {
                                next = this.addDFAState(dfa, configs, contextCache);
                                if (useContext) {
                                    if (!dfa.s0full) {
                                        dfa.s0full = next;
                                    }
                                    else {
                                        next = dfa.s0full;
                                    }
                                }
                                else {
                                    if (!dfa.s0) {
                                        dfa.s0 = next;
                                    }
                                    else {
                                        next = dfa.s0;
                                    }
                                }
                            }
                            else {
                                /* If this is a precedence DFA, we use applyPrecedenceFilter
                                                     * to convert the computed start state to a precedence start
                                                     * state. We then use DFA.setPrecedenceStartState to set the
                                                     * appropriate start state for the precedence level rather
                                                     * than simply setting DFA.s0.
                                                     */
                                configs = this.applyPrecedenceFilter(configs, globalContext, contextCache);
                                next = this.addDFAState(dfa, configs, contextCache);
                                dfa.setPrecedenceStartState(this._parser.precedence, useContext, next);
                            }
                        }
                        else {
                            if (dfa.isPrecedenceDfa) {
                                configs = this.applyPrecedenceFilter(configs, globalContext, contextCache);
                            }
                            next = this.addDFAState(dfa, configs, contextCache);
                            s0.setContextTarget(previousContext, next);
                        }
                        s0 = next;
                        if (!useContext || !stepIntoGlobal) {
                            break;
                        }
                        // TODO: make sure it distinguishes empty stack states
                        next.setContextSensitive(this.atn);
                        // We know remainingGlobalContext is not undefined at this point (why?)
                        remainingGlobalContext = remainingGlobalContext;
                        configs.clear();
                        remainingGlobalContext = this.skipTailCalls(remainingGlobalContext);
                        let nextContextElement = this.getReturnState(remainingGlobalContext);
                        if (remainingGlobalContext.isEmpty) {
                            remainingGlobalContext = undefined;
                        }
                        else {
                            remainingGlobalContext = remainingGlobalContext.parent;
                        }
                        if (nextContextElement !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                            initialContext = initialContext.appendSingleContext(nextContextElement, contextCache);
                        }
                        previousContext = nextContextElement;
                    }
                    return new SimulatorState_1.SimulatorState(globalContext, s0, useContext, remainingGlobalContext);
                }
                /**
                     * This method transforms the start state computed by
                     * {@link #computeStartState} to the special start state used by a
                     * precedence DFA for a particular precedence value. The transformation
                     * process applies the following changes to the start state's configuration
                     * set.
                     *
                     * 1. Evaluate the precedence predicates for each configuration using
                     *    {@link SemanticContext#evalPrecedence}.
                     * 1. When {@link ATNConfig#isPrecedenceFilterSuppressed} is `false`,
                     *    remove all configurations which predict an alternative greater than 1,
                     *    for which another configuration that predicts alternative 1 is in the
                     *    same ATN state with the same prediction context. This transformation is
                     *    valid for the following reasons:
                     *
                     *     * The closure block cannot contain any epsilon transitions which bypass
                     *       the body of the closure, so all states reachable via alternative 1 are
                     *       part of the precedence alternatives of the transformed left-recursive
                     *       rule.
                     *     * The "primary" portion of a left recursive rule cannot contain an
                     *       epsilon transition, so the only way an alternative other than 1 can exist
                     *       in a state that is also reachable via alternative 1 is by nesting calls
                     *       to the left-recursive rule, with the outer calls not being at the
                     *       preferred precedence level. The
                     *       {@link ATNConfig#isPrecedenceFilterSuppressed} property marks ATN
                     *       configurations which do not meet this condition, and therefore are not
                     *       eligible for elimination during the filtering process.
                     *
                     * The prediction context must be considered by this filter to address
                     * situations like the following.
                     *
                     * ```antlr
                     * grammar TA;
                     * prog: statement* EOF;
                     * statement: letterA | statement letterA 'b' ;
                     * letterA: 'a';
                     * ```
                     *
                     * If the above grammar, the ATN state immediately before the token
                     * reference `'a'` in `letterA` is reachable from the left edge
                     * of both the primary and closure blocks of the left-recursive rule
                     * `statement`. The prediction context associated with each of these
                     * configurations distinguishes between them, and prevents the alternative
                     * which stepped out to `prog` (and then back in to `statement`
                     * from being eliminated by the filter.
                     *
                     * @param configs The configuration set computed by
                     * {@link #computeStartState} as the start state for the DFA.
                     * @returns The transformed configuration set representing the start state
                     * for a precedence DFA at a particular precedence level (determined by
                     * calling {@link Parser#getPrecedence}).
                     */
                applyPrecedenceFilter(configs, globalContext, contextCache)
                {
                    let statesFromAlt1 = new Map();
                    let configSet = new ATNConfigSet_1.ATNConfigSet();
                    for (let config of configs) {
                        // handle alt 1 first
                        if (config.alt !== 1) {
                            continue;
                        }
                        let updatedContext = config.semanticContext.evalPrecedence(this._parser, globalContext);
                        if (updatedContext == null) {
                            // the configuration was eliminated
                            continue;
                        }
                        statesFromAlt1.set(config.state.stateNumber, config.context);
                        if (updatedContext !== config.semanticContext) {
                            configSet.add(config.transform(config.state, false, updatedContext), contextCache);
                        }
                        else {
                            configSet.add(config, contextCache);
                        }
                    }
                    for (let config of configs) {
                        if (config.alt === 1) {
                            // already handled
                            continue;
                        }
                        if (!config.isPrecedenceFilterSuppressed) {
                            /* In the future, this elimination step could be updated to also
                                             * filter the prediction context for alternatives predicting alt>1
                                             * (basically a graph subtraction algorithm).
                                             */
                            let context = statesFromAlt1.get(config.state.stateNumber);
                            if (context != null && context.equals(config.context)) {
                                // eliminated
                                continue;
                            }
                        }
                        configSet.add(config, contextCache);
                    }
                    return configSet;
                }
                getReachableTarget(source, trans, ttype)
                {
                    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
                        return trans.target;
                    }
                    return undefined;
                }
                /** collect and set D's semantic context */
                predicateDFAState(D, configs, nalts)
                {
                    let conflictingAlts = this.getConflictingAltsFromConfigSet(configs);
                    if (!conflictingAlts) {
                        throw new Error("This unhandled scenario is intended to be unreachable, but I'm currently not sure of why we know that's the case.");
                    }
                    if (ParserATNSimulator.debug) {
                        console.log("predicateDFAState " + D);
                    }
                    let altToPred = this.getPredsForAmbigAlts(conflictingAlts, configs, nalts);
                    // altToPred[uniqueAlt] is now our validating predicate (if any)
                    let predPredictions;
                    if (altToPred != null) {
                        // we have a validating predicate; test it
                        // Update DFA so reach becomes accept state with predicate
                        predPredictions = this.getPredicatePredictions(conflictingAlts, altToPred);
                        D.predicates = predPredictions;
                    }
                    return predPredictions;
                }
                getPredsForAmbigAlts(ambigAlts, configs, nalts)
                {
                    // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
                    /* altToPred starts as an array of all undefined contexts. The entry at index i
                             * corresponds to alternative i. altToPred[i] may have one of three values:
                             *   1. undefined: no ATNConfig c is found such that c.alt===i
                             *   2. SemanticContext.NONE: At least one ATNConfig c exists such that
                             *      c.alt===i and c.semanticContext===SemanticContext.NONE. In other words,
                             *      alt i has at least one unpredicated config.
                             *   3. Non-NONE Semantic Context: There exists at least one, and for all
                             *      ATNConfig c such that c.alt===i, c.semanticContext!==SemanticContext.NONE.
                             *
                             * From this, it is clear that NONE||anything==NONE.
                             */
                    let altToPred = new Array(nalts + 1);
                    let n = altToPred.length;
                    for (let c of configs) {
                        if (ambigAlts.get(c.alt)) {
                            altToPred[c.alt] = SemanticContext_1.SemanticContext.or(altToPred[c.alt], c.semanticContext);
                        }
                    }
                    let nPredAlts = 0;
                    for (let i = 0; i < n; i++) {
                        if (altToPred[i] == null) {
                            altToPred[i] = SemanticContext_1.SemanticContext.NONE;
                        }
                        else if (altToPred[i] !== SemanticContext_1.SemanticContext.NONE) {
                            nPredAlts++;
                        }
                    }
                    // At this point we know `altToPred` doesn't contain any undefined entries
                    let result = altToPred;
                    // nonambig alts are undefined in result
                    if (nPredAlts === 0) {
                        result = undefined;
                    }
                    if (ParserATNSimulator.debug) {
                        console.log("getPredsForAmbigAlts result " + (result ? Arrays_1.Arrays.toString(result) : "undefined"));
                    }
                    return result;
                }
                getPredicatePredictions(ambigAlts, altToPred)
                {
                    let pairs = [];
                    let containsPredicate = false;
                    for (let i = 1; i < altToPred.length; i++) {
                        let pred = altToPred[i];
                        // unpredicated is indicated by SemanticContext.NONE
                        assert(pred != null);
                        // find first unpredicated but ambig alternative, if any.
                        // Only ambiguous alternatives will have SemanticContext.NONE.
                        // Any unambig alts or ambig naked alts after first ambig naked are ignored
                        // (undefined, i) means alt i is the default prediction
                        // if no (undefined, i), then no default prediction.
                        if (ambigAlts != null && ambigAlts.get(i) && pred === SemanticContext_1.SemanticContext.NONE) {
                            pairs.push(new DFAState_1.DFAState.PredPrediction(pred, i));
                        }
                        else if (pred !== SemanticContext_1.SemanticContext.NONE) {
                            containsPredicate = true;
                            pairs.push(new DFAState_1.DFAState.PredPrediction(pred, i));
                        }
                    }
                    if (!containsPredicate) {
                        return undefined;
                    }
                    //    System.out.println(Arrays.toString(altToPred)+"->"+pairs);
                    return pairs;
                }
                /** Look through a list of predicate/alt pairs, returning alts for the
                     *  pairs that win. An `undefined` predicate indicates an alt containing an
                     *  unpredicated config which behaves as "always true."
                     */
                evalSemanticContext(predPredictions, outerContext, complete)
                {
                    let predictions = new BitSet_1.BitSet();
                    for (let pair of predPredictions) {
                        if (pair.pred === SemanticContext_1.SemanticContext.NONE) {
                            predictions.set(pair.alt);
                            if (!complete) {
                                break;
                            }
                            continue;
                        }
                        let evaluatedResult = this.evalSemanticContextImpl(pair.pred, outerContext, pair.alt);
                        if (ParserATNSimulator.debug || ParserATNSimulator.dfa_debug) {
                            console.log("eval pred " + pair + "=" + evaluatedResult);
                        }
                        if (evaluatedResult) {
                            if (ParserATNSimulator.debug || ParserATNSimulator.dfa_debug) {
                                console.log("PREDICT " + pair.alt);
                            }
                            predictions.set(pair.alt);
                            if (!complete) {
                                break;
                            }
                        }
                    }
                    return predictions;
                }
                /**
                     * Evaluate a semantic context within a specific parser context.
                     *
                     * This method might not be called for every semantic context evaluated
                     * during the prediction process. In particular, we currently do not
                     * evaluate the following but it may change in the future:
                     *
                     * * Precedence predicates (represented by
                     *   {@link SemanticContext.PrecedencePredicate}) are not currently evaluated
                     *   through this method.
                     * * Operator predicates (represented by {@link SemanticContext.AND} and
                     *   {@link SemanticContext.OR}) are evaluated as a single semantic
                     *   context, rather than evaluating the operands individually.
                     *   Implementations which require evaluation results from individual
                     *   predicates should override this method to explicitly handle evaluation of
                     *   the operands within operator predicates.
                     *
                     * @param pred The semantic context to evaluate
                     * @param parserCallStack The parser context in which to evaluate the
                     * semantic context
                     * @param alt The alternative which is guarded by `pred`
                     *
                     * @since 4.3
                     */
                evalSemanticContextImpl(pred, parserCallStack, alt)
                {
                    return pred.eval(this._parser, parserCallStack);
                }
                /* TODO: If we are doing predicates, there is no point in pursuing
                         closure operations if we reach a DFA state that uniquely predicts
                         alternative. We will not be caching that DFA state and it is a
                         waste to pursue the closure. Might have to advance when we do
                         ambig detection thought :(
                          */
                closure(sourceConfigs, configs, collectPredicates, hasMoreContext, contextCache, treatEofAsEpsilon)
                {
                    if (contextCache == null) {
                        contextCache = PredictionContextCache_1.PredictionContextCache.UNCACHED;
                    }
                    let currentConfigs = sourceConfigs;
                    let closureBusy = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
                    while (currentConfigs.size > 0) {
                        let intermediate = new ATNConfigSet_1.ATNConfigSet();
                        for (let config of currentConfigs) {
                            this.closureImpl(config, configs, intermediate, closureBusy, collectPredicates, hasMoreContext, contextCache, 0, treatEofAsEpsilon);
                        }
                        currentConfigs = intermediate;
                    }
                }
                closureImpl(config, configs, intermediate, closureBusy, collectPredicates, hasMoreContexts, contextCache, depth, treatEofAsEpsilon)
                {
                    if (ParserATNSimulator.debug) {
                        console.log("closure(" + config.toString(this._parser, true) + ")");
                    }
                    if (config.state instanceof RuleStopState_1.RuleStopState) {
                        // We hit rule end. If we have context info, use it
                        if (!config.context.isEmpty) {
                            let hasEmpty = config.context.hasEmpty;
                            let nonEmptySize = config.context.size - (hasEmpty ? 1 : 0);
                            for (let i = 0; i < nonEmptySize; i++) {
                                let newContext = config.context.getParent(i); // "pop" return state
                                let returnState = this.atn.states[config.context.getReturnState(i)];
                                let c = ATNConfig_1.ATNConfig.create(returnState, config.alt, newContext, config.semanticContext);
                                // While we have context to pop back from, we may have
                                // gotten that context AFTER having fallen off a rule.
                                // Make sure we track that we are now out of context.
                                c.outerContextDepth = config.outerContextDepth;
                                c.isPrecedenceFilterSuppressed = config.isPrecedenceFilterSuppressed;
                                assert(depth > MIN_INTEGER_VALUE);
                                this.closureImpl(c, configs, intermediate, closureBusy, collectPredicates, hasMoreContexts, contextCache, depth - 1, treatEofAsEpsilon);
                            }
                            if (!hasEmpty || !hasMoreContexts) {
                                return;
                            }
                            config = config.transform(config.state, false, PredictionContext_1.PredictionContext.EMPTY_LOCAL);
                        }
                        else if (!hasMoreContexts) {
                            configs.add(config, contextCache);
                            return;
                        }
                        else {
                            // else if we have no context info, just chase follow links (if greedy)
                            if (ParserATNSimulator.debug) {
                                console.log("FALLING off rule " +
                                this.getRuleName(config.state.ruleIndex));
                            }
                            if (config.context === PredictionContext_1.PredictionContext.EMPTY_FULL) {
                                // no need to keep full context overhead when we step out
                                config = config.transform(config.state, false, PredictionContext_1.PredictionContext.EMPTY_LOCAL);
                            }
                            else if (!config.reachesIntoOuterContext && PredictionContext_1.PredictionContext.isEmptyLocal(config.context)) {
                                // add stop state when leaving decision rule for the first time
                                configs.add(config, contextCache);
                            }
                        }
                    }
                    let p = config.state;
                    // optimization
                    if (!p.onlyHasEpsilonTransitions) {
                        configs.add(config, contextCache);
                        // make sure to not return here, because EOF transitions can act as
                        // both epsilon transitions and non-epsilon transitions.
                        if (ParserATNSimulator.debug) {
                            console.log("added config " + configs);
                        }
                    }
                    for (let i = 0; i < p.numberOfOptimizedTransitions; i++) {
                        // This block implements first-edge elimination of ambiguous LR
                        // alternatives as part of dynamic disambiguation during prediction.
                        // See antlr/antlr4#1398.
                        if (i === 0
                        && p.stateType === ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY
                        && p.precedenceRuleDecision
                        && !config.context.hasEmpty) {
                            let precedenceDecision = p;
                            // When suppress is true, it means the outgoing edge i==0 is
                            // ambiguous with the outgoing edge i==1, and thus the closure
                            // operation can dynamically disambiguate by suppressing this
                            // edge during the closure operation.
                            let suppress = true;
                            for (let j = 0; j < config.context.size; j++) {
                                if (!precedenceDecision.precedenceLoopbackStates.get(config.context.getReturnState(j))) {
                                    suppress = false;
                                    break;
                                }
                            }
                            if (suppress) {
                                continue;
                            }
                        }
                        let t = p.getOptimizedTransition(i);
                        let continueCollecting = !(t instanceof ActionTransition_1.ActionTransition) && collectPredicates;
                        let c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, contextCache, treatEofAsEpsilon);
                        if (c != null) {
                            if (t instanceof RuleTransition_1.RuleTransition) {
                                if (intermediate != null && !collectPredicates) {
                                    intermediate.add(c, contextCache);
                                    continue;
                                }
                            }
                            let newDepth = depth;
                            if (config.state instanceof RuleStopState_1.RuleStopState) {
                                // target fell off end of rule; mark resulting c as having dipped into outer context
                                // We can't get here if incoming config was rule stop and we had context
                                // track how far we dip into outer context.  Might
                                // come in handy and we avoid evaluating context dependent
                                // preds if this is > 0.
                                if (this.dfa != null && this.dfa.isPrecedenceDfa) {
                                    let outermostPrecedenceReturn = t.outermostPrecedenceReturn;
                                    if (outermostPrecedenceReturn === this.dfa.atnStartState.ruleIndex) {
                                        c.isPrecedenceFilterSuppressed = true;
                                    }
                                }
                                c.outerContextDepth = c.outerContextDepth + 1;
                                if (!closureBusy.add(c)) {
                                    // avoid infinite recursion for right-recursive rules
                                    continue;
                                }
                                assert(newDepth > MIN_INTEGER_VALUE);
                                newDepth--;
                                if (ParserATNSimulator.debug) {
                                    console.log("dips into outer ctx: " + c);
                                }
                            }
                            else if (t instanceof RuleTransition_1.RuleTransition) {
                                if (this.optimize_tail_calls && t.optimizedTailCall && (!this.tail_call_preserves_sll || !PredictionContext_1.PredictionContext.isEmptyLocal(config.context))) {
                                    assert(c.context === config.context);
                                    if (newDepth === 0) {
                                        // the pop/push of a tail call would keep the depth
                                        // constant, except we latch if it goes negative
                                        newDepth--;
                                        if (!this.tail_call_preserves_sll && PredictionContext_1.PredictionContext.isEmptyLocal(config.context)) {
                                            // make sure the SLL config "dips into the outer context" or prediction may not fall back to LL on conflict
                                            c.outerContextDepth = c.outerContextDepth + 1;
                                        }
                                    }
                                }
                                else {
                                    // latch when newDepth goes negative - once we step out of the entry context we can't return
                                    if (newDepth >= 0) {
                                        newDepth++;
                                    }
                                }
                            }
                            else {
                                if (!t.isEpsilon && !closureBusy.add(c)) {
                                    // avoid infinite recursion for EOF* and EOF+
                                    continue;
                                }
                            }
                            this.closureImpl(c, configs, intermediate, closureBusy, continueCollecting, hasMoreContexts, contextCache, newDepth, treatEofAsEpsilon);
                        }
                    }
                }
                getRuleName(index)
                {
                    if (this._parser != null && index >= 0) {
                        return this._parser.ruleNames[index];
                    }
                    return "<rule " + index + ">";
                }
                getEpsilonTarget(config, t, collectPredicates, inContext, contextCache, treatEofAsEpsilon)
                {
                    switch (t.serializationType) {
                    case 3 /* RULE */
                    :
                        return this.ruleTransition(config, t, contextCache);
                    case 10 /* PRECEDENCE */
                    :
                        return this.precedenceTransition(config, t, collectPredicates, inContext);
                    case 4 /* PREDICATE */
                    :
                        return this.predTransition(config, t, collectPredicates, inContext);
                    case 6 /* ACTION */
                    :
                        return this.actionTransition(config, t);
                    case 1 /* EPSILON */
                    :
                        return config.transform(t.target, false);
                    case 5 /* ATOM */
                    :
                    case 2 /* RANGE */
                    :
                    case 7 /* SET */
                    :
                        // EOF transitions act like epsilon transitions after the first EOF
                        // transition is traversed
                        if (treatEofAsEpsilon) {
                            if (t.matches(Token_1.Token.EOF, 0, 1)) {
                                return config.transform(t.target, false);
                            }
                        }
                        return undefined;
                    default:
                        return undefined;
                    }
                }
                actionTransition(config, t)
                {
                    if (ParserATNSimulator.debug) {
                        console.log("ACTION edge " + t.ruleIndex + ":" + t.actionIndex);
                    }
                    return config.transform(t.target, false);
                }
                precedenceTransition(config, pt, collectPredicates, inContext)
                {
                    if (ParserATNSimulator.debug) {
                        console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                        pt.precedence + ">=_p" +
                        ", ctx dependent=true");
                        if (this._parser != null) {
                            console.log("context surrounding pred is " +
                            this._parser.getRuleInvocationStack());
                        }
                    }
                    let c;
                    if (collectPredicates && inContext) {
                        let newSemCtx = SemanticContext_1.SemanticContext.and(config.semanticContext, pt.predicate);
                        c = config.transform(pt.target, false, newSemCtx);
                    }
                    else {
                        c = config.transform(pt.target, false);
                    }
                    if (ParserATNSimulator.debug) {
                        console.log("config from pred transition=" + c);
                    }
                    return c;
                }
                predTransition(config, pt, collectPredicates, inContext)
                {
                    if (ParserATNSimulator.debug) {
                        console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                        pt.ruleIndex + ":" + pt.predIndex +
                        ", ctx dependent=" + pt.isCtxDependent);
                        if (this._parser != null) {
                            console.log("context surrounding pred is " +
                            this._parser.getRuleInvocationStack());
                        }
                    }
                    let c;
                    if (collectPredicates &&
                    (!pt.isCtxDependent || (pt.isCtxDependent && inContext))) {
                        let newSemCtx = SemanticContext_1.SemanticContext.and(config.semanticContext, pt.predicate);
                        c = config.transform(pt.target, false, newSemCtx);
                    }
                    else {
                        c = config.transform(pt.target, false);
                    }
                    if (ParserATNSimulator.debug) {
                        console.log("config from pred transition=" + c);
                    }
                    return c;
                }
                ruleTransition(config, t, contextCache)
                {
                    if (ParserATNSimulator.debug) {
                        console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) +
                        ", ctx=" + config.context);
                    }
                    let returnState = t.followState;
                    let newContext;
                    if (this.optimize_tail_calls && t.optimizedTailCall && (!this.tail_call_preserves_sll || !PredictionContext_1.PredictionContext.isEmptyLocal(config.context))) {
                        newContext = config.context;
                    }
                    else if (contextCache != null) {
                        newContext = contextCache.getChild(config.context, returnState.stateNumber);
                    }
                    else {
                        newContext = config.context.getChild(returnState.stateNumber);
                    }
                    return config.transform(t.target, false, newContext);
                }
                isConflicted(configset, contextCache)
                {
                    if (configset.uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER || configset.size <= 1) {
                        return undefined;
                    }
                    let configs = configset.toArray();
                    configs.sort(ParserATNSimulator.STATE_ALT_SORT_COMPARATOR);
                    let exact = !configset.dipsIntoOuterContext;
                    let alts = new BitSet_1.BitSet();
                    let minAlt = configs[0].alt;
                    alts.set(minAlt);
                    /* Quick checks come first (single pass, no context joining):
                             *  1. Make sure first config in the sorted list predicts the minimum
                             *     represented alternative.
                             *  2. Make sure every represented state has at least one configuration
                             *     which predicts the minimum represented alternative.
                             *  3. (exact only) make sure every represented state has at least one
                             *     configuration which predicts each represented alternative.
                             */
                    // quick check 1 & 2 => if we assume #1 holds and check #2 against the
                    // minAlt from the first state, #2 will fail if the assumption was
                    // incorrect
                    let currentState = configs[0].state.nonStopStateNumber;
                    for (let config of configs) {
                        let stateNumber = config.state.nonStopStateNumber;
                        if (stateNumber !== currentState) {
                            if (config.alt !== minAlt) {
                                return undefined;
                            }
                            currentState = stateNumber;
                        }
                    }
                    let representedAlts;
                    if (exact) {
                        currentState = configs[0].state.nonStopStateNumber;
                        // get the represented alternatives of the first state
                        representedAlts = new BitSet_1.BitSet();
                        let maxAlt = minAlt;
                        for (let config of configs) {
                            if (config.state.nonStopStateNumber !== currentState) {
                                break;
                            }
                            let alt = config.alt;
                            representedAlts.set(alt);
                            maxAlt = alt;
                        }
                        // quick check #3:
                        currentState = configs[0].state.nonStopStateNumber;
                        let currentAlt = minAlt;
                        for (let config of configs) {
                            let stateNumber = config.state.nonStopStateNumber;
                            let alt = config.alt;
                            if (stateNumber !== currentState) {
                                if (currentAlt !== maxAlt) {
                                    exact = false;
                                    break;
                                }
                                currentState = stateNumber;
                                currentAlt = minAlt;
                            }
                            else if (alt !== currentAlt) {
                                if (alt !== representedAlts.nextSetBit(currentAlt + 1)) {
                                    exact = false;
                                    break;
                                }
                                currentAlt = alt;
                            }
                        }
                    }
                    currentState = configs[0].state.nonStopStateNumber;
                    let firstIndexCurrentState = 0;
                    let lastIndexCurrentStateMinAlt = 0;
                    let joinedCheckContext = configs[0].context;
                    for (let i = 1; i < configs.length; i++) {
                        let config = configs[i];
                        if (config.alt !== minAlt) {
                            break;
                        }
                        if (config.state.nonStopStateNumber !== currentState) {
                            break;
                        }
                        lastIndexCurrentStateMinAlt = i;
                        joinedCheckContext = contextCache.join(joinedCheckContext, configs[i].context);
                    }
                    for (let i = lastIndexCurrentStateMinAlt + 1; i < configs.length; i++) {
                        let config = configs[i];
                        let state = config.state;
                        alts.set(config.alt);
                        if (state.nonStopStateNumber !== currentState) {
                            currentState = state.nonStopStateNumber;
                            firstIndexCurrentState = i;
                            lastIndexCurrentStateMinAlt = i;
                            joinedCheckContext = config.context;
                            for (let j = firstIndexCurrentState + 1; j < configs.length; j++) {
                                let config2 = configs[j];
                                if (config2.alt !== minAlt) {
                                    break;
                                }
                                if (config2.state.nonStopStateNumber !== currentState) {
                                    break;
                                }
                                lastIndexCurrentStateMinAlt = j;
                                joinedCheckContext = contextCache.join(joinedCheckContext, config2.context);
                            }
                            i = lastIndexCurrentStateMinAlt;
                            continue;
                        }
                        let joinedCheckContext2 = config.context;
                        let currentAlt = config.alt;
                        let lastIndexCurrentStateCurrentAlt = i;
                        for (let j = lastIndexCurrentStateCurrentAlt + 1; j < configs.length; j++) {
                            let config2 = configs[j];
                            if (config2.alt !== currentAlt) {
                                break;
                            }
                            if (config2.state.nonStopStateNumber !== currentState) {
                                break;
                            }
                            lastIndexCurrentStateCurrentAlt = j;
                            joinedCheckContext2 = contextCache.join(joinedCheckContext2, config2.context);
                        }
                        i = lastIndexCurrentStateCurrentAlt;
                        let check = contextCache.join(joinedCheckContext, joinedCheckContext2);
                        if (!joinedCheckContext.equals(check)) {
                            return undefined;
                        }
                        // update exact if necessary
                        exact = exact && joinedCheckContext.equals(joinedCheckContext2);
                    }
                    return new ConflictInfo_1.ConflictInfo(alts, exact);
                }
                getConflictingAltsFromConfigSet(configs)
                {
                    let conflictingAlts = configs.conflictingAlts;
                    if (conflictingAlts == null && configs.uniqueAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                        conflictingAlts = new BitSet_1.BitSet();
                        conflictingAlts.set(configs.uniqueAlt);
                    }
                    return conflictingAlts;
                }
                getTokenName(t)
                {
                    if (t === Token_1.Token.EOF) {
                        return "EOF";
                    }
                    let vocabulary = this._parser != null ? this._parser.vocabulary : VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY;
                    let displayName = vocabulary.getDisplayName(t);
                    if (displayName === String(t)) {
                        return displayName;
                    }
                    return displayName + "<" + t + ">";
                }
                getLookaheadName(input)
                {
                    return this.getTokenName(input.LA(1));
                }
                dumpDeadEndConfigs(nvae)
                {
                    console.log("dead end configs: ");
                    let deadEndConfigs = nvae.deadEndConfigs;
                    if (!deadEndConfigs) {
                        return;
                    }
                    for (let c of deadEndConfigs) {
                        let trans = "no edges";
                        if (c.state.numberOfOptimizedTransitions > 0) {
                            let t = c.state.getOptimizedTransition(0);
                            if (t instanceof AtomTransition_1.AtomTransition) {
                                trans = "Atom " + this.getTokenName(t._label);
                            }
                            else if (t instanceof SetTransition_1.SetTransition) {
                                let not = t instanceof NotSetTransition_1.NotSetTransition;
                                trans = (not ? "~" : "") + "Set " + t.set.toString();
                            }
                        }
                        console.log(c.toString(this._parser, true) + ":" + trans);
                    }
                }
                noViableAlt(input, outerContext, configs, startIndex)
                {
                    return new NoViableAltException_1.NoViableAltException(this._parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
                }
                getUniqueAlt(configs)
                {
                    let alt = ATN_1.ATN.INVALID_ALT_NUMBER;
                    for (let c of configs) {
                        if (alt === ATN_1.ATN.INVALID_ALT_NUMBER) {
                            alt = c.alt; // found first alt
                        }
                        else if (c.alt !== alt) {
                            return ATN_1.ATN.INVALID_ALT_NUMBER;
                        }
                    }
                    return alt;
                }
                configWithAltAtStopState(configs, alt)
                {
                    for (let c of configs) {
                        if (c.alt === alt) {
                            if (c.state instanceof RuleStopState_1.RuleStopState) {
                                return true;
                            }
                        }
                    }
                    return false;
                }
                addDFAEdge(dfa, fromState, t, contextTransitions, toConfigs, contextCache)
                {
                    assert(contextTransitions == null || contextTransitions.isEmpty || dfa.isContextSensitive);
                    let from = fromState;
                    let to = this.addDFAState(dfa, toConfigs, contextCache);
                    if (contextTransitions != null) {
                        for (let context of contextTransitions.toArray()) {
                            if (context === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                                if (from.configs.isOutermostConfigSet) {
                                    continue;
                                }
                            }
                            from.setContextSensitive(this.atn);
                            from.setContextSymbol(t);
                            let next = from.getContextTarget(context);
                            if (next != null) {
                                from = next;
                                continue;
                            }
                            next = this.addDFAContextState(dfa, from.configs, context, contextCache);
                            assert(context !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY || next.configs.isOutermostConfigSet);
                            from.setContextTarget(context, next);
                            from = next;
                        }
                    }
                    if (ParserATNSimulator.debug) {
                        console.log("EDGE " + from + " -> " + to + " upon " + this.getTokenName(t));
                    }
                    this.setDFAEdge(from, t, to);
                    if (ParserATNSimulator.debug) {
                        console.log("DFA=\n" + dfa.toString(this._parser != null ? this._parser.vocabulary : VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY, this._parser != null ? this._parser.ruleNames : undefined));
                    }
                    return to;
                }
                setDFAEdge(p, t, q)
                {
                    if (p != null) {
                        p.setTarget(t, q);
                    }
                }
                /** See comment on LexerInterpreter.addDFAState. */
                addDFAContextState(dfa, configs, returnContext, contextCache)
                {
                    if (returnContext !== PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                        let contextConfigs = new ATNConfigSet_1.ATNConfigSet();
                        for (let config of configs) {
                            contextConfigs.add(config.appendContext(returnContext, contextCache));
                        }
                        return this.addDFAState(dfa, contextConfigs, contextCache);
                    }
                    else {
                        assert(!configs.isOutermostConfigSet, "Shouldn't be adding a duplicate edge.");
                        configs = configs.clone(true);
                        configs.isOutermostConfigSet = true;
                        return this.addDFAState(dfa, configs, contextCache);
                    }
                }
                /** See comment on LexerInterpreter.addDFAState. */
                addDFAState(dfa, configs, contextCache)
                {
                    let enableDfa = this.enable_global_context_dfa || !configs.isOutermostConfigSet;
                    if (enableDfa) {
                        if (!configs.isReadOnly) {
                            configs.optimizeConfigs(this);
                        }
                        let proposed = this.createDFAState(dfa, configs);
                        let existing = dfa.states.get(proposed);
                        if (existing != null) {
                            return existing;
                        }
                    }
                    if (!configs.isReadOnly) {
                        if (configs.conflictInfo == null) {
                            configs.conflictInfo = this.isConflicted(configs, contextCache);
                        }
                    }
                    let newState = this.createDFAState(dfa, configs.clone(true));
                    // getDecisionState won't return undefined when we request a known valid decision
                    let decisionState = this.atn.getDecisionState(dfa.decision);
                    let predictedAlt = this.getUniqueAlt(configs);
                    if (predictedAlt !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                        newState.acceptStateInfo = new AcceptStateInfo_1.AcceptStateInfo(predictedAlt);
                    }
                    else if (configs.conflictingAlts != null) {
                        let conflictingAlts = configs.conflictingAlts;
                        if (conflictingAlts) {
                            newState.acceptStateInfo = new AcceptStateInfo_1.AcceptStateInfo(conflictingAlts.nextSetBit(0));
                        }
                    }
                    if (newState.isAcceptState && configs.hasSemanticContext) {
                        this.predicateDFAState(newState, configs, decisionState.numberOfTransitions);
                    }
                    if (!enableDfa) {
                        return newState;
                    }
                    let added = dfa.addState(newState);
                    if (ParserATNSimulator.debug && added === newState) {
                        console.log("adding new DFA state: " + newState);
                    }
                    return added;
                }
                createDFAState(dfa, configs)
                {
                    return new DFAState_1.DFAState(configs);
                }
                reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex)
                {
                    if (ParserATNSimulator.debug || ParserATNSimulator.retry_debug) {
                        let interval = Interval_1.Interval.of(startIndex, stopIndex);
                        console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + conflictState.s0.configs +
                        ", input=" + this._parser.inputStream.getText(interval));
                    }
                    if (this._parser != null) {
                        let listener = this._parser.getErrorListenerDispatch();
                        if (listener.reportAttemptingFullContext) {
                            listener.reportAttemptingFullContext(this._parser, dfa, startIndex, stopIndex, conflictingAlts, conflictState);
                        }
                    }
                }
                reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex)
                {
                    if (ParserATNSimulator.debug || ParserATNSimulator.retry_debug) {
                        let interval = Interval_1.Interval.of(startIndex, stopIndex);
                        console.log("reportContextSensitivity decision=" + dfa.decision + ":" + acceptState.s0.configs +
                        ", input=" + this._parser.inputStream.getText(interval));
                    }
                    if (this._parser != null) {
                        let listener = this._parser.getErrorListenerDispatch();
                        if (listener.reportContextSensitivity) {
                            listener.reportContextSensitivity(this._parser, dfa, startIndex, stopIndex, prediction, acceptState);
                        }
                    }
                }
                /** If context sensitive parsing, we know it's ambiguity not conflict */
                reportAmbiguity(dfa, D, // the DFA state from execATN(): void that had SLL conflicts
                startIndex, stopIndex, exact, ambigAlts, configs)
                {
                    if (ParserATNSimulator.debug || ParserATNSimulator.retry_debug) {
                        let interval = Interval_1.Interval.of(startIndex, stopIndex);
                        console.log("reportAmbiguity " +
                        ambigAlts + ":" + configs +
                        ", input=" + this._parser.inputStream.getText(interval));
                    }
                    if (this._parser != null) {
                        let listener = this._parser.getErrorListenerDispatch();
                        if (listener.reportAmbiguity) {
                            listener.reportAmbiguity(this._parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
                        }
                    }
                }
                getReturnState(context)
                {
                    if (context.isEmpty) {
                        return PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;
                    }
                    let state = this.atn.states[context.invokingState];
                    let transition = state.transition(0);
                    return transition.followState.stateNumber;
                }
                skipTailCalls(context)
                {
                    if (!this.optimize_tail_calls) {
                        return context;
                    }
                    while (!context.isEmpty) {
                        let state = this.atn.states[context.invokingState];
                        assert(state.numberOfTransitions === 1 && state.transition(0).serializationType === 3 /* RULE */
                        );
                        let transition = state.transition(0);
                        if (!transition.tailCall) {
                            break;
                        }
                        // This method requires that the root ancestor of the ParserRuleContext be empty. If we make it to this
                        // line, we know the current node is not empty, which means it does have a parent.
                        context = context.parent;
                    }
                    return context;
                }
                /**
                     * @since 4.3
                     */
                get parser()
                {
                    return this._parser;
                }
            }
            ;
            ParserATNSimulator.debug = false;
            ParserATNSimulator.dfa_debug = false;
            ParserATNSimulator.retry_debug = false;
            ParserATNSimulator.STATE_ALT_SORT_COMPARATOR = (o1, o2) => {
                let diff = o1.state.nonStopStateNumber - o2.state.nonStopStateNumber;
                if (diff !== 0) {
                    return diff;
                }
                diff = o1.alt - o2.alt;
                if (diff !== 0) {
                    return diff;
                }
                return 0;
            };
            __decorate([
            Decorators_1.NotNull
            ], ParserATNSimulator.prototype, "predictionMode", void 0);
            __decorate([
            Decorators_1.NotNull
            ], ParserATNSimulator.prototype, "getPredictionMode", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "setPredictionMode", null);
            __decorate([
            Decorators_1.Override
            ], ParserATNSimulator.prototype, "reset", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "adaptivePredict", null);
            __decorate([
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull),
            __param(2, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "getStartState", null);
            __decorate([
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull),
            __param(3, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "execDFA", null);
            __decorate([
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull),
            __param(3, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "execATN", null);
            __decorate([
            __param(0, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "handleNoViableAlt", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "getExistingTargetState", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "computeTargetState", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "removeAllConfigsNotInRuleStopState", null);
            __decorate([
            Decorators_1.NotNull
            ], ParserATNSimulator.prototype, "computeStartState", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "applyPrecedenceFilter", null);
            __decorate([
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "getReachableTarget", null);
            __decorate([
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "getPredsForAmbigAlts", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "evalSemanticContext", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "evalSemanticContextImpl", null);
            __decorate([
            __param(1, Decorators_1.NotNull),
            __param(4, Decorators_1.Nullable)
            ], ParserATNSimulator.prototype, "closure", null);
            __decorate([
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull),
            __param(2, Decorators_1.Nullable),
            __param(3, Decorators_1.NotNull),
            __param(6, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "closureImpl", null);
            __decorate([
            Decorators_1.NotNull
            ], ParserATNSimulator.prototype, "getRuleName", null);
            __decorate([
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "getEpsilonTarget", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "actionTransition", null);
            __decorate([
            Decorators_1.Nullable,
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "precedenceTransition", null);
            __decorate([
            Decorators_1.Nullable,
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "predTransition", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull), __param(2, Decorators_1.Nullable)
            ], ParserATNSimulator.prototype, "ruleTransition", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "isConflicted", null);
            __decorate([
            Decorators_1.NotNull
            ], ParserATNSimulator.prototype, "getTokenName", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "dumpDeadEndConfigs", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull),
            __param(2, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "noViableAlt", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "getUniqueAlt", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "configWithAltAtStopState", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull),
            __param(4, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "addDFAEdge", null);
            __decorate([
            __param(0, Decorators_1.Nullable), __param(2, Decorators_1.Nullable)
            ], ParserATNSimulator.prototype, "setDFAEdge", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "addDFAContextState", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "addDFAState", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "createDFAState", null);
            __decorate([
            __param(0, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "reportAttemptingFullContext", null);
            __decorate([
            __param(0, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "reportContextSensitivity", null);
            __decorate([
            __param(0, Decorators_1.NotNull),
            __param(5, Decorators_1.NotNull),
            __param(6, Decorators_1.NotNull)
            ], ParserATNSimulator.prototype, "reportAmbiguity", null);
            ParserATNSimulator = __decorate([
            __param(0, Decorators_1.NotNull)
            ], ParserATNSimulator);
            exports.ParserATNSimulator = ParserATNSimulator;

        }, {
            "../Decorators": 224,
            "../IntStream": 230,
            "../NoViableAltException": 236,
            "../ParserRuleContext": 239,
            "../Token": 248,
            "../VocabularyImpl": 250,
            "../dfa/AcceptStateInfo": 315,
            "../dfa/DFAState": 318,
            "../misc/Array2DHashSet": 322,
            "../misc/Arrays": 324,
            "../misc/BitSet": 325,
            "../misc/IntegerList": 328,
            "../misc/Interval": 330,
            "../misc/ObjectEqualityComparator": 334,
            "./ATN": 251,
            "./ATNConfig": 252,
            "./ATNConfigSet": 253,
            "./ATNSimulator": 256,
            "./ATNStateType": 258,
            "./ActionTransition": 260,
            "./AtomTransition": 262,
            "./ConflictInfo": 267,
            "./DecisionState": 271,
            "./NotSetTransition": 289,
            "./PredictionContext": 298,
            "./PredictionContextCache": 299,
            "./PredictionMode": 300,
            "./RuleStopState": 304,
            "./RuleTransition": 305,
            "./SemanticContext": 306,
            "./SetTransition": 307,
            "./SimulatorState": 308,
            "assert": 364
        }],
        293: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:34.9572142-07:00
            const ATNStateType_1 = require("./ATNStateType");
            const BlockStartState_1 = require("./BlockStartState");
            const Decorators_1 = require("../Decorators");
            /** Start of `(A|B|...)+` loop. Technically a decision state, but
             *  we don't use for code generation; somebody might need it, so I'm defining
             *  it for completeness. In reality, the {@link PlusLoopbackState} node is the
             *  real decision-making note for `A+`.
             */
            class PlusBlockStartState extends BlockStartState_1.BlockStartState {
                get stateType()
                {
                    return ATNStateType_1.ATNStateType.PLUS_BLOCK_START;
                }
            }
            __decorate([
            Decorators_1.Override
            ], PlusBlockStartState.prototype, "stateType", null);
            exports.PlusBlockStartState = PlusBlockStartState;

        }, {
            "../Decorators": 224,
            "./ATNStateType": 258,
            "./BlockStartState": 266
        }],
        294: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:35.0257730-07:00
            const ATNStateType_1 = require("./ATNStateType");
            const DecisionState_1 = require("./DecisionState");
            const Decorators_1 = require("../Decorators");
            /** Decision state for `A+` and `(A|B)+`.  It has two transitions:
             *  one to the loop back to start of the block and one to exit.
             */
            class PlusLoopbackState extends DecisionState_1.DecisionState {
                get stateType()
                {
                    return ATNStateType_1.ATNStateType.PLUS_LOOP_BACK;
                }
            }
            __decorate([
            Decorators_1.Override
            ], PlusLoopbackState.prototype, "stateType", null);
            exports.PlusLoopbackState = PlusLoopbackState;

        }, {
            "../Decorators": 224,
            "./ATNStateType": 258,
            "./DecisionState": 271
        }],
        295: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:35.0994191-07:00
            const AbstractPredicateTransition_1 = require("./AbstractPredicateTransition");
            const Decorators_1 = require("../Decorators");
            const SemanticContext_1 = require("./SemanticContext");
            /**
             *
             * @author Sam Harwell
             */
            let PrecedencePredicateTransition = class PrecedencePredicateTransition extends AbstractPredicateTransition_1.AbstractPredicateTransition {
                constructor(target, precedence)
                {
                    super(target);
                    this.precedence = precedence;
                }
                get serializationType()
                {
                    return 10 /* PRECEDENCE */
                    ;
                }
                get isEpsilon()
                {
                    return true;
                }
                matches(symbol, minVocabSymbol, maxVocabSymbol)
                {
                    return false;
                }
                get predicate()
                {
                    return new SemanticContext_1.SemanticContext.PrecedencePredicate(this.precedence);
                }
                toString()
                {
                    return this.precedence + " >= _p";
                }
            }
            ;
            __decorate([
            Decorators_1.Override
            ], PrecedencePredicateTransition.prototype, "serializationType", null);
            __decorate([
            Decorators_1.Override
            ], PrecedencePredicateTransition.prototype, "isEpsilon", null);
            __decorate([
            Decorators_1.Override
            ], PrecedencePredicateTransition.prototype, "matches", null);
            __decorate([
            Decorators_1.Override
            ], PrecedencePredicateTransition.prototype, "toString", null);
            PrecedencePredicateTransition = __decorate([
            __param(0, Decorators_1.NotNull)
            ], PrecedencePredicateTransition);
            exports.PrecedencePredicateTransition = PrecedencePredicateTransition;

        }, {
            "../Decorators": 224,
            "./AbstractPredicateTransition": 259,
            "./SemanticContext": 306
        }],
        296: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:35.1914305-07:00
            const DecisionEventInfo_1 = require("./DecisionEventInfo");
            const Decorators_1 = require("../Decorators");
            /**
             * This class represents profiling event information for semantic predicate
             * evaluations which occur during prediction.
             *
             * @see ParserATNSimulator#evalSemanticContext
             *
             * @since 4.3
             */
            let PredicateEvalInfo = class PredicateEvalInfo extends DecisionEventInfo_1.DecisionEventInfo {
                /**
                     * Constructs a new instance of the {@link PredicateEvalInfo} class with the
                     * specified detailed predicate evaluation information.
                     *
                     * @param state The simulator state
                     * @param decision The decision number
                     * @param input The input token stream
                     * @param startIndex The start index for the current prediction
                     * @param stopIndex The index at which the predicate evaluation was
                     * triggered. Note that the input stream may be reset to other positions for
                     * the actual evaluation of individual predicates.
                     * @param semctx The semantic context which was evaluated
                     * @param evalResult The results of evaluating the semantic context
                     * @param predictedAlt The alternative number for the decision which is
                     * guarded by the semantic context `semctx`. See {@link #predictedAlt}
                     * for more information.
                     *
                     * @see ParserATNSimulator#evalSemanticContext(SemanticContext, ParserRuleContext, int)
                     * @see SemanticContext#eval(Recognizer, RuleContext)
                     */
                constructor(state, decision, input, startIndex, stopIndex, semctx, evalResult, predictedAlt)
                {
                    super(decision, state, input, startIndex, stopIndex, state.useContext);
                    this.semctx = semctx;
                    this.evalResult = evalResult;
                    this.predictedAlt = predictedAlt;
                }
            }
            ;
            PredicateEvalInfo = __decorate([
            __param(0, Decorators_1.NotNull),
            __param(2, Decorators_1.NotNull),
            __param(5, Decorators_1.NotNull)
            ], PredicateEvalInfo);
            exports.PredicateEvalInfo = PredicateEvalInfo;

        }, {
            "../Decorators": 224,
            "./DecisionEventInfo": 269
        }],
        297: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:35.2826960-07:00
            const AbstractPredicateTransition_1 = require("./AbstractPredicateTransition");
            const Decorators_1 = require("../Decorators");
            const SemanticContext_1 = require("./SemanticContext");
            /** TODO: this is old comment:
             *  A tree of semantic predicates from the grammar AST if label==SEMPRED.
             *  In the ATN, labels will always be exactly one predicate, but the DFA
             *  may have to combine a bunch of them as it collects predicates from
             *  multiple ATN configurations into a single DFA state.
             */
            let PredicateTransition = class PredicateTransition extends AbstractPredicateTransition_1.AbstractPredicateTransition {
                constructor(target, ruleIndex, predIndex, isCtxDependent)
                {
                    super(target);
                    this.ruleIndex = ruleIndex;
                    this.predIndex = predIndex;
                    this.isCtxDependent = isCtxDependent;
                }
                get serializationType()
                {
                    return 4 /* PREDICATE */
                    ;
                }
                get isEpsilon()
                {
                    return true;
                }
                matches(symbol, minVocabSymbol, maxVocabSymbol)
                {
                    return false;
                }
                get predicate()
                {
                    return new SemanticContext_1.SemanticContext.Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
                }
                toString()
                {
                    return "pred_" + this.ruleIndex + ":" + this.predIndex;
                }
            }
            ;
            __decorate([
            Decorators_1.Override
            ], PredicateTransition.prototype, "serializationType", null);
            __decorate([
            Decorators_1.Override
            ], PredicateTransition.prototype, "isEpsilon", null);
            __decorate([
            Decorators_1.Override
            ], PredicateTransition.prototype, "matches", null);
            __decorate([
            Decorators_1.Override,
            Decorators_1.NotNull
            ], PredicateTransition.prototype, "toString", null);
            PredicateTransition = __decorate([
            __param(0, Decorators_1.NotNull)
            ], PredicateTransition);
            exports.PredicateTransition = PredicateTransition;

        }, {
            "../Decorators": 224,
            "./AbstractPredicateTransition": 259,
            "./SemanticContext": 306
        }],
        298: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:35.3812636-07:00
            const Array2DHashMap_1 = require("../misc/Array2DHashMap");
            const Array2DHashSet_1 = require("../misc/Array2DHashSet");
            const Arrays_1 = require("../misc/Arrays");
            const MurmurHash_1 = require("../misc/MurmurHash");
            const Decorators_1 = require("../Decorators");
            const PredictionContextCache_1 = require("./PredictionContextCache");
            const assert = require("assert");
            const INITIAL_HASH = 1;
            class PredictionContext {
                constructor(cachedHashCode)
                {
                    this.cachedHashCode = cachedHashCode;
                }
                static calculateEmptyHashCode()
                {
                    let hash = MurmurHash_1.MurmurHash.initialize(INITIAL_HASH);
                    hash = MurmurHash_1.MurmurHash.finish(hash, 0);
                    return hash;
                }
                static calculateSingleHashCode(parent, returnState)
                {
                    let hash = MurmurHash_1.MurmurHash.initialize(INITIAL_HASH);
                    hash = MurmurHash_1.MurmurHash.update(hash, parent);
                    hash = MurmurHash_1.MurmurHash.update(hash, returnState);
                    hash = MurmurHash_1.MurmurHash.finish(hash, 2);
                    return hash;
                }
                static calculateHashCode(parents, returnStates)
                {
                    let hash = MurmurHash_1.MurmurHash.initialize(INITIAL_HASH);
                    for (let parent of parents) {
                        hash = MurmurHash_1.MurmurHash.update(hash, parent);
                    }
                    for (let returnState of returnStates) {
                        hash = MurmurHash_1.MurmurHash.update(hash, returnState);
                    }
                    hash = MurmurHash_1.MurmurHash.finish(hash, 2 * parents.length);
                    return hash;
                }
                static fromRuleContext(atn, outerContext, fullContext=true)
                {
                    if (outerContext.isEmpty) {
                        return fullContext ? PredictionContext.EMPTY_FULL : PredictionContext.EMPTY_LOCAL;
                    }
                    let parent;
                    if (outerContext._parent) {
                        parent = PredictionContext.fromRuleContext(atn, outerContext._parent, fullContext);
                    }
                    else {
                        parent = fullContext ? PredictionContext.EMPTY_FULL : PredictionContext.EMPTY_LOCAL;
                    }
                    let state = atn.states[outerContext.invokingState];
                    let transition = state.transition(0);
                    return parent.getChild(transition.followState.stateNumber);
                }
                static addEmptyContext(context)
                {
                    return context.addEmptyContext();
                }
                static removeEmptyContext(context)
                {
                    return context.removeEmptyContext();
                }
                static join(context0, context1, contextCache=PredictionContextCache_1.PredictionContextCache.UNCACHED)
                {
                    if (context0 === context1) {
                        return context0;
                    }
                    if (context0.isEmpty) {
                        return PredictionContext.isEmptyLocal(context0) ? context0 : PredictionContext.addEmptyContext(context1);
                    }
                    else if (context1.isEmpty) {
                        return PredictionContext.isEmptyLocal(context1) ? context1 : PredictionContext.addEmptyContext(context0);
                    }
                    let context0size = context0.size;
                    let context1size = context1.size;
                    if (context0size === 1 && context1size === 1 && context0.getReturnState(0) === context1.getReturnState(0)) {
                        let merged = contextCache.join(context0.getParent(0), context1.getParent(0));
                        if (merged === context0.getParent(0)) {
                            return context0;
                        }
                        else if (merged === context1.getParent(0)) {
                            return context1;
                        }
                        else {
                            return merged.getChild(context0.getReturnState(0));
                        }
                    }
                    let count = 0;
                    let parentsList = new Array(context0size + context1size);
                    let returnStatesList = new Array(parentsList.length);
                    let leftIndex = 0;
                    let rightIndex = 0;
                    let canReturnLeft = true;
                    let canReturnRight = true;
                    while (leftIndex < context0size && rightIndex < context1size) {
                        if (context0.getReturnState(leftIndex) === context1.getReturnState(rightIndex)) {
                            parentsList[count] = contextCache.join(context0.getParent(leftIndex), context1.getParent(rightIndex));
                            returnStatesList[count] = context0.getReturnState(leftIndex);
                            canReturnLeft = canReturnLeft && parentsList[count] === context0.getParent(leftIndex);
                            canReturnRight = canReturnRight && parentsList[count] === context1.getParent(rightIndex);
                            leftIndex++;
                            rightIndex++;
                        }
                        else if (context0.getReturnState(leftIndex) < context1.getReturnState(rightIndex)) {
                            parentsList[count] = context0.getParent(leftIndex);
                            returnStatesList[count] = context0.getReturnState(leftIndex);
                            canReturnRight = false;
                            leftIndex++;
                        }
                        else {
                            assert(context1.getReturnState(rightIndex) < context0.getReturnState(leftIndex));
                            parentsList[count] = context1.getParent(rightIndex);
                            returnStatesList[count] = context1.getReturnState(rightIndex);
                            canReturnLeft = false;
                            rightIndex++;
                        }
                        count++;
                    }
                    while (leftIndex < context0size) {
                        parentsList[count] = context0.getParent(leftIndex);
                        returnStatesList[count] = context0.getReturnState(leftIndex);
                        leftIndex++;
                        canReturnRight = false;
                        count++;
                    }
                    while (rightIndex < context1size) {
                        parentsList[count] = context1.getParent(rightIndex);
                        returnStatesList[count] = context1.getReturnState(rightIndex);
                        rightIndex++;
                        canReturnLeft = false;
                        count++;
                    }
                    if (canReturnLeft) {
                        return context0;
                    }
                    else if (canReturnRight) {
                        return context1;
                    }
                    if (count < parentsList.length) {
                        parentsList = parentsList.slice(0, count);
                        returnStatesList = returnStatesList.slice(0, count);
                    }
                    if (parentsList.length === 0) {
                        // if one of them was EMPTY_LOCAL, it would be empty and handled at the beginning of the method
                        return PredictionContext.EMPTY_FULL;
                    }
                    else if (parentsList.length === 1) {
                        return new SingletonPredictionContext(parentsList[0], returnStatesList[0]);
                    }
                    else {
                        return new ArrayPredictionContext(parentsList, returnStatesList);
                    }
                }
                static isEmptyLocal(context)
                {
                    return context === PredictionContext.EMPTY_LOCAL;
                }
                static getCachedContext(context, contextCache, visited)
                {
                    if (context.isEmpty) {
                        return context;
                    }
                    let existing = visited.get(context);
                    if (existing) {
                        return existing;
                    }
                    existing = contextCache.get(context);
                    if (existing) {
                        visited.put(context, existing);
                        return existing;
                    }
                    let changed = false;
                    let parents = new Array(context.size);
                    for (let i = 0; i < parents.length; i++) {
                        let parent = PredictionContext.getCachedContext(context.getParent(i), contextCache, visited);
                        if (changed || parent !== context.getParent(i)) {
                            if (!changed) {
                                parents = new Array(context.size);
                                for (let j = 0; j < context.size; j++) {
                                    parents[j] = context.getParent(j);
                                }
                                changed = true;
                            }
                            parents[i] = parent;
                        }
                    }
                    if (!changed) {
                        existing = contextCache.putIfAbsent(context, context);
                        visited.put(context, existing != null ? existing : context);
                        return context;
                    }
                    // We know parents.length>0 because context.isEmpty is checked at the beginning of the method.
                    let updated;
                    if (parents.length === 1) {
                        updated = new SingletonPredictionContext(parents[0], context.getReturnState(0));
                    }
                    else {
                        let returnStates = new Array(context.size);
                        for (let i = 0; i < context.size; i++) {
                            returnStates[i] = context.getReturnState(i);
                        }
                        updated = new ArrayPredictionContext(parents, returnStates, context.hashCode());
                    }
                    existing = contextCache.putIfAbsent(updated, updated);
                    visited.put(updated, existing || updated);
                    visited.put(context, existing || updated);
                    return updated;
                }
                appendSingleContext(returnContext, contextCache)
                {
                    return this.appendContext(PredictionContext.EMPTY_FULL.getChild(returnContext), contextCache);
                }
                getChild(returnState)
                {
                    return new SingletonPredictionContext(this, returnState);
                }
                hashCode()
                {
                    return this.cachedHashCode;
                }
                toStrings(recognizer, currentState, stop=PredictionContext.EMPTY_FULL)
                {
                    let result = [];
                    outer:
                    for (let perm = 0; ; perm++) {
                        let offset = 0;
                        let last = true;
                        let p = this;
                        let stateNumber = currentState;
                        let localBuffer = "";
                        localBuffer += "[";
                        while (!p.isEmpty && p !== stop) {
                            let index = 0;
                            if (p.size > 0) {
                                let bits = 1;
                                while (((1 << bits) >>> 0) < p.size) {
                                    bits++;
                                }
                                let mask = ((1 << bits) >>> 0) - 1;
                                index = (perm >> offset) & mask;
                                last = last && index >= p.size - 1;
                                if (index >= p.size) {
                                    continue outer;
                                }
                                offset += bits;
                            }
                            if (recognizer) {
                                if (localBuffer.length > 1) {
                                    // first char is '[', if more than that this isn't the first rule
                                    localBuffer += " ";
                                }
                                let atn = recognizer.atn;
                                let s = atn.states[stateNumber];
                                let ruleName = recognizer.ruleNames[s.ruleIndex];
                                localBuffer += ruleName;
                            }
                            else if (p.getReturnState(index) !== PredictionContext.EMPTY_FULL_STATE_KEY) {
                                if (!p.isEmpty) {
                                    if (localBuffer.length > 1) {
                                        // first char is '[', if more than that this isn't the first rule
                                        localBuffer += " ";
                                    }
                                    localBuffer += p.getReturnState(index);
                                }
                            }
                            stateNumber = p.getReturnState(index);
                            p = p.getParent(index);
                        }
                        localBuffer += "]";
                        result.push(localBuffer);
                        if (last) {
                            break;
                        }
                    }
                    return result;
                }
            }
            __decorate([
            Decorators_1.Override
            ], PredictionContext.prototype, "hashCode", null);
            __decorate([
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull), __param(2, Decorators_1.NotNull)
            ], PredictionContext, "join", null);
            __decorate([
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull),
            __param(2, Decorators_1.NotNull)
            ], PredictionContext, "getCachedContext", null);
            exports.PredictionContext = PredictionContext;
            class EmptyPredictionContext extends PredictionContext {
                constructor(fullContext)
                {
                    super(PredictionContext.calculateEmptyHashCode());
                    this.fullContext = fullContext;
                }
                get isFullContext()
                {
                    return this.fullContext;
                }
                addEmptyContext()
                {
                    return this;
                }
                removeEmptyContext()
                {
                    throw new Error("Cannot remove the empty context from itself.");
                }
                getParent(index)
                {
                    throw new Error("index out of bounds");
                }
                getReturnState(index)
                {
                    throw new Error("index out of bounds");
                }
                findReturnState(returnState)
                {
                    return -1;
                }
                get size()
                {
                    return 0;
                }
                appendSingleContext(returnContext, contextCache)
                {
                    return contextCache.getChild(this, returnContext);
                }
                appendContext(suffix, contextCache)
                {
                    return suffix;
                }
                get isEmpty()
                {
                    return true;
                }
                get hasEmpty()
                {
                    return true;
                }
                equals(o)
                {
                    return this === o;
                }
                toStrings(recognizer, currentState, stop)
                {
                    return ["[]"];
                }
            }
            __decorate([
            Decorators_1.Override
            ], EmptyPredictionContext.prototype, "addEmptyContext", null);
            __decorate([
            Decorators_1.Override
            ], EmptyPredictionContext.prototype, "removeEmptyContext", null);
            __decorate([
            Decorators_1.Override
            ], EmptyPredictionContext.prototype, "getParent", null);
            __decorate([
            Decorators_1.Override
            ], EmptyPredictionContext.prototype, "getReturnState", null);
            __decorate([
            Decorators_1.Override
            ], EmptyPredictionContext.prototype, "findReturnState", null);
            __decorate([
            Decorators_1.Override
            ], EmptyPredictionContext.prototype, "size", null);
            __decorate([
            Decorators_1.Override
            ], EmptyPredictionContext.prototype, "appendSingleContext", null);
            __decorate([
            Decorators_1.Override
            ], EmptyPredictionContext.prototype, "appendContext", null);
            __decorate([
            Decorators_1.Override
            ], EmptyPredictionContext.prototype, "isEmpty", null);
            __decorate([
            Decorators_1.Override
            ], EmptyPredictionContext.prototype, "hasEmpty", null);
            __decorate([
            Decorators_1.Override
            ], EmptyPredictionContext.prototype, "equals", null);
            __decorate([
            Decorators_1.Override
            ], EmptyPredictionContext.prototype, "toStrings", null);
            let ArrayPredictionContext = class ArrayPredictionContext extends PredictionContext {
                constructor(parents, returnStates, hashCode)
                {
                    super(hashCode || PredictionContext.calculateHashCode(parents, returnStates));
                    assert(parents.length === returnStates.length);
                    assert(returnStates.length > 1 || returnStates[0] !== PredictionContext.EMPTY_FULL_STATE_KEY, "Should be using PredictionContext.EMPTY instead.");
                    this.parents = parents;
                    this.returnStates = returnStates;
                }
                getParent(index)
                {
                    return this.parents[index];
                }
                getReturnState(index)
                {
                    return this.returnStates[index];
                }
                findReturnState(returnState)
                {
                    return Arrays_1.Arrays.binarySearch(this.returnStates, returnState);
                }
                get size()
                {
                    return this.returnStates.length;
                }
                get isEmpty()
                {
                    return false;
                }
                get hasEmpty()
                {
                    return this.returnStates[this.returnStates.length - 1] === PredictionContext.EMPTY_FULL_STATE_KEY;
                }
                addEmptyContext()
                {
                    if (this.hasEmpty) {
                        return this;
                    }
                    let parents2 = this.parents.slice(0);
                    let returnStates2 = this.returnStates.slice(0);
                    parents2.push(PredictionContext.EMPTY_FULL);
                    returnStates2.push(PredictionContext.EMPTY_FULL_STATE_KEY);
                    return new ArrayPredictionContext(parents2, returnStates2);
                }
                removeEmptyContext()
                {
                    if (!this.hasEmpty) {
                        return this;
                    }
                    if (this.returnStates.length === 2) {
                        return new SingletonPredictionContext(this.parents[0], this.returnStates[0]);
                    }
                    else {
                        let parents2 = this.parents.slice(0, this.parents.length - 1);
                        let returnStates2 = this.returnStates.slice(0, this.returnStates.length - 1);
                        return new ArrayPredictionContext(parents2, returnStates2);
                    }
                }
                appendContext(suffix, contextCache)
                {
                    return ArrayPredictionContext.appendContextImpl(this, suffix, new PredictionContext.IdentityHashMap());
                }
                static appendContextImpl(context, suffix, visited)
                {
                    if (suffix.isEmpty) {
                        if (PredictionContext.isEmptyLocal(suffix)) {
                            if (context.hasEmpty) {
                                return PredictionContext.EMPTY_LOCAL;
                            }
                            throw new Error("what to do here?");
                        }
                        return context;
                    }
                    if (suffix.size !== 1) {
                        throw new Error("Appending a tree suffix is not yet supported.");
                    }
                    let result = visited.get(context);
                    if (!result) {
                        if (context.isEmpty) {
                            result = suffix;
                        }
                        else {
                            let parentCount = context.size;
                            if (context.hasEmpty) {
                                parentCount--;
                            }
                            let updatedParents = new Array(parentCount);
                            let updatedReturnStates = new Array(parentCount);
                            for (let i = 0; i < parentCount; i++) {
                                updatedReturnStates[i] = context.getReturnState(i);
                            }
                            for (let i = 0; i < parentCount; i++) {
                                updatedParents[i] = ArrayPredictionContext.appendContextImpl(context.getParent(i), suffix, visited);
                            }
                            if (updatedParents.length === 1) {
                                result = new SingletonPredictionContext(updatedParents[0], updatedReturnStates[0]);
                            }
                            else {
                                assert(updatedParents.length > 1);
                                result = new ArrayPredictionContext(updatedParents, updatedReturnStates);
                            }
                            if (context.hasEmpty) {
                                result = PredictionContext.join(result, suffix);
                            }
                        }
                        visited.put(context, result);
                    }
                    return result;
                }
                equals(o)
                {
                    if (this === o) {
                        return true;
                    }
                    else if (!(o instanceof ArrayPredictionContext)) {
                        return false;
                    }
                    if (this.hashCode() !== o.hashCode()) {
                        // can't be same if hash is different
                        return false;
                    }
                    let other = o;
                    return this.equalsImpl(other, new Array2DHashSet_1.Array2DHashSet());
                }
                equalsImpl(other, visited)
                {
                    let selfWorkList = [];
                    let otherWorkList = [];
                    selfWorkList.push(this);
                    otherWorkList.push(other);
                    while (true) {
                        let currentSelf = selfWorkList.pop();
                        let currentOther = otherWorkList.pop();
                        if (!currentSelf || !currentOther) {
                            break;
                        }
                        let operands = new PredictionContextCache_1.PredictionContextCache.IdentityCommutativePredictionContextOperands(currentSelf, currentOther);
                        if (!visited.add(operands)) {
                            continue;
                        }
                        let selfSize = operands.x.size;
                        if (selfSize === 0) {
                            if (!operands.x.equals(operands.y)) {
                                return false;
                            }
                            continue;
                        }
                        let otherSize = operands.y.size;
                        if (selfSize !== otherSize) {
                            return false;
                        }
                        for (let i = 0; i < selfSize; i++) {
                            if (operands.x.getReturnState(i) !== operands.y.getReturnState(i)) {
                                return false;
                            }
                            let selfParent = operands.x.getParent(i);
                            let otherParent = operands.y.getParent(i);
                            if (selfParent.hashCode() !== otherParent.hashCode()) {
                                return false;
                            }
                            if (selfParent !== otherParent) {
                                selfWorkList.push(selfParent);
                                otherWorkList.push(otherParent);
                            }
                        }
                    }
                    return true;
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], ArrayPredictionContext.prototype, "parents", void 0);
            __decorate([
            Decorators_1.NotNull
            ], ArrayPredictionContext.prototype, "returnStates", void 0);
            __decorate([
            Decorators_1.Override
            ], ArrayPredictionContext.prototype, "getParent", null);
            __decorate([
            Decorators_1.Override
            ], ArrayPredictionContext.prototype, "getReturnState", null);
            __decorate([
            Decorators_1.Override
            ], ArrayPredictionContext.prototype, "findReturnState", null);
            __decorate([
            Decorators_1.Override
            ], ArrayPredictionContext.prototype, "size", null);
            __decorate([
            Decorators_1.Override
            ], ArrayPredictionContext.prototype, "isEmpty", null);
            __decorate([
            Decorators_1.Override
            ], ArrayPredictionContext.prototype, "hasEmpty", null);
            __decorate([
            Decorators_1.Override
            ], ArrayPredictionContext.prototype, "addEmptyContext", null);
            __decorate([
            Decorators_1.Override
            ], ArrayPredictionContext.prototype, "removeEmptyContext", null);
            __decorate([
            Decorators_1.Override
            ], ArrayPredictionContext.prototype, "appendContext", null);
            __decorate([
            Decorators_1.Override
            ], ArrayPredictionContext.prototype, "equals", null);
            ArrayPredictionContext = __decorate([
            __param(0, Decorators_1.NotNull)
            ], ArrayPredictionContext);
            let SingletonPredictionContext = class SingletonPredictionContext extends PredictionContext {
                constructor(parent, returnState)
                {
                    super(PredictionContext.calculateSingleHashCode(parent, returnState));
                    // assert(returnState != PredictionContext.EMPTY_FULL_STATE_KEY && returnState != PredictionContext.EMPTY_LOCAL_STATE_KEY);
                    this.parent = parent;
                    this.returnState = returnState;
                }
                getParent(index)
                {
                    // assert(index == 0);
                    return this.parent;
                }
                getReturnState(index)
                {
                    // assert(index == 0);
                    return this.returnState;
                }
                findReturnState(returnState)
                {
                    return this.returnState === returnState ? 0 : -1;
                }
                get size()
                {
                    return 1;
                }
                get isEmpty()
                {
                    return false;
                }
                get hasEmpty()
                {
                    return false;
                }
                appendContext(suffix, contextCache)
                {
                    return contextCache.getChild(this.parent.appendContext(suffix, contextCache), this.returnState);
                }
                addEmptyContext()
                {
                    let parents = [this.parent, PredictionContext.EMPTY_FULL];
                    let returnStates = [this.returnState, PredictionContext.EMPTY_FULL_STATE_KEY];
                    return new ArrayPredictionContext(parents, returnStates);
                }
                removeEmptyContext()
                {
                    return this;
                }
                equals(o)
                {
                    if (o === this) {
                        return true;
                    }
                    else if (!(o instanceof SingletonPredictionContext)) {
                        return false;
                    }
                    let other = o;
                    if (this.hashCode() !== other.hashCode()) {
                        return false;
                    }
                    return this.returnState === other.returnState
                        && this.parent.equals(other.parent);
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], SingletonPredictionContext.prototype, "parent", void 0);
            __decorate([
            Decorators_1.Override
            ], SingletonPredictionContext.prototype, "getParent", null);
            __decorate([
            Decorators_1.Override
            ], SingletonPredictionContext.prototype, "getReturnState", null);
            __decorate([
            Decorators_1.Override
            ], SingletonPredictionContext.prototype, "findReturnState", null);
            __decorate([
            Decorators_1.Override
            ], SingletonPredictionContext.prototype, "size", null);
            __decorate([
            Decorators_1.Override
            ], SingletonPredictionContext.prototype, "isEmpty", null);
            __decorate([
            Decorators_1.Override
            ], SingletonPredictionContext.prototype, "hasEmpty", null);
            __decorate([
            Decorators_1.Override
            ], SingletonPredictionContext.prototype, "appendContext", null);
            __decorate([
            Decorators_1.Override
            ], SingletonPredictionContext.prototype, "addEmptyContext", null);
            __decorate([
            Decorators_1.Override
            ], SingletonPredictionContext.prototype, "removeEmptyContext", null);
            __decorate([
            Decorators_1.Override
            ], SingletonPredictionContext.prototype, "equals", null);
            SingletonPredictionContext = __decorate([
            __param(0, Decorators_1.NotNull)
            ], SingletonPredictionContext);
            exports.SingletonPredictionContext = SingletonPredictionContext;
            (function(PredictionContext) {
                PredictionContext.EMPTY_LOCAL = new EmptyPredictionContext(false);
                PredictionContext.EMPTY_FULL = new EmptyPredictionContext(true);
                PredictionContext.EMPTY_LOCAL_STATE_KEY = -((1 << 31) >>> 0);
                PredictionContext.EMPTY_FULL_STATE_KEY = ((1 << 31) >>> 0) - 1;
                class IdentityHashMap extends Array2DHashMap_1.Array2DHashMap {
                    constructor()
                    {
                        super(IdentityEqualityComparator.INSTANCE);
                    }
                }
                PredictionContext.IdentityHashMap = IdentityHashMap;
                class IdentityEqualityComparator {
                    IdentityEqualityComparator() {

                    }
                    hashCode(obj)
                    {
                        return obj.hashCode();
                    }
                    equals(a, b)
                    {
                        return a === b;
                    }
                }
                IdentityEqualityComparator.INSTANCE = new IdentityEqualityComparator();
                __decorate([
                Decorators_1.Override
                ], IdentityEqualityComparator.prototype, "hashCode", null);
                __decorate([
                Decorators_1.Override
                ], IdentityEqualityComparator.prototype, "equals", null);
                PredictionContext.IdentityEqualityComparator = IdentityEqualityComparator;
            })(PredictionContext = exports.PredictionContext || (exports.PredictionContext = {}));

        }, {
            "../Decorators": 224,
            "../misc/Array2DHashMap": 321,
            "../misc/Array2DHashSet": 322,
            "../misc/Arrays": 324,
            "../misc/MurmurHash": 333,
            "./PredictionContextCache": 299,
            "assert": 364
        }],
        299: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:35.6390614-07:00
            const Array2DHashMap_1 = require("../misc/Array2DHashMap");
            const Decorators_1 = require("../Decorators");
            const ObjectEqualityComparator_1 = require("../misc/ObjectEqualityComparator");
            const PredictionContext_1 = require("./PredictionContext");
            const assert = require("assert");
            /** Used to cache {@link PredictionContext} objects. Its used for the shared
             *  context cash associated with contexts in DFA states. This cache
             *  can be used for both lexers and parsers.
             *
             * @author Sam Harwell
             */
            class PredictionContextCache {
                constructor(enableCache=true)
                {
                    this.contexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
                    this.childContexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
                    this.joinContexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
                    this.enableCache = enableCache;
                }
                getAsCached(context)
                {
                    if (!this.enableCache) {
                        return context;
                    }
                    let result = this.contexts.get(context);
                    if (!result) {
                        result = context;
                        this.contexts.put(context, context);
                    }
                    return result;
                }
                getChild(context, invokingState)
                {
                    if (!this.enableCache) {
                        return context.getChild(invokingState);
                    }
                    let operands = new PredictionContextCache.PredictionContextAndInt(context, invokingState);
                    let result = this.childContexts.get(operands);
                    if (!result) {
                        result = context.getChild(invokingState);
                        result = this.getAsCached(result);
                        this.childContexts.put(operands, result);
                    }
                    return result;
                }
                join(x, y)
                {
                    if (!this.enableCache) {
                        return PredictionContext_1.PredictionContext.join(x, y, this);
                    }
                    let operands = new PredictionContextCache.IdentityCommutativePredictionContextOperands(x, y);
                    let result = this.joinContexts.get(operands);
                    if (result) {
                        return result;
                    }
                    result = PredictionContext_1.PredictionContext.join(x, y, this);
                    result = this.getAsCached(result);
                    this.joinContexts.put(operands, result);
                    return result;
                }
            }
            PredictionContextCache.UNCACHED = new PredictionContextCache(false);
            exports.PredictionContextCache = PredictionContextCache;
            (function(PredictionContextCache) {
                class PredictionContextAndInt {
                    constructor(obj, value)
                    {
                        this.obj = obj;
                        this.value = value;
                    }
                    equals(obj)
                    {
                        if (!(obj instanceof PredictionContextAndInt)) {
                            return false;
                        }
                        else if (obj === this) {
                            return true;
                        }
                        let other = obj;
                        return this.value === other.value
                            && (this.obj === other.obj || (this.obj != null && this.obj.equals(other.obj)));
                    }
                    hashCode()
                    {
                        let hashCode = 5;
                        hashCode = 7 * hashCode + (this.obj != null ? this.obj.hashCode() : 0);
                        hashCode = 7 * hashCode + this.value;
                        return hashCode;
                    }
                }
                __decorate([
                Decorators_1.Override
                ], PredictionContextAndInt.prototype, "equals", null);
                __decorate([
                Decorators_1.Override
                ], PredictionContextAndInt.prototype, "hashCode", null);
                PredictionContextCache.PredictionContextAndInt = PredictionContextAndInt;
                class IdentityCommutativePredictionContextOperands {
                    constructor(x, y)
                    {
                        assert(x != null);
                        assert(y != null);
                        this._x = x;
                        this._y = y;
                    }
                    get x()
                    {
                        return this._x;
                    }
                    get y()
                    {
                        return this._y;
                    }
                    equals(o)
                    {
                        if (!(o instanceof IdentityCommutativePredictionContextOperands)) {
                            return false;
                        }
                        else if (this === o) {
                            return true;
                        }
                        let other = o;
                        return (this._x === other._x && this._y === other._y) || (this._x === other._y && this._y === other._x);
                    }
                    hashCode()
                    {
                        return this._x.hashCode() ^ this._y.hashCode();
                    }
                }
                __decorate([
                Decorators_1.Override
                ], IdentityCommutativePredictionContextOperands.prototype, "equals", null);
                __decorate([
                Decorators_1.Override
                ], IdentityCommutativePredictionContextOperands.prototype, "hashCode", null);
                PredictionContextCache.IdentityCommutativePredictionContextOperands = IdentityCommutativePredictionContextOperands;
            })(PredictionContextCache = exports.PredictionContextCache || (exports.PredictionContextCache = {}));

        }, {
            "../Decorators": 224,
            "../misc/Array2DHashMap": 321,
            "../misc/ObjectEqualityComparator": 334,
            "./PredictionContext": 298,
            "assert": 364
        }],
        300: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:36.2673893-07:00
            const Array2DHashMap_1 = require("../misc/Array2DHashMap");
            const MurmurHash_1 = require("../misc/MurmurHash");
            const Decorators_1 = require("../Decorators");
            const RuleStopState_1 = require("./RuleStopState");
            /**
             * This enumeration defines the prediction modes available in ANTLR 4 along with
             * utility methods for analyzing configuration sets for conflicts and/or
             * ambiguities.
             */
            var PredictionMode;
            (function(PredictionMode) {
                /**
                     * The SLL(*) prediction mode. This prediction mode ignores the current
                     * parser context when making predictions. This is the fastest prediction
                     * mode, and provides correct results for many grammars. This prediction
                     * mode is more powerful than the prediction mode provided by ANTLR 3, but
                     * may result in syntax errors for grammar and input combinations which are
                     * not SLL.
                     *
                     * When using this prediction mode, the parser will either return a correct
                     * parse tree (i.e. the same parse tree that would be returned with the
                     * {@link #LL} prediction mode), or it will report a syntax error. If a
                     * syntax error is encountered when using the {@link #SLL} prediction mode,
                     * it may be due to either an actual syntax error in the input or indicate
                     * that the particular combination of grammar and input requires the more
                     * powerful {@link #LL} prediction abilities to complete successfully.
                     *
                     * This prediction mode does not provide any guarantees for prediction
                     * behavior for syntactically-incorrect inputs.
                     */
                PredictionMode[PredictionMode["SLL"] = 0] = "SLL";
                /**
                     * The LL(*) prediction mode. This prediction mode allows the current parser
                     * context to be used for resolving SLL conflicts that occur during
                     * prediction. This is the fastest prediction mode that guarantees correct
                     * parse results for all combinations of grammars with syntactically correct
                     * inputs.
                     *
                     * When using this prediction mode, the parser will make correct decisions
                     * for all syntactically-correct grammar and input combinations. However, in
                     * cases where the grammar is truly ambiguous this prediction mode might not
                     * report a precise answer for *exactly which* alternatives are
                     * ambiguous.
                     *
                     * This prediction mode does not provide any guarantees for prediction
                     * behavior for syntactically-incorrect inputs.
                     */
                PredictionMode[PredictionMode["LL"] = 1] = "LL";
                /**
                     * The LL(*) prediction mode with exact ambiguity detection. In addition to
                     * the correctness guarantees provided by the {@link #LL} prediction mode,
                     * this prediction mode instructs the prediction algorithm to determine the
                     * complete and exact set of ambiguous alternatives for every ambiguous
                     * decision encountered while parsing.
                     *
                     * This prediction mode may be used for diagnosing ambiguities during
                     * grammar development. Due to the performance overhead of calculating sets
                     * of ambiguous alternatives, this prediction mode should be avoided when
                     * the exact results are not necessary.
                     *
                     * This prediction mode does not provide any guarantees for prediction
                     * behavior for syntactically-incorrect inputs.
                     */
                PredictionMode[PredictionMode["LL_EXACT_AMBIG_DETECTION"] = 2] = "LL_EXACT_AMBIG_DETECTION";
            })(PredictionMode = exports.PredictionMode || (exports.PredictionMode = {}));
            (function(PredictionMode) {
                /** A Map that uses just the state and the stack context as the key. */
                // NOTE: Base type used to be FlexibleHashMap<ATNConfig, BitSet>
                class AltAndContextMap extends Array2DHashMap_1.Array2DHashMap {
                    constructor()
                    {
                        super(AltAndContextConfigEqualityComparator.INSTANCE);
                    }
                }
                class AltAndContextConfigEqualityComparator {
                    AltAndContextConfigEqualityComparator() {

                    }
                    /**
                             * The hash code is only a function of the {@link ATNState#stateNumber}
                             * and {@link ATNConfig#context}.
                             */
                    hashCode(o)
                    {
                        let hashCode = MurmurHash_1.MurmurHash.initialize(7);
                        hashCode = MurmurHash_1.MurmurHash.update(hashCode, o.state.stateNumber);
                        hashCode = MurmurHash_1.MurmurHash.update(hashCode, o.context);
                        hashCode = MurmurHash_1.MurmurHash.finish(hashCode, 2);
                        return hashCode;
                    }
                    equals(a, b)
                    {
                        if (a === b) {
                            return true;
                        }
                        if (a == null || b == null) {
                            return false;
                        }
                        return a.state.stateNumber === b.state.stateNumber
                            && a.context.equals(b.context);
                    }
                }
                AltAndContextConfigEqualityComparator.INSTANCE = new AltAndContextConfigEqualityComparator();
                __decorate([
                Decorators_1.Override
                ], AltAndContextConfigEqualityComparator.prototype, "hashCode", null);
                __decorate([
                Decorators_1.Override
                ], AltAndContextConfigEqualityComparator.prototype, "equals", null);
                /**
                     * Checks if any configuration in `configs` is in a
                     * {@link RuleStopState}. Configurations meeting this condition have reached
                     * the end of the decision rule (local context) or end of start rule (full
                     * context).
                     *
                     * @param configs the configuration set to test
                     * @returns `true` if any configuration in `configs` is in a
                     * {@link RuleStopState}, otherwise `false`
                     */
                function hasConfigInRuleStopState(configs) {
                    for (let c of configs) {
                        if (c.state instanceof RuleStopState_1.RuleStopState) {
                            return true;
                        }
                    }
                    return false;
                }
                PredictionMode.hasConfigInRuleStopState = hasConfigInRuleStopState;
                /**
                     * Checks if all configurations in `configs` are in a
                     * {@link RuleStopState}. Configurations meeting this condition have reached
                     * the end of the decision rule (local context) or end of start rule (full
                     * context).
                     *
                     * @param configs the configuration set to test
                     * @returns `true` if all configurations in `configs` are in a
                     * {@link RuleStopState}, otherwise `false`
                     */
                function allConfigsInRuleStopStates(/*@NotNull*/
                configs) {
                    for (let config of configs) {
                        if (!(config.state instanceof RuleStopState_1.RuleStopState)) {
                            return false;
                        }
                    }
                    return true;
                }
                PredictionMode.allConfigsInRuleStopStates = allConfigsInRuleStopStates;
            })(PredictionMode = exports.PredictionMode || (exports.PredictionMode = {}));

        }, {
            "../Decorators": 224,
            "../misc/Array2DHashMap": 321,
            "../misc/MurmurHash": 333,
            "./RuleStopState": 304
        }],
        301: [function(require, module, exports) {
            (function(process) {
                (function() {
                    "use strict";
                    /*!
                     * Copyright 2016 The ANTLR Project. All rights reserved.
                     * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
                     */
                    var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                        var c = arguments.length,
                            r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                            d;
                        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                            r = Reflect.decorate(decorators, target, key, desc);
                        else
                            for (var i = decorators.length - 1; i >= 0; i--)
                                if (d = decorators[i])
                                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                        return c > 3 && r && Object.defineProperty(target, key, r), r;
                    };
                    var __param = (this && this.__param) || function(paramIndex, decorator) {
                        return function(target, key) {
                            decorator(target, key, paramIndex);
                        }
                    };
                    Object.defineProperty(exports, "__esModule", {
                        value: true
                    });
                    // ConvertTo-TS run at 2016-10-04T11:26:36.4188352-07:00
                    const AmbiguityInfo_1 = require("./AmbiguityInfo");
                    const ATN_1 = require("./ATN");
                    const ATNSimulator_1 = require("./ATNSimulator");
                    const ContextSensitivityInfo_1 = require("./ContextSensitivityInfo");
                    const DecisionInfo_1 = require("./DecisionInfo");
                    const ErrorInfo_1 = require("./ErrorInfo");
                    const Decorators_1 = require("../Decorators");
                    const LookaheadEventInfo_1 = require("./LookaheadEventInfo");
                    const ParserATNSimulator_1 = require("./ParserATNSimulator");
                    const PredicateEvalInfo_1 = require("./PredicateEvalInfo");
                    const SemanticContext_1 = require("./SemanticContext");
                    const SimulatorState_1 = require("./SimulatorState");
                    /**
                     * @since 4.3
                     */
                    class ProfilingATNSimulator extends ParserATNSimulator_1.ParserATNSimulator {
                        constructor(parser)
                        {
                            super(parser.interpreter.atn, parser);
                            this._startIndex = 0;
                            this._sllStopIndex = 0;
                            this._llStopIndex = 0;
                            this.currentDecision = 0;
                            /** At the point of LL failover, we record how SLL would resolve the conflict so that
                                     *  we can determine whether or not a decision / input pair is context-sensitive.
                                     *  If LL gives a different result than SLL's predicted alternative, we have a
                                     *  context sensitivity for sure. The converse is not necessarily true, however.
                                     *  It's possible that after conflict resolution chooses minimum alternatives,
                                     *  SLL could get the same answer as LL. Regardless of whether or not the result indicates
                                     *  an ambiguity, it is not treated as a context sensitivity because LL prediction
                                     *  was not required in order to produce a correct prediction for this decision and input sequence.
                                     *  It may in fact still be a context sensitivity but we don't know by looking at the
                                     *  minimum alternatives for the current input.
                                     */
                            this.conflictingAltResolvedBySLL = 0;
                            this.optimize_ll1 = false;
                            this.reportAmbiguities = true;
                            this.numDecisions = this.atn.decisionToState.length;
                            this.decisions = [];
                            for (let i = 0; i < this.numDecisions; i++) {
                                this.decisions.push(new DecisionInfo_1.DecisionInfo(i));
                            }
                        }
                        adaptivePredict(input, decision, outerContext, useContext)
                        {
                            if (useContext !== undefined) {
                                return super.adaptivePredict(input, decision, outerContext, useContext);
                            }
                            try {
                                this._input = input;
                                this._startIndex = input.index;
                                // it's possible for SLL to reach a conflict state without consuming any input
                                this._sllStopIndex = this._startIndex - 1;
                                this._llStopIndex = -1;
                                this.currentDecision = decision;
                                this.currentState = undefined;
                                this.conflictingAltResolvedBySLL = ATN_1.ATN.INVALID_ALT_NUMBER;
                                let start = process.hrtime();
                                let alt = super.adaptivePredict(input, decision, outerContext);
                                let stop = process.hrtime();
                                let nanoseconds = (stop[0] - start[0]) * 1000000000;
                                if (nanoseconds === 0) {
                                    nanoseconds = stop[1] - start[1];
                                }
                                else {
                                    // Add nanoseconds from start to end of that second, plus start of the end second to end
                                    nanoseconds += (1000000000 - start[1]) + stop[1];
                                }
                                this.decisions[decision].timeInPrediction += nanoseconds;
                                this.decisions[decision].invocations++;
                                let SLL_k = this._sllStopIndex - this._startIndex + 1;
                                this.decisions[decision].SLL_TotalLook += SLL_k;
                                this.decisions[decision].SLL_MinLook = this.decisions[decision].SLL_MinLook === 0 ? SLL_k : Math.min(this.decisions[decision].SLL_MinLook, SLL_k);
                                if (SLL_k > this.decisions[decision].SLL_MaxLook) {
                                    this.decisions[decision].SLL_MaxLook = SLL_k;
                                    this.decisions[decision].SLL_MaxLookEvent =
                                    new LookaheadEventInfo_1.LookaheadEventInfo(decision, undefined, alt, input, this._startIndex, this._sllStopIndex, false);
                                }
                                if (this._llStopIndex >= 0) {
                                    let LL_k = this._llStopIndex - this._startIndex + 1;
                                    this.decisions[decision].LL_TotalLook += LL_k;
                                    this.decisions[decision].LL_MinLook = this.decisions[decision].LL_MinLook === 0 ? LL_k : Math.min(this.decisions[decision].LL_MinLook, LL_k);
                                    if (LL_k > this.decisions[decision].LL_MaxLook) {
                                        this.decisions[decision].LL_MaxLook = LL_k;
                                        this.decisions[decision].LL_MaxLookEvent =
                                        new LookaheadEventInfo_1.LookaheadEventInfo(decision, undefined, alt, input, this._startIndex, this._llStopIndex, true);
                                    }
                                }
                                return alt;
                            }
                            finally {
                                this._input = undefined;
                                this.currentDecision = -1;
                            }
                        }
                        getStartState(dfa, input, outerContext, useContext)
                        {
                            let state = super.getStartState(dfa, input, outerContext, useContext);
                            this.currentState = state;
                            return state;
                        }
                        computeStartState(dfa, globalContext, useContext)
                        {
                            let state = super.computeStartState(dfa, globalContext, useContext);
                            this.currentState = state;
                            return state;
                        }
                        computeReachSet(dfa, previous, t, contextCache)
                        {
                            if (this._input === undefined) {
                                throw new Error("Invalid state");
                            }
                            let reachState = super.computeReachSet(dfa, previous, t, contextCache);
                            if (reachState == null) {
                                // no reach on current lookahead symbol. ERROR.
                                this.decisions[this.currentDecision].errors.push(new ErrorInfo_1.ErrorInfo(this.currentDecision, previous, this._input, this._startIndex, this._input.index));
                            }
                            this.currentState = reachState;
                            return reachState;
                        }
                        getExistingTargetState(previousD, t)
                        {
                            if (this.currentState === undefined || this._input === undefined) {
                                throw new Error("Invalid state");
                            }
                            // this method is called after each time the input position advances
                            if (this.currentState.useContext) {
                                this._llStopIndex = this._input.index;
                            }
                            else {
                                this._sllStopIndex = this._input.index;
                            }
                            let existingTargetState = super.getExistingTargetState(previousD, t);
                            if (existingTargetState != null) {
                                // this method is directly called by execDFA; must construct a SimulatorState
                                // to represent the current state for this case
                                this.currentState = new SimulatorState_1.SimulatorState(this.currentState.outerContext, existingTargetState, this.currentState.useContext, this.currentState.remainingOuterContext);
                                if (this.currentState.useContext) {
                                    this.decisions[this.currentDecision].LL_DFATransitions++;
                                }
                                else {
                                    this.decisions[this.currentDecision].SLL_DFATransitions++; // count only if we transition over a DFA state
                                }
                                if (existingTargetState === ATNSimulator_1.ATNSimulator.ERROR) {
                                    let state = new SimulatorState_1.SimulatorState(this.currentState.outerContext, previousD, this.currentState.useContext, this.currentState.remainingOuterContext);
                                    this.decisions[this.currentDecision].errors.push(new ErrorInfo_1.ErrorInfo(this.currentDecision, state, this._input, this._startIndex, this._input.index));
                                }
                            }
                            return existingTargetState;
                        }
                        computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache)
                        {
                            let targetState = super.computeTargetState(dfa, s, remainingGlobalContext, t, useContext, contextCache);
                            if (useContext) {
                                this.decisions[this.currentDecision].LL_ATNTransitions++;
                            }
                            else {
                                this.decisions[this.currentDecision].SLL_ATNTransitions++;
                            }
                            return targetState;
                        }
                        evalSemanticContextImpl(pred, parserCallStack, alt)
                        {
                            if (this.currentState === undefined || this._input === undefined) {
                                throw new Error("Invalid state");
                            }
                            let result = super.evalSemanticContextImpl(pred, parserCallStack, alt);
                            if (!(pred instanceof SemanticContext_1.SemanticContext.PrecedencePredicate)) {
                                let fullContext = this._llStopIndex >= 0;
                                let stopIndex = fullContext ? this._llStopIndex : this._sllStopIndex;
                                this.decisions[this.currentDecision].predicateEvals.push(new PredicateEvalInfo_1.PredicateEvalInfo(this.currentState, this.currentDecision, this._input, this._startIndex, stopIndex, pred, result, alt));
                            }
                            return result;
                        }
                        reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex)
                        {
                            if (this._input === undefined) {
                                throw new Error("Invalid state");
                            }
                            if (prediction !== this.conflictingAltResolvedBySLL) {
                                this.decisions[this.currentDecision].contextSensitivities.push(new ContextSensitivityInfo_1.ContextSensitivityInfo(this.currentDecision, acceptState, this._input, startIndex, stopIndex));
                            }
                            super.reportContextSensitivity(dfa, prediction, acceptState, startIndex, stopIndex);
                        }
                        reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex)
                        {
                            if (conflictingAlts != null) {
                                this.conflictingAltResolvedBySLL = conflictingAlts.nextSetBit(0);
                            }
                            else {
                                this.conflictingAltResolvedBySLL = conflictState.s0.configs.getRepresentedAlternatives().nextSetBit(0);
                            }
                            this.decisions[this.currentDecision].LL_Fallback++;
                            super.reportAttemptingFullContext(dfa, conflictingAlts, conflictState, startIndex, stopIndex);
                        }
                        reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs)
                        {
                            if (this.currentState === undefined || this._input === undefined) {
                                throw new Error("Invalid state");
                            }
                            let prediction;
                            if (ambigAlts != null) {
                                prediction = ambigAlts.nextSetBit(0);
                            }
                            else {
                                prediction = configs.getRepresentedAlternatives().nextSetBit(0);
                            }
                            if (this.conflictingAltResolvedBySLL !== ATN_1.ATN.INVALID_ALT_NUMBER && prediction !== this.conflictingAltResolvedBySLL) {
                                // Even though this is an ambiguity we are reporting, we can
                                // still detect some context sensitivities.  Both SLL and LL
                                // are showing a conflict, hence an ambiguity, but if they resolve
                                // to different minimum alternatives we have also identified a
                                // context sensitivity.
                                this.decisions[this.currentDecision].contextSensitivities.push(new ContextSensitivityInfo_1.ContextSensitivityInfo(this.currentDecision, this.currentState, this._input, startIndex, stopIndex));
                            }
                            this.decisions[this.currentDecision].ambiguities.push(new AmbiguityInfo_1.AmbiguityInfo(this.currentDecision, this.currentState, ambigAlts, this._input, startIndex, stopIndex));
                            super.reportAmbiguity(dfa, D, startIndex, stopIndex, exact, ambigAlts, configs);
                        }
                        // ---------------------------------------------------------------------
                        getDecisionInfo()
                        {
                            return this.decisions;
                        }
                        getCurrentState()
                        {
                            return this.currentState;
                        }
                    }
                    __decorate([
                    Decorators_1.Override,
                    __param(0, Decorators_1.NotNull)
                    ], ProfilingATNSimulator.prototype, "adaptivePredict", null);
                    __decorate([
                    Decorators_1.Override
                    ], ProfilingATNSimulator.prototype, "getStartState", null);
                    __decorate([
                    Decorators_1.Override
                    ], ProfilingATNSimulator.prototype, "computeStartState", null);
                    __decorate([
                    Decorators_1.Override
                    ], ProfilingATNSimulator.prototype, "computeReachSet", null);
                    __decorate([
                    Decorators_1.Override
                    ], ProfilingATNSimulator.prototype, "getExistingTargetState", null);
                    __decorate([
                    Decorators_1.Override
                    ], ProfilingATNSimulator.prototype, "computeTargetState", null);
                    __decorate([
                    Decorators_1.Override
                    ], ProfilingATNSimulator.prototype, "evalSemanticContextImpl", null);
                    __decorate([
                    Decorators_1.Override
                    ], ProfilingATNSimulator.prototype, "reportContextSensitivity", null);
                    __decorate([
                    Decorators_1.Override
                    ], ProfilingATNSimulator.prototype, "reportAttemptingFullContext", null);
                    __decorate([
                    Decorators_1.Override,
                    __param(0, Decorators_1.NotNull), __param(5, Decorators_1.NotNull), __param(6, Decorators_1.NotNull)
                    ], ProfilingATNSimulator.prototype, "reportAmbiguity", null);
                    exports.ProfilingATNSimulator = ProfilingATNSimulator;

                }).call(this)
            }).call(this, require('_process'))

        }, {
            "../Decorators": 224,
            "./ATN": 251,
            "./ATNSimulator": 256,
            "./AmbiguityInfo": 261,
            "./ContextSensitivityInfo": 268,
            "./DecisionInfo": 270,
            "./ErrorInfo": 273,
            "./LookaheadEventInfo": 287,
            "./ParserATNSimulator": 292,
            "./PredicateEvalInfo": 296,
            "./SemanticContext": 306,
            "./SimulatorState": 308,
            "_process": 516
        }],
        302: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const IntervalSet_1 = require("../misc/IntervalSet");
            const Decorators_1 = require("../Decorators");
            const Transition_1 = require("./Transition");
            let RangeTransition = class RangeTransition extends Transition_1.Transition {
                constructor(target, from, to)
                {
                    super(target);
                    this.from = from;
                    this.to = to;
                }
                get serializationType()
                {
                    return 2 /* RANGE */
                    ;
                }
                get label()
                {
                    return IntervalSet_1.IntervalSet.of(this.from, this.to);
                }
                matches(symbol, minVocabSymbol, maxVocabSymbol)
                {
                    return symbol >= this.from && symbol <= this.to;
                }
                toString()
                {
                    return "'" + String.fromCodePoint(this.from) + "'..'" + String.fromCodePoint(this.to) + "'";
                }
            }
            ;
            __decorate([
            Decorators_1.Override
            ], RangeTransition.prototype, "serializationType", null);
            __decorate([
            Decorators_1.Override,
            Decorators_1.NotNull
            ], RangeTransition.prototype, "label", null);
            __decorate([
            Decorators_1.Override
            ], RangeTransition.prototype, "matches", null);
            __decorate([
            Decorators_1.Override,
            Decorators_1.NotNull
            ], RangeTransition.prototype, "toString", null);
            RangeTransition = __decorate([
            __param(0, Decorators_1.NotNull)
            ], RangeTransition);
            exports.RangeTransition = RangeTransition;

        }, {
            "../Decorators": 224,
            "../misc/IntervalSet": 331,
            "./Transition": 313
        }],
        303: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:36.6806851-07:00
            const ATNState_1 = require("./ATNState");
            const ATNStateType_1 = require("./ATNStateType");
            const Decorators_1 = require("../Decorators");
            class RuleStartState extends ATNState_1.ATNState {
                constructor()
                {
                    super(...arguments);
                    this.isPrecedenceRule = false;
                    this.leftFactored = false;
                }
                get stateType()
                {
                    return ATNStateType_1.ATNStateType.RULE_START;
                }
            }
            __decorate([
            Decorators_1.Override
            ], RuleStartState.prototype, "stateType", null);
            exports.RuleStartState = RuleStartState;

        }, {
            "../Decorators": 224,
            "./ATNState": 257,
            "./ATNStateType": 258
        }],
        304: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:36.7513856-07:00
            const ATNState_1 = require("./ATNState");
            const ATNStateType_1 = require("./ATNStateType");
            const Decorators_1 = require("../Decorators");
            /** The last node in the ATN for a rule, unless that rule is the start symbol.
             *  In that case, there is one transition to EOF. Later, we might encode
             *  references to all calls to this rule to compute FOLLOW sets for
             *  error handling.
             */
            class RuleStopState extends ATNState_1.ATNState {
                get nonStopStateNumber()
                {
                    return -1;
                }
                get stateType()
                {
                    return ATNStateType_1.ATNStateType.RULE_STOP;
                }
            }
            __decorate([
            Decorators_1.Override
            ], RuleStopState.prototype, "nonStopStateNumber", null);
            __decorate([
            Decorators_1.Override
            ], RuleStopState.prototype, "stateType", null);
            exports.RuleStopState = RuleStopState;

        }, {
            "../Decorators": 224,
            "./ATNState": 257,
            "./ATNStateType": 258
        }],
        305: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../Decorators");
            const Transition_1 = require("./Transition");
            /** */
            let RuleTransition = class RuleTransition extends Transition_1.Transition {
                constructor(ruleStart, ruleIndex, precedence, followState)
                {
                    super(ruleStart);
                    this.tailCall = false;
                    this.optimizedTailCall = false;
                    this.ruleIndex = ruleIndex;
                    this.precedence = precedence;
                    this.followState = followState;
                }
                get serializationType()
                {
                    return 3 /* RULE */
                    ;
                }
                get isEpsilon()
                {
                    return true;
                }
                matches(symbol, minVocabSymbol, maxVocabSymbol)
                {
                    return false;
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], RuleTransition.prototype, "followState", void 0);
            __decorate([
            Decorators_1.Override
            ], RuleTransition.prototype, "serializationType", null);
            __decorate([
            Decorators_1.Override
            ], RuleTransition.prototype, "isEpsilon", null);
            __decorate([
            Decorators_1.Override
            ], RuleTransition.prototype, "matches", null);
            RuleTransition = __decorate([
            __param(0, Decorators_1.NotNull), __param(3, Decorators_1.NotNull)
            ], RuleTransition);
            exports.RuleTransition = RuleTransition;

        }, {
            "../Decorators": 224,
            "./Transition": 313
        }],
        306: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:36.9521478-07:00
            const Array2DHashSet_1 = require("../misc/Array2DHashSet");
            const ArrayEqualityComparator_1 = require("../misc/ArrayEqualityComparator");
            const MurmurHash_1 = require("../misc/MurmurHash");
            const Decorators_1 = require("../Decorators");
            const ObjectEqualityComparator_1 = require("../misc/ObjectEqualityComparator");
            const Utils = require("../misc/Utils");
            function max(items) {
                let result;
                for (let current of items) {
                    if (result === undefined) {
                        result = current;
                        continue;
                    }
                    let comparison = result.compareTo(current);
                    if (comparison < 0) {
                        result = current;
                    }
                }
                return result;
            }
            function min(items) {
                let result;
                for (let current of items) {
                    if (result === undefined) {
                        result = current;
                        continue;
                    }
                    let comparison = result.compareTo(current);
                    if (comparison > 0) {
                        result = current;
                    }
                }
                return result;
            }
            /** A tree structure used to record the semantic context in which
             *  an ATN configuration is valid.  It's either a single predicate,
             *  a conjunction `p1&&p2`, or a sum of products `p1||p2`.
             *
             *  I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
             *  {@link SemanticContext} within the scope of this outer class.
             */
            class SemanticContext {
                /**
                     * The default {@link SemanticContext}, which is semantically equivalent to
                     * a predicate of the form `{true}?`.
                     */
                static get NONE()
                {
                    if (SemanticContext._NONE === undefined) {
                        SemanticContext._NONE = new SemanticContext.Predicate();
                    }
                    return SemanticContext._NONE;
                }
                /**
                     * Evaluate the precedence predicates for the context and reduce the result.
                     *
                     * @param parser The parser instance.
                     * @param parserCallStack
                     * @returns The simplified semantic context after precedence predicates are
                     * evaluated, which will be one of the following values.
                     *
                     * * {@link #NONE}: if the predicate simplifies to `true` after
                     *   precedence predicates are evaluated.
                     * * `undefined`: if the predicate simplifies to `false` after
                     *   precedence predicates are evaluated.
                     * * `this`: if the semantic context is not changed as a result of
                     *   precedence predicate evaluation.
                     * * A non-`undefined` {@link SemanticContext}: the new simplified
                     *   semantic context after precedence predicates are evaluated.
                     */
                evalPrecedence(parser, parserCallStack)
                {
                    return this;
                }
                static and(a, b)
                {
                    if (!a || a === SemanticContext.NONE) {
                        return b;
                    }
                    if (b === SemanticContext.NONE) {
                        return a;
                    }
                    let result = new SemanticContext.AND(a, b);
                    if (result.opnds.length === 1) {
                        return result.opnds[0];
                    }
                    return result;
                }
                /**
                     *
                     *  @see ParserATNSimulator#getPredsForAmbigAlts
                     */
                static or(a, b)
                {
                    if (!a) {
                        return b;
                    }
                    if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
                        return SemanticContext.NONE;
                    }
                    let result = new SemanticContext.OR(a, b);
                    if (result.opnds.length === 1) {
                        return result.opnds[0];
                    }
                    return result;
                }
            }
            exports.SemanticContext = SemanticContext;
            (function(SemanticContext) {
                /**
                     * This random 30-bit prime represents the value of `AND.class.hashCode()`.
                     */
                const AND_HASHCODE = 40363613;
                /**
                     * This random 30-bit prime represents the value of `OR.class.hashCode()`.
                     */
                const OR_HASHCODE = 486279973;
                function filterPrecedencePredicates(collection) {
                    let result = [];
                    for (let i = 0; i < collection.length; i++) {
                        let context = collection[i];
                        if (context instanceof SemanticContext.PrecedencePredicate) {
                            result.push(context);
                            // Remove the item from 'collection' and move i back so we look at the same index again
                            collection.splice(i, 1);
                            i--;
                        }
                    }
                    return result;
                }
                class Predicate extends SemanticContext {
                    constructor(ruleIndex=-1, predIndex=-1, isCtxDependent=false)
                    {
                        super();
                        this.ruleIndex = ruleIndex;
                        this.predIndex = predIndex;
                        this.isCtxDependent = isCtxDependent;
                    }
                    eval(parser, parserCallStack)
                    {
                        let localctx = this.isCtxDependent ? parserCallStack : undefined;
                        return parser.sempred(localctx, this.ruleIndex, this.predIndex);
                    }
                    hashCode()
                    {
                        let hashCode = MurmurHash_1.MurmurHash.initialize();
                        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.ruleIndex);
                        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.predIndex);
                        hashCode = MurmurHash_1.MurmurHash.update(hashCode, this.isCtxDependent ? 1 : 0);
                        hashCode = MurmurHash_1.MurmurHash.finish(hashCode, 3);
                        return hashCode;
                    }
                    equals(obj)
                    {
                        if (!(obj instanceof Predicate)) {
                            return false;
                        }
                        if (this === obj) {
                            return true;
                        }
                        return this.ruleIndex === obj.ruleIndex &&
                            this.predIndex === obj.predIndex &&
                            this.isCtxDependent === obj.isCtxDependent;
                    }
                    toString()
                    {
                        return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
                    }
                }
                __decorate([
                Decorators_1.Override
                ], Predicate.prototype, "eval", null);
                __decorate([
                Decorators_1.Override
                ], Predicate.prototype, "hashCode", null);
                __decorate([
                Decorators_1.Override
                ], Predicate.prototype, "equals", null);
                __decorate([
                Decorators_1.Override
                ], Predicate.prototype, "toString", null);
                SemanticContext.Predicate = Predicate;
                class PrecedencePredicate extends SemanticContext {
                    constructor(precedence)
                    {
                        super();
                        this.precedence = precedence;
                    }
                    eval(parser, parserCallStack)
                    {
                        return parser.precpred(parserCallStack, this.precedence);
                    }
                    evalPrecedence(parser, parserCallStack)
                    {
                        if (parser.precpred(parserCallStack, this.precedence)) {
                            return SemanticContext.NONE;
                        }
                        else {
                            return undefined;
                        }
                    }
                    compareTo(o)
                    {
                        return this.precedence - o.precedence;
                    }
                    hashCode()
                    {
                        let hashCode = 1;
                        hashCode = 31 * hashCode + this.precedence;
                        return hashCode;
                    }
                    equals(obj)
                    {
                        if (!(obj instanceof PrecedencePredicate)) {
                            return false;
                        }
                        if (this === obj) {
                            return true;
                        }
                        return this.precedence === obj.precedence;
                    }
                    toString()
                    {
                        return "{" + this.precedence + ">=prec}?";
                    }
                }
                __decorate([
                Decorators_1.Override
                ], PrecedencePredicate.prototype, "eval", null);
                __decorate([
                Decorators_1.Override
                ], PrecedencePredicate.prototype, "evalPrecedence", null);
                __decorate([
                Decorators_1.Override
                ], PrecedencePredicate.prototype, "compareTo", null);
                __decorate([
                Decorators_1.Override
                ], PrecedencePredicate.prototype, "hashCode", null);
                __decorate([
                Decorators_1.Override
                ], PrecedencePredicate.prototype, "equals", null);
                __decorate([
                Decorators_1.Override

                ], // precedence >= _precedenceStack.peek()
                PrecedencePredicate.prototype, "toString", null);
                SemanticContext.PrecedencePredicate = PrecedencePredicate;
                /**
                     * This is the base class for semantic context "operators", which operate on
                     * a collection of semantic context "operands".
                     *
                     * @since 4.3
                     */
                class Operator extends SemanticContext {
                }
                SemanticContext.Operator = Operator;
                /**
                     * A semantic context which is true whenever none of the contained contexts
                     * is false.
                     */
                let AND = class AND extends Operator {
                    constructor(a, b)
                    {
                        super();
                        let operands = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
                        if (a instanceof AND) {
                            operands.addAll(a.opnds);
                        }
                        else {
                            operands.add(a);
                        }
                        if (b instanceof AND) {
                            operands.addAll(b.opnds);
                        }
                        else {
                            operands.add(b);
                        }
                        this.opnds = operands.toArray();
                        let precedencePredicates = filterPrecedencePredicates(this.opnds);
                        // interested in the transition with the lowest precedence
                        let reduced = min(precedencePredicates);
                        if (reduced) {
                            this.opnds.push(reduced);
                        }
                    }
                    get operands()
                    {
                        return this.opnds;
                    }
                    equals(obj)
                    {
                        if (this === obj) {
                            return true;
                        }
                        if (!(obj instanceof AND)) {
                            return false;
                        }
                        return ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this.opnds, obj.opnds);
                    }
                    hashCode()
                    {
                        return MurmurHash_1.MurmurHash.hashCode(this.opnds, AND_HASHCODE);
                    }
                    /**
                             * {@inheritDoc}
                             *
                             * The evaluation of predicates by this context is short-circuiting, but
                             * unordered.
                             */
                    eval(parser, parserCallStack)
                    {
                        for (let opnd of this.opnds) {
                            if (!opnd.eval(parser, parserCallStack)) {
                                return false;
                            }
                        }
                        return true;
                    }
                    evalPrecedence(parser, parserCallStack)
                    {
                        let differs = false;
                        let operands = [];
                        for (let context of this.opnds) {
                            let evaluated = context.evalPrecedence(parser, parserCallStack);
                            differs = differs || (evaluated !== context);
                            if (evaluated == null) {
                                // The AND context is false if any element is false
                                return undefined;
                            }
                            else if (evaluated !== SemanticContext.NONE) {
                                // Reduce the result by skipping true elements
                                operands.push(evaluated);
                            }
                        }
                        if (!differs) {
                            return this;
                        }
                        if (operands.length === 0) {
                            // all elements were true, so the AND context is true
                            return SemanticContext.NONE;
                        }
                        let result = operands[0];
                        for (let i = 1; i < operands.length; i++) {
                            result = SemanticContext.and(result, operands[i]);
                        }
                        return result;
                    }
                    toString()
                    {
                        return Utils.join(this.opnds, "&&");
                    }
                }
                ;
                __decorate([
                Decorators_1.Override
                ], AND.prototype, "operands", null);
                __decorate([
                Decorators_1.Override
                ], AND.prototype, "equals", null);
                __decorate([
                Decorators_1.Override
                ], AND.prototype, "hashCode", null);
                __decorate([
                Decorators_1.Override
                ], AND.prototype, "eval", null);
                __decorate([
                Decorators_1.Override
                ], AND.prototype, "evalPrecedence", null);
                __decorate([
                Decorators_1.Override
                ], AND.prototype, "toString", null);
                AND = __decorate([
                __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
                ], AND);
                SemanticContext.AND = AND;
                /**
                     * A semantic context which is true whenever at least one of the contained
                     * contexts is true.
                     */
                let OR = class OR extends Operator {
                    constructor(a, b)
                    {
                        super();
                        let operands = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
                        if (a instanceof OR) {
                            operands.addAll(a.opnds);
                        }
                        else {
                            operands.add(a);
                        }
                        if (b instanceof OR) {
                            operands.addAll(b.opnds);
                        }
                        else {
                            operands.add(b);
                        }
                        this.opnds = operands.toArray();
                        let precedencePredicates = filterPrecedencePredicates(this.opnds);
                        // interested in the transition with the highest precedence
                        let reduced = max(precedencePredicates);
                        if (reduced) {
                            this.opnds.push(reduced);
                        }
                    }
                    get operands()
                    {
                        return this.opnds;
                    }
                    equals(obj)
                    {
                        if (this === obj) {
                            return true;
                        }
                        if (!(obj instanceof OR)) {
                            return false;
                        }
                        return ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this.opnds, obj.opnds);
                    }
                    hashCode()
                    {
                        return MurmurHash_1.MurmurHash.hashCode(this.opnds, OR_HASHCODE);
                    }
                    /**
                             * {@inheritDoc}
                             *
                             * The evaluation of predicates by this context is short-circuiting, but
                             * unordered.
                             */
                    eval(parser, parserCallStack)
                    {
                        for (let opnd of this.opnds) {
                            if (opnd.eval(parser, parserCallStack)) {
                                return true;
                            }
                        }
                        return false;
                    }
                    evalPrecedence(parser, parserCallStack)
                    {
                        let differs = false;
                        let operands = [];
                        for (let context of this.opnds) {
                            let evaluated = context.evalPrecedence(parser, parserCallStack);
                            differs = differs || (evaluated !== context);
                            if (evaluated === SemanticContext.NONE) {
                                // The OR context is true if any element is true
                                return SemanticContext.NONE;
                            }
                            else if (evaluated) {
                                // Reduce the result by skipping false elements
                                operands.push(evaluated);
                            }
                        }
                        if (!differs) {
                            return this;
                        }
                        if (operands.length === 0) {
                            // all elements were false, so the OR context is false
                            return undefined;
                        }
                        let result = operands[0];
                        for (let i = 1; i < operands.length; i++) {
                            result = SemanticContext.or(result, operands[i]);
                        }
                        return result;
                    }
                    toString()
                    {
                        return Utils.join(this.opnds, "||");
                    }
                }
                ;
                __decorate([
                Decorators_1.Override
                ], OR.prototype, "operands", null);
                __decorate([
                Decorators_1.Override
                ], OR.prototype, "equals", null);
                __decorate([
                Decorators_1.Override
                ], OR.prototype, "hashCode", null);
                __decorate([
                Decorators_1.Override
                ], OR.prototype, "eval", null);
                __decorate([
                Decorators_1.Override
                ], OR.prototype, "evalPrecedence", null);
                __decorate([
                Decorators_1.Override
                ], OR.prototype, "toString", null);
                OR = __decorate([
                __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
                ], OR);
                SemanticContext.OR = OR;
            })(SemanticContext = exports.SemanticContext || (exports.SemanticContext = {}));

        }, {
            "../Decorators": 224,
            "../misc/Array2DHashSet": 322,
            "../misc/ArrayEqualityComparator": 323,
            "../misc/MurmurHash": 333,
            "../misc/ObjectEqualityComparator": 334,
            "../misc/Utils": 337
        }],
        307: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const IntervalSet_1 = require("../misc/IntervalSet");
            const Decorators_1 = require("../Decorators");
            const Token_1 = require("../Token");
            const Transition_1 = require("./Transition");
            /** A transition containing a set of values. */
            let SetTransition = class SetTransition extends Transition_1.Transition {
                // TODO (sam): should we really allow undefined here?
                constructor(target, set)
                {
                    super(target);
                    if (set == null) {
                        set = IntervalSet_1.IntervalSet.of(Token_1.Token.INVALID_TYPE);
                    }
                    this.set = set;
                }
                get serializationType()
                {
                    return 7 /* SET */
                    ;
                }
                get label()
                {
                    return this.set;
                }
                matches(symbol, minVocabSymbol, maxVocabSymbol)
                {
                    return this.set.contains(symbol);
                }
                toString()
                {
                    return this.set.toString();
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], SetTransition.prototype, "set", void 0);
            __decorate([
            Decorators_1.Override
            ], SetTransition.prototype, "serializationType", null);
            __decorate([
            Decorators_1.Override,
            Decorators_1.NotNull
            ], SetTransition.prototype, "label", null);
            __decorate([
            Decorators_1.Override
            ], SetTransition.prototype, "matches", null);
            __decorate([
            Decorators_1.Override,
            Decorators_1.NotNull
            ], SetTransition.prototype, "toString", null);
            SetTransition = __decorate([
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.Nullable)
            ], SetTransition);
            exports.SetTransition = SetTransition;

        }, {
            "../Decorators": 224,
            "../Token": 248,
            "../misc/IntervalSet": 331,
            "./Transition": 313
        }],
        308: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../Decorators");
            const ParserRuleContext_1 = require("../ParserRuleContext");
            /**
             *
             * @author Sam Harwell
             */
            let SimulatorState = class SimulatorState {
                constructor(outerContext, s0, useContext, remainingOuterContext)
                {
                    this.outerContext = outerContext != null ? outerContext : ParserRuleContext_1.ParserRuleContext.emptyContext();
                    this.s0 = s0;
                    this.useContext = useContext;
                    this.remainingOuterContext = remainingOuterContext;
                }
            }
            ;
            SimulatorState = __decorate([
            __param(1, Decorators_1.NotNull)
            ], SimulatorState);
            exports.SimulatorState = SimulatorState;

        }, {
            "../Decorators": 224,
            "../ParserRuleContext": 239
        }],
        309: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const ATNStateType_1 = require("./ATNStateType");
            const BlockStartState_1 = require("./BlockStartState");
            const Decorators_1 = require("../Decorators");
            /** The block that begins a closure loop. */
            class StarBlockStartState extends BlockStartState_1.BlockStartState {
                get stateType()
                {
                    return ATNStateType_1.ATNStateType.STAR_BLOCK_START;
                }
            }
            __decorate([
            Decorators_1.Override
            ], StarBlockStartState.prototype, "stateType", null);
            exports.StarBlockStartState = StarBlockStartState;

        }, {
            "../Decorators": 224,
            "./ATNStateType": 258,
            "./BlockStartState": 266
        }],
        310: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:37.7099201-07:00
            const ATNStateType_1 = require("./ATNStateType");
            const BitSet_1 = require("../misc/BitSet");
            const DecisionState_1 = require("./DecisionState");
            const Decorators_1 = require("../Decorators");
            class StarLoopEntryState extends DecisionState_1.DecisionState {
                constructor()
                {
                    super(...arguments);
                    /**
                             * Indicates whether this state can benefit from a precedence DFA during SLL
                             * decision making.
                             *
                             * This is a computed property that is calculated during ATN deserialization
                             * and stored for use in {@link ParserATNSimulator} and
                             * {@link ParserInterpreter}.
                             *
                             * @see `DFA.isPrecedenceDfa`
                             */
                    this.precedenceRuleDecision = false;
                    /**
                             * For precedence decisions, this set marks states *S* which have all
                             * of the following characteristics:
                             *
                             * * One or more invocation sites of the current rule returns to
                             *   *S*.
                             * * The closure from *S* includes the current decision without
                             *   passing through any rule invocations or stepping out of the current
                             *   rule.
                             *
                             * This field is not used when {@link #precedenceRuleDecision} is
                             * `false`.
                             */
                    this.precedenceLoopbackStates = new BitSet_1.BitSet();
                }
                get stateType()
                {
                    return ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY;
                }
            }
            __decorate([
            Decorators_1.Override
            ], StarLoopEntryState.prototype, "stateType", null);
            exports.StarLoopEntryState = StarLoopEntryState;

        }, {
            "../Decorators": 224,
            "../misc/BitSet": 325,
            "./ATNStateType": 258,
            "./DecisionState": 271
        }],
        311: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:37.6368726-07:00
            const ATNState_1 = require("./ATNState");
            const ATNStateType_1 = require("./ATNStateType");
            const Decorators_1 = require("../Decorators");
            class StarLoopbackState extends ATNState_1.ATNState {
                get loopEntryState()
                {
                    return this.transition(0).target;
                }
                get stateType()
                {
                    return ATNStateType_1.ATNStateType.STAR_LOOP_BACK;
                }
            }
            __decorate([
            Decorators_1.Override
            ], StarLoopbackState.prototype, "stateType", null);
            exports.StarLoopbackState = StarLoopbackState;

        }, {
            "../Decorators": 224,
            "./ATNState": 257,
            "./ATNStateType": 258
        }],
        312: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:37.7814046-07:00
            const ATNStateType_1 = require("./ATNStateType");
            const DecisionState_1 = require("./DecisionState");
            const Decorators_1 = require("../Decorators");
            /** The Tokens rule start state linking to each lexer rule start state */
            class TokensStartState extends DecisionState_1.DecisionState {
                get stateType()
                {
                    return ATNStateType_1.ATNStateType.TOKEN_START;
                }
            }
            __decorate([
            Decorators_1.Override
            ], TokensStartState.prototype, "stateType", null);
            exports.TokensStartState = TokensStartState;

        }, {
            "../Decorators": 224,
            "./ATNStateType": 258,
            "./DecisionState": 271
        }],
        313: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../Decorators");
            /** An ATN transition between any two ATN states.  Subclasses define
             *  atom, set, epsilon, action, predicate, rule transitions.
             *
             *  This is a one way link.  It emanates from a state (usually via a list of
             *  transitions) and has a target state.
             *
             *  Since we never have to change the ATN transitions once we construct it,
             *  we can fix these transitions as specific classes. The DFA transitions
             *  on the other hand need to update the labels as it adds transitions to
             *  the states. We'll use the term Edge for the DFA to distinguish them from
             *  ATN transitions.
             */
            let Transition = class Transition {
                constructor(target)
                {
                    if (target == null) {
                        throw new Error("target cannot be null.");
                    }
                    this.target = target;
                }
                /**
                     * Determines if the transition is an "epsilon" transition.
                     *
                     * The default implementation returns `false`.
                     *
                     * @returns `true` if traversing this transition in the ATN does not
                     * consume an input symbol; otherwise, `false` if traversing this
                     * transition consumes (matches) an input symbol.
                     */
                get isEpsilon()
                {
                    return false;
                }
                get label()
                {
                    return undefined;
                }
            }
            ;
            Transition.serializationNames = [
            "INVALID",
            "EPSILON",
            "RANGE",
            "RULE",
            "PREDICATE",
            "ATOM",
            "ACTION",
            "SET",
            "NOT_SET",
            "WILDCARD",
            "PRECEDENCE",
            ];
            __decorate([
            Decorators_1.NotNull
            ], Transition.prototype, "target", void 0);
            Transition = __decorate([
            __param(0, Decorators_1.NotNull)
            ], Transition);
            exports.Transition = Transition;

        }, {
            "../Decorators": 224
        }],
        314: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../Decorators");
            const Transition_1 = require("./Transition");
            let WildcardTransition = class WildcardTransition extends Transition_1.Transition {
                constructor(target)
                {
                    super(target);
                }
                get serializationType()
                {
                    return 9 /* WILDCARD */
                    ;
                }
                matches(symbol, minVocabSymbol, maxVocabSymbol)
                {
                    return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
                }
                toString()
                {
                    return ".";
                }
            }
            ;
            __decorate([
            Decorators_1.Override
            ], WildcardTransition.prototype, "serializationType", null);
            __decorate([
            Decorators_1.Override
            ], WildcardTransition.prototype, "matches", null);
            __decorate([
            Decorators_1.Override,
            Decorators_1.NotNull
            ], WildcardTransition.prototype, "toString", null);
            WildcardTransition = __decorate([
            __param(0, Decorators_1.NotNull)
            ], WildcardTransition);
            exports.WildcardTransition = WildcardTransition;

        }, {
            "../Decorators": 224,
            "./Transition": 313
        }],
        315: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * Stores information about a {@link DFAState} which is an accept state under
             * some condition. Certain settings, such as
             * {@link ParserATNSimulator#getPredictionMode()}, may be used in addition to
             * this information to determine whether or not a particular state is an accept
             * state.
             *
             * @author Sam Harwell
             */
            class AcceptStateInfo {
                constructor(prediction, lexerActionExecutor)
                {
                    this._prediction = prediction;
                    this._lexerActionExecutor = lexerActionExecutor;
                }
                /**
                     * Gets the prediction made by this accept state. Note that this value
                     * assumes the predicates, if any, in the {@link DFAState} evaluate to
                     * `true`. If predicate evaluation is enabled, the final prediction of
                     * the accept state will be determined by the result of predicate
                     * evaluation.
                     */
                get prediction()
                {
                    return this._prediction;
                }
                /**
                     * Gets the {@link LexerActionExecutor} which can be used to execute actions
                     * and/or commands after the lexer matches a token.
                     */
                get lexerActionExecutor()
                {
                    return this._lexerActionExecutor;
                }
            }
            exports.AcceptStateInfo = AcceptStateInfo;

        }, {}],
        316: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:38.3567094-07:00
            const Array2DHashSet_1 = require("../misc/Array2DHashSet");
            const ATNConfigSet_1 = require("../atn/ATNConfigSet");
            const DFASerializer_1 = require("./DFASerializer");
            const DFAState_1 = require("./DFAState");
            const LexerDFASerializer_1 = require("./LexerDFASerializer");
            const Decorators_1 = require("../Decorators");
            const ObjectEqualityComparator_1 = require("../misc/ObjectEqualityComparator");
            const StarLoopEntryState_1 = require("../atn/StarLoopEntryState");
            const VocabularyImpl_1 = require("../VocabularyImpl");
            let DFA = class DFA {
                constructor(atnStartState, decision=0)
                {
                    /**
                             * A set of all states in the `DFA`.
                             *
                             * Note that this collection of states holds the DFA states for both SLL and LL prediction. Only the start state
                             * needs to be differentiated for these cases, which is tracked by the `s0` and `s0full` fields.
                             */
                    this.states = new Array2DHashSet_1.Array2DHashSet(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);
                    this.nextStateNumber = 0;
                    if (!atnStartState.atn) {
                        throw new Error("The ATNState must be associated with an ATN");
                    }
                    this.atnStartState = atnStartState;
                    this.atn = atnStartState.atn;
                    this.decision = decision;
                    // Precedence DFAs are associated with the special precedence decision created for left-recursive rules which
                    // evaluate their alternatives using a precedence hierarchy. When such a decision is encountered, we mark this
                    // DFA instance as a precedence DFA and initialize the initial states s0 and s0full to special DFAState
                    // instances which use outgoing edges to link to the actual start state used for each precedence level.
                    let isPrecedenceDfa = false;
                    if (atnStartState instanceof StarLoopEntryState_1.StarLoopEntryState) {
                        if (atnStartState.precedenceRuleDecision) {
                            isPrecedenceDfa = true;
                            this.s0 = new DFAState_1.DFAState(new ATNConfigSet_1.ATNConfigSet());
                            this.s0full = new DFAState_1.DFAState(new ATNConfigSet_1.ATNConfigSet());
                        }
                    }
                    this.precedenceDfa = isPrecedenceDfa;
                }
                /**
                     * Gets whether this DFA is a precedence DFA. Precedence DFAs use a special
                     * start state {@link #s0} which is not stored in {@link #states}. The
                     * {@link DFAState#edges} array for this start state contains outgoing edges
                     * supplying individual start states corresponding to specific precedence
                     * values.
                     *
                     * @returns `true` if this is a precedence DFA; otherwise,
                     * `false`.
                     * @see Parser.precedence
                     */
                get isPrecedenceDfa()
                {
                    return this.precedenceDfa;
                }
                /**
                     * Get the start state for a specific precedence value.
                     *
                     * @param precedence The current precedence.
                     * @returns The start state corresponding to the specified precedence, or
                     * `undefined` if no start state exists for the specified precedence.
                     *
                     * @ if this is not a precedence DFA.
                     * @see `isPrecedenceDfa`
                     */
                getPrecedenceStartState(precedence, fullContext)
                {
                    if (!this.isPrecedenceDfa) {
                        throw new Error("Only precedence DFAs may contain a precedence start state.");
                    }
                    // s0 and s0full are never null for a precedence DFA
                    if (fullContext) {
                        return this.s0full.getTarget(precedence);
                    }
                    else {
                        return this.s0.getTarget(precedence);
                    }
                }
                /**
                     * Set the start state for a specific precedence value.
                     *
                     * @param precedence The current precedence.
                     * @param startState The start state corresponding to the specified
                     * precedence.
                     *
                     * @ if this is not a precedence DFA.
                     * @see `isPrecedenceDfa`
                     */
                setPrecedenceStartState(precedence, fullContext, startState)
                {
                    if (!this.isPrecedenceDfa) {
                        throw new Error("Only precedence DFAs may contain a precedence start state.");
                    }
                    if (precedence < 0) {
                        return;
                    }
                    if (fullContext) {
                        // s0full is never null for a precedence DFA
                        this.s0full.setTarget(precedence, startState);
                    }
                    else {
                        // s0 is never null for a precedence DFA
                        this.s0.setTarget(precedence, startState);
                    }
                }
                get isEmpty()
                {
                    if (this.isPrecedenceDfa) {
                        // s0 and s0full are never null for a precedence DFA
                        return this.s0.getEdgeMap().size === 0 && this.s0full.getEdgeMap().size === 0;
                    }
                    return this.s0 == null && this.s0full == null;
                }
                get isContextSensitive()
                {
                    if (this.isPrecedenceDfa) {
                        // s0full is never null for a precedence DFA
                        return this.s0full.getEdgeMap().size > 0;
                    }
                    return this.s0full != null;
                }
                addState(state)
                {
                    state.stateNumber = this.nextStateNumber++;
                    return this.states.getOrAdd(state);
                }
                toString(vocabulary, ruleNames)
                {
                    if (!vocabulary) {
                        vocabulary = VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY;
                    }
                    if (!this.s0) {
                        return "";
                    }
                    let serializer;
                    if (ruleNames) {
                        serializer = new DFASerializer_1.DFASerializer(this, vocabulary, ruleNames, this.atnStartState.atn);
                    }
                    else {
                        serializer = new DFASerializer_1.DFASerializer(this, vocabulary);
                    }
                    return serializer.toString();
                }
                toLexerString()
                {
                    if (!this.s0) {
                        return "";
                    }
                    let serializer = new LexerDFASerializer_1.LexerDFASerializer(this);
                    return serializer.toString();
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], DFA.prototype, "states", void 0);
            __decorate([
            Decorators_1.NotNull
            ], DFA.prototype, "atnStartState", void 0);
            __decorate([
            Decorators_1.NotNull
            ], DFA.prototype, "atn", void 0);
            DFA = __decorate([
            __param(0, Decorators_1.NotNull)
            ], DFA);
            exports.DFA = DFA;

        }, {
            "../Decorators": 224,
            "../VocabularyImpl": 250,
            "../atn/ATNConfigSet": 253,
            "../atn/StarLoopEntryState": 310,
            "../misc/Array2DHashSet": 322,
            "../misc/ObjectEqualityComparator": 334,
            "./DFASerializer": 317,
            "./DFAState": 318,
            "./LexerDFASerializer": 319
        }],
        317: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const ATNSimulator_1 = require("../atn/ATNSimulator");
            const Decorators_1 = require("../Decorators");
            const PredictionContext_1 = require("../atn/PredictionContext");
            const Recognizer_1 = require("../Recognizer");
            const VocabularyImpl_1 = require("../VocabularyImpl");
            /** A DFA walker that knows how to dump them to serialized strings. */
            class DFASerializer {
                constructor(dfa, vocabulary, ruleNames, atn)
                {
                    if (vocabulary instanceof Recognizer_1.Recognizer) {
                        ruleNames = vocabulary.ruleNames;
                        atn = vocabulary.atn;
                        vocabulary = vocabulary.vocabulary;
                    }
                    else if (!vocabulary) {
                        vocabulary = VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY;
                    }
                    this.dfa = dfa;
                    this.vocabulary = vocabulary;
                    this.ruleNames = ruleNames;
                    this.atn = atn;
                }
                toString()
                {
                    if (!this.dfa.s0) {
                        return "";
                    }
                    let buf = "";
                    if (this.dfa.states) {
                        let states = new Array(...this.dfa.states.toArray());
                        states.sort((o1, o2) => o1.stateNumber - o2.stateNumber);
                        for (let s of states) {
                            let edges = s.getEdgeMap();
                            let edgeKeys = [...edges.keys()].sort((a, b) => a - b);
                            let contextEdges = s.getContextEdgeMap();
                            let contextEdgeKeys = [...contextEdges.keys()].sort((a, b) => a - b);
                            for (let entry of edgeKeys) {
                                let value = edges.get(entry);
                                if ((value == null || value === ATNSimulator_1.ATNSimulator.ERROR) && !s.isContextSymbol(entry)) {
                                    continue;
                                }
                                let contextSymbol = false;
                                buf += (this.getStateString(s)) + ("-") + (this.getEdgeLabel(entry)) + ("->");
                                if (s.isContextSymbol(entry)) {
                                    buf += ("!");
                                    contextSymbol = true;
                                }
                                let t = value;
                                if (t && t.stateNumber !== ATNSimulator_1.ATNSimulator.ERROR.stateNumber) {
                                    buf += (this.getStateString(t)) + ("\n");
                                }
                                else if (contextSymbol) {
                                    buf += ("ctx\n");
                                }
                            }
                            if (s.isContextSensitive) {
                                for (let entry of contextEdgeKeys) {
                                    buf += (this.getStateString(s))
                                    + ("-")
                                    + (this.getContextLabel(entry))
                                    + ("->")
                                    + (this.getStateString(contextEdges.get(entry)))
                                    + ("\n");
                                }
                            }
                        }
                    }
                    let output = buf;
                    if (output.length === 0) {
                        return "";
                    }
                    //return Utils.sortLinesInString(output);
                    return output;
                }
                getContextLabel(i)
                {
                    if (i === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                        return "ctx:EMPTY_FULL";
                    }
                    else if (i === PredictionContext_1.PredictionContext.EMPTY_LOCAL_STATE_KEY) {
                        return "ctx:EMPTY_LOCAL";
                    }
                    if (this.atn && i > 0 && i <= this.atn.states.length) {
                        let state = this.atn.states[i];
                        let ruleIndex = state.ruleIndex;
                        if (this.ruleNames && ruleIndex >= 0 && ruleIndex < this.ruleNames.length) {
                            return "ctx:" + String(i) + "(" + this.ruleNames[ruleIndex] + ")";
                        }
                    }
                    return "ctx:" + String(i);
                }
                getEdgeLabel(i)
                {
                    return this.vocabulary.getDisplayName(i);
                }
                getStateString(s)
                {
                    if (s === ATNSimulator_1.ATNSimulator.ERROR) {
                        return "ERROR";
                    }
                    let n = s.stateNumber;
                    let stateStr = "s" + n;
                    if (s.isAcceptState) {
                        if (s.predicates) {
                            stateStr = ":s" + n + "=>" + s.predicates;
                        }
                        else {
                            stateStr = ":s" + n + "=>" + s.prediction;
                        }
                    }
                    if (s.isContextSensitive) {
                        stateStr += "*";
                        for (let config of s.configs) {
                            if (config.reachesIntoOuterContext) {
                                stateStr += "*";
                                break;
                            }
                        }
                    }
                    return stateStr;
                }
            }
            __decorate([
            Decorators_1.NotNull
            ], DFASerializer.prototype, "dfa", void 0);
            __decorate([
            Decorators_1.NotNull
            ], DFASerializer.prototype, "vocabulary", void 0);
            __decorate([
            Decorators_1.Override
            ], DFASerializer.prototype, "toString", null);
            exports.DFASerializer = DFASerializer;

        }, {
            "../Decorators": 224,
            "../Recognizer": 243,
            "../VocabularyImpl": 250,
            "../atn/ATNSimulator": 256,
            "../atn/PredictionContext": 298
        }],
        318: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const ATN_1 = require("../atn/ATN");
            const BitSet_1 = require("../misc/BitSet");
            const MurmurHash_1 = require("../misc/MurmurHash");
            const Decorators_1 = require("../Decorators");
            const PredictionContext_1 = require("../atn/PredictionContext");
            const assert = require("assert");
            /** A DFA state represents a set of possible ATN configurations.
             *  As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
             *  to keep track of all possible states the ATN can be in after
             *  reading each input symbol.  That is to say, after reading
             *  input a1a2..an, the DFA is in a state that represents the
             *  subset T of the states of the ATN that are reachable from the
             *  ATN's start state along some path labeled a1a2..an."
             *  In conventional NFA&rarr;DFA conversion, therefore, the subset T
             *  would be a bitset representing the set of states the
             *  ATN could be in.  We need to track the alt predicted by each
             *  state as well, however.  More importantly, we need to maintain
             *  a stack of states, tracking the closure operations as they
             *  jump from rule to rule, emulating rule invocations (method calls).
             *  I have to add a stack to simulate the proper lookahead sequences for
             *  the underlying LL grammar from which the ATN was derived.
             *
             *  I use a set of ATNConfig objects not simple states.  An ATNConfig
             *  is both a state (ala normal conversion) and a RuleContext describing
             *  the chain of rules (if any) followed to arrive at that state.
             *
             *  A DFA state may have multiple references to a particular state,
             *  but with different ATN contexts (with same or different alts)
             *  meaning that state was reached via a different set of rule invocations.
             */
            class DFAState {
                /**
                     * Constructs a new `DFAState`.
                     *
                     * @param configs The set of ATN configurations defining this state.
                     */
                constructor(configs)
                {
                    this.stateNumber = -1;
                    this.configs = configs;
                    this.edges = new Map();
                    this.contextEdges = new Map();
                }
                get isContextSensitive()
                {
                    return !!this.contextSymbols;
                }
                isContextSymbol(symbol)
                {
                    if (!this.isContextSensitive) {
                        return false;
                    }
                    return this.contextSymbols.get(symbol);
                }
                setContextSymbol(symbol)
                {
                    assert(this.isContextSensitive);
                    this.contextSymbols.set(symbol);
                }
                setContextSensitive(atn)
                {
                    assert(!this.configs.isOutermostConfigSet);
                    if (this.isContextSensitive) {
                        return;
                    }
                    if (!this.contextSymbols) {
                        this.contextSymbols = new BitSet_1.BitSet();
                    }
                }
                get acceptStateInfo()
                {
                    return this._acceptStateInfo;
                }
                set acceptStateInfo(acceptStateInfo)
                {
                    this._acceptStateInfo = acceptStateInfo;
                }
                get isAcceptState()
                {
                    return !!this._acceptStateInfo;
                }
                get prediction()
                {
                    if (!this._acceptStateInfo) {
                        return ATN_1.ATN.INVALID_ALT_NUMBER;
                    }
                    return this._acceptStateInfo.prediction;
                }
                get lexerActionExecutor()
                {
                    if (!this._acceptStateInfo) {
                        return undefined;
                    }
                    return this._acceptStateInfo.lexerActionExecutor;
                }
                getTarget(symbol)
                {
                    return this.edges.get(symbol);
                }
                setTarget(symbol, target)
                {
                    this.edges.set(symbol, target);
                }
                getEdgeMap()
                {
                    return this.edges;
                }
                getContextTarget(invokingState)
                {
                    if (invokingState === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                        invokingState = -1;
                    }
                    return this.contextEdges.get(invokingState);
                }
                setContextTarget(invokingState, target)
                {
                    if (!this.isContextSensitive) {
                        throw new Error("The state is not context sensitive.");
                    }
                    if (invokingState === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {
                        invokingState = -1;
                    }
                    this.contextEdges.set(invokingState, target);
                }
                getContextEdgeMap()
                {
                    let map = new Map(this.contextEdges);
                    let existing = map.get(-1);
                    if (existing !== undefined) {
                        if (map.size === 1) {
                            let result = new Map();
                            result.set(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY, existing);
                            return result;
                        }
                        else {
                            map.delete(-1);
                            map.set(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY, existing);
                        }
                    }
                    return map;
                }
                hashCode()
                {
                    let hash = MurmurHash_1.MurmurHash.initialize(7);
                    hash = MurmurHash_1.MurmurHash.update(hash, this.configs.hashCode());
                    hash = MurmurHash_1.MurmurHash.finish(hash, 1);
                    return hash;
                }
                /**
                     * Two {@link DFAState} instances are equal if their ATN configuration sets
                     * are the same. This method is used to see if a state already exists.
                     *
                     * Because the number of alternatives and number of ATN configurations are
                     * finite, there is a finite number of DFA states that can be processed.
                     * This is necessary to show that the algorithm terminates.
                     *
                     * Cannot test the DFA state numbers here because in
                     * {@link ParserATNSimulator#addDFAState} we need to know if any other state
                     * exists that has this exact set of ATN configurations. The
                     * {@link #stateNumber} is irrelevant.
                     */
                equals(o)
                {
                    // compare set of ATN configurations in this set with other
                    if (this === o) {
                        return true;
                    }
                    if (!(o instanceof DFAState)) {
                        return false;
                    }
                    let other = o;
                    let sameSet = this.configs.equals(other.configs);
                    //    System.out.println("DFAState.equals: "+configs+(sameSet?"==":"!=")+other.configs);
                    return sameSet;
                }
                toString()
                {
                    let buf = "";
                    buf += (this.stateNumber) + (":") + (this.configs);
                    if (this.isAcceptState) {
                        buf += ("=>");
                        if (this.predicates) {
                            buf += this.predicates;
                        }
                        else {
                            buf += (this.prediction);
                        }
                    }
                    return buf.toString();
                }
            }
            __decorate([
            Decorators_1.NotNull
            ], DFAState.prototype, "configs", void 0);
            __decorate([
            Decorators_1.NotNull
            ], DFAState.prototype, "edges", void 0);
            __decorate([
            Decorators_1.NotNull
            ], DFAState.prototype, "contextEdges", void 0);
            __decorate([
            Decorators_1.Override
            ], DFAState.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], DFAState.prototype, "equals", null);
            __decorate([
            Decorators_1.Override
            ], DFAState.prototype, "toString", null);
            exports.DFAState = DFAState;
            (function(DFAState) {
                /** Map a predicate to a predicted alternative. */
                let PredPrediction = class PredPrediction {
                    constructor(pred, alt)
                    {
                        this.alt = alt;
                        this.pred = pred;
                    }
                    toString()
                    {
                        return "(" + this.pred + ", " + this.alt + ")";
                    }
                }
                ;
                __decorate([
                Decorators_1.NotNull
                ], PredPrediction.prototype, "pred", void 0);
                __decorate([
                Decorators_1.Override
                ], PredPrediction.prototype, "toString", null);
                PredPrediction = __decorate([
                __param(0, Decorators_1.NotNull)
                ], PredPrediction);
                DFAState.PredPrediction = PredPrediction;
            })(DFAState = exports.DFAState || (exports.DFAState = {}));

        }, {
            "../Decorators": 224,
            "../atn/ATN": 251,
            "../atn/PredictionContext": 298,
            "../misc/BitSet": 325,
            "../misc/MurmurHash": 333,
            "assert": 364
        }],
        319: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const DFASerializer_1 = require("./DFASerializer");
            const Decorators_1 = require("../Decorators");
            const VocabularyImpl_1 = require("../VocabularyImpl");
            let LexerDFASerializer = class LexerDFASerializer extends DFASerializer_1.DFASerializer {
                constructor(dfa)
                {
                    super(dfa, VocabularyImpl_1.VocabularyImpl.EMPTY_VOCABULARY);
                }
                getEdgeLabel(i)
                {
                    return "'" + String.fromCodePoint(i) + "'";
                }
            }
            ;
            __decorate([
            Decorators_1.Override,
            Decorators_1.NotNull
            ], LexerDFASerializer.prototype, "getEdgeLabel", null);
            LexerDFASerializer = __decorate([
            __param(0, Decorators_1.NotNull)
            ], LexerDFASerializer);
            exports.LexerDFASerializer = LexerDFASerializer;

        }, {
            "../Decorators": 224,
            "../VocabularyImpl": 250,
            "./DFASerializer": 317
        }],
        320: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            function __export(m) {
                for (var p in m)
                    if (!exports.hasOwnProperty(p))
                        exports[p] = m[p];
            }
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // export * from "./ANTLRFileStream";
            __export(require("./ANTLRInputStream"));
            __export(require("./BailErrorStrategy"));
            __export(require("./BufferedTokenStream"));
            __export(require("./CharStreams"));
            __export(require("./CodePointBuffer"));
            __export(require("./CodePointCharStream"));
            __export(require("./CommonToken"));
            __export(require("./CommonTokenFactory"));
            __export(require("./CommonTokenStream"));
            __export(require("./ConsoleErrorListener"));
            __export(require("./DefaultErrorStrategy"));
            __export(require("./Dependents"));
            __export(require("./DiagnosticErrorListener"));
            __export(require("./FailedPredicateException"));
            __export(require("./InputMismatchException"));
            __export(require("./InterpreterRuleContext"));
            __export(require("./IntStream"));
            __export(require("./Lexer"));
            __export(require("./LexerInterpreter"));
            __export(require("./LexerNoViableAltException"));
            __export(require("./ListTokenSource"));
            __export(require("./NoViableAltException"));
            __export(require("./Parser"));
            __export(require("./ParserInterpreter"));
            __export(require("./ParserRuleContext"));
            __export(require("./ProxyErrorListener"));
            __export(require("./ProxyParserErrorListener"));
            __export(require("./RecognitionException"));
            __export(require("./Recognizer"));
            __export(require("./RuleContext"));
            __export(require("./RuleContextWithAltNum"));
            __export(require("./RuleDependency"));
            __export(require("./RuleVersion"));
            __export(require("./Token"));
            __export(require("./TokenStreamRewriter"));
            __export(require("./VocabularyImpl"));

        }, {
            "./ANTLRInputStream": 214,
            "./BailErrorStrategy": 215,
            "./BufferedTokenStream": 216,
            "./CharStreams": 217,
            "./CodePointBuffer": 218,
            "./CodePointCharStream": 219,
            "./CommonToken": 220,
            "./CommonTokenFactory": 221,
            "./CommonTokenStream": 222,
            "./ConsoleErrorListener": 223,
            "./DefaultErrorStrategy": 225,
            "./Dependents": 226,
            "./DiagnosticErrorListener": 227,
            "./FailedPredicateException": 228,
            "./InputMismatchException": 229,
            "./IntStream": 230,
            "./InterpreterRuleContext": 231,
            "./Lexer": 232,
            "./LexerInterpreter": 233,
            "./LexerNoViableAltException": 234,
            "./ListTokenSource": 235,
            "./NoViableAltException": 236,
            "./Parser": 237,
            "./ParserInterpreter": 238,
            "./ParserRuleContext": 239,
            "./ProxyErrorListener": 240,
            "./ProxyParserErrorListener": 241,
            "./RecognitionException": 242,
            "./Recognizer": 243,
            "./RuleContext": 244,
            "./RuleContextWithAltNum": 245,
            "./RuleDependency": 246,
            "./RuleVersion": 247,
            "./Token": 248,
            "./TokenStreamRewriter": 249,
            "./VocabularyImpl": 250
        }],
        321: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Array2DHashSet_1 = require("./Array2DHashSet");
            class MapKeyEqualityComparator {
                constructor(keyComparator)
                {
                    this.keyComparator = keyComparator;
                }
                hashCode(obj)
                {
                    return this.keyComparator.hashCode(obj.key);
                }
                equals(a, b)
                {
                    return this.keyComparator.equals(a.key, b.key);
                }
            }
            class Array2DHashMap {
                constructor(keyComparer)
                {
                    if (keyComparer instanceof Array2DHashMap) {
                        this.backingStore = new Array2DHashSet_1.Array2DHashSet(keyComparer.backingStore);
                    }
                    else {
                        this.backingStore = new Array2DHashSet_1.Array2DHashSet(new MapKeyEqualityComparator(keyComparer));
                    }
                }
                clear()
                {
                    this.backingStore.clear();
                }
                containsKey(key)
                {
                    return this.backingStore.contains({
                        key
                    });
                }
                get(key)
                {
                    let bucket = this.backingStore.get({
                        key
                    });
                    if (!bucket) {
                        return undefined;
                    }
                    return bucket.value;
                }
                get isEmpty()
                {
                    return this.backingStore.isEmpty;
                }
                put(key, value)
                {
                    let element = this.backingStore.get({
                        key,
                        value
                    });
                    let result;
                    if (!element) {
                        this.backingStore.add({
                            key,
                            value
                        });
                    }
                    else {
                        result = element.value;
                        element.value = value;
                    }
                    return result;
                }
                putIfAbsent(key, value)
                {
                    let element = this.backingStore.get({
                        key,
                        value
                    });
                    let result;
                    if (!element) {
                        this.backingStore.add({
                            key,
                            value
                        });
                    }
                    else {
                        result = element.value;
                    }
                    return result;
                }
                get size()
                {
                    return this.backingStore.size;
                }
                hashCode()
                {
                    return this.backingStore.hashCode();
                }
                equals(o)
                {
                    if (!(o instanceof Array2DHashMap)) {
                        return false;
                    }
                    return this.backingStore.equals(o.backingStore);
                }
            }
            exports.Array2DHashMap = Array2DHashMap;

        }, {
            "./Array2DHashSet": 322
        }],
        322: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-03T02:09:41.7434086-07:00
            const assert = require("assert");
            const DefaultEqualityComparator_1 = require("./DefaultEqualityComparator");
            const Decorators_1 = require("../Decorators");
            const MurmurHash_1 = require("./MurmurHash");
            /** {@link Set} implementation with closed hashing (open addressing). */
            // NOTE:  JavaScript's Set interface has on significant different diffrence from Java's:
            //      e.g. the return type of add() differs!
            //        For this reason I've commented tweaked the implements clause
            const INITAL_CAPACITY = 16; // must be power of 2
            const LOAD_FACTOR = 0.75;
            class Array2DHashSet {
                constructor(comparatorOrSet, initialCapacity=INITAL_CAPACITY)
                {
                    /** How many elements in set */
                    this.n = 0;
                    this.threshold = Math.floor(INITAL_CAPACITY * LOAD_FACTOR); // when to expand
                    if (comparatorOrSet instanceof Array2DHashSet) {
                        this.comparator = comparatorOrSet.comparator;
                        this.buckets = comparatorOrSet.buckets.slice(0);
                        for (let i = 0; i < this.buckets.length; i++) {
                            let bucket = this.buckets[i];
                            if (bucket) {
                                this.buckets[i] = bucket.slice(0);
                            }
                        }
                        this.n = comparatorOrSet.n;
                        this.threshold = comparatorOrSet.threshold;
                    }
                    else {
                        this.comparator = comparatorOrSet || DefaultEqualityComparator_1.DefaultEqualityComparator.INSTANCE;
                        this.buckets = this.createBuckets(initialCapacity);
                    }
                }
                /**
                     * Add `o` to set if not there; return existing value if already
                     * there. This method performs the same operation as {@link #add} aside from
                     * the return value.
                     */
                getOrAdd(o)
                {
                    if (this.n > this.threshold) {
                        this.expand();
                    }
                    return this.getOrAddImpl(o);
                }
                getOrAddImpl(o)
                {
                    let b = this.getBucket(o);
                    let bucket = this.buckets[b];
                    // NEW BUCKET
                    if (!bucket) {
                        bucket = [o];
                        this.buckets[b] = bucket;
                        this.n++;
                        return o;
                    }
                    // LOOK FOR IT IN BUCKET
                    for (let existing of bucket) {
                        if (this.comparator.equals(existing, o)) {
                            return existing; // found existing, quit
                        }
                    }
                    // FULL BUCKET, expand and add to end
                    bucket.push(o);
                    this.n++;
                    return o;
                }
                get(o)
                {
                    if (o == null) {
                        return o;
                    }
                    let b = this.getBucket(o);
                    let bucket = this.buckets[b];
                    if (!bucket) {
                        // no bucket
                        return undefined;
                    }
                    for (let e of bucket) {
                        if (this.comparator.equals(e, o)) {
                            return e;
                        }
                    }
                    return undefined;
                }
                getBucket(o)
                {
                    let hash = this.comparator.hashCode(o);
                    let b = hash & (this.buckets.length - 1); // assumes len is power of 2
                    return b;
                }
                hashCode()
                {
                    let hash = MurmurHash_1.MurmurHash.initialize();
                    for (let bucket of this.buckets) {
                        if (bucket == null) {
                            continue;
                        }
                        for (let o of bucket) {
                            if (o == null) {
                                break;
                            }
                            hash = MurmurHash_1.MurmurHash.update(hash, this.comparator.hashCode(o));
                        }
                    }
                    hash = MurmurHash_1.MurmurHash.finish(hash, this.size);
                    return hash;
                }
                equals(o)
                {
                    if (o === this) {
                        return true;
                    }
                    if (!(o instanceof Array2DHashSet)) {
                        return false;
                    }
                    if (o.size !== this.size) {
                        return false;
                    }
                    let same = this.containsAll(o);
                    return same;
                }
                expand()
                {
                    let old = this.buckets;
                    let newCapacity = this.buckets.length * 2;
                    let newTable = this.createBuckets(newCapacity);
                    this.buckets = newTable;
                    this.threshold = Math.floor(newCapacity * LOAD_FACTOR);
                    //    System.out.println("new size="+newCapacity+", thres="+threshold);
                    // rehash all existing entries
                    let oldSize = this.size;
                    for (let bucket of old) {
                        if (!bucket) {
                            continue;
                        }
                        for (let o of bucket) {
                            let b = this.getBucket(o);
                            let newBucket = this.buckets[b];
                            if (!newBucket) {
                                newBucket = [];
                                this.buckets[b] = newBucket;
                            }
                            newBucket.push(o);
                        }
                    }
                    assert(this.n === oldSize);
                }
                add(t)
                {
                    let existing = this.getOrAdd(t);
                    return existing === t;
                }
                get size()
                {
                    return this.n;
                }
                get isEmpty()
                {
                    return this.n === 0;
                }
                contains(o)
                {
                    return this.containsFast(this.asElementType(o));
                }
                containsFast(obj)
                {
                    if (obj == null) {
                        return false;
                    }
                    return this.get(obj) != null;
                }
                *[Symbol.iterator]()
                {
                    yield *this.toArray();
                }
                toArray()
                {
                    const a = new Array(this.size);
                    // Copy elements from the nested arrays into the destination array
                    let i = 0; // Position within destination array
                    for (let bucket of this.buckets) {
                        if (bucket == null) {
                            continue;
                        }
                        for (let o of bucket) {
                            if (o == null) {
                                break;
                            }
                            a[i++] = o;
                        }
                    }
                    return a;
                }
                containsAll(collection)
                {
                    if (collection instanceof Array2DHashSet) {
                        let s = collection;
                        for (let bucket of s.buckets) {
                            if (bucket == null) {
                                continue;
                            }
                            for (let o of bucket) {
                                if (o == null) {
                                    break;
                                }
                                if (!this.containsFast(this.asElementType(o))) {
                                    return false;
                                }
                            }
                        }
                    }
                    else {
                        for (let o of collection) {
                            if (!this.containsFast(this.asElementType(o))) {
                                return false;
                            }
                        }
                    }
                    return true;
                }
                addAll(c)
                {
                    let changed = false;
                    for (let o of c) {
                        let existing = this.getOrAdd(o);
                        if (existing !== o) {
                            changed = true;
                        }
                    }
                    return changed;
                }
                clear()
                {
                    this.buckets = this.createBuckets(INITAL_CAPACITY);
                    this.n = 0;
                    this.threshold = Math.floor(INITAL_CAPACITY * LOAD_FACTOR);
                }
                toString()
                {
                    if (this.size === 0) {
                        return "{}";
                    }
                    let buf = "{";
                    let first = true;
                    for (let bucket of this.buckets) {
                        if (bucket == null) {
                            continue;
                        }
                        for (let o of bucket) {
                            if (o == null) {
                                break;
                            }
                            if (first) {
                                first = false;
                            }
                            else {
                                buf += ", ";
                            }
                            buf += o.toString();
                        }
                    }
                    buf += "}";
                    return buf;
                }
                toTableString()
                {
                    let buf = "";
                    for (let bucket of this.buckets) {
                        if (bucket == null) {
                            buf += "null\n";
                            continue;
                        }
                        buf += "[";
                        let first = true;
                        for (let o of bucket) {
                            if (first) {
                                first = false;
                            }
                            else {
                                buf += " ";
                            }
                            if (o == null) {
                                buf += "_";
                            }
                            else {
                                buf += o.toString();
                            }
                        }
                        buf += "]\n";
                    }
                    return buf;
                }
                /**
                     * Return `o` as an instance of the element type `T`. If
                     * `o` is non-undefined but known to not be an instance of `T`, this
                     * method returns `undefined`. The base implementation does not perform any
                     * type checks; override this method to provide strong type checks for the
                     * {@link #contains} and {@link #remove} methods to ensure the arguments to
                     * the {@link EqualityComparator} for the set always have the expected
                     * types.
                     *
                     * @param o the object to try and cast to the element type of the set
                     * @returns `o` if it could be an instance of `T`, otherwise
                     * `undefined`.
                     */
                asElementType(o)
                {
                    return o;
                }
                /**
                     * Return an array of `T[]` with length `capacity`.
                     *
                     * @param capacity the length of the array to return
                     * @returns the newly constructed array
                     */
                createBuckets(capacity)
                {
                    return new Array(capacity);
                }
            }
            __decorate([
            Decorators_1.NotNull
            ], Array2DHashSet.prototype, "comparator", void 0);
            __decorate([
            Decorators_1.Override
            ], Array2DHashSet.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], Array2DHashSet.prototype, "equals", null);
            __decorate([
            Decorators_1.Override
            ], Array2DHashSet.prototype, "add", null);
            __decorate([
            Decorators_1.Override
            ], Array2DHashSet.prototype, "size", null);
            __decorate([
            Decorators_1.Override
            ], Array2DHashSet.prototype, "isEmpty", null);
            __decorate([
            Decorators_1.Override
            ], Array2DHashSet.prototype, "contains", null);
            __decorate([
            __param(0, Decorators_1.Nullable)
            ], Array2DHashSet.prototype, "containsFast", null);
            __decorate([
            Decorators_1.Override
            ], Array2DHashSet.prototype, Symbol.iterator, null);
            __decorate([
            Decorators_1.Override
            ], Array2DHashSet.prototype, "toArray", null);
            __decorate([
            Decorators_1.Override
            ], Array2DHashSet.prototype, "containsAll", null);
            __decorate([
            Decorators_1.Override
            ], Array2DHashSet.prototype, "addAll", null);
            __decorate([
            Decorators_1.Override
            ], Array2DHashSet.prototype, "clear", null);
            __decorate([
            Decorators_1.Override
            ], Array2DHashSet.prototype, "toString", null);
            __decorate([
            Decorators_1.SuppressWarnings("unchecked")
            ], Array2DHashSet.prototype, "asElementType", null);
            __decorate([
            Decorators_1.SuppressWarnings("unchecked")
            ], Array2DHashSet.prototype, "createBuckets", null);
            exports.Array2DHashSet = Array2DHashSet;

        }, {
            "../Decorators": 224,
            "./DefaultEqualityComparator": 327,
            "./MurmurHash": 333,
            "assert": 364
        }],
        323: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../Decorators");
            const MurmurHash_1 = require("./MurmurHash");
            const ObjectEqualityComparator_1 = require("./ObjectEqualityComparator");
            /**
             * This default implementation of {@link EqualityComparator} uses object equality
             * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.
             *
             * @author Sam Harwell
             */
            class ArrayEqualityComparator {
                /**
                     * {@inheritDoc}
                     *
                     * This implementation returns
                     * `obj.`{@link Object#hashCode hashCode()}.
                     */
                hashCode(obj)
                {
                    if (obj == null) {
                        return 0;
                    }
                    return MurmurHash_1.MurmurHash.hashCode(obj, 0);
                }
                /**
                     * {@inheritDoc}
                     *
                     * This implementation relies on object equality. If both objects are
                     * `undefined`, this method returns `true`. Otherwise if only
                     * `a` is `undefined`, this method returns `false`. Otherwise,
                     * this method returns the result of
                     * `a.`{@link Object#equals equals}`(b)`.
                     */
                equals(a, b)
                {
                    if (a == null) {
                        return b == null;
                    }
                    else if (b == null) {
                        return false;
                    }
                    if (a.length !== b.length) {
                        return false;
                    }
                    for (let i = 0; i < a.length; i++) {
                        if (!ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(a[i], b[i])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            ArrayEqualityComparator.INSTANCE = new ArrayEqualityComparator();
            __decorate([
            Decorators_1.Override
            ], ArrayEqualityComparator.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], ArrayEqualityComparator.prototype, "equals", null);
            exports.ArrayEqualityComparator = ArrayEqualityComparator;

        }, {
            "../Decorators": 224,
            "./MurmurHash": 333,
            "./ObjectEqualityComparator": 334
        }],
        324: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var Arrays;
            (function(Arrays) {
                /**
                     * Searches the specified array of numbers for the specified value using the binary search algorithm. The array must
                     * be sorted prior to making this call. If it is not sorted, the results are unspecified. If the array contains
                     * multiple elements with the specified value, there is no guarantee which one will be found.
                     *
                     * @returns index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The
                     * insertion point is defined as the point at which the key would be inserted into the array: the index of the first
                     * element greater than the key, or array.length if all elements in the array are less than the specified key. Note
                     * that this guarantees that the return value will be >= 0 if and only if the key is found.
                     */
                function binarySearch(array, key, fromIndex, toIndex) {
                    return binarySearch0(array, fromIndex !== undefined ? fromIndex : 0, toIndex !== undefined ? toIndex : array.length, key);
                }
                Arrays.binarySearch = binarySearch;
                function binarySearch0(array, fromIndex, toIndex, key) {
                    let low = fromIndex;
                    let high = toIndex - 1;
                    while (low <= high) {
                        let mid = (low + high) >>> 1;
                        let midVal = array[mid];
                        if (midVal < key) {
                            low = mid + 1;
                        }
                        else if (midVal > key) {
                            high = mid - 1;
                        }
                        else {
                            // key found
                            return mid;
                        }
                    }
                    // key not found.
                    return -(low + 1);
                }
                function toString(array) {
                    let result = "[";
                    let first = true;
                    for (let element of array) {
                        if (first) {
                            first = false;
                        }
                        else {
                            result += ", ";
                        }
                        if (element === null) {
                            result += "null";
                        }
                        else if (element === undefined) {
                            result += "undefined";
                        }
                        else {
                            result += element;
                        }
                    }
                    result += "]";
                    return result;
                }
                Arrays.toString = toString;
            })(Arrays = exports.Arrays || (exports.Arrays = {}));

        }, {}],
        325: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const util = require("util");
            const MurmurHash_1 = require("./MurmurHash");
            /**
             * Private empty array used to construct empty BitSets
             */
            const EMPTY_DATA = new Uint16Array(0);
            /**
             * Gets the word index of the `UInt16` element in `BitSet.data` containing the bit with the specified index.
             */
            function getIndex(bitNumber) {
                return bitNumber >>> 4;
            }
            /**
             * Convert a word index into the bit index of the LSB of that word
             */
            function unIndex(n) {
                return n * 16;
            }
            /**
             * Get's the bit number of the least signficant bit set LSB which is set in a word non-zero word;
             * Bit numbers run from LSB to MSB starting with 0.
             */
            function findLSBSet(word) {
                let bit = 1;
                for (let i = 0; i < 16; i++) {
                    if ((word & bit) !== 0) {
                        return i;
                    }
                    bit = (bit << 1) >>> 0;
                }
                throw new RangeError("No specified bit found");
            }
            function findMSBSet(word) {
                let bit = (1 << 15) >>> 0;
                for (let i = 15; i >= 0; i--) {
                    if ((word & bit) !== 0) {
                        return i;
                    }
                    bit = bit >>> 1;
                }
                throw new RangeError("No specified bit found");
            }
            /**
             * Gets a 16-bit mask with bit numbers fromBit to toBit (inclusive) set.
             * Bit numbers run from LSB to MSB starting with 0.
             */
            function bitsFor(fromBit, toBit) {
                fromBit &= 0xF;
                toBit &= 0xF;
                if (fromBit === toBit) {
                    return (1 << fromBit) >>> 0;
                }
                return ( (0xFFFF >>> (15 - toBit)) ^ (0xFFFF >>> (16 - fromBit))) ;
            }
            /**
             * A lookup table for number of set bits in a 16-bit integer.   This is used to quickly count the cardinality (number of unique elements) of a BitSet.
             */
            const POP_CNT = new Uint8Array(65536);
            for (let i = 0; i < 16; i++) {
                const stride = (1 << i) >>> 0;
                let index = 0;
                while (index < POP_CNT.length) {
                    // skip the numbers where the bit isn't set
                    index += stride;
                    // increment the ones where the bit is set
                    for (let j = 0; j < stride; j++) {
                        POP_CNT[index]++;
                        index++;
                    }
                }
            }
            class BitSet {
                /*
                    ** constructor implementation
                    */
                constructor(arg)
                {
                    if (!arg) {
                        // covering the case of unspecified and nbits===0
                        this.data = EMPTY_DATA;
                    }
                    else if (typeof arg === "number") {
                        if (arg < 0) {
                            throw new RangeError("nbits cannot be negative");
                        }
                        else {
                            this.data = new Uint16Array(getIndex(arg - 1) + 1);
                        }
                    }
                    else {
                        if (arg instanceof BitSet) {
                            this.data = arg.data.slice(0); // Clone the data
                        }
                        else {
                            let max = -1;
                            for (let v of arg) {
                                if (max < v) {
                                    max = v;
                                }
                            }
                            this.data = new Uint16Array(getIndex(max - 1) + 1);
                            for (let v of arg) {
                                this.set(v);
                            }
                        }
                    }
                }
                /**
                     * Performs a logical **AND** of this target bit set with the argument bit set. This bit set is modified so that
                     * each bit in it has the value `true` if and only if it both initially had the value `true` and the corresponding
                     * bit in the bit set argument also had the value `true`.
                     */
                and(set)
                {
                    const data = this.data;
                    const other = set.data;
                    const words = Math.min(data.length, other.length);
                    let lastWord = -1; // Keep track of index of last non-zero word
                    for (let i = 0; i < words; i++) {
                        let value = data[i] &= other[i];
                        if (value !== 0) {
                            lastWord = i;
                        }
                    }
                    if (lastWord === -1) {
                        this.data = EMPTY_DATA;
                    }
                    if (lastWord < data.length - 1) {
                        this.data = data.slice(0, lastWord + 1);
                    }
                }
                /**
                     * Clears all of the bits in this `BitSet` whose corresponding bit is set in the specified `BitSet`.
                     */
                andNot(set)
                {
                    const data = this.data;
                    const other = set.data;
                    const words = Math.min(data.length, other.length);
                    let lastWord = -1; // Keep track of index of last non-zero word
                    for (let i = 0; i < words; i++) {
                        let value = data[i] &= (other[i] ^ 0xFFFF);
                        if (value !== 0) {
                            lastWord = i;
                        }
                    }
                    if (lastWord === -1) {
                        this.data = EMPTY_DATA;
                    }
                    if (lastWord < data.length - 1) {
                        this.data = data.slice(0, lastWord + 1);
                    }
                }
                /**
                     * Returns the number of bits set to `true` in this `BitSet`.
                     */
                cardinality()
                {
                    if (this.isEmpty) {
                        return 0;
                    }
                    const data = this.data;
                    const length = data.length;
                    let result = 0;
                    for (let i = 0; i < length; i++) {
                        result += POP_CNT[data[i]];
                    }
                    return result;
                }
                clear(fromIndex, toIndex)
                {
                    if (fromIndex == null) {
                        this.data.fill(0);
                    }
                    else if (toIndex == null) {
                        this.set(fromIndex, false);
                    }
                    else {
                        this.set(fromIndex, toIndex, false);
                    }
                }
                flip(fromIndex, toIndex)
                {
                    if (toIndex == null) {
                        toIndex = fromIndex;
                    }
                    if (fromIndex < 0 || toIndex < fromIndex) {
                        throw new RangeError();
                    }
                    let word = getIndex(fromIndex);
                    const lastWord = getIndex(toIndex);
                    if (word === lastWord) {
                        this.data[word] ^= bitsFor(fromIndex, toIndex);
                    }
                    else {
                        this.data[word++] ^= bitsFor(fromIndex, 15);
                        while (word < lastWord) {
                            this.data[word++] ^= 0xFFFF;
                        }
                        this.data[word++] ^= bitsFor(0, toIndex);
                    }
                }
                get(fromIndex, toIndex)
                {
                    if (toIndex === undefined) {
                        return !!(this.data[getIndex(fromIndex)] & bitsFor(fromIndex, fromIndex));
                    }
                    else {
                        // return a BitSet
                        let result = new BitSet(toIndex + 1);
                        for (let i = fromIndex; i <= toIndex; i++) {
                            result.set(i, this.get(i));
                        }
                        return result;
                    }
                }
                /**
                     * Returns true if the specified `BitSet` has any bits set to `true` that are also set to `true` in this `BitSet`.
                     *
                     * @param set `BitSet` to intersect with
                     */
                intersects(set)
                {
                    let smallerLength = Math.min(this.length(), set.length());
                    if (smallerLength === 0) {
                        return false;
                    }
                    let bound = getIndex(smallerLength - 1);
                    for (let i = 0; i <= bound; i++) {
                        if ((this.data[i] & set.data[i]) !== 0) {
                            return true;
                        }
                    }
                    return false;
                }
                /**
                     * Returns true if this `BitSet` contains no bits that are set to `true`.
                     */
                get isEmpty()
                {
                    return this.length() === 0;
                }
                /**
                     * Returns the "logical size" of this `BitSet`: the index of the highest set bit in the `BitSet` plus one. Returns
                     * zero if the `BitSet` contains no set bits.
                     */
                length()
                {
                    if (!this.data.length) {
                        return 0;
                    }
                    return this.previousSetBit(unIndex(this.data.length) - 1) + 1;
                }
                /**
                     * Returns the index of the first bit that is set to `false` that occurs on or after the specified starting index,
                     * If no such bit exists then `-1` is returned.
                     *
                     * @param fromIndex the index to start checking from (inclusive)
                     *
                     * @throws RangeError if the specified index is negative
                     */
                nextClearBit(fromIndex)
                {
                    if (fromIndex < 0) {
                        throw new RangeError("fromIndex cannot be negative");
                    }
                    const data = this.data;
                    const length = data.length;
                    let word = getIndex(fromIndex);
                    if (word > length) {
                        return -1;
                    }
                    let ignore = 0xFFFF ^ bitsFor(fromIndex, 15);
                    if ((data[word] | ignore) === 0xFFFF) {
                        word++;
                        ignore = 0;
                        for (; word < length; word++) {
                            if (data[word] !== 0xFFFF) {
                                break;
                            }
                        }
                        if (word === length) {
                            // Hit the end
                            return -1;
                        }
                    }
                    return unIndex(word) + findLSBSet((data[word] | ignore) ^ 0xFFFF);
                }
                /**
                     * Returns the index of the first bit that is set to `true` that occurs on or after the specified starting index.
                     * If no such bit exists then `-1` is returned.
                     *
                     * To iterate over the `true` bits in a `BitSet`, use the following loop:
                     *
                     * ```
                     * for (let i = bs.nextSetBit(0); i >= 0; i = bs.nextSetBit(i + 1)) {
                     *   // operate on index i here
                     * }
                     * ```
                     *
                     * @param fromIndex the index to start checking from (inclusive)
                     *
                     * @throws RangeError if the specified index is negative
                     */
                nextSetBit(fromIndex)
                {
                    if (fromIndex < 0) {
                        throw new RangeError("fromIndex cannot be negative");
                    }
                    const data = this.data;
                    const length = data.length;
                    let word = getIndex(fromIndex);
                    if (word > length) {
                        return -1;
                    }
                    let mask = bitsFor(fromIndex, 15);
                    if ((data[word] & mask) === 0) {
                        word++;
                        mask = 0xFFFF;
                        for (; word < length; word++) {
                            if (data[word] !== 0) {
                                break;
                            }
                        }
                        if (word >= length) {
                            return -1;
                        }
                    }
                    return unIndex(word) + findLSBSet(data[word] & mask);
                }
                /**
                     * Performs a logical **OR** of this bit set with the bit set argument. This bit set is modified so that a bit in it
                     * has the value `true` if and only if it either already had the value `true` or the corresponding bit in the bit
                     * set argument has the value `true`.
                     */
                or(set)
                {
                    const data = this.data;
                    const other = set.data;
                    const minWords = Math.min(data.length, other.length);
                    const words = Math.max(data.length, other.length);
                    const dest = data.length === words ? data : new Uint16Array(words);
                    let lastWord = -1;
                    // Or those words both sets have in common
                    for (let i = 0; i < minWords; i++) {
                        let value = dest[i] = data[i] | other[i];
                        if (value !== 0) {
                            lastWord = i;
                        }
                    }
                    // Copy words from larger set (if there is one)
                    const longer = data.length > other.length ? data : other;
                    for (let i = minWords; i < words; i++) {
                        let value = dest[i] = longer[i];
                        if (value !== 0) {
                            lastWord = i;
                        }
                    }
                    if (lastWord === -1) {
                        this.data = EMPTY_DATA;
                    }
                    else if (dest.length === lastWord + 1) {
                        this.data = dest;
                    }
                    else {
                        this.data = dest.slice(0, lastWord);
                    }
                }
                /**
                     * Returns the index of the nearest bit that is set to `false` that occurs on or before the specified starting
                     * index. If no such bit exists, or if `-1` is given as the starting index, then `-1` is returned.
                     *
                     * @param fromIndex the index to start checking from (inclusive)
                     *
                     * @throws RangeError if the specified index is less than `-1`
                     */
                previousClearBit(fromIndex)
                {
                    if (fromIndex < 0) {
                        throw new RangeError("fromIndex cannot be negative");
                    }
                    const data = this.data;
                    const length = data.length;
                    let word = getIndex(fromIndex);
                    if (word >= length) {
                        word = length - 1;
                    }
                    let ignore = 0xFFFF ^ bitsFor(0, fromIndex);
                    if ((data[word] | ignore) === 0xFFFF) {
                        ignore = 0;
                        word--;
                        for (; word >= 0; word--) {
                            if (data[word] !== 0xFFFF) {
                                break;
                            }
                        }
                        if (word < 0) {
                            // Hit the end
                            return -1;
                        }
                    }
                    return unIndex(word) + findMSBSet((data[word] | ignore) ^ 0xFFFF);
                }
                /**
                     * Returns the index of the nearest bit that is set to `true` that occurs on or before the specified starting index.
                     * If no such bit exists, or if `-1` is given as the starting index, then `-1` is returned.
                     *
                     * To iterate over the `true` bits in a `BitSet`, use the following loop:
                     *
                     * ```
                     * for (let i = bs.length(); (i = bs.previousSetBit(i-1)) >= 0; ) {
                     *   // operate on index i here
                     * }
                     * ```
                     *
                     * @param fromIndex the index to start checking from (inclusive)
                     *
                     * @throws RangeError if the specified index is less than `-1`
                     */
                previousSetBit(fromIndex)
                {
                    if (fromIndex < 0) {
                        throw new RangeError("fromIndex cannot be negative");
                    }
                    const data = this.data;
                    const length = data.length;
                    let word = getIndex(fromIndex);
                    if (word >= length) {
                        word = length - 1;
                    }
                    let mask = bitsFor(0, fromIndex);
                    if ((data[word] & mask) === 0) {
                        word--;
                        mask = 0xFFFF;
                        for (; word >= 0; word--) {
                            if (data[word] !== 0) {
                                break;
                            }
                        }
                        if (word < 0) {
                            return -1;
                        }
                    }
                    return unIndex(word) + findMSBSet(data[word] & mask);
                }
                set(fromIndex, toIndex, value)
                {
                    if (toIndex === undefined) {
                        toIndex = fromIndex;
                        value = true;
                    }
                    else if (typeof toIndex === "boolean") {
                        value = toIndex;
                        toIndex = fromIndex;
                    }
                    if (value === undefined) {
                        value = true;
                    }
                    if (fromIndex < 0 || fromIndex > toIndex) {
                        throw new RangeError();
                    }
                    let word = getIndex(fromIndex);
                    let lastWord = getIndex(toIndex);
                    if (value && lastWord >= this.data.length) {
                        // Grow array "just enough" for bits we need to set
                        let temp = new Uint16Array(lastWord + 1);
                        this.data.forEach((value, index) => temp[index] = value);
                        this.data = temp;
                    }
                    else if (!value) {
                        // But there is no need to grow array to clear bits.
                        if (word >= this.data.length) {
                            // Early exit
                            return;
                        }
                        if (lastWord >= this.data.length) {
                            // Adjust work to fit array
                            lastWord = this.data.length - 1;
                            toIndex = this.data.length * 16 - 1;
                        }
                    }
                    if (word === lastWord) {
                        this._setBits(word, value, bitsFor(fromIndex, toIndex));
                    }
                    else {
                        this._setBits(word++, value, bitsFor(fromIndex, 15));
                        while (word < lastWord) {
                            this.data[word++] = value ? 0xFFFF : 0;
                        }
                        this._setBits(word, value, bitsFor(0, toIndex));
                    }
                }
                _setBits(word, value, mask)
                {
                    if (value) {
                        this.data[word] |= mask;
                    }
                    else {
                        this.data[word] &= 0xFFFF ^ mask;
                    }
                }
                /**
                     * Returns the number of bits of space actually in use by this `BitSet` to represent bit values. The maximum element
                     * in the set is the size - 1st element.
                     */
                get size()
                {
                    return this.data.byteLength * 8;
                }
                /**
                     * Returns a new byte array containing all the bits in this bit set.
                     *
                     * More precisely, if
                     * `let bytes = s.toByteArray();`
                     * then `bytes.length === (s.length()+7)/8` and `s.get(n) === ((bytes[n/8] & (1<<(n%8))) != 0)` for all
                     * `n < 8 * bytes.length`.
                     */
                // toByteArray(): Int8Array {
                //  throw new Error("NOT IMPLEMENTED");
                // }
                /**
                     * Returns a new integer array containing all the bits in this bit set.
                     *
                     * More precisely, if
                     * `let integers = s.toIntegerArray();`
                     * then `integers.length === (s.length()+31)/32` and `s.get(n) === ((integers[n/32] & (1<<(n%32))) != 0)` for all
                     * `n < 32 * integers.length`.
                     */
                // toIntegerArray(): Int32Array {
                //  throw new Error("NOT IMPLEMENTED");
                // }
                hashCode()
                {
                    return MurmurHash_1.MurmurHash.hashCode(this.data, 22);
                }
                /**
                     * Compares this object against the specified object. The result is `true` if and only if the argument is not
                     * `undefined` and is a `Bitset` object that has exactly the same set of bits set to `true` as this bit set. That
                     * is, for every nonnegative index `k`,
                     *
                     * ```
                     * ((BitSet)obj).get(k) == this.get(k)
                     * ```
                     *
                     * must be true. The current sizes of the two bit sets are not compared.
                     */
                equals(obj)
                {
                    if (obj === this) {
                        return true;
                    }
                    else if (!(obj instanceof BitSet)) {
                        return false;
                    }
                    const len = this.length();
                    if (len !== obj.length()) {
                        return false;
                    }
                    if (len === 0) {
                        return true;
                    }
                    let bound = getIndex(len - 1);
                    for (let i = 0; i <= bound; i++) {
                        if (this.data[i] !== obj.data[i]) {
                            return false;
                        }
                    }
                    return true;
                }
                /**
                     * Returns a string representation of this bit set. For every index for which this `BitSet` contains a bit in the
                     * set state, the decimal representation of that index is included in the result. Such indices are listed in order
                     * from lowest to highest, separated by ", " (a comma and a space) and surrounded by braces, resulting in the usual
                     * mathematical notation for a set of integers.
                     *
                     * Example:
                     *
                     *     BitSet drPepper = new BitSet();
                     *
                     * Now `drPepper.toString()` returns `"{}"`.
                     *
                     *     drPepper.set(2);
                     *
                     * Now `drPepper.toString()` returns `"{2}"`.
                     *
                     *     drPepper.set(4);
                     *     drPepper.set(10);
                     *
                     * Now `drPepper.toString()` returns `"{2, 4, 10}"`.
                     */
                toString()
                {
                    let result = "{";
                    let first = true;
                    for (let i = this.nextSetBit(0); i >= 0; i = this.nextSetBit(i + 1)) {
                        if (first) {
                            first = false;
                        }
                        else {
                            result += ", ";
                        }
                        result += i;
                    }
                    result += "}";
                    return result;
                }
                // static valueOf(bytes: Int8Array): BitSet;
                // static valueOf(buffer: ArrayBuffer): BitSet;
                // static valueOf(integers: Int32Array): BitSet;
                // static valueOf(data: Int8Array | Int32Array | ArrayBuffer): BitSet {
                //  throw new Error("NOT IMPLEMENTED");
                // }
                /**
                     * Performs a logical **XOR** of this bit set with the bit set argument. This bit set is modified so that a bit in
                     * it has the value `true` if and only if one of the following statements holds:
                     *
                     * * The bit initially has the value `true`, and the corresponding bit in the argument has the value `false`.
                     * * The bit initially has the value `false`, and the corresponding bit in the argument has the value `true`.
                     */
                xor(set)
                {
                    const data = this.data;
                    const other = set.data;
                    const minWords = Math.min(data.length, other.length);
                    const words = Math.max(data.length, other.length);
                    const dest = data.length === words ? data : new Uint16Array(words);
                    let lastWord = -1;
                    // Xor those words both sets have in common
                    for (let i = 0; i < minWords; i++) {
                        let value = dest[i] = data[i] ^ other[i];
                        if (value !== 0) {
                            lastWord = i;
                        }
                    }
                    // Copy words from larger set (if there is one)
                    const longer = data.length > other.length ? data : other;
                    for (let i = minWords; i < words; i++) {
                        let value = dest[i] = longer[i];
                        if (value !== 0) {
                            lastWord = i;
                        }
                    }
                    if (lastWord === -1) {
                        this.data = EMPTY_DATA;
                    }
                    else if (dest.length === lastWord + 1) {
                        this.data = dest;
                    }
                    else {
                        this.data = dest.slice(0, lastWord + 1);
                    }
                }
                clone()
                {
                    return new BitSet(this);
                }
                [Symbol.iterator]()
                {
                    return new BitSetIterator(this.data);
                }
                // Overrides formatting for nodejs assert etc.
                [util.inspect.custom]()
                {
                    return "BitSet " + this.toString();
                }
            }
            exports.BitSet = BitSet;
            class BitSetIterator {
                constructor(data)
                {
                    this.data = data;
                    this.index = 0;
                    this.mask = 0xFFFF;
                }
                next()
                {
                    while (this.index < this.data.length) {
                        const bits = this.data[this.index] & this.mask;
                        if (bits !== 0) {
                            const bitNumber = unIndex(this.index) + findLSBSet(bits);
                            this.mask = bitsFor(bitNumber + 1, 15);
                            return {
                                done: false,
                                value: bitNumber
                            };
                        }
                        this.index++;
                        this.mask = 0xFFFF;
                    }
                    return {
                        done: true,
                        value: -1
                    };
                }
                [Symbol.iterator]()
                {
                    return this;
                }
            }

        }, {
            "./MurmurHash": 333,
            "util": 518
        }],
        326: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            function isHighSurrogate(ch) {
                return ch >= 0xD800 && ch <= 0xDBFF;
            }
            exports.isHighSurrogate = isHighSurrogate;
            function isLowSurrogate(ch) {
                return ch >= 0xDC00 && ch <= 0xDFFF;
            }
            exports.isLowSurrogate = isLowSurrogate;
            function isSupplementaryCodePoint(ch) {
                return ch >= 0x10000;
            }
            exports.isSupplementaryCodePoint = isSupplementaryCodePoint;

        }, {}],
        327: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../Decorators");
            const MurmurHash_1 = require("./MurmurHash");
            const ObjectEqualityComparator_1 = require("./ObjectEqualityComparator");
            /**
             * This default implementation of {@link EqualityComparator} uses object equality
             * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.
             *
             * @author Sam Harwell
             */
            class DefaultEqualityComparator {
                /**
                     * {@inheritDoc}
                     *
                     * This implementation returns
                     * `obj.`{@link Object#hashCode hashCode()}.
                     */
                hashCode(obj)
                {
                    if (obj == null) {
                        return 0;
                    }
                    else if (typeof obj === "string" || typeof obj === "number") {
                        return MurmurHash_1.MurmurHash.hashCode([obj]);
                    }
                    else {
                        return ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.hashCode(obj);
                    }
                }
                /**
                     * {@inheritDoc}
                     *
                     * This implementation relies on object equality. If both objects are
                     * `undefined` or `null`, this method returns `true`. Otherwise if only
                     * `a` is `undefined` or `null`, this method returns `false`. Otherwise,
                     * this method returns the result of
                     * `a.`{@link Object#equals equals}`(b)`.
                     */
                equals(a, b)
                {
                    if (a == null) {
                        return b == null;
                    }
                    else if (typeof a === "string" || typeof a === "number") {
                        return a === b;
                    }
                    else {
                        return ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(a, b);
                    }
                }
            }
            DefaultEqualityComparator.INSTANCE = new DefaultEqualityComparator();
            __decorate([
            Decorators_1.Override
            ], DefaultEqualityComparator.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], DefaultEqualityComparator.prototype, "equals", null);
            exports.DefaultEqualityComparator = DefaultEqualityComparator;

        }, {
            "../Decorators": 224,
            "./MurmurHash": 333,
            "./ObjectEqualityComparator": 334
        }],
        328: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:40.5099429-07:00
            const Arrays_1 = require("./Arrays");
            const Decorators_1 = require("../Decorators");
            const EMPTY_DATA = new Int32Array(0);
            const INITIAL_SIZE = 4;
            const MAX_ARRAY_SIZE = (((1 << 31) >>> 0) - 1) - 8;
            /**
             *
             * @author Sam Harwell
             */
            class IntegerList {
                constructor(arg)
                {
                    if (!arg) {
                        this._data = EMPTY_DATA;
                        this._size = 0;
                    }
                    else if (arg instanceof IntegerList) {
                        this._data = arg._data.slice(0);
                        this._size = arg._size;
                    }
                    else if (typeof arg === "number") {
                        if (arg === 0) {
                            this._data = EMPTY_DATA;
                            this._size = 0;
                        }
                        else {
                            this._data = new Int32Array(arg);
                            this._size = 0;
                        }
                    }
                    else {
                        // arg is Iterable<number>
                        this._data = EMPTY_DATA;
                        this._size = 0;
                        for (let value of arg) {
                            this.add(value);
                        }
                    }
                }
                add(value)
                {
                    if (this._data.length === this._size) {
                        this.ensureCapacity(this._size + 1);
                    }
                    this._data[this._size] = value;
                    this._size++;
                }
                addAll(list)
                {
                    if (Array.isArray(list)) {
                        this.ensureCapacity(this._size + list.length);
                        this._data.subarray(this._size, this._size + list.length).set(list);
                        this._size += list.length;
                    }
                    else if (list instanceof IntegerList) {
                        this.ensureCapacity(this._size + list._size);
                        this._data.subarray(this._size, this._size + list.size).set(list._data);
                        this._size += list._size;
                    }
                    else {
                        // list is JavaCollection<number>
                        this.ensureCapacity(this._size + list.size);
                        let current = 0;
                        for (let xi of list) {
                            this._data[this._size + current] = xi;
                            current++;
                        }
                        this._size += list.size;
                    }
                }
                get(index)
                {
                    if (index < 0 || index >= this._size) {
                        throw RangeError();
                    }
                    return this._data[index];
                }
                contains(value)
                {
                    for (let i = 0; i < this._size; i++) {
                        if (this._data[i] === value) {
                            return true;
                        }
                    }
                    return false;
                }
                set(index, value)
                {
                    if (index < 0 || index >= this._size) {
                        throw RangeError();
                    }
                    let previous = this._data[index];
                    this._data[index] = value;
                    return previous;
                }
                removeAt(index)
                {
                    let value = this.get(index);
                    this._data.copyWithin(index, index + 1, this._size);
                    this._data[this._size - 1] = 0;
                    this._size--;
                    return value;
                }
                removeRange(fromIndex, toIndex)
                {
                    if (fromIndex < 0 || toIndex < 0 || fromIndex > this._size || toIndex > this._size) {
                        throw RangeError();
                    }
                    if (fromIndex > toIndex) {
                        throw RangeError();
                    }
                    this._data.copyWithin(toIndex, fromIndex, this._size);
                    this._data.fill(0, this._size - (toIndex - fromIndex), this._size);
                    this._size -= (toIndex - fromIndex);
                }
                get isEmpty()
                {
                    return this._size === 0;
                }
                get size()
                {
                    return this._size;
                }
                trimToSize()
                {
                    if (this._data.length === this._size) {
                        return;
                    }
                    this._data = this._data.slice(0, this._size);
                }
                clear()
                {
                    this._data.fill(0, 0, this._size);
                    this._size = 0;
                }
                toArray()
                {
                    if (this._size === 0) {
                        return [];
                    }
                    return Array.from(this._data.subarray(0, this._size));
                }
                sort()
                {
                    this._data.subarray(0, this._size).sort();
                }
                /**
                     * Compares the specified object with this list for equality.  Returns
                     * `true` if and only if the specified object is also an {@link IntegerList},
                     * both lists have the same size, and all corresponding pairs of elements in
                     * the two lists are equal.  In other words, two lists are defined to be
                     * equal if they contain the same elements in the same order.
                     *
                     * This implementation first checks if the specified object is this
                     * list. If so, it returns `true`; if not, it checks if the
                     * specified object is an {@link IntegerList}. If not, it returns `false`;
                     * if so, it checks the size of both lists. If the lists are not the same size,
                     * it returns `false`; otherwise it iterates over both lists, comparing
                     * corresponding pairs of elements.  If any comparison returns `false`,
                     * this method returns `false`.
                     *
                     * @param o the object to be compared for equality with this list
                     * @returns `true` if the specified object is equal to this list
                     */
                equals(o)
                {
                    if (o === this) {
                        return true;
                    }
                    if (!(o instanceof IntegerList)) {
                        return false;
                    }
                    if (this._size !== o._size) {
                        return false;
                    }
                    for (let i = 0; i < this._size; i++) {
                        if (this._data[i] !== o._data[i]) {
                            return false;
                        }
                    }
                    return true;
                }
                /**
                     * Returns the hash code value for this list.
                     *
                     * This implementation uses exactly the code that is used to define the
                     * list hash function in the documentation for the {@link List#hashCode}
                     * method.
                     *
                     * @returns the hash code value for this list
                     */
                hashCode()
                {
                    let hashCode = 1;
                    for (let i = 0; i < this._size; i++) {
                        hashCode = 31 * hashCode + this._data[i];
                    }
                    return hashCode;
                }
                /**
                     * Returns a string representation of this list.
                     */
                toString()
                {
                    return this._data.toString();
                }
                binarySearch(key, fromIndex, toIndex)
                {
                    if (fromIndex === undefined) {
                        fromIndex = 0;
                    }
                    if (toIndex === undefined) {
                        toIndex = this._size;
                    }
                    if (fromIndex < 0 || toIndex < 0 || fromIndex > this._size || toIndex > this._size) {
                        throw new RangeError();
                    }
                    if (fromIndex > toIndex) {
                        throw new RangeError();
                    }
                    return Arrays_1.Arrays.binarySearch(this._data, key, fromIndex, toIndex);
                }
                ensureCapacity(capacity)
                {
                    if (capacity < 0 || capacity > MAX_ARRAY_SIZE) {
                        throw new RangeError();
                    }
                    let newLength;
                    if (this._data.length === 0) {
                        newLength = INITIAL_SIZE;
                    }
                    else {
                        newLength = this._data.length;
                    }
                    while (newLength < capacity) {
                        newLength = newLength * 2;
                        if (newLength < 0 || newLength > MAX_ARRAY_SIZE) {
                            newLength = MAX_ARRAY_SIZE;
                        }
                    }
                    let tmp = new Int32Array(newLength);
                    tmp.set(this._data);
                    this._data = tmp;
                }
                /** Convert the list to a UTF-16 encoded char array. If all values are less
                     *  than the 0xFFFF 16-bit code point limit then this is just a char array
                     *  of 16-bit char as usual. For values in the supplementary range, encode
                     * them as two UTF-16 code units.
                     */
                toCharArray()
                {
                    // Optimize for the common case (all data values are < 0xFFFF) to avoid an extra scan
                    let resultArray = new Uint16Array(this._size);
                    let resultIdx = 0;
                    let calculatedPreciseResultSize = false;
                    for (let i = 0; i < this._size; i++) {
                        let codePoint = this._data[i];
                        if (codePoint >= 0 && codePoint < 0x10000) {
                            resultArray[resultIdx] = codePoint;
                            resultIdx++;
                            continue;
                        }
                        // Calculate the precise result size if we encounter a code point > 0xFFFF
                        if (!calculatedPreciseResultSize) {
                            let newResultArray = new Uint16Array(this.charArraySize());
                            newResultArray.set(resultArray, 0);
                            resultArray = newResultArray;
                            calculatedPreciseResultSize = true;
                        }
                        // This will throw RangeError if the code point is not a valid Unicode code point
                        let pair = String.fromCodePoint(codePoint);
                        resultArray[resultIdx] = pair.charCodeAt(0);
                        resultArray[resultIdx + 1] = pair.charCodeAt(1);
                        resultIdx += 2;
                    }
                    return resultArray;
                }
                charArraySize()
                {
                    let result = 0;
                    for (let i = 0; i < this._size; i++) {
                        result += this._data[i] >= 0x10000 ? 2 : 1;
                    }
                    return result;
                }
            }
            __decorate([
            Decorators_1.NotNull
            ], IntegerList.prototype, "_data", void 0);
            __decorate([
            Decorators_1.Override
            ], IntegerList.prototype, "equals", null);
            __decorate([
            Decorators_1.Override
            ], IntegerList.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], IntegerList.prototype, "toString", null);
            exports.IntegerList = IntegerList;

        }, {
            "../Decorators": 224,
            "./Arrays": 324
        }],
        329: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:40.6647101-07:00
            const IntegerList_1 = require("./IntegerList");
            /**
             *
             * @author Sam Harwell
             */
            class IntegerStack extends IntegerList_1.IntegerList {
                constructor(arg)
                {
                    super(arg);
                }
                push(value)
                {
                    this.add(value);
                }
                pop()
                {
                    return this.removeAt(this.size - 1);
                }
                peek()
                {
                    return this.get(this.size - 1);
                }
            }
            exports.IntegerStack = IntegerStack;

        }, {
            "./IntegerList": 328
        }],
        330: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:40.7402214-07:00
            const Decorators_1 = require("../Decorators");
            const INTERVAL_POOL_MAX_VALUE = 1000;
            /** An immutable inclusive interval a..b */
            class Interval {
                /**
                     * @param a The start of the interval
                     * @param b The end of the interval (inclusive)
                     */
                constructor(a, b)
                {
                    this.a = a;
                    this.b = b;
                }
                static get INVALID()
                {
                    return Interval._INVALID;
                }
                /** Interval objects are used readonly so share all with the
                     *  same single value a==b up to some max size.  Use an array as a perfect hash.
                     *  Return shared object for 0..INTERVAL_POOL_MAX_VALUE or a new
                     *  Interval object with a..a in it.  On Java.g4, 218623 IntervalSets
                     *  have a..a (set with 1 element).
                     */
                static of(a, b)
                {
                    // cache just a..a
                    if (a !== b || a < 0 || a > INTERVAL_POOL_MAX_VALUE) {
                        return new Interval(a, b);
                    }
                    if (Interval.cache[a] == null) {
                        Interval.cache[a] = new Interval(a, a);
                    }
                    return Interval.cache[a];
                }
                /** return number of elements between a and b inclusively. x..x is length 1.
                     *  if b &lt; a, then length is 0.  9..10 has length 2.
                     */
                get length()
                {
                    if (this.b < this.a) {
                        return 0;
                    }
                    return this.b - this.a + 1;
                }
                equals(o)
                {
                    if (o === this) {
                        return true;
                    }
                    else if (!(o instanceof Interval)) {
                        return false;
                    }
                    return this.a === o.a && this.b === o.b;
                }
                hashCode()
                {
                    let hash = 23;
                    hash = hash * 31 + this.a;
                    hash = hash * 31 + this.b;
                    return hash;
                }
                /** Does this start completely before other? Disjoint */
                startsBeforeDisjoint(other)
                {
                    return this.a < other.a && this.b < other.a;
                }
                /** Does this start at or before other? Nondisjoint */
                startsBeforeNonDisjoint(other)
                {
                    return this.a <= other.a && this.b >= other.a;
                }
                /** Does this.a start after other.b? May or may not be disjoint */
                startsAfter(other)
                {
                    return this.a > other.a;
                }
                /** Does this start completely after other? Disjoint */
                startsAfterDisjoint(other)
                {
                    return this.a > other.b;
                }
                /** Does this start after other? NonDisjoint */
                startsAfterNonDisjoint(other)
                {
                    return this.a > other.a && this.a <= other.b; // this.b>=other.b implied
                }
                /** Are both ranges disjoint? I.e., no overlap? */
                disjoint(other)
                {
                    return this.startsBeforeDisjoint(other) || this.startsAfterDisjoint(other);
                }
                /** Are two intervals adjacent such as 0..41 and 42..42? */
                adjacent(other)
                {
                    return this.a === other.b + 1 || this.b === other.a - 1;
                }
                properlyContains(other)
                {
                    return other.a >= this.a && other.b <= this.b;
                }
                /** Return the interval computed from combining this and other */
                union(other)
                {
                    return Interval.of(Math.min(this.a, other.a), Math.max(this.b, other.b));
                }
                /** Return the interval in common between this and o */
                intersection(other)
                {
                    return Interval.of(Math.max(this.a, other.a), Math.min(this.b, other.b));
                }
                /** Return the interval with elements from `this` not in `other`;
                     *  `other` must not be totally enclosed (properly contained)
                     *  within `this`, which would result in two disjoint intervals
                     *  instead of the single one returned by this method.
                     */
                differenceNotProperlyContained(other)
                {
                    let diff;
                    if (other.startsBeforeNonDisjoint(this)) {
                        // other.a to left of this.a (or same)
                        diff = Interval.of(Math.max(this.a, other.b + 1), this.b);
                    }
                    else if (other.startsAfterNonDisjoint(this)) {
                        // other.a to right of this.a
                        diff = Interval.of(this.a, other.a - 1);
                    }
                    return diff;
                }
                toString()
                {
                    return this.a + ".." + this.b;
                }
            }
            Interval._INVALID = new Interval(-1, -2);
            Interval.cache = new Array(INTERVAL_POOL_MAX_VALUE + 1);
            __decorate([
            Decorators_1.Override
            ], Interval.prototype, "equals", null);
            __decorate([
            Decorators_1.Override
            ], Interval.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], Interval.prototype, "toString", null);
            exports.Interval = Interval;

        }, {
            "../Decorators": 224
        }],
        331: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:40.8683480-07:00
            const ArrayEqualityComparator_1 = require("./ArrayEqualityComparator");
            const IntegerList_1 = require("./IntegerList");
            const Interval_1 = require("./Interval");
            const Lexer_1 = require("../Lexer");
            const MurmurHash_1 = require("./MurmurHash");
            const Decorators_1 = require("../Decorators");
            const Token_1 = require("../Token");
            /**
             * This class implements the {@link IntSet} backed by a sorted array of
             * non-overlapping intervals. It is particularly efficient for representing
             * large collections of numbers, where the majority of elements appear as part
             * of a sequential range of numbers that are all part of the set. For example,
             * the set { 1, 2, 3, 4, 7, 8 } may be represented as { [1, 4], [7, 8] }.
             *
             * This class is able to represent sets containing any combination of values in
             * the range {@link Integer#MIN_VALUE} to {@link Integer#MAX_VALUE}
             * (inclusive).
             */
            class IntervalSet {
                constructor(intervals)
                {
                    this.readonly = false;
                    if (intervals != null) {
                        this._intervals = intervals.slice(0);
                    }
                    else {
                        this._intervals = [];
                    }
                }
                static get COMPLETE_CHAR_SET()
                {
                    if (IntervalSet._COMPLETE_CHAR_SET === undefined) {
                        IntervalSet._COMPLETE_CHAR_SET = IntervalSet.of(Lexer_1.Lexer.MIN_CHAR_VALUE, Lexer_1.Lexer.MAX_CHAR_VALUE);
                        IntervalSet._COMPLETE_CHAR_SET.setReadonly(true);
                    }
                    return IntervalSet._COMPLETE_CHAR_SET;
                }
                static get EMPTY_SET()
                {
                    if (IntervalSet._EMPTY_SET == null) {
                        IntervalSet._EMPTY_SET = new IntervalSet();
                        IntervalSet._EMPTY_SET.setReadonly(true);
                    }
                    return IntervalSet._EMPTY_SET;
                }
                /**
                     * Create a set with all ints within range [a..b] (inclusive). If b is omitted, the set contains the single element
                     * a.
                     */
                static of(a, b=a)
                {
                    let s = new IntervalSet();
                    s.add(a, b);
                    return s;
                }
                clear()
                {
                    if (this.readonly) {
                        throw new Error("can't alter readonly IntervalSet");
                    }
                    this._intervals.length = 0;
                }
                /** Add interval; i.e., add all integers from a to b to set.
                     *  If b&lt;a, do nothing.
                     *  Keep list in sorted order (by left range value).
                     *  If overlap, combine ranges.  For example,
                     *  If this is {1..5, 10..20}, adding 6..7 yields
                     *  {1..5, 6..7, 10..20}.  Adding 4..8 yields {1..8, 10..20}.
                     */
                add(a, b=a)
                {
                    this.addRange(Interval_1.Interval.of(a, b));
                }
                // copy on write so we can cache a..a intervals and sets of that
                addRange(addition)
                {
                    if (this.readonly) {
                        throw new Error("can't alter readonly IntervalSet");
                    }
                    //System.out.println("add "+addition+" to "+intervals.toString());
                    if (addition.b < addition.a) {
                        return;
                    }
                    // find position in list
                    // Use iterators as we modify list in place
                    for (let i = 0; i < this._intervals.length; i++) {
                        let r = this._intervals[i];
                        if (addition.equals(r)) {
                            return;
                        }
                        if (addition.adjacent(r) || !addition.disjoint(r)) {
                            // next to each other, make a single larger interval
                            let bigger = addition.union(r);
                            this._intervals[i] = bigger;
                            // make sure we didn't just create an interval that
                            // should be merged with next interval in list
                            while (i < this._intervals.length - 1) {
                                i++;
                                let next = this._intervals[i];
                                if (!bigger.adjacent(next) && bigger.disjoint(next)) {
                                    break;
                                }
                                // if we bump up against or overlap next, merge
                                // remove this one
                                this._intervals.splice(i, 1);
                                i--;
                                // move backwards to what we just set
                                this._intervals[i] = bigger.union(next);

                            }
                            // set to 3 merged ones
                            // first call to next after previous duplicates the result
                            return;
                        }
                        if (addition.startsBeforeDisjoint(r)) {
                            // insert before r
                            this._intervals.splice(i, 0, addition);
                            return;
                        }

                    }
                    // if disjoint and after r, a future iteration will handle it
                    // ok, must be after last interval (and disjoint from last interval)
                    // just add it
                    this._intervals.push(addition);
                }
                /** combine all sets in the array returned the or'd value */
                static or(sets)
                {
                    let r = new IntervalSet();
                    for (let s of sets) {
                        r.addAll(s);
                    }
                    return r;
                }
                addAll(set)
                {
                    if (set == null) {
                        return this;
                    }
                    if (set instanceof IntervalSet) {
                        let other = set;
                        // walk set and add each interval
                        let n = other._intervals.length;
                        for (let i = 0; i < n; i++) {
                            let I = other._intervals[i];
                            this.add(I.a, I.b);
                        }
                    }
                    else {
                        for (let value of set.toArray()) {
                            this.add(value);
                        }
                    }
                    return this;
                }
                complementRange(minElement, maxElement)
                {
                    return this.complement(IntervalSet.of(minElement, maxElement));
                }
                /** {@inheritDoc} */
                complement(vocabulary)
                {
                    if (vocabulary.isNil) {
                        // nothing in common with null set
                        return IntervalSet.EMPTY_SET;
                    }
                    let vocabularyIS;
                    if (vocabulary instanceof IntervalSet) {
                        vocabularyIS = vocabulary;
                    }
                    else {
                        vocabularyIS = new IntervalSet();
                        vocabularyIS.addAll(vocabulary);
                    }
                    return vocabularyIS.subtract(this);
                }
                subtract(a)
                {
                    if (a == null || a.isNil) {
                        return new IntervalSet(this._intervals);
                    }
                    if (a instanceof IntervalSet) {
                        return IntervalSet.subtract(this, a);
                    }
                    let other = new IntervalSet();
                    other.addAll(a);
                    return IntervalSet.subtract(this, other);
                }
                /**
                     * Compute the set difference between two interval sets. The specific
                     * operation is `left - right`.
                     */
                static subtract(left, right)
                {
                    if (left.isNil) {
                        return new IntervalSet();
                    }
                    let result = new IntervalSet(left._intervals);
                    if (right.isNil) {
                        // right set has no elements; just return the copy of the current set
                        return result;
                    }
                    let resultI = 0;
                    let rightI = 0;
                    while (resultI < result._intervals.length && rightI < right._intervals.length) {
                        let resultInterval = result._intervals[resultI];
                        let rightInterval = right._intervals[rightI];
                        // operation: (resultInterval - rightInterval) and update indexes
                        if (rightInterval.b < resultInterval.a) {
                            rightI++;
                            continue;
                        }
                        if (rightInterval.a > resultInterval.b) {
                            resultI++;
                            continue;
                        }
                        let beforeCurrent;
                        let afterCurrent;
                        if (rightInterval.a > resultInterval.a) {
                            beforeCurrent = new Interval_1.Interval(resultInterval.a, rightInterval.a - 1);
                        }
                        if (rightInterval.b < resultInterval.b) {
                            afterCurrent = new Interval_1.Interval(rightInterval.b + 1, resultInterval.b);
                        }
                        if (beforeCurrent) {
                            if (afterCurrent) {
                                // split the current interval into two
                                result._intervals[resultI] = beforeCurrent;
                                result._intervals.splice(resultI + 1, 0, afterCurrent);
                                resultI++;
                                rightI++;
                                continue;
                            }
                            else {
                                // replace the current interval
                                result._intervals[resultI] = beforeCurrent;
                                resultI++;
                                continue;
                            }
                        }
                        else {
                            if (afterCurrent) {
                                // replace the current interval
                                result._intervals[resultI] = afterCurrent;
                                rightI++;
                                continue;
                            }
                            else {
                                // remove the current interval (thus no need to increment resultI)
                                result._intervals.splice(resultI, 1);
                                continue;
                            }
                        }
                    }
                    // If rightI reached right.intervals.size, no more intervals to subtract from result.
                    // If resultI reached result.intervals.size, we would be subtracting from an empty set.
                    // Either way, we are done.
                    return result;
                }
                or(a)
                {
                    let o = new IntervalSet();
                    o.addAll(this);
                    o.addAll(a);
                    return o;
                }
                /** {@inheritDoc} */
                and(other)
                {
                    if (other.isNil) {
                        //|| !(other instanceof IntervalSet) ) {
                        // nothing in common with null set
                        return new IntervalSet();
                    }
                    let myIntervals = this._intervals;
                    let theirIntervals = other._intervals;
                    let intersection;
                    let mySize = myIntervals.length;
                    let theirSize = theirIntervals.length;
                    let i = 0;
                    let j = 0;
                    // iterate down both interval lists looking for nondisjoint intervals
                    while (i < mySize && j < theirSize) {
                        let mine = myIntervals[i];
                        let theirs = theirIntervals[j];
                        //System.out.println("mine="+mine+" and theirs="+theirs);
                        if (mine.startsBeforeDisjoint(theirs)) {
                            // move this iterator looking for interval that might overlap
                            i++;
                        }
                        else if (theirs.startsBeforeDisjoint(mine)) {
                            // move other iterator looking for interval that might overlap
                            j++;
                        }
                        else if (mine.properlyContains(theirs)) {
                            // overlap, add intersection, get next theirs
                            if (!intersection) {
                                intersection = new IntervalSet();
                            }
                            intersection.addRange(mine.intersection(theirs));
                            j++;
                        }
                        else if (theirs.properlyContains(mine)) {
                            // overlap, add intersection, get next mine
                            if (!intersection) {
                                intersection = new IntervalSet();
                            }
                            intersection.addRange(mine.intersection(theirs));
                            i++;
                        }
                        else if (!mine.disjoint(theirs)) {
                            // overlap, add intersection
                            if (!intersection) {
                                intersection = new IntervalSet();
                            }
                            intersection.addRange(mine.intersection(theirs));
                            // Move the iterator of lower range [a..b], but not
                            // the upper range as it may contain elements that will collide
                            // with the next iterator. So, if mine=[0..115] and
                            // theirs=[115..200], then intersection is 115 and move mine
                            // but not theirs as theirs may collide with the next range
                            // in thisIter.
                            // move both iterators to next ranges
                            if (mine.startsAfterNonDisjoint(theirs)) {
                                j++;
                            }
                            else if (theirs.startsAfterNonDisjoint(mine)) {
                                i++;
                            }
                        }
                    }
                    if (!intersection) {
                        return new IntervalSet();
                    }
                    return intersection;
                }
                /** {@inheritDoc} */
                contains(el)
                {
                    let n = this._intervals.length;
                    let l = 0;
                    let r = n - 1;
                    // Binary search for the element in the (sorted, disjoint) array of intervals.
                    while (l <= r) {
                        let m = (l + r) >> 1;
                        let I = this._intervals[m];
                        let a = I.a;
                        let b = I.b;
                        if (b < el) {
                            l = m + 1;
                        }
                        else if (a > el) {
                            r = m - 1;
                        }
                        else {
                            // el >= a && el <= b
                            return true;
                        }
                    }
                    return false;
                }
                /** {@inheritDoc} */
                get isNil()
                {
                    return this._intervals == null || this._intervals.length === 0;
                }
                /**
                     * Returns the maximum value contained in the set if not isNil.
                     *
                     * @return the maximum value contained in the set.
                     * @throws RangeError if set is empty
                     */
                get maxElement()
                {
                    if (this.isNil) {
                        throw new RangeError("set is empty");
                    }
                    let last = this._intervals[this._intervals.length - 1];
                    return last.b;
                }
                /**
                     * Returns the minimum value contained in the set if not isNil.
                     *
                     * @return the minimum value contained in the set.
                     * @throws RangeError if set is empty
                     */
                get minElement()
                {
                    if (this.isNil) {
                        throw new RangeError("set is empty");
                    }
                    return this._intervals[0].a;
                }
                /** Return a list of Interval objects. */
                get intervals()
                {
                    return this._intervals;
                }
                hashCode()
                {
                    let hash = MurmurHash_1.MurmurHash.initialize();
                    for (let I of this._intervals) {
                        hash = MurmurHash_1.MurmurHash.update(hash, I.a);
                        hash = MurmurHash_1.MurmurHash.update(hash, I.b);
                    }
                    hash = MurmurHash_1.MurmurHash.finish(hash, this._intervals.length * 2);
                    return hash;
                }
                /** Are two IntervalSets equal?  Because all intervals are sorted
                     *  and disjoint, equals is a simple linear walk over both lists
                     *  to make sure they are the same.  Interval.equals() is used
                     *  by the List.equals() method to check the ranges.
                     */
                equals(o)
                {
                    if (o == null || !(o instanceof IntervalSet)) {
                        return false;
                    }
                    return ArrayEqualityComparator_1.ArrayEqualityComparator.INSTANCE.equals(this._intervals, o._intervals);
                }
                toString(elemAreChar=false)
                {
                    let buf = "";
                    if (this._intervals == null || this._intervals.length === 0) {
                        return "{}";
                    }
                    if (this.size > 1) {
                        buf += "{";
                    }
                    let first = true;
                    for (let I of this._intervals) {
                        if (first) {
                            first = false;
                        }
                        else {
                            buf += ", ";
                        }
                        let a = I.a;
                        let b = I.b;
                        if (a === b) {
                            if (a === Token_1.Token.EOF) {
                                buf += "<EOF>";
                            }
                            else if (elemAreChar) {
                                buf += "'" + String.fromCodePoint(a) + "'";
                            }
                            else {
                                buf += a;
                            }
                        }
                        else {
                            if (elemAreChar) {
                                buf += "'" + String.fromCodePoint(a) + "'..'" + String.fromCodePoint(b) + "'";
                            }
                            else {
                                buf += a + ".." + b;
                            }
                        }
                    }
                    if (this.size > 1) {
                        buf += "}";
                    }
                    return buf;
                }
                toStringVocabulary(vocabulary)
                {
                    if (this._intervals == null || this._intervals.length === 0) {
                        return "{}";
                    }
                    let buf = "";
                    if (this.size > 1) {
                        buf += "{";
                    }
                    let first = true;
                    for (let I of this._intervals) {
                        if (first) {
                            first = false;
                        }
                        else {
                            buf += ", ";
                        }
                        let a = I.a;
                        let b = I.b;
                        if (a === b) {
                            buf += this.elementName(vocabulary, a);
                        }
                        else {
                            for (let i = a; i <= b; i++) {
                                if (i > a) {
                                    buf += ", ";
                                }
                                buf += this.elementName(vocabulary, i);
                            }
                        }
                    }
                    if (this.size > 1) {
                        buf += "}";
                    }
                    return buf;
                }
                elementName(vocabulary, a)
                {
                    if (a === Token_1.Token.EOF) {
                        return "<EOF>";
                    }
                    else if (a === Token_1.Token.EPSILON) {
                        return "<EPSILON>";
                    }
                    else {
                        return vocabulary.getDisplayName(a);
                    }
                }
                get size()
                {
                    let n = 0;
                    let numIntervals = this._intervals.length;
                    if (numIntervals === 1) {
                        let firstInterval = this._intervals[0];
                        return firstInterval.b - firstInterval.a + 1;
                    }
                    for (let i = 0; i < numIntervals; i++) {
                        let I = this._intervals[i];
                        n += (I.b - I.a + 1);
                    }
                    return n;
                }
                toIntegerList()
                {
                    let values = new IntegerList_1.IntegerList(this.size);
                    let n = this._intervals.length;
                    for (let i = 0; i < n; i++) {
                        let I = this._intervals[i];
                        let a = I.a;
                        let b = I.b;
                        for (let v = a; v <= b; v++) {
                            values.add(v);
                        }
                    }
                    return values;
                }
                toSet()
                {
                    let s = new Set();
                    for (let I of this._intervals) {
                        let a = I.a;
                        let b = I.b;
                        for (let v = a; v <= b; v++) {
                            s.add(v);
                        }
                    }
                    return s;
                }
                toArray()
                {
                    let values = new Array();
                    let n = this._intervals.length;
                    for (let i = 0; i < n; i++) {
                        let I = this._intervals[i];
                        let a = I.a;
                        let b = I.b;
                        for (let v = a; v <= b; v++) {
                            values.push(v);
                        }
                    }
                    return values;
                }
                remove(el)
                {
                    if (this.readonly) {
                        throw new Error("can't alter readonly IntervalSet");
                    }
                    let n = this._intervals.length;
                    for (let i = 0; i < n; i++) {
                        let I = this._intervals[i];
                        let a = I.a;
                        let b = I.b;
                        if (el < a) {
                            break; // list is sorted and el is before this interval; not here
                        }
                        // if whole interval x..x, rm
                        if (el === a && el === b) {
                            this._intervals.splice(i, 1);
                            break;
                        }
                        // if on left edge x..b, adjust left
                        if (el === a) {
                            this._intervals[i] = Interval_1.Interval.of(I.a + 1, I.b);
                            break;
                        }
                        // if on right edge a..x, adjust right
                        if (el === b) {
                            this._intervals[i] = Interval_1.Interval.of(I.a, I.b - 1);
                            break;
                        }
                        // if in middle a..x..b, split interval
                        if (el > a && el < b) {
                            // found in this interval
                            let oldb = I.b;
                            this._intervals[i] = Interval_1.Interval.of(I.a, el - 1); // [a..x-1]
                            this.add(el + 1, oldb); // add [x+1..b]
                        }
                    }
                }
                get isReadonly()
                {
                    return this.readonly;
                }
                setReadonly(readonly)
                {
                    if (this.readonly && !readonly) {
                        throw new Error("can't alter readonly IntervalSet");
                    }
                    this.readonly = readonly;
                }
            }
            __decorate([
            Decorators_1.Override
            ], IntervalSet.prototype, "addAll", null);
            __decorate([
            Decorators_1.Override
            ], IntervalSet.prototype, "complement", null);
            __decorate([
            Decorators_1.Override
            ], IntervalSet.prototype, "subtract", null);
            __decorate([
            Decorators_1.Override
            ], IntervalSet.prototype, "or", null);
            __decorate([
            Decorators_1.Override
            ], IntervalSet.prototype, "and", null);
            __decorate([
            Decorators_1.Override
            ], IntervalSet.prototype, "contains", null);
            __decorate([
            Decorators_1.Override
            ], IntervalSet.prototype, "isNil", null);
            __decorate([
            Decorators_1.Override
            ], IntervalSet.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], IntervalSet.prototype, "equals", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], IntervalSet.prototype, "toStringVocabulary", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], IntervalSet.prototype, "elementName", null);
            __decorate([
            Decorators_1.Override
            ], IntervalSet.prototype, "size", null);
            __decorate([
            Decorators_1.Override
            ], IntervalSet.prototype, "remove", null);
            __decorate([
            Decorators_1.NotNull
            ], IntervalSet, "of", null);
            __decorate([
            Decorators_1.NotNull
            ], IntervalSet, "subtract", null);
            exports.IntervalSet = IntervalSet;

        }, {
            "../Decorators": 224,
            "../Lexer": 232,
            "../Token": 248,
            "./ArrayEqualityComparator": 323,
            "./IntegerList": 328,
            "./Interval": 330,
            "./MurmurHash": 333
        }],
        332: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:42.1346951-07:00
            class MultiMap extends Map {
                constructor()
                {
                    super();
                }
                map(key, value)
                {
                    let elementsForKey = super.get(key);
                    if (!elementsForKey) {
                        elementsForKey = [];
                        super.set(key, elementsForKey);
                    }
                    elementsForKey.push(value);
                }
                getPairs()
                {
                    let pairs = [];
                    this.forEach((values, key) => {
                        values.forEach((v) => {
                            pairs.push([key, v]);
                        });
                    });
                    return pairs;
                }
            }
            exports.MultiMap = MultiMap;

        }, {}],
        333: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             *
             * @author Sam Harwell
             */
            var MurmurHash;
            (function(MurmurHash) {
                const DEFAULT_SEED = 0;
                /**
                     * Initialize the hash using the specified `seed`.
                     *
                     * @param seed the seed (optional)
                     * @returns the intermediate hash value
                     */
                function initialize(seed=DEFAULT_SEED) {
                    return seed;
                }
                MurmurHash.initialize = initialize;
                /**
                     * Update the intermediate hash value for the next input `value`.
                     *
                     * @param hash the intermediate hash value
                     * @param value the value to add to the current hash
                     * @returns the updated intermediate hash value
                     */
                function update(hash, value) {
                    const c1 = 0xCC9E2D51;
                    const c2 = 0x1B873593;
                    const r1 = 15;
                    const r2 = 13;
                    const m = 5;
                    const n = 0xE6546B64;
                    if (value == null) {
                        value = 0;
                    }
                    else if (typeof value === "string") {
                        value = hashString(value);
                    }
                    else if (typeof value === "object") {
                        value = value.hashCode();
                    }
                    let k = value;
                    k = Math.imul(k, c1);
                    k = (k << r1) | (k >>> (32 - r1));
                    k = Math.imul(k, c2);
                    hash = hash ^ k;
                    hash = (hash << r2) | (hash >>> (32 - r2));
                    hash = Math.imul(hash, m) + n;
                    return hash & 0xFFFFFFFF;
                }
                MurmurHash.update = update;
                /**
                     * Apply the final computation steps to the intermediate value `hash`
                     * to form the final result of the MurmurHash 3 hash function.
                     *
                     * @param hash the intermediate hash value
                     * @param numberOfWords the number of integer values added to the hash
                     * @returns the final hash result
                     */
                function finish(hash, numberOfWords) {
                    hash = hash ^ (numberOfWords * 4);
                    hash = hash ^ (hash >>> 16);
                    hash = Math.imul(hash, 0x85EBCA6B);
                    hash = hash ^ (hash >>> 13);
                    hash = Math.imul(hash, 0xC2B2AE35);
                    hash = hash ^ (hash >>> 16);
                    return hash;
                }
                MurmurHash.finish = finish;
                /**
                     * Utility function to compute the hash code of an array using the
                     * MurmurHash algorithm.
                     *
                     * @param <T> the array element type
                     * @param data the array data
                     * @param seed the seed for the MurmurHash algorithm
                     * @returns the hash code of the data
                     */
                function hashCode(data, seed=DEFAULT_SEED) {
                    let hash = initialize(seed);
                    let length = 0;
                    for (let value of data) {
                        hash = update(hash, value);
                        length++;
                    }
                    hash = finish(hash, length);
                    return hash;
                }
                MurmurHash.hashCode = hashCode;
                /**
                     * Function to hash a string. Based on the implementation found here:
                     * http://stackoverflow.com/a/7616484
                     */
                function hashString(str) {
                    let len = str.length;
                    if (len === 0) {
                        return 0;
                    }
                    let hash = 0;
                    for (let i = 0; i < len; i++) {
                        let c = str.charCodeAt(i);
                        hash = (((hash << 5) >>> 0) - hash) + c;
                        hash |= 0;
                    }
                    return hash;
                }
            })(MurmurHash = exports.MurmurHash || (exports.MurmurHash = {}));

        }, {}],
        334: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../Decorators");
            /**
             * This default implementation of {@link EqualityComparator} uses object equality
             * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.
             *
             * @author Sam Harwell
             */
            class ObjectEqualityComparator {
                /**
                     * {@inheritDoc}
                     *
                     * This implementation returns
                     * `obj.`{@link Object#hashCode hashCode()}.
                     */
                hashCode(obj)
                {
                    if (obj == null) {
                        return 0;
                    }
                    return obj.hashCode();
                }
                /**
                     * {@inheritDoc}
                     *
                     * This implementation relies on object equality. If both objects are
                     * `undefined` or `null`, this method returns `true`. Otherwise if only
                     * `a` is `undefined` or `null`, this method returns `false`. Otherwise,
                     * this method returns the result of
                     * `a.`{@link Object#equals equals}`(b)`.
                     */
                equals(a, b)
                {
                    if (a == null) {
                        return b == null;
                    }
                    return a.equals(b);
                }
            }
            ObjectEqualityComparator.INSTANCE = new ObjectEqualityComparator();
            __decorate([
            Decorators_1.Override
            ], ObjectEqualityComparator.prototype, "hashCode", null);
            __decorate([
            Decorators_1.Override
            ], ObjectEqualityComparator.prototype, "equals", null);
            exports.ObjectEqualityComparator = ObjectEqualityComparator;

        }, {
            "../Decorators": 224
        }],
        335: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:42.5447085-07:00
            /**
             * This exception is thrown to cancel a parsing operation. This exception does
             * not extend {@link RecognitionException}, allowing it to bypass the standard
             * error recovery mechanisms. {@link BailErrorStrategy} throws this exception in
             * response to a parse error.
             *
             * @author Sam Harwell
             */
            class ParseCancellationException extends Error {
                constructor(cause)
                {
                    super(cause.message);
                    this.cause = cause;
                    this.stack = cause.stack;
                }
                getCause()
                {
                    return this.cause;
                }
            }
            exports.ParseCancellationException = ParseCancellationException;

        }, {}],
        336: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const MurmurHash_1 = require("./MurmurHash");
            class UUID {
                constructor(mostSigBits, moreSigBits, lessSigBits, leastSigBits)
                {
                    this.data = new Uint32Array(4);
                    this.data[0] = mostSigBits;
                    this.data[1] = moreSigBits;
                    this.data[2] = lessSigBits;
                    this.data[3] = leastSigBits;
                }
                static fromString(data)
                {
                    if (!/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/.test(data)) {
                        throw new Error("Incorrectly formatted UUID");
                    }
                    let segments = data.split("-");
                    let mostSigBits = parseInt(segments[0], 16);
                    let moreSigBits = ((parseInt(segments[1], 16) << 16) >>> 0) + parseInt(segments[2], 16);
                    let lessSigBits = ((parseInt(segments[3], 16) << 16) >>> 0) + parseInt(segments[4].substr(0, 4), 16);
                    let leastSigBits = parseInt(segments[4].substr(-8), 16);
                    return new UUID(mostSigBits, moreSigBits, lessSigBits, leastSigBits);
                }
                hashCode()
                {
                    return MurmurHash_1.MurmurHash.hashCode([this.data[0], this.data[1], this.data[2], this.data[3]]);
                }
                equals(obj)
                {
                    if (obj === this) {
                        return true;
                    }
                    else if (!(obj instanceof UUID)) {
                        return false;
                    }
                    return this.data[0] === obj.data[0]
                        && this.data[1] === obj.data[1]
                        && this.data[2] === obj.data[2]
                        && this.data[3] === obj.data[3];
                }
                toString()
                {
                    return ("00000000" + this.data[0].toString(16)).substr(-8)
                    + "-" + ("0000" + (this.data[1] >>> 16).toString(16)).substr(-4)
                    + "-" + ("0000" + this.data[1].toString(16)).substr(-4)
                    + "-" + ("0000" + (this.data[2] >>> 16).toString(16)).substr(-4)
                    + "-" + ("0000" + this.data[2].toString(16)).substr(-4)
                    + ("00000000" + this.data[3].toString(16)).substr(-8);
                }
            }
            exports.UUID = UUID;

        }, {
            "./MurmurHash": 333
        }],
        337: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            function escapeWhitespace(s, escapeSpaces) {
                return escapeSpaces ? s.replace(/ /, "\u00B7") : s
                .replace(/\t/, "\\t")
                .replace(/\n/, "\\n")
                .replace(/\r/, "\\r");
            }
            exports.escapeWhitespace = escapeWhitespace;
            // Seriously: why isn't this built in to java? ugh!
            function join(collection, separator) {
                let buf = "";
                let first = true;
                for (let current of collection) {
                    if (first) {
                        first = false;
                    }
                    else {
                        buf += separator;
                    }
                    buf += current;
                }
                return buf;
            }
            exports.join = join;
            function equals(x, y) {
                if (x === y) {
                    return true;
                }
                if (x === undefined || y === undefined) {
                    return false;
                }
                return x.equals(y);
            }
            exports.equals = equals;
            // export function numNonnull(data: any[]): number {
            //  let n: number =  0;
            //  if ( data == null ) return n;
            //  for (let o of data) {
            //    if ( o!=null ) n++;
            //  }
            //  return n;
            // }
            // export function removeAllElements<T>(data: Collection<T>, value: T): void {
            //  if ( data==null ) return;
            //  while ( data.contains(value) ) data.remove(value);
            // }
            // export function writeFile(@NotNull file: File, @NotNull content: Uint8Array): void {
            //  let fos: FileOutputStream = new FileOutputStream(file);
            //  try {
            //    fos.write(content);
            //  } finally {
            //    fos.close();
            //  }
            // }
            // export function writeFile(@NotNull fileName: string, @NotNull content: string): void {
            //  writeFile(fileName, content, null);
            // }
            // export function writeFile(@NotNull fileName: string, @NotNull content: string, @Nullable encoding: string): void {
            //  let f: File =  new File(fileName);
            //  let fos: FileOutputStream =  new FileOutputStream(f);
            //  let osw: OutputStreamWriter;
            //  if (encoding != null) {
            //    osw = new OutputStreamWriter(fos, encoding);
            //  }
            //  else {
            //    osw = new OutputStreamWriter(fos);
            //  }
            //  try {
            //    osw.write(content);
            //  }
            //  finally {
            //    osw.close();
            //  }
            // }
            // @NotNull
            // export function readFile(@NotNull fileName: string): char[] {
            //  return readFile(fileName, null);
            // }
            // @NotNull
            // export function readFile(@NotNull fileName: string, @Nullable encoding: string): char[] {
            //  let f: File =  new File(fileName);
            //  let size: number =  (int)f.length();
            //  let isr: InputStreamReader;
            //  let fis: FileInputStream =  new FileInputStream(fileName);
            //  if ( encoding!=null ) {
            //    isr = new InputStreamReader(fis, encoding);
            //  }
            //  else {
            //    isr = new InputStreamReader(fis);
            //  }
            //  let data: char[] =  null;
            //  try {
            //    data = new char[size];
            //    let n: number =  isr.read(data);
            //    if (n < data.length) {
            //      data = Arrays.copyOf(data, n);
            //    }
            //  }
            //  finally {
            //    isr.close();
            //  }
            //  return data;
            // }
            // export function removeAll<T>(@NotNull predicate: List<T> list,@NotNull Predicate<? super T>): void {
            //  let j: number =  0;
            //  for (let i = 0; i < list.size; i++) {
            //    let item: T =  list.get(i);
            //    if (!predicate.eval(item)) {
            //      if (j != i) {
            //        list.set(j, item);
            //      }
            //      j++;
            //    }
            //  }
            //  if (j < list.size) {
            //    list.subList(j, list.size).clear();
            //  }
            // }
            // export function removeAll<T>(@NotNull predicate: Iterable<T> iterable,@NotNull Predicate<? super T>): void {
            //  if (iterable instanceof List<?>) {
            //    removeAll((List<T>)iterable, predicate);
            //    return;
            //  }
            //  for (Iterator<T> iterator = iterable.iterator(); iterator.hasNext(); ) {
            //    let item: T =  iterator.next();
            //    if (predicate.eval(item)) {
            //      iterator.remove();
            //    }
            //  }
            // }
            /** Convert array of strings to string&rarr;index map. Useful for
             *  converting rulenames to name&rarr;ruleindex map.
             */
            function toMap(keys) {
                let m = new Map();
                for (let i = 0; i < keys.length; i++) {
                    m.set(keys[i], i);
                }
                return m;
            }
            exports.toMap = toMap;
            function toCharArray(str) {
                if (typeof str === "string") {
                    let result = new Uint16Array(str.length);
                    for (let i = 0; i < str.length; i++) {
                        result[i] = str.charCodeAt(i);
                    }
                    return result;
                }
                else {
                    return str.toCharArray();
                }
            }
            exports.toCharArray = toCharArray;














        }, // /**
        //  * @since 4.5
        //  */
        // @NotNull
        // export function toSet(@NotNull bits: BitSet): IntervalSet {
        //  let s: IntervalSet =  new IntervalSet();
        //  let i: number =  bits.nextSetBit(0);
        //  while ( i >= 0 ) {
        //    s.add(i);
        //    i = bits.nextSetBit(i+1);
        //  }
        //  return s;
        // }
        {}],
        338: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../Decorators");
            class AbstractParseTreeVisitor {
                /**
                     * {@inheritDoc}
                     *
                     * The default implementation calls {@link ParseTree#accept} on the
                     * specified tree.
                     */
                visit(tree)
                {
                    return tree.accept(this);
                }
                /**
                     * {@inheritDoc}
                     *
                     * The default implementation initializes the aggregate result to
                     * {@link #defaultResult defaultResult()}. Before visiting each child, it
                     * calls {@link #shouldVisitNextChild shouldVisitNextChild}; if the result
                     * is `false` no more children are visited and the current aggregate
                     * result is returned. After visiting a child, the aggregate result is
                     * updated by calling {@link #aggregateResult aggregateResult} with the
                     * previous aggregate result and the result of visiting the child.
                     *
                     * The default implementation is not safe for use in visitors that modify
                     * the tree structure. Visitors that modify the tree should override this
                     * method to behave properly in respect to the specific algorithm in use.
                     */
                visitChildren(node)
                {
                    let result = this.defaultResult();
                    let n = node.childCount;
                    for (let i = 0; i < n; i++) {
                        if (!this.shouldVisitNextChild(node, result)) {
                            break;
                        }
                        let c = node.getChild(i);
                        let childResult = c.accept(this);
                        result = this.aggregateResult(result, childResult);
                    }
                    return result;
                }
                /**
                     * {@inheritDoc}
                     *
                     * The default implementation returns the result of
                     * {@link #defaultResult defaultResult}.
                     */
                visitTerminal(node)
                {
                    return this.defaultResult();
                }
                /**
                     * {@inheritDoc}
                     *
                     * The default implementation returns the result of
                     * {@link #defaultResult defaultResult}.
                     */
                visitErrorNode(node)
                {
                    return this.defaultResult();
                }
                /**
                     * Aggregates the results of visiting multiple children of a node. After
                     * either all children are visited or {@link #shouldVisitNextChild} returns
                     * `false`, the aggregate value is returned as the result of
                     * {@link #visitChildren}.
                     *
                     * The default implementation returns `nextResult`, meaning
                     * {@link #visitChildren} will return the result of the last child visited
                     * (or return the initial value if the node has no children).
                     *
                     * @param aggregate The previous aggregate value. In the default
                     * implementation, the aggregate value is initialized to
                     * {@link #defaultResult}, which is passed as the `aggregate` argument
                     * to this method after the first child node is visited.
                     * @param nextResult The result of the immediately preceeding call to visit
                     * a child node.
                     *
                     * @returns The updated aggregate result.
                     */
                aggregateResult(aggregate, nextResult)
                {
                    return nextResult;
                }
                /**
                     * This method is called after visiting each child in
                     * {@link #visitChildren}. This method is first called before the first
                     * child is visited; at that point `currentResult` will be the initial
                     * value (in the default implementation, the initial value is returned by a
                     * call to {@link #defaultResult}. This method is not called after the last
                     * child is visited.
                     *
                     * The default implementation always returns `true`, indicating that
                     * `visitChildren` should only return after all children are visited.
                     * One reason to override this method is to provide a "short circuit"
                     * evaluation option for situations where the result of visiting a single
                     * child has the potential to determine the result of the visit operation as
                     * a whole.
                     *
                     * @param node The {@link RuleNode} whose children are currently being
                     * visited.
                     * @param currentResult The current aggregate result of the children visited
                     * to the current point.
                     *
                     * @returns `true` to continue visiting children. Otherwise return
                     * `false` to stop visiting children and immediately return the
                     * current aggregate result from {@link #visitChildren}.
                     */
                shouldVisitNextChild(node, currentResult)
                {
                    return true;
                }
            }
            __decorate([
            Decorators_1.Override,
            __param(0, Decorators_1.NotNull)
            ], AbstractParseTreeVisitor.prototype, "visit", null);
            __decorate([
            Decorators_1.Override,
            __param(0, Decorators_1.NotNull)
            ], AbstractParseTreeVisitor.prototype, "visitChildren", null);
            __decorate([
            Decorators_1.Override,
            __param(0, Decorators_1.NotNull)
            ], AbstractParseTreeVisitor.prototype, "visitTerminal", null);
            __decorate([
            Decorators_1.Override,
            __param(0, Decorators_1.NotNull)
            ], AbstractParseTreeVisitor.prototype, "visitErrorNode", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], AbstractParseTreeVisitor.prototype, "shouldVisitNextChild", null);
            exports.AbstractParseTreeVisitor = AbstractParseTreeVisitor;

        }, {
            "../Decorators": 224
        }],
        339: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:47.4646355-07:00
            const Decorators_1 = require("../Decorators");
            const TerminalNode_1 = require("./TerminalNode");
            /** Represents a token that was consumed during resynchronization
             *  rather than during a valid match operation. For example,
             *  we will create this kind of a node during single token insertion
             *  and deletion as well as during "consume until error recovery set"
             *  upon no viable alternative exceptions.
             */
            class ErrorNode extends TerminalNode_1.TerminalNode {
                constructor(token)
                {
                    super(token);
                }
                accept(visitor)
                {
                    return visitor.visitErrorNode(this);
                }
            }
            __decorate([
            Decorators_1.Override
            ], ErrorNode.prototype, "accept", null);
            exports.ErrorNode = ErrorNode;

        }, {
            "../Decorators": 224,
            "./TerminalNode": 343
        }],
        340: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * Associate a property with a parse tree node. Useful with parse tree listeners
             * that need to associate values with particular tree nodes, kind of like
             * specifying a return value for the listener event method that visited a
             * particular node. Example:
             *
             * ```
             * ParseTreeProperty<Integer> values = new ParseTreeProperty<Integer>();
             * values.put(tree, 36);
             * int x = values.get(tree);
             * values.removeFrom(tree);
             * ```
             *
             * You would make one decl (values here) in the listener and use lots of times
             * in your event methods.
             */
            class ParseTreeProperty {
                constructor(name="ParseTreeProperty")
                {
                    this._symbol = Symbol(name);
                }
                get(node)
                {
                    return node[this._symbol];
                }
                set(node, value)
                {
                    node[this._symbol] = value;
                }
                removeFrom(node)
                {
                    let result = node[this._symbol];
                    delete node[this._symbol];
                    return result;
                }
            }
            exports.ParseTreeProperty = ParseTreeProperty;

        }, {}],
        341: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const ErrorNode_1 = require("./ErrorNode");
            const TerminalNode_1 = require("./TerminalNode");
            const RuleNode_1 = require("./RuleNode");
            class ParseTreeWalker {
                walk(listener, t)
                {
                    let nodeStack = [];
                    let indexStack = [];
                    let currentNode = t;
                    let currentIndex = 0;
                    while (currentNode) {
                        // pre-order visit
                        if (currentNode instanceof ErrorNode_1.ErrorNode) {
                            if (listener.visitErrorNode) {
                                listener.visitErrorNode(currentNode);
                            }
                        }
                        else if (currentNode instanceof TerminalNode_1.TerminalNode) {
                            if (listener.visitTerminal) {
                                listener.visitTerminal(currentNode);
                            }
                        }
                        else {
                            this.enterRule(listener, currentNode);
                        }
                        // Move down to first child, if exists
                        if (currentNode.childCount > 0) {
                            nodeStack.push(currentNode);
                            indexStack.push(currentIndex);
                            currentIndex = 0;
                            currentNode = currentNode.getChild(0);
                            continue;
                        }
                        // No child nodes, so walk tree
                        do {
                            // post-order visit
                            if (currentNode instanceof RuleNode_1.RuleNode) {
                                this.exitRule(listener, currentNode);
                            }
                            // No parent, so no siblings
                            if (nodeStack.length === 0) {
                                currentNode = undefined;
                                currentIndex = 0;
                                break;
                            }
                            // Move to next sibling if possible
                            let last = nodeStack[nodeStack.length - 1];
                            currentIndex++;
                            currentNode = currentIndex < last.childCount ? last.getChild(currentIndex) : undefined;
                            if (currentNode) {
                                break;
                            }
                            // No next sibling, so move up
                            currentNode = nodeStack.pop();
                            currentIndex = indexStack.pop();
                        } while (currentNode);
                    }
                }
                /**
                     * The discovery of a rule node, involves sending two events: the generic
                     * {@link ParseTreeListener#enterEveryRule} and a
                     * {@link RuleContext}-specific event. First we trigger the generic and then
                     * the rule specific. We to them in reverse order upon finishing the node.
                     */
                enterRule(listener, r)
                {
                    let ctx = r.ruleContext;
                    if (listener.enterEveryRule) {
                        listener.enterEveryRule(ctx);
                    }
                    ctx.enterRule(listener);
                }
                exitRule(listener, r)
                {
                    let ctx = r.ruleContext;
                    ctx.exitRule(listener);
                    if (listener.exitEveryRule) {
                        listener.exitEveryRule(ctx);
                    }
                }
            }
            exports.ParseTreeWalker = ParseTreeWalker;
            (function(ParseTreeWalker) {
                ParseTreeWalker.DEFAULT = new ParseTreeWalker();
            })(ParseTreeWalker = exports.ParseTreeWalker || (exports.ParseTreeWalker = {}));

        }, {
            "./ErrorNode": 339,
            "./RuleNode": 342,
            "./TerminalNode": 343
        }],
        342: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            class RuleNode {
            }
            exports.RuleNode = RuleNode;

        }, {}],
        343: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:48.1433686-07:00
            const Interval_1 = require("../misc/Interval");
            const Decorators_1 = require("../Decorators");
            const Token_1 = require("../Token");
            class TerminalNode {
                constructor(symbol)
                {
                    this._symbol = symbol;
                }
                getChild(i)
                {
                    throw new RangeError("Terminal Node has no children.");
                }
                get symbol()
                {
                    return this._symbol;
                }
                get parent()
                {
                    return this._parent;
                }
                setParent(parent)
                {
                    this._parent = parent;
                }
                get payload()
                {
                    return this._symbol;
                }
                get sourceInterval()
                {
                    let tokenIndex = this._symbol.tokenIndex;
                    return new Interval_1.Interval(tokenIndex, tokenIndex);
                }
                get childCount()
                {
                    return 0;
                }
                accept(visitor)
                {
                    return visitor.visitTerminal(this);
                }
                get text()
                {
                    return this._symbol.text || "";
                }
                toStringTree(parser)
                {
                    return this.toString();
                }
                toString()
                {
                    if (this._symbol.type === Token_1.Token.EOF) {
                        return "<EOF>";
                    }
                    return this._symbol.text || "";
                }
            }
            __decorate([
            Decorators_1.Override
            ], TerminalNode.prototype, "getChild", null);
            __decorate([
            Decorators_1.Override
            ], TerminalNode.prototype, "parent", null);
            __decorate([
            Decorators_1.Override
            ], TerminalNode.prototype, "setParent", null);
            __decorate([
            Decorators_1.Override
            ], TerminalNode.prototype, "payload", null);
            __decorate([
            Decorators_1.Override
            ], TerminalNode.prototype, "sourceInterval", null);
            __decorate([
            Decorators_1.Override
            ], TerminalNode.prototype, "childCount", null);
            __decorate([
            Decorators_1.Override
            ], TerminalNode.prototype, "accept", null);
            __decorate([
            Decorators_1.Override
            ], TerminalNode.prototype, "text", null);
            __decorate([
            Decorators_1.Override
            ], TerminalNode.prototype, "toStringTree", null);
            __decorate([
            Decorators_1.Override
            ], TerminalNode.prototype, "toString", null);
            exports.TerminalNode = TerminalNode;

        }, {
            "../Decorators": 224,
            "../Token": 248,
            "../misc/Interval": 330
        }],
        344: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const ATN_1 = require("../atn/ATN");
            const CommonToken_1 = require("../CommonToken");
            const ErrorNode_1 = require("./ErrorNode");
            const Decorators_1 = require("../Decorators");
            const Parser_1 = require("../Parser");
            const ParserRuleContext_1 = require("../ParserRuleContext");
            const RuleNode_1 = require("./RuleNode");
            const TerminalNode_1 = require("./TerminalNode");
            const Token_1 = require("../Token");
            const Utils = require("../misc/Utils");
            /** A set of utility routines useful for all kinds of ANTLR trees. */
            class Trees {
                static toStringTree(t, arg2)
                {
                    let ruleNames;
                    if (arg2 instanceof Parser_1.Parser) {
                        ruleNames = arg2.ruleNames;
                    }
                    else {
                        ruleNames = arg2;
                    }
                    let s = Utils.escapeWhitespace(this.getNodeText(t, ruleNames), false);
                    if (t.childCount === 0) {
                        return s;
                    }
                    let buf = "";
                    buf += ("(");
                    s = Utils.escapeWhitespace(this.getNodeText(t, ruleNames), false);
                    buf += (s);
                    buf += (" ");
                    for (let i = 0; i < t.childCount; i++) {
                        if (i > 0) {
                            buf += (" ");
                        }
                        buf += (this.toStringTree(t.getChild(i), ruleNames));
                    }
                    buf += (")");
                    return buf;
                }
                static getNodeText(t, arg2)
                {
                    let ruleNames;
                    if (arg2 instanceof Parser_1.Parser) {
                        ruleNames = arg2.ruleNames;
                    }
                    else if (arg2) {
                        ruleNames = arg2;
                    }
                    else {
                        // no recog or rule names
                        let payload = t.payload;
                        if (typeof payload.text === "string") {
                            return payload.text;
                        }
                        return t.payload.toString();
                    }
                    if (t instanceof RuleNode_1.RuleNode) {
                        let ruleContext = t.ruleContext;
                        let ruleIndex = ruleContext.ruleIndex;
                        let ruleName = ruleNames[ruleIndex];
                        let altNumber = ruleContext.altNumber;
                        if (altNumber !== ATN_1.ATN.INVALID_ALT_NUMBER) {
                            return ruleName + ":" + altNumber;
                        }
                        return ruleName;
                    }
                    else if (t instanceof ErrorNode_1.ErrorNode) {
                        return t.toString();
                    }
                    else if (t instanceof TerminalNode_1.TerminalNode) {
                        let symbol = t.symbol;
                        return symbol.text || "";
                    }
                    throw new TypeError("Unexpected node type");
                }
                static getChildren(t)
                {
                    let kids = [];
                    for (let i = 0; i < t.childCount; i++) {
                        kids.push(t.getChild(i));
                    }
                    return kids;
                }
                static getAncestors(t)
                {
                    let ancestors = [];
                    let p = t.parent;
                    while (p) {
                        ancestors.unshift(p); // insert at start
                        p = p.parent;
                    }
                    return ancestors;
                }
                /** Return true if t is u's parent or a node on path to root from u.
                     *  Use === not equals().
                     *
                     *  @since 4.5.1
                     */
                static isAncestorOf(t, u)
                {
                    if (!t || !u || !t.parent) {
                        return false;
                    }
                    let p = u.parent;
                    while (p) {
                        if (t === p) {
                            return true;
                        }
                        p = p.parent;
                    }
                    return false;
                }
                static findAllTokenNodes(t, ttype)
                {
                    return Trees.findAllNodes(t, ttype, true);
                }
                static findAllRuleNodes(t, ruleIndex)
                {
                    return Trees.findAllNodes(t, ruleIndex, false);
                }
                static findAllNodes(t, index, findTokens)
                {
                    let nodes = [];
                    Trees._findAllNodes(t, index, findTokens, nodes);
                    return nodes;
                }
                static _findAllNodes(t, index, findTokens, nodes)
                {
                    // check this node (the root) first
                    if (findTokens && t instanceof TerminalNode_1.TerminalNode) {
                        if (t.symbol.type === index) {
                            nodes.push(t);
                        }
                    }
                    else if (!findTokens && t instanceof ParserRuleContext_1.ParserRuleContext) {
                        if (t.ruleIndex === index) {
                            nodes.push(t);
                        }
                    }
                    // check children
                    for (let i = 0; i < t.childCount; i++) {
                        Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
                    }
                }
                /** Get all descendents; includes t itself.
                     *
                     * @since 4.5.1
                     */
                static getDescendants(t)
                {
                    let nodes = [];
                    function recurse(e) {
                        nodes.push(e);
                        const n = e.childCount;
                        for (let i = 0; i < n; i++) {
                            recurse(e.getChild(i));
                        }
                    }
                    recurse(t);
                    return nodes;
                }
                /** Find smallest subtree of t enclosing range startTokenIndex..stopTokenIndex
                     *  inclusively using postorder traversal.  Recursive depth-first-search.
                     *
                     *  @since 4.5
                     */
                static getRootOfSubtreeEnclosingRegion(t, startTokenIndex, // inclusive
                stopTokenIndex)
                {
                    let n = t.childCount;
                    for (let i = 0; i < n; i++) {
                        let child = t.getChild(i);
                        let r = Trees.getRootOfSubtreeEnclosingRegion(child, startTokenIndex, stopTokenIndex);
                        if (r) {
                            return r;
                        }
                    }
                    if (t instanceof ParserRuleContext_1.ParserRuleContext) {
                        let stopToken = t.stop;
                        if (startTokenIndex >= t.start.tokenIndex &&
                        (// is range fully contained in t?
                        stopToken == null || stopTokenIndex <= stopToken.tokenIndex)) {
                            // note: r.stop==null likely implies that we bailed out of parser and there's nothing to the right
                            return t;
                        }
                    }
                    return undefined;
                }
                /** Replace any subtree siblings of root that are completely to left
                     *  or right of lookahead range with a CommonToken(Token.INVALID_TYPE,"...")
                     *  node. The source interval for t is not altered to suit smaller range!
                     *
                     *  WARNING: destructive to t.
                     *
                     *  @since 4.5.1
                     */
                static stripChildrenOutOfRange(t, root, startIndex, stopIndex)
                {
                    if (!t) {
                        return;
                    }
                    let count = t.childCount;
                    for (let i = 0; i < count; i++) {
                        let child = t.getChild(i);
                        let range = child.sourceInterval;
                        if (child instanceof ParserRuleContext_1.ParserRuleContext && (range.b < startIndex || range.a > stopIndex)) {
                            if (Trees.isAncestorOf(child, root)) {
                                // replace only if subtree doesn't have displayed root
                                let abbrev = new CommonToken_1.CommonToken(Token_1.Token.INVALID_TYPE, "...");
                                t.children[i] = new TerminalNode_1.TerminalNode(abbrev); // HACK access to private
                            }
                        }
                    }
                }
                static findNodeSuchThat(t, pred)
                {
                    // No type check needed as long as users only use one of the available overloads
                    if (pred(t)) {
                        return t;
                    }
                    let n = t.childCount;
                    for (let i = 0; i < n; i++) {
                        let u = Trees.findNodeSuchThat(t.getChild(i), pred);
                        if (u !== undefined) {
                            return u;
                        }
                    }
                    return undefined;
                }
            }
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], Trees, "toStringTree", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], Trees, "getAncestors", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], Trees, "getRootOfSubtreeEnclosingRegion", null);
            exports.Trees = Trees;

        }, {
            "../CommonToken": 220,
            "../Decorators": 224,
            "../Parser": 237,
            "../ParserRuleContext": 239,
            "../Token": 248,
            "../atn/ATN": 251,
            "../misc/Utils": 337,
            "./ErrorNode": 339,
            "./RuleNode": 342,
            "./TerminalNode": 343
        }],
        345: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            function __export(m) {
                for (var p in m)
                    if (!exports.hasOwnProperty(p))
                        exports[p] = m[p];
            }
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            __export(require("./AbstractParseTreeVisitor"));
            __export(require("./ErrorNode"));
            __export(require("./ParseTreeProperty"));
            __export(require("./ParseTreeWalker"));
            __export(require("./RuleNode"));
            __export(require("./TerminalNode"));
            __export(require("./Trees"));

        }, {
            "./AbstractParseTreeVisitor": 338,
            "./ErrorNode": 339,
            "./ParseTreeProperty": 340,
            "./ParseTreeWalker": 341,
            "./RuleNode": 342,
            "./TerminalNode": 343,
            "./Trees": 344
        }],
        346: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:45.2799060-07:00
            /**
             * A chunk is either a token tag, a rule tag, or a span of literal text within a
             * tree pattern.
             *
             * The method {@link ParseTreePatternMatcher#split(String)} returns a list of
             * chunks in preparation for creating a token stream by
             * {@link ParseTreePatternMatcher#tokenize(String)}. From there, we get a parse
             * tree from with {@link ParseTreePatternMatcher#compile(String, int)}. These
             * chunks are converted to {@link RuleTagToken}, {@link TokenTagToken}, or the
             * regular tokens of the text surrounding the tags.
             */
            class Chunk {
            }
            exports.Chunk = Chunk;

        }, {}],
        347: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../../Decorators");
            /**
             * Represents the result of matching a {@link ParseTree} against a tree pattern.
             */
            let ParseTreeMatch = class ParseTreeMatch {
                /**
                     * Constructs a new instance of {@link ParseTreeMatch} from the specified
                     * parse tree and pattern.
                     *
                     * @param tree The parse tree to match against the pattern.
                     * @param pattern The parse tree pattern.
                     * @param labels A mapping from label names to collections of
                     * {@link ParseTree} objects located by the tree pattern matching process.
                     * @param mismatchedNode The first node which failed to match the tree
                     * pattern during the matching process.
                     *
                     * @throws {@link Error} if `tree` is not defined
                     * @throws {@link Error} if `pattern` is not defined
                     * @throws {@link Error} if `labels` is not defined
                     */
                constructor(tree, pattern, labels, mismatchedNode)
                {
                    if (!tree) {
                        throw new Error("tree cannot be null");
                    }
                    if (!pattern) {
                        throw new Error("pattern cannot be null");
                    }
                    if (!labels) {
                        throw new Error("labels cannot be null");
                    }
                    this._tree = tree;
                    this._pattern = pattern;
                    this._labels = labels;
                    this._mismatchedNode = mismatchedNode;
                }
                /**
                     * Get the last node associated with a specific `label`.
                     *
                     * For example, for pattern `<id:ID>`, `get("id")` returns the
                     * node matched for that `ID`. If more than one node
                     * matched the specified label, only the last is returned. If there is
                     * no node associated with the label, this returns `undefined`.
                     *
                     * Pattern tags like `<ID>` and `<expr>` without labels are
                     * considered to be labeled with `ID` and `expr`, respectively.
                     *
                     * @param label The label to check.
                     *
                     * @returns The last {@link ParseTree} to match a tag with the specified
                     * label, or `undefined` if no parse tree matched a tag with the label.
                     */
                get(label)
                {
                    let parseTrees = this._labels.get(label);
                    if (!parseTrees || parseTrees.length === 0) {
                        return undefined;
                    }
                    return parseTrees[parseTrees.length - 1]; // return last if multiple
                }
                /**
                     * Return all nodes matching a rule or token tag with the specified label.
                     *
                     * If the `label` is the name of a parser rule or token in the
                     * grammar, the resulting list will contain both the parse trees matching
                     * rule or tags explicitly labeled with the label and the complete set of
                     * parse trees matching the labeled and unlabeled tags in the pattern for
                     * the parser rule or token. For example, if `label` is `"foo"`,
                     * the result will contain *all* of the following.
                     *
                     * * Parse tree nodes matching tags of the form `<foo:anyRuleName>` and
                     *   `<foo:AnyTokenName>`.
                     * * Parse tree nodes matching tags of the form `<anyLabel:foo>`.
                     * * Parse tree nodes matching tags of the form `<foo>`.
                     *
                     * @param label The label.
                     *
                     * @returns A collection of all {@link ParseTree} nodes matching tags with
                     * the specified `label`. If no nodes matched the label, an empty list
                     * is returned.
                     */
                getAll(label)
                {
                    const nodes = this._labels.get(label);
                    if (!nodes) {
                        return [];
                    }
                    return nodes;
                }
                /**
                     * Return a mapping from label &rarr; [list of nodes].
                     *
                     * The map includes special entries corresponding to the names of rules and
                     * tokens referenced in tags in the original pattern. For additional
                     * information, see the description of {@link #getAll(String)}.
                     *
                     * @returns A mapping from labels to parse tree nodes. If the parse tree
                     * pattern did not contain any rule or token tags, this map will be empty.
                     */
                get labels()
                {
                    return this._labels;
                }
                /**
                     * Get the node at which we first detected a mismatch.
                     *
                     * @returns the node at which we first detected a mismatch, or `undefined`
                     * if the match was successful.
                     */
                get mismatchedNode()
                {
                    return this._mismatchedNode;
                }
                /**
                     * Gets a value indicating whether the match operation succeeded.
                     *
                     * @returns `true` if the match operation succeeded; otherwise,
                     * `false`.
                     */
                get succeeded()
                {
                    return !this._mismatchedNode;
                }
                /**
                     * Get the tree pattern we are matching against.
                     *
                     * @returns The tree pattern we are matching against.
                     */
                get pattern()
                {
                    return this._pattern;
                }
                /**
                     * Get the parse tree we are trying to match to a pattern.
                     *
                     * @returns The {@link ParseTree} we are trying to match to a pattern.
                     */
                get tree()
                {
                    return this._tree;
                }
                /**
                     * {@inheritDoc}
                     */
                toString()
                {
                    return `Match ${this.succeeded ? "succeeded" : "failed"}; found ${this.labels.size} labels`;
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], ParseTreeMatch.prototype, "getAll", null);
            __decorate([
            Decorators_1.NotNull
            ], ParseTreeMatch.prototype, "labels", null);
            __decorate([
            Decorators_1.NotNull
            ], ParseTreeMatch.prototype, "pattern", null);
            __decorate([
            Decorators_1.NotNull
            ], ParseTreeMatch.prototype, "tree", null);
            __decorate([
            Decorators_1.Override
            ], ParseTreeMatch.prototype, "toString", null);
            ParseTreeMatch = __decorate([
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull),
            __param(2, Decorators_1.NotNull)
            ], ParseTreeMatch);
            exports.ParseTreeMatch = ParseTreeMatch;

        }, {
            "../../Decorators": 224
        }],
        348: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // CONVERSTION complete, Burt Harris 10/14/2016
            const Decorators_1 = require("../../Decorators");
            const XPath_1 = require("../xpath/XPath");
            /**
             * A pattern like `<ID> = <expr>;` converted to a {@link ParseTree} by
             * {@link ParseTreePatternMatcher#compile(String, int)}.
             */
            let ParseTreePattern = class ParseTreePattern {
                /**
                     * Construct a new instance of the {@link ParseTreePattern} class.
                     *
                     * @param matcher The {@link ParseTreePatternMatcher} which created this
                     * tree pattern.
                     * @param pattern The tree pattern in concrete syntax form.
                     * @param patternRuleIndex The parser rule which serves as the root of the
                     * tree pattern.
                     * @param patternTree The tree pattern in {@link ParseTree} form.
                     */
                constructor(matcher, pattern, patternRuleIndex, patternTree)
                {
                    this._matcher = matcher;
                    this._patternRuleIndex = patternRuleIndex;
                    this._pattern = pattern;
                    this._patternTree = patternTree;
                }
                /**
                     * Match a specific parse tree against this tree pattern.
                     *
                     * @param tree The parse tree to match against this tree pattern.
                     * @returns A {@link ParseTreeMatch} object describing the result of the
                     * match operation. The `ParseTreeMatch.succeeded` method can be
                     * used to determine whether or not the match was successful.
                     */
                match(tree)
                {
                    return this._matcher.match(tree, this);
                }
                /**
                     * Determine whether or not a parse tree matches this tree pattern.
                     *
                     * @param tree The parse tree to match against this tree pattern.
                     * @returns `true` if `tree` is a match for the current tree
                     * pattern; otherwise, `false`.
                     */
                matches(tree)
                {
                    return this._matcher.match(tree, this).succeeded;
                }
                /**
                     * Find all nodes using XPath and then try to match those subtrees against
                     * this tree pattern.
                     *
                     * @param tree The {@link ParseTree} to match against this pattern.
                     * @param xpath An expression matching the nodes
                     *
                     * @returns A collection of {@link ParseTreeMatch} objects describing the
                     * successful matches. Unsuccessful matches are omitted from the result,
                     * regardless of the reason for the failure.
                     */
                findAll(tree, xpath)
                {
                    let subtrees = XPath_1.XPath.findAll(tree, xpath, this._matcher.parser);
                    let matches = [];
                    for (let t of subtrees) {
                        let match = this.match(t);
                        if (match.succeeded) {
                            matches.push(match);
                        }
                    }
                    return matches;
                }
                /**
                     * Get the {@link ParseTreePatternMatcher} which created this tree pattern.
                     *
                     * @returns The {@link ParseTreePatternMatcher} which created this tree
                     * pattern.
                     */
                get matcher()
                {
                    return this._matcher;
                }
                /**
                     * Get the tree pattern in concrete syntax form.
                     *
                     * @returns The tree pattern in concrete syntax form.
                     */
                get pattern()
                {
                    return this._pattern;
                }
                /**
                     * Get the parser rule which serves as the outermost rule for the tree
                     * pattern.
                     *
                     * @returns The parser rule which serves as the outermost rule for the tree
                     * pattern.
                     */
                get patternRuleIndex()
                {
                    return this._patternRuleIndex;
                }
                /**
                     * Get the tree pattern as a {@link ParseTree}. The rule and token tags from
                     * the pattern are present in the parse tree as terminal nodes with a symbol
                     * of type {@link RuleTagToken} or {@link TokenTagToken}.
                     *
                     * @returns The tree pattern as a {@link ParseTree}.
                     */
                get patternTree()
                {
                    return this._patternTree;
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], ParseTreePattern.prototype, "_pattern", void 0);
            __decorate([
            Decorators_1.NotNull
            ], ParseTreePattern.prototype, "_patternTree", void 0);
            __decorate([
            Decorators_1.NotNull
            ], ParseTreePattern.prototype, "_matcher", void 0);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull)
            ], ParseTreePattern.prototype, "match", null);
            __decorate([
            __param(0, Decorators_1.NotNull)
            ], ParseTreePattern.prototype, "matches", null);
            __decorate([
            Decorators_1.NotNull,
            __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)
            ], ParseTreePattern.prototype, "findAll", null);
            __decorate([
            Decorators_1.NotNull
            ], ParseTreePattern.prototype, "matcher", null);
            __decorate([
            Decorators_1.NotNull
            ], ParseTreePattern.prototype, "pattern", null);
            __decorate([
            Decorators_1.NotNull
            ], ParseTreePattern.prototype, "patternTree", null);
            ParseTreePattern = __decorate([
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull),
            __param(3, Decorators_1.NotNull)
            ], ParseTreePattern);
            exports.ParseTreePattern = ParseTreePattern;

        }, {
            "../../Decorators": 224,
            "../xpath/XPath": 354
        }],
        349: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // CONVERSTION complete, Burt Harris 10/14/2016
            const BailErrorStrategy_1 = require("../../BailErrorStrategy");
            const CharStreams_1 = require("../../CharStreams");
            const CommonTokenStream_1 = require("../../CommonTokenStream");
            const ListTokenSource_1 = require("../../ListTokenSource");
            const MultiMap_1 = require("../../misc/MultiMap");
            const Decorators_1 = require("../../Decorators");
            const ParseCancellationException_1 = require("../../misc/ParseCancellationException");
            const ParserInterpreter_1 = require("../../ParserInterpreter");
            const ParserRuleContext_1 = require("../../ParserRuleContext");
            const ParseTreeMatch_1 = require("./ParseTreeMatch");
            const ParseTreePattern_1 = require("./ParseTreePattern");
            const RecognitionException_1 = require("../../RecognitionException");
            const RuleNode_1 = require("../RuleNode");
            const RuleTagToken_1 = require("./RuleTagToken");
            const TagChunk_1 = require("./TagChunk");
            const TerminalNode_1 = require("../TerminalNode");
            const TextChunk_1 = require("./TextChunk");
            const Token_1 = require("../../Token");
            const TokenTagToken_1 = require("./TokenTagToken");
            /**
             * A tree pattern matching mechanism for ANTLR {@link ParseTree}s.
             *
             * Patterns are strings of source input text with special tags representing
             * token or rule references such as:
             *
             * ```
             * <ID> = <expr>;
             * ```
             *
             * Given a pattern start rule such as `statement`, this object constructs
             * a {@link ParseTree} with placeholders for the `ID` and `expr`
             * subtree. Then the {@link #match} routines can compare an actual
             * {@link ParseTree} from a parse with this pattern. Tag `<ID>` matches
             * any `ID` token and tag `<expr>` references the result of the
             * `expr` rule (generally an instance of `ExprContext`.
             *
             * Pattern `x = 0;` is a similar pattern that matches the same pattern
             * except that it requires the identifier to be `x` and the expression to
             * be `0`.
             *
             * The {@link #matches} routines return `true` or `false` based
             * upon a match for the tree rooted at the parameter sent in. The
             * {@link #match} routines return a {@link ParseTreeMatch} object that
             * contains the parse tree, the parse tree pattern, and a map from tag name to
             * matched nodes (more below). A subtree that fails to match, returns with
             * {@link ParseTreeMatch#mismatchedNode} set to the first tree node that did not
             * match.
             *
             * For efficiency, you can compile a tree pattern in string form to a
             * {@link ParseTreePattern} object.
             *
             * See `TestParseTreeMatcher` for lots of examples.
             * {@link ParseTreePattern} has two static helper methods:
             * {@link ParseTreePattern#findAll} and {@link ParseTreePattern#match} that
             * are easy to use but not super efficient because they create new
             * {@link ParseTreePatternMatcher} objects each time and have to compile the
             * pattern in string form before using it.
             *
             * The lexer and parser that you pass into the {@link ParseTreePatternMatcher}
             * constructor are used to parse the pattern in string form. The lexer converts
             * the `<ID> = <expr>;` into a sequence of four tokens (assuming lexer
             * throws out whitespace or puts it on a hidden channel). Be aware that the
             * input stream is reset for the lexer (but not the parser; a
             * {@link ParserInterpreter} is created to parse the input.). Any user-defined
             * fields you have put into the lexer might get changed when this mechanism asks
             * it to scan the pattern string.
             *
             * Normally a parser does not accept token `<expr>` as a valid
             * `expr` but, from the parser passed in, we create a special version of
             * the underlying grammar representation (an {@link ATN}) that allows imaginary
             * tokens representing rules (`<expr>`) to match entire rules. We call
             * these *bypass alternatives*.
             *
             * Delimiters are `<`} and `>`}, with `\` as the escape string
             * by default, but you can set them to whatever you want using
             * {@link #setDelimiters}. You must escape both start and stop strings
             * `\<` and `\>`.
             */
            class ParseTreePatternMatcher {
                /**
                     * Constructs a {@link ParseTreePatternMatcher} or from a {@link Lexer} and
                     * {@link Parser} object. The lexer input stream is altered for tokenizing
                     * the tree patterns. The parser is used as a convenient mechanism to get
                     * the grammar name, plus token, rule names.
                     */
                constructor(lexer, parser)
                {
                    this.start = "<";
                    this.stop = ">";
                    this.escape = "\\"; // e.g., \< and \> must escape BOTH!
                    /**
                             * Regular expression corresponding to escape, for global replace
                             */
                    this.escapeRE = /\\/g;
                    this._lexer = lexer;
                    this._parser = parser;
                }
                /**
                     * Set the delimiters used for marking rule and token tags within concrete
                     * syntax used by the tree pattern parser.
                     *
                     * @param start The start delimiter.
                     * @param stop The stop delimiter.
                     * @param escapeLeft The escape sequence to use for escaping a start or stop delimiter.
                     *
                     * @throws {@link Error} if `start` is not defined or empty.
                     * @throws {@link Error} if `stop` is not defined or empty.
                     */
                setDelimiters(start, stop, escapeLeft)
                {
                    if (!start) {
                        throw new Error("start cannot be null or empty");
                    }
                    if (!stop) {
                        throw new Error("stop cannot be null or empty");
                    }
                    this.start = start;
                    this.stop = stop;
                    this.escape = escapeLeft;
                    this.escapeRE = new RegExp(escapeLeft.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "g");
                }
                matches(tree, pattern, patternRuleIndex=0)
                {
                    if (typeof pattern === "string") {
                        let p = this.compile(pattern, patternRuleIndex);
                        return this.matches(tree, p);
                    }
                    else {
                        let labels = new MultiMap_1.MultiMap();
                        let mismatchedNode = this.matchImpl(tree, pattern.patternTree, labels);
                        return !mismatchedNode;
                    }
                }
                // Implementation of match
                match(tree, pattern, patternRuleIndex=0)
                {
                    if (typeof pattern === "string") {
                        let p = this.compile(pattern, patternRuleIndex);
                        return this.match(tree, p);
                    }
                    else {
                        let labels = new MultiMap_1.MultiMap();
                        let mismatchedNode = this.matchImpl(tree, pattern.patternTree, labels);
                        return new ParseTreeMatch_1.ParseTreeMatch(tree, pattern, labels, mismatchedNode);
                    }
                }
                /**
                     * For repeated use of a tree pattern, compile it to a
                     * {@link ParseTreePattern} using this method.
                     */
                compile(pattern, patternRuleIndex)
                {
                    let tokenList = this.tokenize(pattern);
                    let tokenSrc = new ListTokenSource_1.ListTokenSource(tokenList);
                    let tokens = new CommonTokenStream_1.CommonTokenStream(tokenSrc);
                    const parser = this._parser;
                    let parserInterp = new ParserInterpreter_1.ParserInterpreter(parser.grammarFileName, parser.vocabulary, parser.ruleNames, parser.getATNWithBypassAlts(), tokens);
                    let tree;
                    try {
                        parserInterp.errorHandler = new BailErrorStrategy_1.BailErrorStrategy();
                        tree = parserInterp.parse(patternRuleIndex);

                    }//     System.out.println("pattern tree = "+tree.toStringTree(parserInterp));
                    catch (e) {
                        if (e instanceof ParseCancellationException_1.ParseCancellationException) {
                            throw e.getCause();
                        }
                        else if (e instanceof RecognitionException_1.RecognitionException) {
                            throw e;
                        }
                        else if (e instanceof Error) {
                            throw new ParseTreePatternMatcher.CannotInvokeStartRule(e);
                        }
                        else {
                            throw e;
                        }
                    }
                    // Make sure tree pattern compilation checks for a complete parse
                    if (tokens.LA(1) !== Token_1.Token.EOF) {
                        throw new ParseTreePatternMatcher.StartRuleDoesNotConsumeFullPattern();
                    }
                    return new ParseTreePattern_1.ParseTreePattern(this, pattern, patternRuleIndex, tree);
                }
                /**
                     * Used to convert the tree pattern string into a series of tokens. The
                     * input stream is reset.
                     */
                get lexer()
                {
                    return this._lexer;
                }
                /**
                     * Used to collect to the grammar file name, token names, rule names for
                     * used to parse the pattern into a parse tree.
                     */
                get parser()
                {
                    return this._parser;
                }
                // ---- SUPPORT CODE ----
                /**
                     * Recursively walk `tree` against `patternTree`, filling
                     * `match.`{@link ParseTreeMatch#labels labels}.
                     *
                     * @returns the first node encountered in `tree` which does not match
                     * a corresponding node in `patternTree`, or `undefined` if the match
                     * was successful. The specific node returned depends on the matching
                     * algorithm used by the implementation, and may be overridden.
                     */
                matchImpl(tree, patternTree, labels)
                {
                    if (!tree) {
                        throw new TypeError("tree cannot be null");
                    }
                    if (!patternTree) {
                        throw new TypeError("patternTree cannot be null");
                    }
                    // x and <ID>, x and y, or x and x; or could be mismatched types
                    if (tree instanceof TerminalNode_1.TerminalNode && patternTree instanceof TerminalNode_1.TerminalNode) {
                        let mismatchedNode;
                        // both are tokens and they have same type
                        if (tree.symbol.type === patternTree.symbol.type) {
                            if (patternTree.symbol instanceof TokenTagToken_1.TokenTagToken) {
                                // x and <ID>
                                let tokenTagToken = patternTree.symbol;
                                // track label->list-of-nodes for both token name and label (if any)
                                labels.map(tokenTagToken.tokenName, tree);
                                const l = tokenTagToken.label;
                                if (l) {
                                    labels.map(l, tree);
                                }
                            }
                            else if (tree.text === patternTree.text) {

                            }
                            else {
                                // x and y
                                if (!mismatchedNode) {
                                    mismatchedNode = tree;
                                }
                            }
                        }
                        else {
                            if (!mismatchedNode) {
                                mismatchedNode = tree;
                            }
                        }
                        return mismatchedNode;
                    }
                    if (tree instanceof ParserRuleContext_1.ParserRuleContext
                    && patternTree instanceof ParserRuleContext_1.ParserRuleContext) {
                        let mismatchedNode;
                        // (expr ...) and <expr>
                        let ruleTagToken = this.getRuleTagToken(patternTree);
                        if (ruleTagToken) {
                            let m;
                            if (tree.ruleContext.ruleIndex === patternTree.ruleContext.ruleIndex) {
                                // track label->list-of-nodes for both rule name and label (if any)
                                labels.map(ruleTagToken.ruleName, tree);
                                const l = ruleTagToken.label;
                                if (l) {
                                    labels.map(l, tree);
                                }
                            }
                            else {
                                if (!mismatchedNode) {
                                    mismatchedNode = tree;
                                }
                            }
                            return mismatchedNode;
                        }
                        // (expr ...) and (expr ...)
                        if (tree.childCount !== patternTree.childCount) {
                            if (!mismatchedNode) {
                                mismatchedNode = tree;
                            }
                            return mismatchedNode;
                        }
                        let n = tree.childCount;
                        for (let i = 0; i < n; i++) {
                            let childMatch = this.matchImpl(tree.getChild(i), patternTree.getChild(i), labels);
                            if (childMatch) {
                                return childMatch;
                            }
                        }
                        return mismatchedNode;
                    }
                    // if nodes aren't both tokens or both rule nodes, can't match
                    return tree;
                }
                /** Is `t` `(expr <expr>)` subtree? */
                getRuleTagToken(t)
                {
                    if (t instanceof RuleNode_1.RuleNode) {
                        if (t.childCount === 1 && t.getChild(0) instanceof TerminalNode_1.TerminalNode) {
                            let c = t.getChild(0);
                            if (c.symbol instanceof RuleTagToken_1.RuleTagToken) {
                                //          System.out.println("rule tag subtree "+t.toStringTree(parser));
                                return c.symbol;
                            }
                        }
                    }
                    return undefined;
                }
                tokenize(pattern)
                {
                    // split pattern into chunks: sea (raw input) and islands (<ID>, <expr>)
                    let chunks = this.split(pattern);
                    // create token stream from text and tags
                    let tokens = [];
                    for (let chunk of chunks) {
                        if (chunk instanceof TagChunk_1.TagChunk) {
                            let tagChunk = chunk;
                            const firstChar = tagChunk.tag.substr(0, 1);
                            // add special rule token or conjure up new token from name
                            if (firstChar === firstChar.toUpperCase()) {
                                let ttype = this._parser.getTokenType(tagChunk.tag);
                                if (ttype === Token_1.Token.INVALID_TYPE) {
                                    throw new Error("Unknown token " + tagChunk.tag + " in pattern: " + pattern);
                                }
                                let t = new TokenTagToken_1.TokenTagToken(tagChunk.tag, ttype, tagChunk.label);
                                tokens.push(t);
                            }
                            else if (firstChar === firstChar.toLowerCase()) {
                                let ruleIndex = this._parser.getRuleIndex(tagChunk.tag);
                                if (ruleIndex === -1) {
                                    throw new Error("Unknown rule " + tagChunk.tag + " in pattern: " + pattern);
                                }
                                let ruleImaginaryTokenType = this._parser.getATNWithBypassAlts().ruleToTokenType[ruleIndex];
                                tokens.push(new RuleTagToken_1.RuleTagToken(tagChunk.tag, ruleImaginaryTokenType, tagChunk.label));
                            }
                            else {
                                throw new Error("invalid tag: " + tagChunk.tag + " in pattern: " + pattern);
                            }
                        }
                        else {
                            let textChunk = chunk;
                            this._lexer.inputStream = CharStreams_1.CharStreams.fromString(textChunk.text);
                            let t = this._lexer.nextToken();
                            while (t.type !== Token_1.Token.EOF) {
                                tokens.push(t);
                                t = this._lexer.nextToken();
                            }
                        }
                    }
                    //    System.out.println("tokens="+tokens);
                    return tokens;
                }
                /** Split `<ID> = <e:expr> ;` into 4 chunks for tokenizing by {@link #tokenize}. */
                split(pattern)
                {
                    let p = 0;
                    let n = pattern.length;
                    let chunks = [];
                    let buf;
                    // find all start and stop indexes first, then collect
                    let starts = [];
                    let stops = [];
                    while (p < n) {
                        if (p === pattern.indexOf(this.escape + this.start, p)) {
                            p += this.escape.length + this.start.length;
                        }
                        else if (p === pattern.indexOf(this.escape + this.stop, p)) {
                            p += this.escape.length + this.stop.length;
                        }
                        else if (p === pattern.indexOf(this.start, p)) {
                            starts.push(p);
                            p += this.start.length;
                        }
                        else if (p === pattern.indexOf(this.stop, p)) {
                            stops.push(p);
                            p += this.stop.length;
                        }
                        else {
                            p++;
                        }
                    }
                    //    System.out.println("");
                    //    System.out.println(starts);
                    //    System.out.println(stops);
                    if (starts.length > stops.length) {
                        throw new Error("unterminated tag in pattern: " + pattern);
                    }
                    if (starts.length < stops.length) {
                        throw new Error("missing start tag in pattern: " + pattern);
                    }
                    let ntags = starts.length;
                    for (let i = 0; i < ntags; i++) {
                        if (starts[i] >= stops[i]) {
                            throw new Error("tag delimiters out of order in pattern: " + pattern);
                        }
                    }
                    // collect into chunks now
                    if (ntags === 0) {
                        let text = pattern.substring(0, n);
                        chunks.push(new TextChunk_1.TextChunk(text));
                    }
                    if (ntags > 0 && starts[0] > 0) {
                        // copy text up to first tag into chunks
                        let text = pattern.substring(0, starts[0]);
                        chunks.push(new TextChunk_1.TextChunk(text));
                    }
                    for (let i = 0; i < ntags; i++) {
                        // copy inside of <tag>
                        let tag = pattern.substring(starts[i] + this.start.length, stops[i]);
                        let ruleOrToken = tag;
                        let label;
                        let colon = tag.indexOf(":");
                        if (colon >= 0) {
                            label = tag.substring(0, colon);
                            ruleOrToken = tag.substring(colon + 1, tag.length);
                        }
                        chunks.push(new TagChunk_1.TagChunk(ruleOrToken, label));
                        if (i + 1 < ntags) {
                            // copy from end of <tag> to start of next
                            let text = pattern.substring(stops[i] + this.stop.length, starts[i + 1]);
                            chunks.push(new TextChunk_1.TextChunk(text));
                        }
                    }
                    if (ntags > 0) {
                        let afterLastTag = stops[ntags - 1] + this.stop.length;
                        if (afterLastTag < n) {
                            // copy text from end of last tag to end
                            let text = pattern.substring(afterLastTag, n);
                            chunks.push(new TextChunk_1.TextChunk(text));
                        }
                    }
                    // strip out the escape sequences from text chunks but not tags
                    for (let i = 0; i < chunks.length; i++) {
                        let c = chunks[i];
                        if (c instanceof TextChunk_1.TextChunk) {
                            let unescaped = c.text.replace(this.escapeRE, "");
                            if (unescaped.length < c.text.length) {
                                chunks[i] = new TextChunk_1.TextChunk(unescaped);
                            }
                        }
                    }
                    return chunks;
                }
            }
            __decorate([
            Decorators_1.NotNull,
            __param(1, Decorators_1.NotNull)
            ], ParseTreePatternMatcher.prototype, "match", null);
            __decorate([
            Decorators_1.NotNull
            ], ParseTreePatternMatcher.prototype, "lexer", null);
            __decorate([
            Decorators_1.NotNull
            ], ParseTreePatternMatcher.prototype, "parser", null);
            __decorate([
            __param(0, Decorators_1.NotNull),
            __param(1, Decorators_1.NotNull),
            __param(2, Decorators_1.NotNull)
            ], ParseTreePatternMatcher.prototype, "matchImpl", null);
            exports.ParseTreePatternMatcher = ParseTreePatternMatcher;
            (function(ParseTreePatternMatcher) {
                class CannotInvokeStartRule extends Error {
                    constructor(error)
                    {
                        super(`CannotInvokeStartRule: ${error}`);
                        this.error = error;
                    }
                }
                ParseTreePatternMatcher.CannotInvokeStartRule = CannotInvokeStartRule;
                // Fixes https://github.com/antlr/antlr4/issues/413
                // "Tree pattern compilation doesn't check for a complete parse"
                class StartRuleDoesNotConsumeFullPattern extends Error {
                    constructor()
                    {
                        super("StartRuleDoesNotConsumeFullPattern");
                    }
                }
                ParseTreePatternMatcher.StartRuleDoesNotConsumeFullPattern = StartRuleDoesNotConsumeFullPattern;
            })(ParseTreePatternMatcher = exports.ParseTreePatternMatcher || (exports.ParseTreePatternMatcher = {}));

        }, {
            "../../BailErrorStrategy": 215,
            "../../CharStreams": 217,
            "../../CommonTokenStream": 222,
            "../../Decorators": 224,
            "../../ListTokenSource": 235,
            "../../ParserInterpreter": 238,
            "../../ParserRuleContext": 239,
            "../../RecognitionException": 242,
            "../../Token": 248,
            "../../misc/MultiMap": 332,
            "../../misc/ParseCancellationException": 335,
            "../RuleNode": 342,
            "../TerminalNode": 343,
            "./ParseTreeMatch": 347,
            "./ParseTreePattern": 348,
            "./RuleTagToken": 350,
            "./TagChunk": 351,
            "./TextChunk": 352,
            "./TokenTagToken": 353
        }],
        350: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../../Decorators");
            const Token_1 = require("../../Token");
            /**
             * A {@link Token} object representing an entire subtree matched by a parser
             * rule; e.g., `<expr>`. These tokens are created for {@link TagChunk}
             * chunks where the tag corresponds to a parser rule.
             */
            let RuleTagToken = class RuleTagToken {
                /**
                     * Constructs a new instance of {@link RuleTagToken} with the specified rule
                     * name, bypass token type, and label.
                     *
                     * @param ruleName The name of the parser rule this rule tag matches.
                     * @param bypassTokenType The bypass token type assigned to the parser rule.
                     * @param label The label associated with the rule tag, or `undefined` if
                     * the rule tag is unlabeled.
                     *
                     * @exception IllegalArgumentException if `ruleName` is not defined
                     * or empty.
                     */
                constructor(ruleName, bypassTokenType, label)
                {
                    if (ruleName == null || ruleName.length === 0) {
                        throw new Error("ruleName cannot be null or empty.");
                    }
                    this._ruleName = ruleName;
                    this.bypassTokenType = bypassTokenType;
                    this._label = label;
                }
                /**
                     * Gets the name of the rule associated with this rule tag.
                     *
                     * @returns The name of the parser rule associated with this rule tag.
                     */
                get ruleName()
                {
                    return this._ruleName;
                }
                /**
                     * Gets the label associated with the rule tag.
                     *
                     * @returns The name of the label associated with the rule tag, or
                     * `undefined` if this is an unlabeled rule tag.
                     */
                get label()
                {
                    return this._label;
                }
                /**
                     * {@inheritDoc}
                     *
                     * Rule tag tokens are always placed on the {@link #DEFAULT_CHANNEL}.
                     */
                get channel()
                {
                    return Token_1.Token.DEFAULT_CHANNEL;
                }
                /**
                     * {@inheritDoc}
                     *
                     * This method returns the rule tag formatted with `<` and `>`
                     * delimiters.
                     */
                get text()
                {
                    if (this._label != null) {
                        return "<" + this._label + ":" + this._ruleName + ">";
                    }
                    return "<" + this._ruleName + ">";
                }
                /**
                     * {@inheritDoc}
                     *
                     * Rule tag tokens have types assigned according to the rule bypass
                     * transitions created during ATN deserialization.
                     */
                get type()
                {
                    return this.bypassTokenType;
                }
                /**
                     * {@inheritDoc}
                     *
                     * The implementation for {@link RuleTagToken} always returns 0.
                     */
                get line()
                {
                    return 0;
                }
                /**
                     * {@inheritDoc}
                     *
                     * The implementation for {@link RuleTagToken} always returns -1.
                     */
                get charPositionInLine()
                {
                    return -1;
                }
                /**
                     * {@inheritDoc}
                     *
                     * The implementation for {@link RuleTagToken} always returns -1.
                     */
                get tokenIndex()
                {
                    return -1;
                }
                /**
                     * {@inheritDoc}
                     *
                     * The implementation for {@link RuleTagToken} always returns -1.
                     */
                get startIndex()
                {
                    return -1;
                }
                /**
                     * {@inheritDoc}
                     *
                     * The implementation for {@link RuleTagToken} always returns -1.
                     */
                get stopIndex()
                {
                    return -1;
                }
                /**
                     * {@inheritDoc}
                     *
                     * The implementation for {@link RuleTagToken} always returns `undefined`.
                     */
                get tokenSource()
                {
                    return undefined;
                }
                /**
                     * {@inheritDoc}
                     *
                     * The implementation for {@link RuleTagToken} always returns `undefined`.
                     */
                get inputStream()
                {
                    return undefined;
                }
                /**
                     * {@inheritDoc}
                     *
                     * The implementation for {@link RuleTagToken} returns a string of the form
                     * `ruleName:bypassTokenType`.
                     */
                toString()
                {
                    return this._ruleName + ":" + this.bypassTokenType;
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], RuleTagToken.prototype, "ruleName", null);
            __decorate([
            Decorators_1.Override
            ], RuleTagToken.prototype, "channel", null);
            __decorate([
            Decorators_1.Override
            ], RuleTagToken.prototype, "text", null);
            __decorate([
            Decorators_1.Override
            ], RuleTagToken.prototype, "type", null);
            __decorate([
            Decorators_1.Override
            ], RuleTagToken.prototype, "line", null);
            __decorate([
            Decorators_1.Override
            ], RuleTagToken.prototype, "charPositionInLine", null);
            __decorate([
            Decorators_1.Override
            ], RuleTagToken.prototype, "tokenIndex", null);
            __decorate([
            Decorators_1.Override
            ], RuleTagToken.prototype, "startIndex", null);
            __decorate([
            Decorators_1.Override
            ], RuleTagToken.prototype, "stopIndex", null);
            __decorate([
            Decorators_1.Override
            ], RuleTagToken.prototype, "tokenSource", null);
            __decorate([
            Decorators_1.Override
            ], RuleTagToken.prototype, "inputStream", null);
            __decorate([
            Decorators_1.Override
            ], RuleTagToken.prototype, "toString", null);
            RuleTagToken = __decorate([
            __param(0, Decorators_1.NotNull)
            ], RuleTagToken);
            exports.RuleTagToken = RuleTagToken;

        }, {
            "../../Decorators": 224,
            "../../Token": 248
        }],
        351: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:46.1670669-07:00
            const Chunk_1 = require("./Chunk");
            const Decorators_1 = require("../../Decorators");
            /**
             * Represents a placeholder tag in a tree pattern. A tag can have any of the
             * following forms.
             *
             * * `expr`: An unlabeled placeholder for a parser rule `expr`.
             * * `ID`: An unlabeled placeholder for a token of type `ID`.
             * * `e:expr`: A labeled placeholder for a parser rule `expr`.
             * * `id:ID`: A labeled placeholder for a token of type `ID`.
             *
             * This class does not perform any validation on the tag or label names aside
             * from ensuring that the tag is a defined, non-empty string.
             */
            class TagChunk extends Chunk_1.Chunk {
                /**
                     * Construct a new instance of {@link TagChunk} using the specified label
                     * and tag.
                     *
                     * @param label The label for the tag. If this is `undefined`, the
                     * {@link TagChunk} represents an unlabeled tag.
                     * @param tag The tag, which should be the name of a parser rule or token
                     * type.
                     *
                     * @exception IllegalArgumentException if `tag` is not defined or
                     * empty.
                     */
                constructor(tag, label)
                {
                    super();
                    if (tag == null || tag.length === 0) {
                        throw new Error("tag cannot be null or empty");
                    }
                    this._tag = tag;
                    this._label = label;
                }
                /**
                     * Get the tag for this chunk.
                     *
                     * @returns The tag for the chunk.
                     */
                get tag()
                {
                    return this._tag;
                }
                /**
                     * Get the label, if any, assigned to this chunk.
                     *
                     * @returns The label assigned to this chunk, or `undefined` if no label is
                     * assigned to the chunk.
                     */
                get label()
                {
                    return this._label;
                }
                /**
                     * This method returns a text representation of the tag chunk. Labeled tags
                     * are returned in the form `label:tag`, and unlabeled tags are
                     * returned as just the tag name.
                     */
                toString()
                {
                    if (this._label != null) {
                        return this._label + ":" + this._tag;
                    }
                    return this._tag;
                }
            }
            __decorate([
            Decorators_1.NotNull
            ], TagChunk.prototype, "tag", null);
            __decorate([
            Decorators_1.Override
            ], TagChunk.prototype, "toString", null);
            exports.TagChunk = TagChunk;

        }, {
            "../../Decorators": 224,
            "./Chunk": 346
        }],
        352: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:46.2521448-07:00
            const Chunk_1 = require("./Chunk");
            const Decorators_1 = require("../../Decorators");
            /**
             * Represents a span of raw text (concrete syntax) between tags in a tree
             * pattern string.
             */
            let TextChunk = class TextChunk extends Chunk_1.Chunk {
                /**
                     * Constructs a new instance of {@link TextChunk} with the specified text.
                     *
                     * @param text The text of this chunk.
                     * @exception IllegalArgumentException if `text` is not defined.
                     */
                constructor(text)
                {
                    super();
                    if (text == null) {
                        throw new Error("text cannot be null");
                    }
                    this._text = text;
                }
                /**
                     * Gets the raw text of this chunk.
                     *
                     * @returns The text of the chunk.
                     */
                get text()
                {
                    return this._text;
                }
                /**
                     * {@inheritDoc}
                     *
                     * The implementation for {@link TextChunk} returns the result of
                     * `text` in single quotes.
                     */
                toString()
                {
                    return "'" + this._text + "'";
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], TextChunk.prototype, "_text", void 0);
            __decorate([
            Decorators_1.NotNull
            ], TextChunk.prototype, "text", null);
            __decorate([
            Decorators_1.Override
            ], TextChunk.prototype, "toString", null);
            TextChunk = __decorate([
            __param(0, Decorators_1.NotNull)
            ], TextChunk);
            exports.TextChunk = TextChunk;

        }, {
            "../../Decorators": 224,
            "./Chunk": 346
        }],
        353: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            var __param = (this && this.__param) || function(paramIndex, decorator) {
                return function(target, key) {
                    decorator(target, key, paramIndex);
                }
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:46.3281988-07:00
            const CommonToken_1 = require("../../CommonToken");
            const Decorators_1 = require("../../Decorators");
            /**
             * A {@link Token} object representing a token of a particular type; e.g.,
             * `<ID>`. These tokens are created for {@link TagChunk} chunks where the
             * tag corresponds to a lexer rule or token type.
             */
            let TokenTagToken = class TokenTagToken extends CommonToken_1.CommonToken {
                /**
                     * Constructs a new instance of {@link TokenTagToken} with the specified
                     * token name, type, and label.
                     *
                     * @param tokenName The token name.
                     * @param type The token type.
                     * @param label The label associated with the token tag, or `undefined` if
                     * the token tag is unlabeled.
                     */
                constructor(tokenName, type, label)
                {
                    super(type);
                    this._tokenName = tokenName;
                    this._label = label;
                }
                /**
                     * Gets the token name.
                     * @returns The token name.
                     */
                get tokenName()
                {
                    return this._tokenName;
                }
                /**
                     * Gets the label associated with the rule tag.
                     *
                     * @returns The name of the label associated with the rule tag, or
                     * `undefined` if this is an unlabeled rule tag.
                     */
                get label()
                {
                    return this._label;
                }
                /**
                     * {@inheritDoc}
                     *
                     * The implementation for {@link TokenTagToken} returns the token tag
                     * formatted with `<` and `>` delimiters.
                     */
                get text()
                {
                    if (this._label != null) {
                        return "<" + this._label + ":" + this._tokenName + ">";
                    }
                    return "<" + this._tokenName + ">";
                }
                /**
                     * {@inheritDoc}
                     *
                     * The implementation for {@link TokenTagToken} returns a string of the form
                     * `tokenName:type`.
                     */
                toString()
                {
                    return this._tokenName + ":" + this.type;
                }
            }
            ;
            __decorate([
            Decorators_1.NotNull
            ], TokenTagToken.prototype, "_tokenName", void 0);
            __decorate([
            Decorators_1.NotNull
            ], TokenTagToken.prototype, "tokenName", null);
            __decorate([
            Decorators_1.Override
            ], TokenTagToken.prototype, "text", null);
            __decorate([
            Decorators_1.Override
            ], TokenTagToken.prototype, "toString", null);
            TokenTagToken = __decorate([
            __param(0, Decorators_1.NotNull)
            ], TokenTagToken);
            exports.TokenTagToken = TokenTagToken;

        }, {
            "../../CommonToken": 220,
            "../../Decorators": 224
        }],
        354: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // ConvertTo-TS run at 2016-10-04T11:26:46.4373888-07:00
            const CharStreams_1 = require("../../CharStreams");
            const CommonTokenStream_1 = require("../../CommonTokenStream");
            const LexerNoViableAltException_1 = require("../../LexerNoViableAltException");
            const ParserRuleContext_1 = require("../../ParserRuleContext");
            const Token_1 = require("../../Token");
            const XPathLexer_1 = require("./XPathLexer");
            const XPathLexerErrorListener_1 = require("./XPathLexerErrorListener");
            const XPathRuleAnywhereElement_1 = require("./XPathRuleAnywhereElement");
            const XPathRuleElement_1 = require("./XPathRuleElement");
            const XPathTokenAnywhereElement_1 = require("./XPathTokenAnywhereElement");
            const XPathTokenElement_1 = require("./XPathTokenElement");
            const XPathWildcardAnywhereElement_1 = require("./XPathWildcardAnywhereElement");
            const XPathWildcardElement_1 = require("./XPathWildcardElement");
            /**
             * Represent a subset of XPath XML path syntax for use in identifying nodes in
             * parse trees.
             *
             * Split path into words and separators `/` and `//` via ANTLR
             * itself then walk path elements from left to right. At each separator-word
             * pair, find set of nodes. Next stage uses those as work list.
             *
             * The basic interface is
             * {@link XPath#findAll ParseTree.findAll}`(tree, pathString, parser)`.
             * But that is just shorthand for:
             *
             * ```
             * let p = new XPath(parser, pathString);
             * return p.evaluate(tree);
             * ```
             *
             * See `TestXPath` for descriptions. In short, this
             * allows operators:
             *
             * | | |
             * | --- | --- |
             * | `/` | root |
             * | `//` | anywhere |
             * | `!` | invert; this much appear directly after root or anywhere operator |
             *
             * and path elements:
             *
             * | | |
             * | --- | --- |
             * | `ID` | token name |
             * | `'string'` | any string literal token from the grammar |
             * | `expr` | rule name |
             * | `*` | wildcard matching any node |
             *
             * Whitespace is not allowed.
             */
            class XPath {
                constructor(parser, path)
                {
                    this.parser = parser;
                    this.path = path;
                    this.elements = this.split(path);

                }
                // console.log(this.elements.toString());
                // TODO: check for invalid token/rule names, bad syntax
                split(path)
                {
                    let lexer = new XPathLexer_1.XPathLexer(CharStreams_1.CharStreams.fromString(path));
                    lexer.recover = (e) => {
                        throw e;
                    };
                    lexer.removeErrorListeners();
                    lexer.addErrorListener(new XPathLexerErrorListener_1.XPathLexerErrorListener());
                    let tokenStream = new CommonTokenStream_1.CommonTokenStream(lexer);
                    try {
                        tokenStream.fill();
                    }
                    catch (e) {
                        if (e instanceof LexerNoViableAltException_1.LexerNoViableAltException) {
                            let pos = lexer.charPositionInLine;
                            let msg = "Invalid tokens or characters at index " + pos + " in path '" + path + "' -- " + e.message;
                            throw new RangeError(msg);
                        }
                        throw e;
                    }
                    let tokens = tokenStream.getTokens();
                    // console.log("path=" + path + "=>" + tokens);
                    let elements = [];
                    let n = tokens.length;
                    let i = 0;
                    loop:
                    while (i < n) {
                        let el = tokens[i];
                        let next;
                        switch (el.type) {
                        case XPathLexer_1.XPathLexer.ROOT:
                        case XPathLexer_1.XPathLexer.ANYWHERE:
                            let anywhere = el.type === XPathLexer_1.XPathLexer.ANYWHERE;
                            i++;
                            next = tokens[i];
                            let invert = next.type === XPathLexer_1.XPathLexer.BANG;
                            if (invert) {
                                i++;
                                next = tokens[i];
                            }
                            let pathElement = this.getXPathElement(next, anywhere);
                            pathElement.invert = invert;
                            elements.push(pathElement);
                            i++;
                            break;
                        case XPathLexer_1.XPathLexer.TOKEN_REF:
                        case XPathLexer_1.XPathLexer.RULE_REF:
                        case XPathLexer_1.XPathLexer.WILDCARD:
                            elements.push(this.getXPathElement(el, false));
                            i++;
                            break;
                        case Token_1.Token.EOF:
                            break loop;
                        default:
                            throw new Error("Unknowth path element " + el);
                        }
                    }
                    return elements;
                }
                /**
                     * Convert word like `*` or `ID` or `expr` to a path
                     * element. `anywhere` is `true` if `//` precedes the
                     * word.
                     */
                getXPathElement(wordToken, anywhere)
                {
                    if (wordToken.type === Token_1.Token.EOF) {
                        throw new Error("Missing path element at end of path");
                    }
                    let word = wordToken.text;
                    if (word == null) {
                        throw new Error("Expected wordToken to have text content.");
                    }
                    let ttype = this.parser.getTokenType(word);
                    let ruleIndex = this.parser.getRuleIndex(word);
                    switch (wordToken.type) {
                    case XPathLexer_1.XPathLexer.WILDCARD:
                        return anywhere ?
                        new XPathWildcardAnywhereElement_1.XPathWildcardAnywhereElement() :
                        new XPathWildcardElement_1.XPathWildcardElement();
                    case XPathLexer_1.XPathLexer.TOKEN_REF:
                    case XPathLexer_1.XPathLexer.STRING:
                        if (ttype === Token_1.Token.INVALID_TYPE) {
                            throw new Error(word + " at index " +
                            wordToken.startIndex +
                            " isn't a valid token name");
                        }
                        return anywhere ?
                        new XPathTokenAnywhereElement_1.XPathTokenAnywhereElement(word, ttype) :
                        new XPathTokenElement_1.XPathTokenElement(word, ttype);
                    default:
                        if (ruleIndex === -1) {
                            throw new Error(word + " at index " +
                            wordToken.startIndex +
                            " isn't a valid rule name");
                        }
                        return anywhere ?
                        new XPathRuleAnywhereElement_1.XPathRuleAnywhereElement(word, ruleIndex) :
                        new XPathRuleElement_1.XPathRuleElement(word, ruleIndex);
                    }
                }
                static findAll(tree, xpath, parser)
                {
                    let p = new XPath(parser, xpath);
                    return p.evaluate(tree);
                }
                /**
                     * Return a list of all nodes starting at `t` as root that satisfy the
                     * path. The root `/` is relative to the node passed to {@link evaluate}.
                     */
                evaluate(t)
                {
                    let dummyRoot = new ParserRuleContext_1.ParserRuleContext();
                    dummyRoot.addChild(t);
                    let work = new Set([dummyRoot]);
                    let i = 0;
                    while (i < this.elements.length) {
                        let next = new Set();
                        for (let node of work) {
                            if (node.childCount > 0) {
                                // only try to match next element if it has children
                                // e.g., //func/*/stat might have a token node for which
                                // we can't go looking for stat nodes.
                                let matching = this.elements[i].evaluate(node);
                                matching.forEach(next.add, next);
                            }
                        }
                        i++;
                        work = next;
                    }
                    return work;
                }
            }
            XPath.WILDCARD = "*"; // word not operator/separator
            XPath.NOT = "!"; // word for invert operator
            exports.XPath = XPath;

        }, {
            "../../CharStreams": 217,
            "../../CommonTokenStream": 222,
            "../../LexerNoViableAltException": 234,
            "../../ParserRuleContext": 239,
            "../../Token": 248,
            "./XPathLexer": 356,
            "./XPathLexerErrorListener": 357,
            "./XPathRuleAnywhereElement": 358,
            "./XPathRuleElement": 359,
            "./XPathTokenAnywhereElement": 360,
            "./XPathTokenElement": 361,
            "./XPathWildcardAnywhereElement": 362,
            "./XPathWildcardElement": 363
        }],
        355: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // CONVERSTION complete, Burt Harris 10/14/2016
            const Decorators_1 = require("../../Decorators");
            class XPathElement {
                /** Construct element like `/ID` or `ID` or `/*` etc...
                     *  op is null if just node
                     */
                constructor(nodeName)
                {
                    this.nodeName = nodeName;
                    this.invert = false;
                }
                toString()
                {
                    let inv = this.invert ? "!" : "";
                    let className = Object.constructor.name;
                    return className + "[" + inv + this.nodeName + "]";
                }
            }
            __decorate([
            Decorators_1.Override
            ], XPathElement.prototype, "toString", null);
            exports.XPathElement = XPathElement;

        }, {
            "../../Decorators": 224
        }],
        356: [function(require, module, exports) {
            "use strict";
            // Generated from XPathLexer.g4 by ANTLR 4.7.3-SNAPSHOT
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const ATNDeserializer_1 = require("../../atn/ATNDeserializer");
            const Lexer_1 = require("../../Lexer");
            const LexerATNSimulator_1 = require("../../atn/LexerATNSimulator");
            const VocabularyImpl_1 = require("../../VocabularyImpl");
            const Utils = require("../../misc/Utils");
            class XPathLexer extends Lexer_1.Lexer {
                // tslint:enable:no-trailing-whitespace
                constructor(input)
                {
                    super(input);
                    this._interp = new LexerATNSimulator_1.LexerATNSimulator(XPathLexer._ATN, this);
                }
                // @Override
                // @NotNull
                get vocabulary()
                {
                    return XPathLexer.VOCABULARY;
                }
                // @Override
                get grammarFileName()
                {
                    return "XPathLexer.g4";
                }
                // @Override
                get ruleNames()
                {
                    return XPathLexer.ruleNames;
                }
                // @Override
                get serializedATN()
                {
                    return XPathLexer._serializedATN;
                }
                // @Override
                get channelNames()
                {
                    return XPathLexer.channelNames;
                }
                // @Override
                get modeNames()
                {
                    return XPathLexer.modeNames;
                }
                // @Override
                action(_localctx, ruleIndex, actionIndex)
                {
                    switch (ruleIndex) {
                    case 4:
                        this.ID_action(_localctx, actionIndex);
                        break;
                    }
                }
                ID_action(_localctx, actionIndex)
                {
                    switch (actionIndex) {
                    case 0:
                        let text = this.text;
                        if (text.charAt(0) === text.charAt(0).toUpperCase()) {
                            this.type = XPathLexer.TOKEN_REF;
                        }
                        else {
                            this.type = XPathLexer.RULE_REF;
                        }
                        break;
                    }
                }
                static get _ATN()
                {
                    if (!XPathLexer.__ATN) {
                        XPathLexer.__ATN = new ATNDeserializer_1.ATNDeserializer().deserialize(Utils.toCharArray(XPathLexer._serializedATN));
                    }
                    return XPathLexer.__ATN;
                }
            }
            XPathLexer.TOKEN_REF = 1;
            XPathLexer.RULE_REF = 2;
            XPathLexer.ANYWHERE = 3;
            XPathLexer.ROOT = 4;
            XPathLexer.WILDCARD = 5;
            XPathLexer.BANG = 6;
            XPathLexer.ID = 7;
            XPathLexer.STRING = 8;
            // tslint:disable:no-trailing-whitespace
            XPathLexer.channelNames = [
            "DEFAULT_TOKEN_CHANNEL", "HIDDEN",
            ];
            // tslint:disable:no-trailing-whitespace
            XPathLexer.modeNames = [
            "DEFAULT_MODE",
            ];
            XPathLexer.ruleNames = [
            "ANYWHERE", "ROOT", "WILDCARD", "BANG", "ID", "NameChar", "NameStartChar",
            "STRING",
            ];
            XPathLexer._LITERAL_NAMES = [
            undefined, undefined, undefined, "'//'", "'/'", "'*'", "'!'",
            ];
            XPathLexer._SYMBOLIC_NAMES = [
            undefined, "TOKEN_REF", "RULE_REF", "ANYWHERE", "ROOT", "WILDCARD", "BANG",
            "ID", "STRING",
            ];
            XPathLexer.VOCABULARY = new VocabularyImpl_1.VocabularyImpl(XPathLexer._LITERAL_NAMES, XPathLexer._SYMBOLIC_NAMES, []);
            XPathLexer._serializedATNSegments = 2;
            XPathLexer._serializedATNSegment0 = "\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\n2\b\x01\x04" +
            "\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
            "\x07\t\x07\x04\b\t\b\x04\t\t\t\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03" +
            "\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x07\x06\x1F\n\x06\f\x06" +
            "\x0E\x06\"\v\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03" +
            "\t\x07\t,\n\t\f\t\x0E\t/\v\t\x03\t\x03\t\x03-\x02\x02\n\x03\x02\x05\x05" +
            "\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\x02\x0F\x02\x02\x11\x02\n\x03" +
            "\x02\x02\x04\u02B6\x02\x02\x02\n\x02\x10\x02\x1D\x022\x02;\x02C\x02\\" +
            "\x02a\x02a\x02c\x02|\x02\x81\x02\xA1\x02\xAC\x02\xAC\x02\xAF\x02\xAF\x02" +
            "\xB7\x02\xB7\x02\xBC\x02\xBC\x02\xC2\x02\xD8\x02\xDA\x02\xF8\x02\xFA\x02" +
            "\u02C3\x02\u02C8\x02\u02D3\x02\u02E2\x02\u02E6\x02\u02EE\x02\u02EE\x02" +
            "\u02F0\x02\u02F0\x02\u0302\x02\u0376\x02\u0378\x02\u0379\x02\u037C\x02" +
            "\u037F\x02\u0381\x02\u0381\x02\u0388\x02\u0388\x02\u038A\x02\u038C\x02" +
            "\u038E\x02\u038E\x02\u0390\x02\u03A3\x02\u03A5\x02\u03F7\x02\u03F9\x02" +
            "\u0483\x02\u0485\x02\u0489\x02\u048C\x02\u0531\x02\u0533\x02\u0558\x02" +
            "\u055B\x02\u055B\x02\u0563\x02\u0589\x02\u0593\x02\u05BF\x02\u05C1\x02" +
            "\u05C1\x02\u05C3\x02\u05C4\x02\u05C6\x02\u05C7\x02\u05C9\x02\u05C9\x02" +
            "\u05D2\x02\u05EC\x02\u05F2\x02\u05F4\x02\u0602\x02\u0607\x02\u0612\x02" +
            "\u061C\x02\u061E\x02\u061E\x02\u0622\x02\u066B\x02\u0670\x02\u06D5\x02" +
            "\u06D7\x02\u06DF\x02\u06E1\x02\u06EA\x02\u06EC\x02\u06FE\x02\u0701\x02" +
            "\u0701\x02\u0711\x02\u074C\x02\u074F\x02\u07B3\x02\u07C2\x02\u07F7\x02" +
            "\u07FC\x02\u07FC\x02\u0802\x02\u082F\x02\u0842\x02\u085D\x02\u08A2\x02" +
            "\u08B6\x02\u08B8\x02\u08BF\x02\u08D6\x02\u0965\x02\u0968\x02\u0971\x02" +
            "\u0973\x02\u0985\x02\u0987\x02\u098E\x02\u0991\x02\u0992\x02\u0995\x02" +
            "\u09AA\x02\u09AC\x02\u09B2\x02\u09B4\x02\u09B4\x02\u09B8\x02\u09BB\x02" +
            "\u09BE\x02\u09C6\x02\u09C9\x02\u09CA\x02\u09CD\x02\u09D0\x02\u09D9\x02" +
            "\u09D9\x02\u09DE\x02\u09DF\x02\u09E1\x02\u09E5\x02\u09E8\x02\u09F3\x02" +
            "\u0A03\x02\u0A05\x02\u0A07\x02\u0A0C\x02\u0A11\x02\u0A12\x02\u0A15\x02" +
            "\u0A2A\x02\u0A2C\x02\u0A32\x02\u0A34\x02\u0A35\x02\u0A37\x02\u0A38\x02" +
            "\u0A3A\x02\u0A3B\x02\u0A3E\x02\u0A3E\x02\u0A40\x02\u0A44\x02\u0A49\x02" +
            "\u0A4A\x02\u0A4D\x02\u0A4F\x02\u0A53\x02\u0A53\x02\u0A5B\x02\u0A5E\x02" +
            "\u0A60\x02\u0A60\x02\u0A68\x02\u0A77\x02\u0A83\x02\u0A85\x02\u0A87\x02" +
            "\u0A8F\x02\u0A91\x02\u0A93\x02\u0A95\x02\u0AAA\x02\u0AAC\x02\u0AB2\x02" +
            "\u0AB4\x02\u0AB5\x02\u0AB7\x02\u0ABB\x02\u0ABE\x02\u0AC7\x02\u0AC9\x02" +
            "\u0ACB\x02\u0ACD\x02\u0ACF\x02\u0AD2\x02\u0AD2\x02\u0AE2\x02\u0AE5\x02" +
            "\u0AE8\x02\u0AF1\x02\u0AFB\x02\u0AFB\x02\u0B03\x02\u0B05\x02\u0B07\x02" +
            "\u0B0E\x02\u0B11\x02\u0B12\x02\u0B15\x02\u0B2A\x02\u0B2C\x02\u0B32\x02" +
            "\u0B34\x02\u0B35\x02\u0B37\x02\u0B3B\x02\u0B3E\x02\u0B46\x02\u0B49\x02" +
            "\u0B4A\x02\u0B4D\x02\u0B4F\x02\u0B58\x02\u0B59\x02\u0B5E\x02\u0B5F\x02" +
            "\u0B61\x02\u0B65\x02\u0B68\x02\u0B71\x02\u0B73\x02\u0B73\x02\u0B84\x02" +
            "\u0B85\x02\u0B87\x02\u0B8C\x02\u0B90\x02\u0B92\x02\u0B94\x02\u0B97\x02" +
            "\u0B9B\x02\u0B9C\x02\u0B9E\x02\u0B9E\x02\u0BA0\x02\u0BA1\x02\u0BA5\x02" +
            "\u0BA6\x02\u0BAA\x02\u0BAC\x02\u0BB0\x02\u0BBB\x02\u0BC0\x02\u0BC4\x02" +
            "\u0BC8\x02\u0BCA\x02\u0BCC\x02\u0BCF\x02\u0BD2\x02\u0BD2\x02\u0BD9\x02" +
            "\u0BD9\x02\u0BE8\x02\u0BF1\x02\u0C02\x02\u0C05\x02\u0C07\x02\u0C0E\x02" +
            "\u0C10\x02\u0C12\x02\u0C14\x02\u0C2A\x02\u0C2C\x02\u0C3B\x02\u0C3F\x02" +
            "\u0C46\x02\u0C48\x02\u0C4A\x02\u0C4C\x02\u0C4F\x02\u0C57\x02\u0C58\x02" +
            "\u0C5A\x02\u0C5C\x02\u0C62\x02\u0C65\x02\u0C68\x02\u0C71\x02\u0C82\x02" +
            "\u0C85\x02\u0C87\x02\u0C8E\x02\u0C90\x02\u0C92\x02\u0C94\x02\u0CAA\x02" +
            "\u0CAC\x02\u0CB5\x02\u0CB7\x02\u0CBB\x02\u0CBE\x02\u0CC6\x02\u0CC8\x02" +
            "\u0CCA\x02\u0CCC\x02\u0CCF\x02\u0CD7\x02\u0CD8\x02\u0CE0\x02\u0CE0\x02" +
            "\u0CE2\x02\u0CE5\x02\u0CE8\x02\u0CF1\x02\u0CF3\x02\u0CF4\x02\u0D03\x02" +
            "\u0D05\x02\u0D07\x02\u0D0E\x02\u0D10\x02\u0D12\x02\u0D14\x02\u0D3C\x02" +
            "\u0D3F\x02\u0D46\x02\u0D48\x02\u0D4A\x02\u0D4C\x02\u0D50\x02\u0D56\x02" +
            "\u0D59\x02\u0D61\x02\u0D65\x02\u0D68\x02\u0D71\x02\u0D7C\x02\u0D81\x02" +
            "\u0D84\x02\u0D85\x02\u0D87\x02\u0D98\x02\u0D9C\x02\u0DB3\x02\u0DB5\x02" +
            "\u0DBD\x02\u0DBF\x02\u0DBF\x02\u0DC2\x02\u0DC8\x02\u0DCC\x02\u0DCC\x02" +
            "\u0DD1\x02\u0DD6\x02\u0DD8\x02\u0DD8\x02\u0DDA\x02\u0DE1\x02\u0DE8\x02" +
            "\u0DF1\x02\u0DF4\x02\u0DF5\x02\u0E03\x02\u0E3C\x02\u0E42\x02\u0E50\x02" +
            "\u0E52\x02\u0E5B\x02\u0E83\x02\u0E84\x02\u0E86\x02\u0E86\x02\u0E89\x02" +
            "\u0E8A\x02\u0E8C\x02\u0E8C\x02\u0E8F\x02\u0E8F\x02\u0E96\x02\u0E99\x02" +
            "\u0E9B\x02\u0EA1\x02\u0EA3\x02\u0EA5\x02\u0EA7\x02\u0EA7\x02\u0EA9\x02" +
            "\u0EA9\x02\u0EAC\x02\u0EAD\x02\u0EAF\x02\u0EBB\x02\u0EBD\x02\u0EBF\x02" +
            "\u0EC2\x02\u0EC6\x02\u0EC8\x02\u0EC8\x02\u0ECA\x02\u0ECF\x02\u0ED2\x02" +
            "\u0EDB\x02\u0EDE\x02\u0EE1\x02\u0F02\x02\u0F02\x02\u0F1A\x02\u0F1B\x02" +
            "\u0F22\x02\u0F2B\x02\u0F37\x02\u0F37\x02\u0F39\x02\u0F39\x02\u0F3B\x02" +
            "\u0F3B\x02\u0F40\x02\u0F49\x02\u0F4B\x02\u0F6E\x02\u0F73\x02\u0F86\x02" +
            "\u0F88\x02\u0F99\x02\u0F9B\x02\u0FBE\x02\u0FC8\x02\u0FC8\x02\u1002\x02" +
            "\u104B\x02\u1052\x02\u109F\x02\u10A2\x02\u10C7\x02\u10C9\x02\u10C9\x02" +
            "\u10CF\x02\u10CF\x02\u10D2\x02\u10FC\x02\u10FE\x02\u124A\x02\u124C\x02" +
            "\u124F\x02\u1252\x02\u1258\x02\u125A\x02\u125A\x02\u125C\x02\u125F\x02" +
            "\u1262\x02\u128A\x02\u128C\x02\u128F\x02\u1292\x02\u12B2\x02\u12B4\x02" +
            "\u12B7\x02\u12BA\x02\u12C0\x02\u12C2\x02\u12C2\x02\u12C4\x02\u12C7\x02" +
            "\u12CA\x02\u12D8\x02\u12DA\x02\u1312\x02\u1314\x02\u1317\x02\u131A\x02" +
            "\u135C\x02\u135F\x02\u1361\x02\u1382\x02\u1391\x02\u13A2\x02\u13F7\x02" +
            "\u13FA\x02\u13FF\x02\u1403\x02\u166E\x02\u1671\x02\u1681\x02\u1683\x02" +
            "\u169C\x02\u16A2\x02\u16EC\x02\u16F0\x02\u16FA\x02\u1702\x02\u170E\x02" +
            "\u1710\x02\u1716\x02\u1722\x02\u1736\x02\u1742\x02\u1755\x02\u1762\x02" +
            "\u176E\x02\u1770\x02\u1772\x02\u1774\x02\u1775\x02\u1782\x02\u17D5\x02" +
            "\u17D9\x02\u17D9\x02\u17DE\x02\u17DF\x02\u17E2\x02\u17EB\x02\u180D\x02" +
            "\u1810\x02\u1812\x02\u181B\x02\u1822\x02\u1879\x02\u1882\x02\u18AC\x02" +
            "\u18B2\x02\u18F7\x02\u1902\x02\u1920\x02\u1922\x02\u192D\x02\u1932\x02" +
            "\u193D\x02\u1948\x02\u196F\x02\u1972\x02\u1976\x02\u1982\x02\u19AD\x02" +
            "\u19B2\x02\u19CB\x02\u19D2\x02\u19DB\x02\u1A02\x02\u1A1D\x02\u1A22\x02" +
            "\u1A60\x02\u1A62\x02\u1A7E\x02\u1A81\x02\u1A8B\x02\u1A92\x02\u1A9B\x02" +
            "\u1AA9\x02\u1AA9\x02\u1AB2\x02\u1ABF\x02\u1B02\x02\u1B4D\x02\u1B52\x02" +
            "\u1B5B\x02\u1B6D\x02\u1B75\x02\u1B82\x02\u1BF5\x02\u1C02\x02\u1C39\x02" +
            "\u1C42\x02\u1C4B\x02\u1C4F\x02\u1C7F\x02\u1C82\x02\u1C8A\x02\u1CD2\x02" +
            "\u1CD4\x02\u1CD6\x02\u1CF8\x02\u1CFA\x02\u1CFB\x02\u1D02\x02\u1DF7\x02" +
            "\u1DFD\x02\u1F17\x02\u1F1A\x02\u1F1F\x02\u1F22\x02\u1F47\x02\u1F4A\x02" +
            "\u1F4F\x02\u1F52\x02\u1F59\x02\u1F5B\x02\u1F5B\x02\u1F5D\x02\u1F5D\x02" +
            "\u1F5F\x02\u1F5F\x02\u1F61\x02\u1F7F\x02\u1F82\x02\u1FB6\x02\u1FB8\x02" +
            "\u1FBE\x02\u1FC0\x02\u1FC0\x02\u1FC4\x02\u1FC6\x02\u1FC8\x02\u1FCE\x02" +
            "\u1FD2\x02\u1FD5\x02\u1FD8\x02\u1FDD\x02\u1FE2\x02\u1FEE\x02\u1FF4\x02" +
            "\u1FF6\x02\u1FF8\x02\u1FFE\x02\u200D\x02\u2011\x02\u202C\x02\u2030\x02" +
            "\u2041\x02\u2042\x02\u2056\x02\u2056\x02\u2062\x02\u2066\x02\u2068\x02" +
            "\u2071\x02\u2073\x02\u2073\x02\u2081\x02\u2081\x02\u2092\x02\u209E\x02" +
            "\u20D2\x02\u20DE\x02\u20E3\x02\u20E3\x02\u20E7\x02\u20F2\x02\u2104\x02" +
            "\u2104\x02\u2109\x02\u2109\x02\u210C\x02\u2115\x02\u2117\x02\u2117\x02" +
            "\u211B\x02\u211F\x02\u2126\x02\u2126\x02\u2128\x02\u2128\x02\u212A\x02" +
            "\u212A\x02\u212C\x02\u212F\x02\u2131\x02\u213B\x02\u213E\x02\u2141\x02" +
            "\u2147\x02\u214B\x02\u2150\x02\u2150\x02\u2162\x02\u218A\x02\u2C02\x02" +
            "\u2C30\x02\u2C32\x02\u2C60\x02\u2C62\x02\u2CE6\x02\u2CED\x02\u2CF5\x02" +
            "\u2D02\x02\u2D27\x02\u2D29\x02\u2D29\x02\u2D2F\x02\u2D2F\x02\u2D32\x02" +
            "\u2D69\x02\u2D71\x02\u2D71\x02\u2D81\x02\u2D98\x02\u2DA2\x02\u2DA8\x02" +
            "\u2DAA\x02\u2DB0\x02\u2DB2\x02\u2DB8\x02\u2DBA\x02\u2DC0\x02\u2DC2\x02" +
            "\u2DC8\x02\u2DCA\x02\u2DD0\x02\u2DD2\x02\u2DD8\x02\u2DDA\x02\u2DE0\x02" +
            "\u2DE2\x02\u2E01\x02\u2E31\x02\u2E31\x02\u3007\x02\u3009\x02\u3023\x02" +
            "\u3031\x02\u3033\x02\u3037\x02\u303A\x02\u303E\x02\u3043\x02\u3098\x02" +
            "\u309B\x02\u309C\x02\u309F\x02\u30A1\x02\u30A3\x02\u30FC\x02\u30FE\x02" +
            "\u3101\x02\u3107\x02\u312F\x02\u3133\x02\u3190\x02\u31A2\x02\u31BC\x02" +
            "\u31F2\x02\u3201\x02\u3402\x02\u4DB7\x02\u4E02\x02\u9FD7\x02\uA002\x02" +
            "\uA48E\x02\uA4D2\x02\uA4FF\x02\uA502\x02\uA60E\x02\uA612\x02\uA62D\x02" +
            "\uA642\x02\uA671\x02\uA676\x02\uA67F\x02\uA681\x02\uA6F3\x02\uA719\x02" +
            "\uA721\x02\uA724\x02\uA78A\x02\uA78D\x02\uA7B0\x02\uA7B2\x02\uA7B9\x02" +
            "\uA7F9\x02\uA829\x02\uA842\x02\uA875\x02\uA882\x02\uA8C7\x02\uA8D2\x02" +
            "\uA8DB\x02\uA8E2\x02\uA8F9\x02\uA8FD\x02\uA8FD\x02\uA8FF\x02\uA8FF\x02" +
            "\uA902\x02\uA92F\x02\uA932\x02\uA955\x02\uA962\x02\uA97E\x02\uA982\x02" +
            "\uA9C2\x02\uA9D1\x02\uA9DB\x02\uA9E2\x02\uAA00\x02\uAA02\x02\uAA38\x02" +
            "\uAA42\x02\uAA4F\x02\uAA52\x02\uAA5B\x02\uAA62\x02\uAA78\x02\uAA7C\x02" +
            "\uAAC4\x02\uAADD\x02\uAADF\x02\uAAE2\x02\uAAF1\x02\uAAF4\x02\uAAF8\x02" +
            "\uAB03\x02\uAB08\x02\uAB0B\x02\uAB10\x02\uAB13\x02\uAB18\x02\uAB22\x02" +
            "\uAB28\x02\uAB2A\x02\uAB30\x02\uAB32\x02\uAB5C\x02\uAB5E\x02\uAB67\x02" +
            "\uAB72\x02\uABEC\x02\uABEE\x02\uABEF\x02\uABF2\x02\uABFB\x02\uAC02\x02" +
            "\uD7A5\x02\uD7B2\x02\uD7C8\x02\uD7CD\x02\uD7FD\x02\uF902\x02\uFA6F\x02" +
            "\uFA72\x02\uFADB\x02\uFB02\x02\uFB08\x02\uFB15\x02\uFB19\x02\uFB1F\x02" +
            "\uFB2A\x02\uFB2C\x02\uFB38\x02\uFB3A\x02\uFB3E\x02\uFB40\x02\uFB40\x02" +
            "\uFB42\x02\uFB43\x02\uFB45\x02\uFB46\x02\uFB48\x02\uFBB3\x02\uFBD5\x02" +
            "\uFD3F\x02\uFD52\x02\uFD91\x02\uFD94\x02\uFDC9\x02\uFDF2\x02\uFDFD\x02" +
            "\uFE02\x02\uFE11\x02\uFE22\x02\uFE31\x02\uFE35\x02\uFE36\x02\uFE4F\x02" +
            "\uFE51\x02\uFE72\x02\uFE76\x02\uFE78\x02\uFEFE\x02\uFF01\x02\uFF01\x02" +
            "\uFF12\x02\uFF1B\x02\uFF23\x02\uFF3C\x02\uFF41\x02\uFF41\x02\uFF43\x02" +
            "\uFF5C\x02\uFF68\x02\uFFC0\x02\uFFC4\x02\uFFC9\x02\uFFCC\x02\uFFD1\x02" +
            "\uFFD4\x02\uFFD9\x02\uFFDC\x02\uFFDE\x02\uFFFB\x02\uFFFD\x02\x02\x03\r" +
            "\x03\x0F\x03(\x03*\x03<\x03>\x03?\x03A\x03O\x03R\x03_\x03\x82\x03\xFC" +
            "\x03\u0142\x03\u0176\x03\u01FF\x03\u01FF\x03\u0282\x03\u029E\x03\u02A2" +
            "\x03\u02D2\x03\u02E2\x03\u02E2\x03\u0302\x03\u0321\x03\u0332\x03\u034C" +
            "\x03\u0352\x03\u037C\x03\u0382\x03\u039F\x03\u03A2\x03\u03C5\x03\u03CA" +
            "\x03\u03D1\x03\u03D3\x03\u03D7\x03\u0402\x03\u049F\x03\u04A2\x03\u04AB" +
            "\x03\u04B2\x03\u04D5\x03\u04DA\x03\u04FD\x03\u0502\x03\u0529\x03\u0532" +
            "\x03\u0565\x03\u0602\x03\u0738\x03\u0742\x03\u0757\x03\u0762\x03\u0769" +
            "\x03\u0802\x03\u0807\x03\u080A\x03\u080A\x03\u080C\x03\u0837\x03\u0839" +
            "\x03\u083A\x03\u083E\x03\u083E\x03\u0841\x03\u0857\x03\u0862\x03\u0878" +
            "\x03\u0882\x03\u08A0\x03\u08E2\x03\u08F4\x03\u08F6\x03\u08F7\x03\u0902" +
            "\x03\u0917\x03\u0922\x03\u093B\x03\u0982\x03\u09B9\x03\u09C0\x03\u09C1" +
            "\x03\u0A02\x03\u0A05\x03\u0A07\x03\u0A08\x03\u0A0E\x03\u0A15\x03\u0A17" +
            "\x03\u0A19\x03\u0A1B\x03\u0A35\x03\u0A3A\x03\u0A3C\x03\u0A41\x03\u0A41" +
            "\x03\u0A62\x03\u0A7E\x03\u0A82\x03\u0A9E\x03\u0AC2\x03\u0AC9\x03\u0ACB" +
            "\x03\u0AE8\x03\u0B02\x03\u0B37\x03\u0B42\x03\u0B57\x03\u0B62\x03\u0B74" +
            "\x03\u0B82\x03\u0B93\x03\u0C02\x03\u0C4A\x03\u0C82\x03\u0CB4\x03\u0CC2" +
            "\x03\u0CF4\x03\u1002\x03\u1048\x03\u1068\x03\u1071\x03\u1081\x03\u10BC" +
            "\x03\u10BF\x03\u10BF\x03\u10D2\x03\u10EA\x03\u10F2\x03\u10FB\x03\u1102" +
            "\x03\u1136\x03\u1138\x03\u1141\x03\u1152\x03\u1175\x03\u1178\x03\u1178" +
            "\x03\u1182\x03\u11C6\x03\u11CC\x03\u11CE\x03\u11D2\x03\u11DC\x03\u11DE" +
            "\x03\u11DE\x03\u1202\x03\u1213\x03\u1215\x03\u1239\x03\u1240\x03\u1240" +
            "\x03\u1282\x03\u1288\x03\u128A\x03\u128A\x03\u128C\x03\u128F\x03\u1291" +
            "\x03\u129F\x03\u12A1\x03\u12AA\x03\u12B2\x03\u12EC\x03\u12F2\x03\u12FB" +
            "\x03\u1302\x03\u1305\x03\u1307\x03\u130E\x03\u1311\x03\u1312\x03\u1315" +
            "\x03\u132A\x03\u132C\x03\u1332\x03\u1334\x03\u1335\x03\u1337\x03\u133B" +
            "\x03\u133E\x03\u1346\x03\u1349\x03\u134A\x03\u134D\x03\u134F\x03\u1352" +
            "\x03\u1352\x03\u1359\x03\u1359\x03\u135F\x03\u1365\x03\u1368\x03\u136E" +
            "\x03\u1372\x03\u1376\x03\u1402\x03\u144C\x03\u1452\x03\u145B\x03\u1482" +
            "\x03\u14C7\x03\u14C9\x03\u14C9\x03\u14D2\x03\u14DB\x03\u1582\x03\u15B7" +
            "\x03\u15BA\x03\u15C2\x03\u15DA\x03\u15DF\x03\u1602\x03\u1642\x03\u1646" +
            "\x03\u1646\x03\u1652\x03\u165B\x03\u1682\x03\u16B9\x03\u16C2\x03\u16CB" +
            "\x03\u1702\x03\u171B\x03\u171F\x03\u172D\x03\u1732\x03\u173B\x03\u18A2" +
            "\x03\u18EB\x03\u1901\x03\u1901\x03\u1AC2\x03\u1AFA\x03\u1C02\x03\u1C0A" +
            "\x03\u1C0C\x03\u1C38\x03\u1C3A\x03\u1C42\x03\u1C52\x03\u1C5B\x03\u1C74" +
            "\x03\u1C91\x03\u1C94\x03\u1CA9\x03\u1CAB\x03\u1CB8\x03\u2002\x03\u239B" +
            "\x03\u2402\x03\u2470\x03\u2482\x03\u2545\x03\u3002\x03\u3430\x03\u4402" +
            "\x03\u4648\x03\u6802\x03\u6A3A\x03\u6A42\x03\u6A60\x03\u6A62\x03\u6A6B" +
            "\x03\u6AD2\x03\u6AEF\x03\u6AF2\x03\u6AF6\x03\u6B02\x03\u6B38\x03\u6B42" +
            "\x03\u6B45\x03\u6B52\x03\u6B5B\x03\u6B65\x03\u6B79\x03\u6B7F\x03\u6B91" +
            "\x03\u6F02\x03\u6F46\x03\u6F52\x03\u6F80\x03\u6F91\x03\u6FA1\x03\u6FE2" +
            "\x03\u6FE2\x03\u7002\x03\u87EE\x03\u8802\x03\u8AF4\x03\uB002\x03\uB003" +
            "\x03\uBC02\x03\uBC6C\x03\uBC72\x03\uBC7E\x03\uBC82\x03\uBC8A\x03\uBC92" +
            "\x03\uBC9B\x03\uBC9F\x03\uBCA0\x03\uBCA2\x03\uBCA5\x03\uD167\x03\uD16B" +
            "\x03\uD16F\x03\uD184\x03\uD187\x03\uD18D\x03\uD1AC\x03\uD1AF\x03\uD244" +
            "\x03\uD246\x03\uD402\x03\uD456\x03\uD458\x03\uD49E\x03\uD4A0\x03\uD4A1" +
            "\x03\uD4A4\x03\uD4A4\x03\uD4A7\x03\uD4A8\x03\uD4AB\x03\uD4AE\x03\uD4B0" +
            "\x03\uD4BB\x03\uD4BD\x03\uD4BD\x03\uD4BF\x03\uD4C5\x03\uD4C7\x03\uD507" +
            "\x03\uD509\x03\uD50C\x03\uD50F\x03\uD516\x03\uD518\x03\uD51E\x03\uD520" +
            "\x03\uD53B\x03\uD53D\x03\uD540\x03\uD542\x03\uD546\x03\uD548\x03\uD548" +
            "\x03\uD54C\x03\uD552\x03\uD554\x03\uD6A7\x03\uD6AA\x03\uD6C2\x03\uD6C4" +
            "\x03\uD6DC\x03\uD6DE\x03\uD6FC\x03\uD6FE\x03\uD716\x03\uD718\x03\uD736" +
            "\x03\uD738\x03\uD750\x03\uD752\x03\uD770\x03\uD772\x03\uD78A\x03\uD78C" +
            "\x03\uD7AA\x03\uD7AC\x03\uD7C4\x03\uD7C6\x03\uD7CD\x03\uD7D0\x03\uD801" +
            "\x03\uDA02\x03\uDA38\x03\uDA3D\x03\uDA6E\x03\uDA77\x03\uDA77\x03\uDA86" +
            "\x03\uDA86\x03\uDA9D\x03\uDAA1\x03\uDAA3\x03\uDAB1\x03\uE002\x03\uE008" +
            "\x03\uE00A\x03\uE01A\x03\uE01D\x03\uE023\x03\uE025\x03\uE026\x03\uE028" +
            "\x03\uE02C\x03\uE802\x03\uE8C6\x03\uE8D2\x03\uE8D8\x03\uE902\x03\uE94C" +
            "\x03\uE952\x03\uE95B\x03\uEE02\x03\uEE05\x03\uEE07\x03\uEE21\x03\uEE23" +
            "\x03\uEE24\x03\uEE26\x03\uEE26\x03\uEE29\x03\uEE29\x03\uEE2B\x03\uEE34" +
            "\x03\uEE36\x03\uEE39\x03\uEE3B\x03\uEE3B\x03\uEE3D\x03\uEE3D\x03\uEE44" +
            "\x03\uEE44\x03\uEE49\x03\uEE49\x03\uEE4B\x03\uEE4B\x03\uEE4D\x03\uEE4D" +
            "\x03\uEE4F\x03\uEE51\x03\uEE53\x03\uEE54\x03\uEE56\x03\uEE56\x03\uEE59" +
            "\x03\uEE59\x03\uEE5B\x03\uEE5B\x03\uEE5D\x03\uEE5D\x03\uEE5F\x03\uEE5F" +
            "\x03\uEE61\x03\uEE61\x03\uEE63\x03\uEE64\x03\uEE66\x03\uEE66\x03\uEE69" +
            "\x03\uEE6C\x03\uEE6E\x03\uEE74\x03\uEE76\x03\uEE79\x03\uEE7B\x03\uEE7E" +
            "\x03\uEE80\x03\uEE80\x03\uEE82\x03\uEE8B\x03\uEE8D\x03\uEE9D\x03\uEEA3" +
            "\x03\uEEA5\x03\uEEA7\x03\uEEAB\x03\uEEAD\x03\uEEBD\x03\x02\x04\uA6D8\x04" +
            "\uA702\x04\uB736\x04\uB742\x04\uB81F\x04\uB822\x04\uCEA3\x04\uF802\x04" +
            "\uFA1F\x04\x03\x10\x03\x10\"\x10\x81\x10\u0102\x10\u01F1\x10\u0240\x02" +
            "C\x02\\\x02c\x02|\x02\xAC\x02\xAC\x02\xB7\x02\xB7\x02\xBC\x02\xBC\x02" +
            "\xC2\x02\xD8\x02\xDA\x02\xF8\x02\xFA\x02\u02C3\x02\u02C8\x02\u02D3\x02" +
            "\u02E2\x02\u02E6\x02\u02EE\x02\u02EE\x02\u02F0\x02\u02F0\x02\u0372\x02" +
            "\u0376\x02\u0378\x02\u0379\x02\u037C\x02\u037F\x02\u0381\x02\u0381\x02" +
            "\u0388\x02\u0388\x02\u038A\x02\u038C\x02\u038E\x02\u038E\x02\u0390\x02" +
            "\u03A3\x02\u03A5\x02\u03F7\x02\u03F9\x02\u0483\x02\u048C\x02\u0531\x02" +
            "\u0533\x02\u0558\x02\u055B\x02\u055B\x02\u0563\x02\u0589\x02\u05D2\x02" +
            "\u05EC\x02\u05F2\x02\u05F4\x02\u0622\x02\u064C\x02\u0670\x02\u0671\x02" +
            "\u0673\x02\u06D5\x02\u06D7\x02\u06D7\x02\u06E7\x02\u06E8\x02\u06F0\x02" +
            "\u06F1\x02\u06FC\x02\u06FE\x02\u0701\x02\u0701\x02\u0712\x02\u0712\x02" +
            "\u0714\x02\u0731\x02\u074F\x02\u07A7\x02\u07B3\x02\u07B3\x02\u07CC\x02" +
            "\u07EC\x02\u07F6\x02\u07F7\x02\u07FC\x02\u07FC\x02\u0802\x02\u0817\x02" +
            "\u081C\x02\u081C\x02\u0826\x02\u0826\x02\u082A\x02\u082A\x02\u0842\x02" +
            "\u085A\x02\u08A2\x02\u08B6\x02\u08B8\x02\u08BF\x02\u0906\x02\u093B\x02" +
            "\u093F\x02\u093F\x02\u0952\x02\u0952\x02\u095A\x02\u0963\x02\u0973\x02" +
            "\u0982\x02\u0987\x02\u098E\x02\u0991\x02\u0992\x02\u0995\x02\u09AA\x02" +
            "\u09AC\x02\u09B2\x02\u09B4\x02\u09B4\x02\u09B8\x02\u09BB\x02\u09BF\x02" +
            "\u09BF\x02\u09D0\x02\u09D0\x02\u09DE\x02\u09DF\x02\u09E1\x02\u09E3\x02" +
            "\u09F2\x02\u09F3\x02\u0A07\x02\u0A0C\x02\u0A11\x02\u0A12\x02\u0A15\x02" +
            "\u0A2A\x02\u0A2C\x02\u0A32\x02\u0A34\x02\u0A35\x02\u0A37\x02\u0A38\x02" +
            "\u0A3A\x02\u0A3B\x02\u0A5B\x02\u0A5E\x02\u0A60\x02\u0A60\x02\u0A74\x02" +
            "\u0A76\x02\u0A87\x02\u0A8F\x02\u0A91\x02\u0A93\x02\u0A95\x02\u0AAA\x02" +
            "\u0AAC\x02\u0AB2\x02\u0AB4\x02\u0AB5\x02\u0AB7\x02\u0ABB\x02\u0ABF\x02" +
            "\u0ABF\x02\u0AD2\x02\u0AD2\x02\u0AE2\x02\u0AE3\x02\u0AFB\x02\u0AFB\x02" +
            "\u0B07\x02\u0B0E\x02\u0B11\x02\u0B12\x02\u0B15\x02\u0B2A\x02\u0B2C\x02" +
            "\u0B32\x02\u0B34\x02\u0B35\x02\u0B37\x02\u0B3B\x02\u0B3F\x02\u0B3F\x02" +
            "\u0B5E\x02\u0B5F\x02\u0B61\x02\u0B63\x02\u0B73\x02\u0B73\x02\u0B85\x02" +
            "\u0B85\x02\u0B87\x02\u0B8C\x02\u0B90\x02\u0B92\x02\u0B94\x02\u0B97\x02" +
            "\u0B9B\x02\u0B9C\x02\u0B9E\x02\u0B9E\x02\u0BA0\x02\u0BA1\x02\u0BA5\x02" +
            "\u0BA6\x02\u0BAA\x02\u0BAC\x02\u0BB0\x02\u0BBB\x02\u0BD2\x02\u0BD2\x02" +
            "\u0C07\x02\u0C0E\x02\u0C10\x02\u0C12\x02\u0C14\x02\u0C2A\x02\u0C2C\x02" +
            "\u0C3B\x02\u0C3F\x02\u0C3F\x02\u0C5A\x02\u0C5C\x02\u0C62\x02\u0C63\x02" +
            "\u0C82\x02\u0C82\x02\u0C87\x02\u0C8E\x02\u0C90\x02\u0C92\x02\u0C94\x02" +
            "\u0CAA\x02\u0CAC\x02\u0CB5\x02\u0CB7\x02\u0CBB\x02\u0CBF\x02\u0CBF\x02" +
            "\u0CE0\x02\u0CE0\x02\u0CE2\x02\u0CE3\x02\u0CF3\x02\u0CF4\x02\u0D07\x02" +
            "\u0D0E\x02\u0D10\x02\u0D12\x02\u0D14\x02\u0D3C\x02\u0D3F\x02\u0D3F\x02" +
            "\u0D50\x02\u0D50\x02\u0D56\x02\u0D58\x02\u0D61\x02\u0D63\x02\u0D7C\x02" +
            "\u0D81\x02\u0D87\x02\u0D98\x02\u0D9C\x02\u0DB3\x02\u0DB5\x02\u0DBD\x02" +
            "\u0DBF\x02\u0DBF\x02\u0DC2\x02\u0DC8\x02\u0E03\x02\u0E32\x02\u0E34\x02" +
            "\u0E35\x02\u0E42\x02\u0E48\x02\u0E83\x02\u0E84\x02\u0E86\x02\u0E86\x02" +
            "\u0E89\x02\u0E8A\x02\u0E8C\x02\u0E8C\x02\u0E8F\x02\u0E8F\x02\u0E96\x02" +
            "\u0E99\x02\u0E9B\x02\u0EA1\x02\u0EA3\x02\u0EA5\x02\u0EA7\x02\u0EA7\x02" +
            "\u0EA9\x02\u0EA9\x02\u0EAC\x02\u0EAD\x02\u0EAF\x02\u0EB2\x02\u0EB4\x02" +
            "\u0EB5\x02\u0EBF\x02\u0EBF\x02\u0EC2\x02\u0EC6\x02\u0EC8\x02\u0EC8\x02" +
            "\u0EDE\x02\u0EE1\x02\u0F02\x02\u0F02\x02\u0F42\x02\u0F49\x02\u0F4B\x02" +
            "\u0F6E\x02\u0F8A\x02\u0F8E\x02\u1002\x02\u102C\x02\u1041\x02\u1041\x02" +
            "\u1052\x02\u1057\x02\u105C\x02\u105F\x02\u1063\x02\u1063\x02\u1067\x02" +
            "\u1068\x02\u1070\x02\u1072\x02\u1077\x02\u1083\x02\u1090\x02\u1090\x02" +
            "\u10A2\x02\u10C7\x02\u10C9\x02\u10C9\x02\u10CF\x02\u10CF\x02\u10D2\x02" +
            "\u10FC\x02\u10FE\x02\u124A\x02\u124C\x02\u124F\x02\u1252\x02\u1258\x02" +
            "\u125A\x02\u125A\x02\u125C\x02\u125F\x02\u1262\x02\u128A\x02\u128C\x02" +
            "\u128F\x02\u1292\x02\u12B2\x02\u12B4\x02\u12B7\x02\u12BA\x02\u12C0\x02" +
            "\u12C2\x02\u12C2\x02\u12C4\x02\u12C7\x02\u12CA\x02\u12D8\x02\u12DA\x02" +
            "\u1312\x02\u1314\x02\u1317\x02\u131A\x02\u135C\x02\u1382\x02\u1391\x02" +
            "\u13A2\x02\u13F7\x02\u13FA\x02\u13FF\x02\u1403\x02\u166E\x02\u1671\x02" +
            "\u1681\x02\u1683\x02\u169C\x02\u16A2\x02\u16EC\x02\u16F0\x02\u16FA\x02" +
            "\u1702\x02\u170E\x02\u1710\x02\u1713\x02\u1722\x02\u1733\x02\u1742\x02" +
            "\u1753\x02\u1762\x02\u176E\x02\u1770\x02\u1772\x02\u1782\x02\u17B5\x02" +
            "\u17D9\x02\u17D9\x02\u17DE\x02\u17DE\x02\u1822\x02\u1879\x02\u1882\x02" +
            "\u1886\x02\u1889\x02\u18AA\x02\u18AC\x02\u18AC\x02\u18B2\x02\u18F7\x02" +
            "\u1902\x02\u1920\x02\u1952\x02\u196F\x02\u1972\x02\u1976\x02\u1982\x02" +
            "\u19AD\x02\u19B2\x02\u19CB\x02\u1A02\x02\u1A18\x02\u1A22\x02\u1A56\x02" +
            "\u1AA9\x02\u1AA9\x02\u1B07\x02\u1B35\x02\u1B47\x02\u1B4D\x02\u1B85\x02" +
            "\u1BA2\x02\u1BB0\x02\u1BB1\x02\u1BBC\x02\u1BE7\x02\u1C02\x02\u1C25\x02" +
            "\u1C4F\x02\u1C51\x02\u1C5C\x02\u1C7F\x02\u1C82\x02\u1C8A\x02\u1CEB\x02" +
            "\u1CEE\x02\u1CF0\x02\u1CF3\x02\u1CF7\x02\u1CF8\x02\u1D02\x02\u1DC1\x02" +
            "\u1E02\x02\u1F17\x02\u1F1A\x02\u1F1F\x02\u1F22\x02\u1F47\x02\u1F4A\x02" +
            "\u1F4F\x02\u1F52\x02\u1F59\x02\u1F5B\x02\u1F5B\x02\u1F5D\x02\u1F5D\x02" +
            "\u1F5F\x02\u1F5F\x02\u1F61\x02\u1F7F\x02\u1F82\x02\u1FB6\x02\u1FB8\x02" +
            "\u1FBE\x02\u1FC0\x02\u1FC0\x02\u1FC4\x02\u1FC6\x02\u1FC8\x02\u1FCE\x02" +
            "\u1FD2\x02\u1FD5\x02\u1FD8\x02\u1FDD\x02\u1FE2\x02\u1FEE\x02\u1FF4\x02" +
            "\u1FF6\x02\u1FF8\x02\u1FFE\x02\u2073\x02\u2073\x02\u2081\x02\u2081\x02" +
            "\u2092\x02\u209E\x02\u2104\x02\u2104\x02\u2109\x02\u2109\x02\u210C\x02" +
            "\u2115\x02\u2117\x02\u2117\x02\u211B\x02\u211F\x02\u2126\x02\u2126\x02" +
            "\u2128\x02\u2128\x02\u212A\x02\u212A\x02\u212C\x02\u212F\x02\u2131\x02" +
            "\u213B\x02\u213E\x02\u2141\x02\u2147\x02\u214B\x02\u2150\x02\u2150\x02" +
            "\u2162\x02\u218A\x02\u2C02\x02\u2C30\x02\u2C32\x02\u2C60\x02\u2C62\x02" +
            "\u2CE6\x02\u2CED\x02\u2CF0\x02\u2CF4\x02\u2CF5\x02\u2D02\x02\u2D27\x02" +
            "\u2D29\x02\u2D29\x02\u2D2F\x02\u2D2F\x02\u2D32\x02\u2D69\x02\u2D71\x02" +
            "\u2D71\x02\u2D82\x02\u2D98\x02\u2DA2\x02\u2DA8\x02\u2DAA\x02\u2DB0\x02" +
            "\u2DB2\x02\u2DB8\x02\u2DBA\x02\u2DC0\x02\u2DC2\x02\u2DC8\x02\u2DCA\x02" +
            "\u2DD0\x02\u2DD2\x02\u2DD8\x02\u2DDA\x02\u2DE0\x02\u2E31\x02\u2E31\x02" +
            "\u3007\x02\u3009\x02\u3023\x02\u302B\x02\u3033\x02\u3037\x02\u303A\x02" +
            "\u303E\x02\u3043\x02\u3098\x02\u309F\x02\u30A1\x02\u30A3\x02\u30FC\x02" +
            "\u30FE\x02\u3101\x02\u3107\x02\u312F\x02\u3133\x02\u3190\x02\u31A2\x02" +
            "\u31BC\x02\u31F2\x02\u3201\x02\u3402\x02\u4DB7\x02\u4E02\x02\u9FD7\x02" +
            "\uA002\x02\uA48E\x02\uA4D2\x02\uA4FF\x02\uA502\x02\uA60E\x02\uA612\x02" +
            "\uA621\x02\uA62C\x02\uA62D\x02\uA642\x02\uA670\x02\uA681\x02\uA69F\x02" +
            "\uA6A2\x02\uA6F1\x02\uA719\x02\uA721\x02\uA724\x02\uA78A\x02\uA78D\x02" +
            "\uA7B0\x02\uA7B2\x02\uA7B9\x02\uA7F9\x02\uA803\x02\uA805\x02\uA807\x02" +
            "\uA809\x02\uA80C\x02\uA80E\x02\uA824\x02\uA842\x02\uA875\x02\uA884\x02" +
            "\uA8B5\x02\uA8F4\x02\uA8F9\x02\uA8FD\x02\uA8FD\x02\uA8FF\x02\uA8FF\x02" +
            "\uA90C\x02\uA927\x02\uA932\x02\uA948\x02\uA962\x02\uA97E\x02\uA986\x02" +
            "\uA9B4\x02\uA9D1\x02\uA9D1\x02\uA9E2\x02\uA9E6\x02\uA9E8\x02\uA9F1\x02" +
            "\uA9FC\x02\uAA00\x02\uAA02\x02\uAA2A\x02\uAA42\x02\uAA44\x02\uAA46\x02" +
            "\uAA4D\x02\uAA62\x02\uAA78\x02\uAA7C\x02\uAA7C\x02\uAA80\x02\uAAB1\x02" +
            "\uAAB3\x02\uAAB3\x02\uAAB7\x02\uAAB8\x02\uAABB\x02\uAABF\x02\uAAC2\x02" +
            "\uAAC2\x02\uAAC4\x02\uAAC4\x02\uAADD\x02\uAADF\x02\uAAE2\x02\uAAEC\x02" +
            "\uAAF4\x02\uAAF6\x02\uAB03\x02\uAB08\x02\uAB0B\x02\uAB10\x02\uAB13\x02" +
            "\uAB18\x02\uAB22\x02\uAB28\x02\uAB2A\x02\uAB30\x02\uAB32\x02\uAB5C\x02" +
            "\uAB5E\x02\uAB67\x02\uAB72\x02\uABE4\x02\uAC02\x02\uD7A5\x02\uD7B2\x02" +
            "\uD7C8\x02\uD7CD\x02\uD7FD\x02\uF902\x02\uFA6F\x02\uFA72\x02\uFADB\x02" +
            "\uFB02\x02\uFB08\x02\uFB15\x02\uFB19\x02\uFB1F\x02\uFB1F\x02\uFB21\x02" +
            "\uFB2A\x02\uFB2C\x02\uFB38\x02\uFB3A\x02\uFB3E\x02\uFB40\x02\uFB40\x02" +
            "\uFB42\x02\uFB43\x02\uFB45\x02\uFB46\x02\uFB48\x02\uFBB3\x02\uFBD5\x02" +
            "\uFD3F\x02\uFD52\x02\uFD91\x02\uFD94\x02\uFDC9\x02\uFDF2\x02\uFDFD\x02" +
            "\uFE72\x02\uFE76\x02\uFE78\x02\uFEFE\x02\uFF23\x02\uFF3C\x02\uFF43\x02" +
            "\uFF5C\x02\uFF68\x02\uFFC0\x02\uFFC4\x02\uFFC9\x02\uFFCC\x02\uFFD1\x02" +
            "\uFFD4\x02\uFFD9\x02\uFFDC\x02\uFFDE\x02\x02\x03\r\x03\x0F\x03(\x03*\x03" +
            "<\x03>\x03?\x03A\x03O\x03R\x03_\x03\x82\x03\xFC\x03\u0142\x03\u0176\x03" +
            "\u0282\x03\u029E\x03\u02A2\x03\u02D2\x03\u0302\x03\u0321\x03\u0332\x03" +
            "\u034C\x03\u0352\x03\u0377\x03\u0382\x03\u039F\x03\u03A2\x03\u03C5\x03" +
            "\u03CA\x03\u03D1\x03\u03D3\x03\u03D7\x03\u0402\x03\u049F\x03\u04B2\x03" +
            "\u04D5\x03\u04DA\x03\u04FD\x03\u0502\x03\u0529\x03\u0532\x03\u0565\x03" +
            "\u0602\x03\u0738\x03\u0742\x03\u0757\x03\u0762\x03\u0769\x03\u0802\x03" +
            "\u0807\x03\u080A\x03\u080A\x03\u080C\x03\u0837\x03\u0839\x03\u083A\x03" +
            "\u083E\x03\u083E\x03\u0841\x03\u0857\x03\u0862\x03\u0878\x03\u0882\x03" +
            "\u08A0\x03\u08E2\x03\u08F4\x03\u08F6\x03\u08F7\x03\u0902\x03\u0917\x03" +
            "\u0922\x03\u093B\x03\u0982\x03\u09B9\x03\u09C0\x03\u09C1\x03\u0A02\x03" +
            "\u0A02\x03\u0A12\x03\u0A15\x03\u0A17\x03\u0A19\x03\u0A1B\x03\u0A35\x03" +
            "\u0A62\x03\u0A7E\x03\u0A82\x03\u0A9E\x03\u0AC2\x03\u0AC9\x03\u0ACB\x03" +
            "\u0AE6\x03\u0B02\x03\u0B37\x03\u0B42\x03\u0B57\x03\u0B62\x03\u0B74\x03" +
            "\u0B82\x03\u0B93\x03\u0C02\x03\u0C4A\x03\u0C82\x03\u0CB4\x03\u0CC2\x03" +
            "\u0CF4\x03\u1005\x03\u1039\x03\u1085\x03\u10B1\x03\u10D2\x03\u10EA\x03" +
            "\u1105\x03\u1128\x03\u1152\x03\u1174\x03\u1178\x03\u1178\x03\u1185\x03" +
            "\u11B4\x03\u11C3\x03\u11C6\x03\u11DC\x03\u11DC\x03\u11DE\x03\u11DE\x03" +
            "\u1202\x03\u1213\x03\u1215\x03\u122D\x03\u1282\x03\u1288\x03\u128A\x03" +
            "\u128A\x03\u128C\x03\u128F\x03\u1291\x03\u129F\x03\u12A1\x03\u12AA\x03" +
            "\u12B2\x03\u12E0\x03\u1307\x03\u130E\x03\u1311\x03\u1312\x03\u1315\x03" +
            "\u132A\x03\u132C\x03\u1332\x03\u1334\x03\u1335\x03\u1337\x03\u133B\x03" +
            "\u133F\x03\u133F\x03\u1352\x03\u1352\x03\u135F\x03\u1363\x03\u1402\x03" +
            "\u1436\x03\u1449\x03\u144C\x03\u1482\x03\u14B1\x03\u14C6\x03\u14C7\x03" +
            "\u14C9\x03\u14C9\x03\u1582\x03\u15B0\x03\u15DA\x03\u15DD\x03\u1602\x03" +
            "\u1631\x03\u1646\x03\u1646\x03\u1682\x03\u16AC\x03\u1702\x03\u171B\x03" +
            "\u18A2\x03\u18E1\x03\u1901\x03\u1901\x03\u1AC2\x03\u1AFA\x03\u1C02\x03" +
            "\u1C0A\x03\u1C0C\x03\u1C30\x03\u1C42\x03\u1C42\x03\u1C74\x03\u1C91\x03" +
            "\u2002\x03\u239B\x03\u2402\x03\u2470\x03\u2482\x03\u2545\x03\u3002\x03" +
            "\u3430\x03\u4402\x03\u4648\x03\u6802\x03\u6A3A\x03\u6A42\x03\u6A60\x03" +
            "\u6AD2\x03\u6AEF\x03\u6B02\x03\u6B31\x03\u6B42\x03\u6B45\x03\u6B65\x03" +
            "\u6B79\x03\u6B7F\x03\u6B91\x03\u6F02\x03\u6F46\x03\u6F52\x03\u6F52\x03" +
            "\u6F95\x03\u6FA1\x03\u6FE2\x03\u6FE2\x03\u7002\x03\u87EE\x03\u8802\x03" +
            "\u8AF4\x03\uB002\x03\uB003\x03\uBC02\x03\uBC6C\x03\uBC72\x03\uBC7E\x03" +
            "\uBC82\x03\uBC8A\x03\uBC92\x03\uBC9B\x03\uD402\x03\uD456\x03\uD458\x03" +
            "\uD49E\x03\uD4A0\x03\uD4A1\x03\uD4A4\x03\uD4A4\x03\uD4A7\x03\uD4A8\x03" +
            "\uD4AB\x03\uD4AE\x03\uD4B0\x03\uD4BB\x03\uD4BD\x03\uD4BD\x03\uD4BF\x03" +
            "\uD4C5\x03\uD4C7\x03\uD507\x03\uD509\x03\uD50C\x03\uD50F\x03\uD516\x03" +
            "\uD518\x03\uD51E\x03\uD520\x03\uD53B\x03\uD53D\x03\uD540\x03\uD542\x03" +
            "\uD546\x03\uD548\x03\uD548";
            XPathLexer._serializedATNSegment1 = "\x03\uD54C\x03\uD552\x03\uD554\x03\uD6A7\x03\uD6AA\x03\uD6C2\x03\uD6C4" +
            "\x03\uD6DC\x03\uD6DE\x03\uD6FC\x03\uD6FE\x03\uD716\x03\uD718\x03\uD736" +
            "\x03\uD738\x03\uD750\x03\uD752\x03\uD770\x03\uD772\x03\uD78A\x03\uD78C" +
            "\x03\uD7AA\x03\uD7AC\x03\uD7C4\x03\uD7C6\x03\uD7CD\x03\uE802\x03\uE8C6" +
            "\x03\uE902\x03\uE945\x03\uEE02\x03\uEE05\x03\uEE07\x03\uEE21\x03\uEE23" +
            "\x03\uEE24\x03\uEE26\x03\uEE26\x03\uEE29\x03\uEE29\x03\uEE2B\x03\uEE34" +
            "\x03\uEE36\x03\uEE39\x03\uEE3B\x03\uEE3B\x03\uEE3D\x03\uEE3D\x03\uEE44" +
            "\x03\uEE44\x03\uEE49\x03\uEE49\x03\uEE4B\x03\uEE4B\x03\uEE4D\x03\uEE4D" +
            "\x03\uEE4F\x03\uEE51\x03\uEE53\x03\uEE54\x03\uEE56\x03\uEE56\x03\uEE59" +
            "\x03\uEE59\x03\uEE5B\x03\uEE5B\x03\uEE5D\x03\uEE5D\x03\uEE5F\x03\uEE5F" +
            "\x03\uEE61\x03\uEE61\x03\uEE63\x03\uEE64\x03\uEE66\x03\uEE66\x03\uEE69" +
            "\x03\uEE6C\x03\uEE6E\x03\uEE74\x03\uEE76\x03\uEE79\x03\uEE7B\x03\uEE7E" +
            "\x03\uEE80\x03\uEE80\x03\uEE82\x03\uEE8B\x03\uEE8D\x03\uEE9D\x03\uEEA3" +
            "\x03\uEEA5\x03\uEEA7\x03\uEEAB\x03\uEEAD\x03\uEEBD\x03\x02\x04\uA6D8\x04" +
            "\uA702\x04\uB736\x04\uB742\x04\uB81F\x04\uB822\x04\uCEA3\x04\uF802\x04" +
            "\uFA1F\x041\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03" +
            "\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\x11\x03\x02" +
            "\x02\x02\x03\x13\x03\x02\x02\x02\x05\x16\x03\x02\x02\x02\x07\x18\x03\x02" +
            "\x02\x02\t\x1A\x03\x02\x02\x02\v\x1C\x03\x02\x02\x02\r%\x03\x02\x02\x02" +
            "\x0F\'\x03\x02\x02\x02\x11)\x03\x02\x02\x02\x13\x14\x071\x02\x02\x14\x15" +
            "\x071\x02\x02\x15\x04\x03\x02\x02\x02\x16\x17\x071\x02\x02\x17\x06\x03" +
            "\x02\x02\x02\x18\x19\x07,\x02\x02\x19\b\x03\x02\x02\x02\x1A\x1B\x07#\x02" +
            "\x02\x1B\n\x03\x02\x02\x02\x1C \x05\x0F\b\x02\x1D\x1F\x05\r\x07\x02\x1E" +
            "\x1D\x03\x02\x02\x02\x1F\"\x03\x02\x02\x02 \x1E\x03\x02\x02\x02 !\x03" +
            "\x02\x02\x02!#\x03\x02\x02\x02\" \x03\x02\x02\x02#$\b\x06\x02\x02$\f\x03" +
            "\x02\x02\x02%&\t\x02\x02\x02&\x0E\x03\x02\x02\x02\'(\t\x03\x02\x02(\x10" +
            "\x03\x02\x02\x02)-\x07)\x02\x02*,\v\x02\x02\x02+*\x03\x02\x02\x02,/\x03" +
            "\x02\x02\x02-.\x03\x02\x02\x02-+\x03\x02\x02\x02.0\x03\x02\x02\x02/-\x03" +
            "\x02\x02\x0201\x07)\x02\x021\x12\x03\x02\x02\x02\x05\x02 -\x03\x03\x06" +
            "\x02";
            XPathLexer._serializedATN = Utils.join([
            XPathLexer._serializedATNSegment0,
            XPathLexer._serializedATNSegment1,
            ], "");
            exports.XPathLexer = XPathLexer;

        }, {
            "../../Lexer": 232,
            "../../VocabularyImpl": 250,
            "../../atn/ATNDeserializer": 255,
            "../../atn/LexerATNSimulator": 276,
            "../../misc/Utils": 337
        }],
        357: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../../Decorators");
            class XPathLexerErrorListener {
                syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {

                }
            }
            __decorate([
            Decorators_1.Override
            ], XPathLexerErrorListener.prototype, "syntaxError", null);
            exports.XPathLexerErrorListener = XPathLexerErrorListener;

        }, {
            "../../Decorators": 224
        }],
        358: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            const Decorators_1 = require("../../Decorators");
            const Trees_1 = require("../Trees");
            const XPathElement_1 = require("./XPathElement");
            /**
             * Either `ID` at start of path or `...//ID` in middle of path.
             */
            class XPathRuleAnywhereElement extends XPathElement_1.XPathElement {
                constructor(ruleName, ruleIndex)
                {
                    super(ruleName);
                    this.ruleIndex = ruleIndex;
                }
                evaluate(t)
                {
                    return Trees_1.Trees.findAllRuleNodes(t, this.ruleIndex);
                }
            }
            __decorate([
            Decorators_1.Override
            ], XPathRuleAnywhereElement.prototype, "evaluate", null);
            exports.XPathRuleAnywhereElement = XPathRuleAnywhereElement;

        }, {
            "../../Decorators": 224,
            "../Trees": 344,
            "./XPathElement": 355
        }],
        359: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // CONVERSTION complete, Burt Harris 10/14/2016
            const ParserRuleContext_1 = require("../../ParserRuleContext");
            const Decorators_1 = require("../../Decorators");
            const Trees_1 = require("../Trees");
            const XPathElement_1 = require("./XPathElement");
            class XPathRuleElement extends XPathElement_1.XPathElement {
                constructor(ruleName, ruleIndex)
                {
                    super(ruleName);
                    this.ruleIndex = ruleIndex;
                }
                evaluate(t)
                {
                    // return all children of t that match nodeName
                    let nodes = [];
                    for (let c of Trees_1.Trees.getChildren(t)) {
                        if (c instanceof ParserRuleContext_1.ParserRuleContext) {
                            if ((c.ruleIndex === this.ruleIndex && !this.invert) ||
                            (c.ruleIndex !== this.ruleIndex && this.invert)) {
                                nodes.push(c);
                            }
                        }
                    }
                    return nodes;
                }
            }
            __decorate([
            Decorators_1.Override
            ], XPathRuleElement.prototype, "evaluate", null);
            exports.XPathRuleElement = XPathRuleElement;

        }, {
            "../../Decorators": 224,
            "../../ParserRuleContext": 239,
            "../Trees": 344,
            "./XPathElement": 355
        }],
        360: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // CONVERSTION complete, Burt Harris 10/14/2016
            const Decorators_1 = require("../../Decorators");
            const Trees_1 = require("../Trees");
            const XPathElement_1 = require("./XPathElement");
            class XPathTokenAnywhereElement extends XPathElement_1.XPathElement {
                constructor(tokenName, tokenType)
                {
                    super(tokenName);
                    this.tokenType = tokenType;
                }
                evaluate(t)
                {
                    return Trees_1.Trees.findAllTokenNodes(t, this.tokenType);
                }
            }
            __decorate([
            Decorators_1.Override
            ], XPathTokenAnywhereElement.prototype, "evaluate", null);
            exports.XPathTokenAnywhereElement = XPathTokenAnywhereElement;

        }, {
            "../../Decorators": 224,
            "../Trees": 344,
            "./XPathElement": 355
        }],
        361: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // CONVERSTION complete, Burt Harris 10/14/2016
            const Decorators_1 = require("../../Decorators");
            const TerminalNode_1 = require("../TerminalNode");
            const Trees_1 = require("../Trees");
            const XPathElement_1 = require("./XPathElement");
            class XPathTokenElement extends XPathElement_1.XPathElement {
                constructor(tokenName, tokenType)
                {
                    super(tokenName);
                    this.tokenType = tokenType;
                }
                evaluate(t)
                {
                    // return all children of t that match nodeName
                    let nodes = [];
                    for (let c of Trees_1.Trees.getChildren(t)) {
                        if (c instanceof TerminalNode_1.TerminalNode) {
                            if ((c.symbol.type === this.tokenType && !this.invert) ||
                            (c.symbol.type !== this.tokenType && this.invert)) {
                                nodes.push(c);
                            }
                        }
                    }
                    return nodes;
                }
            }
            __decorate([
            Decorators_1.Override
            ], XPathTokenElement.prototype, "evaluate", null);
            exports.XPathTokenElement = XPathTokenElement;

        }, {
            "../../Decorators": 224,
            "../TerminalNode": 343,
            "../Trees": 344,
            "./XPathElement": 355
        }],
        362: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // CONVERSTION complete, Burt Harris 10/14/2016
            const Decorators_1 = require("../../Decorators");
            const Trees_1 = require("../Trees");
            const XPath_1 = require("./XPath");
            const XPathElement_1 = require("./XPathElement");
            class XPathWildcardAnywhereElement extends XPathElement_1.XPathElement {
                constructor()
                {
                    super(XPath_1.XPath.WILDCARD);
                }
                evaluate(t)
                {
                    if (this.invert) {
                        // !* is weird but valid (empty)
                        return [];
                    }
                    return Trees_1.Trees.getDescendants(t);
                }
            }
            __decorate([
            Decorators_1.Override
            ], XPathWildcardAnywhereElement.prototype, "evaluate", null);
            exports.XPathWildcardAnywhereElement = XPathWildcardAnywhereElement;

        }, {
            "../../Decorators": 224,
            "../Trees": 344,
            "./XPath": 354,
            "./XPathElement": 355
        }],
        363: [function(require, module, exports) {
            "use strict";
            /*!
             * Copyright 2016 The ANTLR Project. All rights reserved.
             * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.
             */
            var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
                var c = arguments.length,
                    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                    d;
                if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                    r = Reflect.decorate(decorators, target, key, desc);
                else
                    for (var i = decorators.length - 1; i >= 0; i--)
                        if (d = decorators[i])
                            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
                return c > 3 && r && Object.defineProperty(target, key, r), r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            // CONVERSTION complete, Burt Harris 10/14/2016
            const Decorators_1 = require("../../Decorators");
            const Trees_1 = require("../Trees");
            const XPath_1 = require("./XPath");
            const XPathElement_1 = require("./XPathElement");
            class XPathWildcardElement extends XPathElement_1.XPathElement {
                constructor()
                {
                    super(XPath_1.XPath.WILDCARD);
                }
                evaluate(t)
                {
                    let kids = [];
                    if (this.invert) {
                        // !* is weird but valid (empty)
                        return kids;
                    }
                    for (let c of Trees_1.Trees.getChildren(t)) {
                        kids.push(c);
                    }
                    return kids;
                }
            }
            __decorate([
            Decorators_1.Override
            ], XPathWildcardElement.prototype, "evaluate", null);
            exports.XPathWildcardElement = XPathWildcardElement;

        }, {
            "../../Decorators": 224,
            "../Trees": 344,
            "./XPath": 354,
            "./XPathElement": 355
        }],
        364: [function(require, module, exports) {
            (function(global) {
                (function() {
                    'use strict';

                    var objectAssign = require('object-assign');

                    // compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
                    // original notice:

                    /*!
                     * The buffer module from node.js, for the browser.
                     *
                     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
                     * @license  MIT
                     */
                    function compare(a, b) {
                        if (a === b) {
                            return 0;
                        }

                        var x = a.length;
                        var y = b.length;

                        for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                            if (a[i] !== b[i]) {
                                x = a[i];
                                y = b[i];
                                break;
                            }
                        }

                        if (x < y) {
                            return -1;
                        }
                        if (y < x) {
                            return 1;
                        }
                        return 0;
                    }
                    function isBuffer(b) {
                        if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
                            return global.Buffer.isBuffer(b);
                        }
                        return !!(b != null && b._isBuffer);
                    }

                    // based on node assert, original notice:
                    // NB: The URL to the CommonJS spec is kept just for tradition.
                    //     node-assert has evolved a lot since then, both in API and behavior.

                    // http://wiki.commonjs.org/wiki/Unit_Testing/1.0
                    //
                    // THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
                    //
                    // Originally from narwhal.js (http://narwhaljs.org)
                    // Copyright (c) 2009 Thomas Robinson <280north.com>
                    //
                    // Permission is hereby granted, free of charge, to any person obtaining a copy
                    // of this software and associated documentation files (the 'Software'), to
                    // deal in the Software without restriction, including without limitation the
                    // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
                    // sell copies of the Software, and to permit persons to whom the Software is
                    // furnished to do so, subject to the following conditions:
                    //
                    // The above copyright notice and this permission notice shall be included in
                    // all copies or substantial portions of the Software.
                    //
                    // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                    // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                    // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                    // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
                    // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
                    // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

                    var util = require('util/');
                    var hasOwn = Object.prototype.hasOwnProperty;
                    var pSlice = Array.prototype.slice;
                    var functionsHaveNames = (function() {
                        return function foo() {}.name === 'foo';
                    }());
                    function pToString(obj) {
                        return Object.prototype.toString.call(obj);
                    }
                    function isView(arrbuf) {
                        if (isBuffer(arrbuf)) {
                            return false;
                        }
                        if (typeof global.ArrayBuffer !== 'function') {
                            return false;
                        }
                        if (typeof ArrayBuffer.isView === 'function') {
                            return ArrayBuffer.isView(arrbuf);
                        }
                        if (!arrbuf) {
                            return false;
                        }
                        if (arrbuf instanceof DataView) {
                            return true;
                        }
                        if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
                            return true;
                        }
                        return false;
                    }
                    // 1. The assert module provides functions that throw
                    // AssertionError's when particular conditions are not met. The
                    // assert module must conform to the following interface.

                    var assert = module.exports = ok;

                    // 2. The AssertionError is defined in assert.
                    // new assert.AssertionError({ message: message,
                    //                             actual: actual,
                    //                             expected: expected })

                    var regex = /\s*function\s+([^\(\s]*)\s*/;
                    // based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
                    function getName(func) {
                        if (!util.isFunction(func)) {
                            return;
                        }
                        if (functionsHaveNames) {
                            return func.name;
                        }
                        var str = func.toString();
                        var match = str.match(regex);
                        return match && match[1];
                    }
                    assert.AssertionError = function AssertionError(options) {
                        this.name = 'AssertionError';
                        this.actual = options.actual;
                        this.expected = options.expected;
                        this.operator = options.operator;
                        if (options.message) {
                            this.message = options.message;
                            this.generatedMessage = false;
                        } else {
                            this.message = getMessage(this);
                            this.generatedMessage = true;
                        }
                        var stackStartFunction = options.stackStartFunction || fail;
                        if (Error.captureStackTrace) {
                            Error.captureStackTrace(this, stackStartFunction);
                        } else {
                            // non v8 browsers so we can have a stacktrace
                            var err = new Error();
                            if (err.stack) {
                                var out = err.stack;

                                // try to strip useless frames
                                var fn_name = getName(stackStartFunction);
                                var idx = out.indexOf('\n' + fn_name);
                                if (idx >= 0) {
                                    // once we have located the function frame
                                    // we need to strip out everything before it (and its line)
                                    var next_line = out.indexOf('\n', idx + 1);
                                    out = out.substring(next_line + 1);
                                }

                                this.stack = out;
                            }
                        }
                    };

                    // assert.AssertionError instanceof Error
                    util.inherits(assert.AssertionError, Error);

                    function truncate(s, n) {
                        if (typeof s === 'string') {
                            return s.length < n ? s : s.slice(0, n);
                        } else {
                            return s;
                        }
                    }
                    function inspect(something) {
                        if (functionsHaveNames || !util.isFunction(something)) {
                            return util.inspect(something);
                        }
                        var rawname = getName(something);
                        var name = rawname ? ': ' + rawname : '';
                        return '[Function' + name + ']';
                    }
                    function getMessage(self) {
                        return truncate(inspect(self.actual), 128) + ' ' +
                        self.operator + ' ' +
                        truncate(inspect(self.expected), 128);
                    }

                    // At present only the three keys mentioned above are used and
                    // understood by the spec. Implementations or sub modules can pass
                    // other keys to the AssertionError's constructor - they will be
                    // ignored.

                    // 3. All of the following functions must throw an AssertionError
                    // when a corresponding condition is not met, with a message that
                    // may be undefined if not provided.  All assertion methods provide
                    // both the actual and expected values to the assertion error for
                    // display purposes.

                    function fail(actual, expected, message, operator, stackStartFunction) {
                        throw new assert.AssertionError({
                            message: message,
                            actual: actual,
                            expected: expected,
                            operator: operator,
                            stackStartFunction: stackStartFunction
                        });
                    }

                    // EXTENSION! allows for well behaved errors defined elsewhere.
                    assert.fail = fail;

                    // 4. Pure assertion tests whether a value is truthy, as determined
                    // by !!guard.
                    // assert.ok(guard, message_opt);
                    // This statement is equivalent to assert.equal(true, !!guard,
                    // message_opt);. To test strictly for the value true, use
                    // assert.strictEqual(true, guard, message_opt);.

                    function ok(value, message) {
                        if (!value)
                            fail(value, true, message, '==', assert.ok);
                    }
                    assert.ok = ok;

                    // 5. The equality assertion tests shallow, coercive equality with
                    // ==.
                    // assert.equal(actual, expected, message_opt);

                    assert.equal = function equal(actual, expected, message) {
                        if (actual != expected)
                            fail(actual, expected, message, '==', assert.equal);
                    };

                    // 6. The non-equality assertion tests for whether two objects are not equal
                    // with != assert.notEqual(actual, expected, message_opt);

                    assert.notEqual = function notEqual(actual, expected, message) {
                        if (actual == expected) {
                            fail(actual, expected, message, '!=', assert.notEqual);
                        }
                    };

                    // 7. The equivalence assertion tests a deep equality relation.
                    // assert.deepEqual(actual, expected, message_opt);

                    assert.deepEqual = function deepEqual(actual, expected, message) {
                        if (!_deepEqual(actual, expected, false)) {
                            fail(actual, expected, message, 'deepEqual', assert.deepEqual);
                        }
                    };

                    assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
                        if (!_deepEqual(actual, expected, true)) {
                            fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
                        }
                    };

                    function _deepEqual(actual, expected, strict, memos) {
                        // 7.1. All identical values are equivalent, as determined by ===.
                        if (actual === expected) {
                            return true;
                        } else if (isBuffer(actual) && isBuffer(expected)) {
                            return compare(actual, expected) === 0;



                        } else // 7.2. If the expected value is a Date object, the actual value is
                        // equivalent if it is also a Date object that refers to the same time.
                        if (util.isDate(actual) && util.isDate(expected)) {
                            return actual.getTime() === expected.getTime();




                        } else // 7.3 If the expected value is a RegExp object, the actual value is
                        // equivalent if it is also a RegExp object with the same source and
                        // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
                        if (util.isRegExp(actual) && util.isRegExp(expected)) {
                            return actual.source === expected.source &&
                                actual.global === expected.global &&
                                actual.multiline === expected.multiline &&
                                actual.lastIndex === expected.lastIndex &&
                                actual.ignoreCase === expected.ignoreCase;



                        } else // 7.4. Other pairs that do not both pass typeof value == 'object',
                        // equivalence is determined by ==.
                        if ((actual === null || typeof actual !== 'object') &&
                        (expected === null || typeof expected !== 'object')) {
                            return strict ? actual === expected : actual == expected;







                        } else // If both values are instances of typed arrays, wrap their underlying
                        // ArrayBuffers in a Buffer each to increase performance
                        // This optimization requires the arrays to have the same type as checked by
                        // Object.prototype.toString (aka pToString). Never perform binary
                        // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
                        // bit patterns are not identical.
                        if (isView(actual) && isView(expected) &&
                        pToString(actual) === pToString(expected) &&
                        !(actual instanceof Float32Array ||
                        actual instanceof Float64Array)) {
                            return compare(new Uint8Array(actual.buffer),
                            new Uint8Array(expected.buffer)) === 0;







                        } else // 7.5 For all other Object pairs, including Array objects, equivalence is
                        // determined by having the same number of owned properties (as verified
                        // with Object.prototype.hasOwnProperty.call), the same set of keys
                        // (although not necessarily the same order), equivalent values for every
                        // corresponding key, and an identical 'prototype' property. Note: this
                        // accounts for both named and indexed properties on Arrays.
                        if (isBuffer(actual) !== isBuffer(expected)) {
                            return false;
                        } else {
                            memos = memos || {
                                actual: [],
                                expected: []
                            };

                            var actualIndex = memos.actual.indexOf(actual);
                            if (actualIndex !== -1) {
                                if (actualIndex === memos.expected.indexOf(expected)) {
                                    return true;
                                }
                            }

                            memos.actual.push(actual);
                            memos.expected.push(expected);

                            return objEquiv(actual, expected, strict, memos);
                        }
                    }

                    function isArguments(object) {
                        return Object.prototype.toString.call(object) == '[object Arguments]';
                    }

                    function objEquiv(a, b, strict, actualVisitedObjects) {
                        if (a === null || a === undefined || b === null || b === undefined)
                            return false;
                        // if one is a primitive, the other must be same
                        if (util.isPrimitive(a) || util.isPrimitive(b))
                            return a === b;
                        if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
                            return false;
                        var aIsArgs = isArguments(a);
                        var bIsArgs = isArguments(b);
                        if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
                            return false;
                        if (aIsArgs) {
                            a = pSlice.call(a);
                            b = pSlice.call(b);
                            return _deepEqual(a, b, strict);
                        }
                        var ka = objectKeys(a);
                        var kb = objectKeys(b);
                        var key,
                            i;
                        // having the same number of owned properties (keys incorporates
                        // hasOwnProperty)
                        if (ka.length !== kb.length)
                            return false;
                        //the same set of keys (although not necessarily the same order),
                        ka.sort();
                        kb.sort();
                        //~~~cheap key test
                        for (i = ka.length - 1; i >= 0; i--) {
                            if (ka[i] !== kb[i])
                                return false;
                        }
                        //equivalent values for every corresponding key, and
                        //~~~possibly expensive deep test
                        for (i = ka.length - 1; i >= 0; i--) {
                            key = ka[i];
                            if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
                                return false;
                        }
                        return true;
                    }

                    // 8. The non-equivalence assertion tests for any deep inequality.
                    // assert.notDeepEqual(actual, expected, message_opt);

                    assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
                        if (_deepEqual(actual, expected, false)) {
                            fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
                        }
                    };

                    assert.notDeepStrictEqual = notDeepStrictEqual;
                    function notDeepStrictEqual(actual, expected, message) {
                        if (_deepEqual(actual, expected, true)) {
                            fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
                        }
                    }

                    // 9. The strict equality assertion tests strict equality, as determined by ===.
                    // assert.strictEqual(actual, expected, message_opt);

                    assert.strictEqual = function strictEqual(actual, expected, message) {
                        if (actual !== expected) {
                            fail(actual, expected, message, '===', assert.strictEqual);
                        }
                    };

                    // 10. The strict non-equality assertion tests for strict inequality, as
                    // determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

                    assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
                        if (actual === expected) {
                            fail(actual, expected, message, '!==', assert.notStrictEqual);
                        }
                    };

                    function expectedException(actual, expected) {
                        if (!actual || !expected) {
                            return false;
                        }

                        if (Object.prototype.toString.call(expected) == '[object RegExp]') {
                            return expected.test(actual);
                        }

                        try {
                            if (actual instanceof expected) {
                                return true;
                            }
                        } catch (e) {

                        }

                        if (Error.isPrototypeOf(expected)) {
                            return false;
                        }

                        return expected.call({}, actual) === true;
                    }

                    function _tryBlock(block) {
                        var error;
                        try {
                            block();
                        } catch (e) {
                            error = e;
                        }
                        return error;
                    }

                    function _throws(shouldThrow, block, expected, message) {
                        var actual;

                        if (typeof block !== 'function') {
                            throw new TypeError('"block" argument must be a function');
                        }

                        if (typeof expected === 'string') {
                            message = expected;
                            expected = null;
                        }

                        actual = _tryBlock(block);

                        message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
                        (message ? ' ' + message : '.');

                        if (shouldThrow && !actual) {
                            fail(actual, expected, 'Missing expected exception' + message);
                        }

                        var userProvidedMessage = typeof message === 'string';
                        var isUnwantedException = !shouldThrow && util.isError(actual);
                        var isUnexpectedException = !shouldThrow && actual && !expected;

                        if ((isUnwantedException &&
                        userProvidedMessage &&
                        expectedException(actual, expected)) ||
                        isUnexpectedException) {
                            fail(actual, expected, 'Got unwanted exception' + message);
                        }

                        if ((shouldThrow && actual && expected &&
                        !expectedException(actual, expected)) || (!shouldThrow && actual)) {
                            throw actual;
                        }
                    }

                    // 11. Expected to throw an error:
                    // assert.throws(block, Error_opt, message_opt);

                    assert.throws = function(block, /*optional*/
                    error, /*optional*/
                    message) {
                        _throws(true, block, error, message);
                    };

                    // EXTENSION! This is annoying to write outside this module.
                    assert.doesNotThrow = function(block, /*optional*/
                    error, /*optional*/
                    message) {
                        _throws(false, block, error, message);
                    };

                    assert.ifError = function(err) {
                        if (err)
                            throw err;
                    };

                    // Expose a strict only variant of assert
                    function strict(value, message) {
                        if (!value)
                            fail(value, true, message, '==', strict);
                    }
                    assert.strict = objectAssign(strict, assert, {
                        equal: assert.strictEqual,
                        deepEqual: assert.deepStrictEqual,
                        notEqual: assert.notStrictEqual,
                        notDeepEqual: assert.notDeepStrictEqual
                    });
                    assert.strict.strict = assert.strict;

                    var objectKeys = Object.keys || function(obj) {
                        var keys = [];
                        for (var key in obj) {
                            if (hasOwn.call(obj, key))
                                keys.push(key);
                        }
                        return keys;
                    };

                }).call(this)
            }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

        }, {
            "object-assign": 515,
            "util/": 518
        }],
        365: [function(require, module, exports) {
            module.exports = function _atob(str) {
                return atob(str)
            }

        }, {}],
        366: [function(require, module, exports) {
            'use strict'

            exports.byteLength = byteLength
            exports.toByteArray = toByteArray
            exports.fromByteArray = fromByteArray

            var lookup = []
            var revLookup = []
            var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

            var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
            for (var i = 0, len = code.length; i < len; ++i) {
                lookup[i] = code[i]
                revLookup[code.charCodeAt(i)] = i
            }

            // Support decoding URL-safe base64 strings, as Node.js does.
            // See: https://en.wikipedia.org/wiki/Base64#URL_applications
            revLookup['-'.charCodeAt(0)] = 62
            revLookup['_'.charCodeAt(0)] = 63

            function getLens(b64) {
                var len = b64.length

                if (len % 4 > 0) {
                    throw new Error('Invalid string. Length must be a multiple of 4')
                }

                // Trim off extra bytes after placeholder bytes are found
                // See: https://github.com/beatgammit/base64-js/issues/42
                var validLen = b64.indexOf('=')
                if (validLen === -1)
                    validLen = len

                var placeHoldersLen = validLen === len
                ? 0
                : 4 - (validLen % 4)

                return [validLen, placeHoldersLen]
            }

            // base64 is 4/3 + up to two characters of the original data
            function byteLength(b64) {
                var lens = getLens(b64)
                var validLen = lens[0]
                var placeHoldersLen = lens[1]
                return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
            }

            function _byteLength(b64, validLen, placeHoldersLen) {
                return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
            }

            function toByteArray(b64) {
                var tmp
                var lens = getLens(b64)
                var validLen = lens[0]
                var placeHoldersLen = lens[1]

                var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

                var curByte = 0
                // if there are placeholders, only get up to the last complete 4 chars
                var len = placeHoldersLen > 0
                ? validLen - 4
                : validLen

                var i
                for (i = 0; i < len; i += 4) {
                    tmp =
                    (revLookup[b64.charCodeAt(i)] << 18) |
                    (revLookup[b64.charCodeAt(i + 1)] << 12) |
                    (revLookup[b64.charCodeAt(i + 2)] << 6) |
                    revLookup[b64.charCodeAt(i + 3)]
                    arr[curByte++] = (tmp >> 16) & 0xFF
                    arr[curByte++] = (tmp >> 8) & 0xFF
                    arr[curByte++] = tmp & 0xFF
                }

                if (placeHoldersLen === 2) {
                    tmp =
                    (revLookup[b64.charCodeAt(i)] << 2) |
                    (revLookup[b64.charCodeAt(i + 1)] >> 4)
                    arr[curByte++] = tmp & 0xFF
                }

                if (placeHoldersLen === 1) {
                    tmp =
                    (revLookup[b64.charCodeAt(i)] << 10) |
                    (revLookup[b64.charCodeAt(i + 1)] << 4) |
                    (revLookup[b64.charCodeAt(i + 2)] >> 2)
                    arr[curByte++] = (tmp >> 8) & 0xFF
                    arr[curByte++] = tmp & 0xFF
                }

                return arr
            }

            function tripletToBase64(num) {
                return lookup[num >> 18 & 0x3F] +
                lookup[num >> 12 & 0x3F] +
                lookup[num >> 6 & 0x3F] +
                lookup[num & 0x3F]
            }

            function encodeChunk(uint8, start, end) {
                var tmp
                var output = []
                for (var i = start; i < end; i += 3) {
                    tmp =
                    ((uint8[i] << 16) & 0xFF0000) +
                    ((uint8[i + 1] << 8) & 0xFF00) +
                    (uint8[i + 2] & 0xFF)
                    output.push(tripletToBase64(tmp))
                }
                return output.join('')
            }

            function fromByteArray(uint8) {
                var tmp
                var len = uint8.length
                var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
                var parts = []
                var maxChunkLength = 16383 // must be multiple of 3

                // go through the array every three bytes, we'll deal with trailing stuff later
                for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                    parts.push(encodeChunk(
                    uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
                    ))
                }

                // pad the end with zeros, but make sure to not forget the extra bytes
                if (extraBytes === 1) {
                    tmp = uint8[len - 1]
                    parts.push(
                    lookup[tmp >> 2] +
                    lookup[(tmp << 4) & 0x3F] +
                    '=='
                    )
                } else if (extraBytes === 2) {
                    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
                    parts.push(
                    lookup[tmp >> 10] +
                    lookup[(tmp >> 4) & 0x3F] +
                    lookup[(tmp << 2) & 0x3F] +
                    '='
                    )
                }

                return parts.join('')
            }

        }, {}],
        367: [function(require, module, exports) {
            var bigInt = (function(undefined) {
                "use strict";

                var BASE = 1e7,
                    LOG_BASE = 7,
                    MAX_INT = 9007199254740992,
                    MAX_INT_ARR = smallToArray(MAX_INT),
                    DEFAULT_ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz";

                var supportsNativeBigInt = typeof BigInt === "function";

                function Integer(v, radix, alphabet, caseSensitive) {
                    if (typeof v === "undefined")
                        return Integer[0];
                    if (typeof radix !== "undefined")
                        return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);
                    return parseValue(v);
                }

                function BigInteger(value, sign) {
                    this.value = value;
                    this.sign = sign;
                    this.isSmall = false;
                }
                BigInteger.prototype = Object.create(Integer.prototype);

                function SmallInteger(value) {
                    this.value = value;
                    this.sign = value < 0;
                    this.isSmall = true;
                }
                SmallInteger.prototype = Object.create(Integer.prototype);

                function NativeBigInt(value) {
                    this.value = value;
                }
                NativeBigInt.prototype = Object.create(Integer.prototype);

                function isPrecise(n) {
                    return -MAX_INT < n && n < MAX_INT;
                }

                function smallToArray(n) {
                    // For performance reasons doesn't reference BASE, need to change this function if BASE changes
                    if (n < 1e7)
                        return [n];
                    if (n < 1e14)
                        return [n % 1e7, Math.floor(n / 1e7)];
                    return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];
                }

                function arrayToSmall(arr) {
                    // If BASE changes this function may need to change
                    trim(arr);
                    var length = arr.length;
                    if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {
                        switch (length) {
                        case 0:
                            return 0;
                        case 1:
                            return arr[0];
                        case 2:
                            return arr[0] + arr[1] * BASE;
                        default:
                            return arr[0] + (arr[1] + arr[2] * BASE) * BASE;
                        }
                    }
                    return arr;
                }

                function trim(v) {
                    var i = v.length;
                    while (v[--i] === 0)
                        ;
                    v.length = i + 1;
                }

                function createArray(length) {
                    // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger
                    var x = new Array(length);
                    var i = -1;
                    while (++i < length) {
                        x[i] = 0;
                    }
                    return x;
                }

                function truncate(n) {
                    if (n > 0)
                        return Math.floor(n);
                    return Math.ceil(n);
                }

                function add(a, b) {
                    // assumes a and b are arrays with a.length >= b.length
                    var l_a = a.length,
                        l_b = b.length,
                        r = new Array(l_a),
                        carry = 0,
                        base = BASE,
                        sum,
                        i;
                    for (i = 0; i < l_b; i++) {
                        sum = a[i] + b[i] + carry;
                        carry = sum >= base ? 1 : 0;
                        r[i] = sum - carry * base;
                    }
                    while (i < l_a) {
                        sum = a[i] + carry;
                        carry = sum === base ? 1 : 0;
                        r[i++] = sum - carry * base;
                    }
                    if (carry > 0)
                        r.push(carry);
                    return r;
                }

                function addAny(a, b) {
                    if (a.length >= b.length)
                        return add(a, b);
                    return add(b, a);
                }

                function addSmall(a, carry) {
                    // assumes a is array, carry is number with 0 <= carry < MAX_INT
                    var l = a.length,
                        r = new Array(l),
                        base = BASE,
                        sum,
                        i;
                    for (i = 0; i < l; i++) {
                        sum = a[i] - base + carry;
                        carry = Math.floor(sum / base);
                        r[i] = sum - carry * base;
                        carry += 1;
                    }
                    while (carry > 0) {
                        r[i++] = carry % base;
                        carry = Math.floor(carry / base);
                    }
                    return r;
                }

                BigInteger.prototype.add = function(v) {
                    var n = parseValue(v);
                    if (this.sign !== n.sign) {
                        return this.subtract(n.negate());
                    }
                    var a = this.value,
                        b = n.value;
                    if (n.isSmall) {
                        return new BigInteger(addSmall(a, Math.abs(b)), this.sign);
                    }
                    return new BigInteger(addAny(a, b), this.sign);
                };
                BigInteger.prototype.plus = BigInteger.prototype.add;

                SmallInteger.prototype.add = function(v) {
                    var n = parseValue(v);
                    var a = this.value;
                    if (a < 0 !== n.sign) {
                        return this.subtract(n.negate());
                    }
                    var b = n.value;
                    if (n.isSmall) {
                        if (isPrecise(a + b))
                            return new SmallInteger(a + b);
                        b = smallToArray(Math.abs(b));
                    }
                    return new BigInteger(addSmall(b, Math.abs(a)), a < 0);
                };
                SmallInteger.prototype.plus = SmallInteger.prototype.add;

                NativeBigInt.prototype.add = function(v) {
                    return new NativeBigInt(this.value + parseValue(v).value);
                }
                NativeBigInt.prototype.plus = NativeBigInt.prototype.add;

                function subtract(a, b) {
                    // assumes a and b are arrays with a >= b
                    var a_l = a.length,
                        b_l = b.length,
                        r = new Array(a_l),
                        borrow = 0,
                        base = BASE,
                        i,
                        difference;
                    for (i = 0; i < b_l; i++) {
                        difference = a[i] - borrow - b[i];
                        if (difference < 0) {
                            difference += base;
                            borrow = 1;
                        } else
                            borrow = 0;
                        r[i] = difference;
                    }
                    for (i = b_l; i < a_l; i++) {
                        difference = a[i] - borrow;
                        if (difference < 0)
                            difference += base;
                        else {
                            r[i++] = difference;
                            break;
                        }
                        r[i] = difference;
                    }
                    for (; i < a_l; i++) {
                        r[i] = a[i];
                    }
                    trim(r);
                    return r;
                }

                function subtractAny(a, b, sign) {
                    var value;
                    if (compareAbs(a, b) >= 0) {
                        value = subtract(a, b);
                    } else {
                        value = subtract(b, a);
                        sign = !sign;
                    }
                    value = arrayToSmall(value);
                    if (typeof value === "number") {
                        if (sign)
                            value = -value;
                        return new SmallInteger(value);
                    }
                    return new BigInteger(value, sign);
                }

                function subtractSmall(a, b, sign) {
                    // assumes a is array, b is number with 0 <= b < MAX_INT
                    var l = a.length,
                        r = new Array(l),
                        carry = -b,
                        base = BASE,
                        i,
                        difference;
                    for (i = 0; i < l; i++) {
                        difference = a[i] + carry;
                        carry = Math.floor(difference / base);
                        difference %= base;
                        r[i] = difference < 0 ? difference + base : difference;
                    }
                    r = arrayToSmall(r);
                    if (typeof r === "number") {
                        if (sign)
                            r = -r;
                        return new SmallInteger(r);
                    }
                    return new BigInteger(r, sign);
                }

                BigInteger.prototype.subtract = function(v) {
                    var n = parseValue(v);
                    if (this.sign !== n.sign) {
                        return this.add(n.negate());
                    }
                    var a = this.value,
                        b = n.value;
                    if (n.isSmall)
                        return subtractSmall(a, Math.abs(b), this.sign);
                    return subtractAny(a, b, this.sign);
                };
                BigInteger.prototype.minus = BigInteger.prototype.subtract;

                SmallInteger.prototype.subtract = function(v) {
                    var n = parseValue(v);
                    var a = this.value;
                    if (a < 0 !== n.sign) {
                        return this.add(n.negate());
                    }
                    var b = n.value;
                    if (n.isSmall) {
                        return new SmallInteger(a - b);
                    }
                    return subtractSmall(b, Math.abs(a), a >= 0);
                };
                SmallInteger.prototype.minus = SmallInteger.prototype.subtract;

                NativeBigInt.prototype.subtract = function(v) {
                    return new NativeBigInt(this.value - parseValue(v).value);
                }
                NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;

                BigInteger.prototype.negate = function() {
                    return new BigInteger(this.value, !this.sign);
                };
                SmallInteger.prototype.negate = function() {
                    var sign = this.sign;
                    var small = new SmallInteger(-this.value);
                    small.sign = !sign;
                    return small;
                };
                NativeBigInt.prototype.negate = function() {
                    return new NativeBigInt(-this.value);
                }

                BigInteger.prototype.abs = function() {
                    return new BigInteger(this.value, false);
                };
                SmallInteger.prototype.abs = function() {
                    return new SmallInteger(Math.abs(this.value));
                };
                NativeBigInt.prototype.abs = function() {
                    return new NativeBigInt(this.value >= 0 ? this.value : -this.value);
                }


                function multiplyLong(a, b) {
                    var a_l = a.length,
                        b_l = b.length,
                        l = a_l + b_l,
                        r = createArray(l),
                        base = BASE,
                        product,
                        carry,
                        i,
                        a_i,
                        b_j;
                    for (i = 0; i < a_l; ++i) {
                        a_i = a[i];
                        for (var j = 0; j < b_l; ++j) {
                            b_j = b[j];
                            product = a_i * b_j + r[i + j];
                            carry = Math.floor(product / base);
                            r[i + j] = product - carry * base;
                            r[i + j + 1] += carry;
                        }
                    }
                    trim(r);
                    return r;
                }

                function multiplySmall(a, b) {
                    // assumes a is array, b is number with |b| < BASE
                    var l = a.length,
                        r = new Array(l),
                        base = BASE,
                        carry = 0,
                        product,
                        i;
                    for (i = 0; i < l; i++) {
                        product = a[i] * b + carry;
                        carry = Math.floor(product / base);
                        r[i] = product - carry * base;
                    }
                    while (carry > 0) {
                        r[i++] = carry % base;
                        carry = Math.floor(carry / base);
                    }
                    return r;
                }

                function shiftLeft(x, n) {
                    var r = [];
                    while (n-- > 0)
                        r.push(0);
                    return r.concat(x);
                }

                function multiplyKaratsuba(x, y) {
                    var n = Math.max(x.length, y.length);

                    if (n <= 30)
                        return multiplyLong(x, y);
                    n = Math.ceil(n / 2);

                    var b = x.slice(n),
                        a = x.slice(0, n),
                        d = y.slice(n),
                        c = y.slice(0, n);

                    var ac = multiplyKaratsuba(a, c),
                        bd = multiplyKaratsuba(b, d),
                        abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));

                    var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));
                    trim(product);
                    return product;
                }

                // The following function is derived from a surface fit of a graph plotting the performance difference
                // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.
                function useKaratsuba(l1, l2) {
                    return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;
                }

                BigInteger.prototype.multiply = function(v) {
                    var n = parseValue(v),
                        a = this.value,
                        b = n.value,
                        sign = this.sign !== n.sign,
                        abs;
                    if (n.isSmall) {
                        if (b === 0)
                            return Integer[0];
                        if (b === 1)
                            return this;
                        if (b === -1)
                            return this.negate();
                        abs = Math.abs(b);
                        if (abs < BASE) {
                            return new BigInteger(multiplySmall(a, abs), sign);
                        }
                        b = smallToArray(abs);
                    }
                    if (useKaratsuba(a.length, b.length))// Karatsuba is only faster for certain array sizes
                    return new BigInteger(multiplyKaratsuba(a, b), sign);
                    return new BigInteger(multiplyLong(a, b), sign);
                };

                BigInteger.prototype.times = BigInteger.prototype.multiply;

                function multiplySmallAndArray(a, b, sign) {
                    // a >= 0
                    if (a < BASE) {
                        return new BigInteger(multiplySmall(b, a), sign);
                    }
                    return new BigInteger(multiplyLong(b, smallToArray(a)), sign);
                }
                SmallInteger.prototype._multiplyBySmall = function(a) {
                    if (isPrecise(a.value * this.value)) {
                        return new SmallInteger(a.value * this.value);
                    }
                    return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);
                };
                BigInteger.prototype._multiplyBySmall = function(a) {
                    if (a.value === 0)
                        return Integer[0];
                    if (a.value === 1)
                        return this;
                    if (a.value === -1)
                        return this.negate();
                    return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);
                };
                SmallInteger.prototype.multiply = function(v) {
                    return parseValue(v)._multiplyBySmall(this);
                };
                SmallInteger.prototype.times = SmallInteger.prototype.multiply;

                NativeBigInt.prototype.multiply = function(v) {
                    return new NativeBigInt(this.value * parseValue(v).value);
                }
                NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;

                function square(a) {
                    //console.assert(2 * BASE * BASE < MAX_INT);
                    var l = a.length,
                        r = createArray(l + l),
                        base = BASE,
                        product,
                        carry,
                        i,
                        a_i,
                        a_j;
                    for (i = 0; i < l; i++) {
                        a_i = a[i];
                        carry = 0 - a_i * a_i;
                        for (var j = i; j < l; j++) {
                            a_j = a[j];
                            product = 2 * (a_i * a_j) + r[i + j] + carry;
                            carry = Math.floor(product / base);
                            r[i + j] = product - carry * base;
                        }
                        r[i + l] = carry;
                    }
                    trim(r);
                    return r;
                }

                BigInteger.prototype.square = function() {
                    return new BigInteger(square(this.value), false);
                };

                SmallInteger.prototype.square = function() {
                    var value = this.value * this.value;
                    if (isPrecise(value))
                        return new SmallInteger(value);
                    return new BigInteger(square(smallToArray(Math.abs(this.value))), false);
                };

                NativeBigInt.prototype.square = function(v) {
                    return new NativeBigInt(this.value * this.value);
                }

                function divMod1(a, b) {
                    // Left over from previous version. Performs faster than divMod2 on smaller input sizes.
                    var a_l = a.length,
                        b_l = b.length,
                        base = BASE,
                        result = createArray(b.length),
                        divisorMostSignificantDigit = b[b_l - 1],
                        // normalization
                        lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),
                        remainder = multiplySmall(a, lambda),
                        divisor = multiplySmall(b, lambda),
                        quotientDigit,
                        shift,
                        carry,
                        borrow,
                        i,
                        l,
                        q;
                    if (remainder.length <= a_l)
                        remainder.push(0);
                    divisor.push(0);
                    divisorMostSignificantDigit = divisor[b_l - 1];
                    for (shift = a_l - b_l; shift >= 0; shift--) {
                        quotientDigit = base - 1;
                        if (remainder[shift + b_l] !== divisorMostSignificantDigit) {
                            quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);
                        }
                        // quotientDigit <= base - 1
                        carry = 0;
                        borrow = 0;
                        l = divisor.length;
                        for (i = 0; i < l; i++) {
                            carry += quotientDigit * divisor[i];
                            q = Math.floor(carry / base);
                            borrow += remainder[shift + i] - (carry - q * base);
                            carry = q;
                            if (borrow < 0) {
                                remainder[shift + i] = borrow + base;
                                borrow = -1;
                            } else {
                                remainder[shift + i] = borrow;
                                borrow = 0;
                            }
                        }
                        while (borrow !== 0) {
                            quotientDigit -= 1;
                            carry = 0;
                            for (i = 0; i < l; i++) {
                                carry += remainder[shift + i] - base + divisor[i];
                                if (carry < 0) {
                                    remainder[shift + i] = carry + base;
                                    carry = 0;
                                } else {
                                    remainder[shift + i] = carry;
                                    carry = 1;
                                }
                            }
                            borrow += carry;
                        }
                        result[shift] = quotientDigit;
                    }
                    // denormalization
                    remainder = divModSmall(remainder, lambda)[0];
                    return [arrayToSmall(result), arrayToSmall(remainder)];
                }

                function divMod2(a, b) {
                    // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/
                    // Performs faster than divMod1 on larger input sizes.
                    var a_l = a.length,
                        b_l = b.length,
                        result = [],
                        part = [],
                        base = BASE,
                        guess,
                        xlen,
                        highx,
                        highy,
                        check;
                    while (a_l) {
                        part.unshift(a[--a_l]);
                        trim(part);
                        if (compareAbs(part, b) < 0) {
                            result.push(0);
                            continue;
                        }
                        xlen = part.length;
                        highx = part[xlen - 1] * base + part[xlen - 2];
                        highy = b[b_l - 1] * base + b[b_l - 2];
                        if (xlen > b_l) {
                            highx = (highx + 1) * base;
                        }
                        guess = Math.ceil(highx / highy);
                        do {
                            check = multiplySmall(b, guess);
                            if (compareAbs(check, part) <= 0)
                                break;
                            guess--;
                        } while (guess);
                        result.push(guess);
                        part = subtract(part, check);
                    }
                    result.reverse();
                    return [arrayToSmall(result), arrayToSmall(part)];
                }

                function divModSmall(value, lambda) {
                    var length = value.length,
                        quotient = createArray(length),
                        base = BASE,
                        i,
                        q,
                        remainder,
                        divisor;
                    remainder = 0;
                    for (i = length - 1; i >= 0; --i) {
                        divisor = remainder * base + value[i];
                        q = truncate(divisor / lambda);
                        remainder = divisor - q * lambda;
                        quotient[i] = q | 0;
                    }
                    return [quotient, remainder | 0];
                }

                function divModAny(self, v) {
                    var value,
                        n = parseValue(v);
                    if (supportsNativeBigInt) {
                        return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];
                    }
                    var a = self.value,
                        b = n.value;
                    var quotient;
                    if (b === 0)
                        throw new Error("Cannot divide by zero");
                    if (self.isSmall) {
                        if (n.isSmall) {
                            return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];
                        }
                        return [Integer[0], self];
                    }
                    if (n.isSmall) {
                        if (b === 1)
                            return [self, Integer[0]];
                        if (b == -1)
                            return [self.negate(), Integer[0]];
                        var abs = Math.abs(b);
                        if (abs < BASE) {
                            value = divModSmall(a, abs);
                            quotient = arrayToSmall(value[0]);
                            var remainder = value[1];
                            if (self.sign)
                                remainder = -remainder;
                            if (typeof quotient === "number") {
                                if (self.sign !== n.sign)
                                    quotient = -quotient;
                                return [new SmallInteger(quotient), new SmallInteger(remainder)];
                            }
                            return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];
                        }
                        b = smallToArray(abs);
                    }
                    var comparison = compareAbs(a, b);
                    if (comparison === -1)
                        return [Integer[0], self];
                    if (comparison === 0)
                        return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];

                    // divMod1 is faster on smaller input sizes
                    if (a.length + b.length <= 200)
                        value = divMod1(a, b);
                    else
                        value = divMod2(a, b);

                    quotient = value[0];
                    var qSign = self.sign !== n.sign,
                        mod = value[1],
                        mSign = self.sign;
                    if (typeof quotient === "number") {
                        if (qSign)
                            quotient = -quotient;
                        quotient = new SmallInteger(quotient);
                    } else
                        quotient = new BigInteger(quotient, qSign);
                    if (typeof mod === "number") {
                        if (mSign)
                            mod = -mod;
                        mod = new SmallInteger(mod);
                    } else
                        mod = new BigInteger(mod, mSign);
                    return [quotient, mod];
                }

                BigInteger.prototype.divmod = function(v) {
                    var result = divModAny(this, v);
                    return {
                        quotient: result[0],
                        remainder: result[1]
                    };
                };
                NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;


                BigInteger.prototype.divide = function(v) {
                    return divModAny(this, v)[0];
                };
                NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function(v) {
                    return new NativeBigInt(this.value / parseValue(v).value);
                };
                SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;

                BigInteger.prototype.mod = function(v) {
                    return divModAny(this, v)[1];
                };
                NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function(v) {
                    return new NativeBigInt(this.value % parseValue(v).value);
                };
                SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;

                BigInteger.prototype.pow = function(v) {
                    var n = parseValue(v),
                        a = this.value,
                        b = n.value,
                        value,
                        x,
                        y;
                    if (b === 0)
                        return Integer[1];
                    if (a === 0)
                        return Integer[0];
                    if (a === 1)
                        return Integer[1];
                    if (a === -1)
                        return n.isEven() ? Integer[1] : Integer[-1];
                    if (n.sign) {
                        return Integer[0];
                    }
                    if (!n.isSmall)
                        throw new Error("The exponent " + n.toString() + " is too large.");
                    if (this.isSmall) {
                        if (isPrecise(value = Math.pow(a, b)))
                            return new SmallInteger(truncate(value));
                    }
                    x = this;
                    y = Integer[1];
                    while (true) {
                        if (b & 1 === 1) {
                            y = y.times(x);
                            --b;
                        }
                        if (b === 0)
                            break;
                        b /= 2;
                        x = x.square();
                    }
                    return y;
                };
                SmallInteger.prototype.pow = BigInteger.prototype.pow;

                NativeBigInt.prototype.pow = function(v) {
                    var n = parseValue(v);
                    var a = this.value,
                        b = n.value;
                    var _0 = BigInt(0),
                        _1 = BigInt(1),
                        _2 = BigInt(2);
                    if (b === _0)
                        return Integer[1];
                    if (a === _0)
                        return Integer[0];
                    if (a === _1)
                        return Integer[1];
                    if (a === BigInt(-1))
                        return n.isEven() ? Integer[1] : Integer[-1];
                    if (n.isNegative())
                        return new NativeBigInt(_0);
                    var x = this;
                    var y = Integer[1];
                    while (true) {
                        if ((b & _1) === _1) {
                            y = y.times(x);
                            --b;
                        }
                        if (b === _0)
                            break;
                        b /= _2;
                        x = x.square();
                    }
                    return y;
                }

                BigInteger.prototype.modPow = function(exp, mod) {
                    exp = parseValue(exp);
                    mod = parseValue(mod);
                    if (mod.isZero())
                        throw new Error("Cannot take modPow with modulus 0");
                    var r = Integer[1],
                        base = this.mod(mod);
                    if (exp.isNegative()) {
                        exp = exp.multiply(Integer[-1]);
                        base = base.modInv(mod);
                    }
                    while (exp.isPositive()) {
                        if (base.isZero())
                            return Integer[0];
                        if (exp.isOdd())
                            r = r.multiply(base).mod(mod);
                        exp = exp.divide(2);
                        base = base.square().mod(mod);
                    }
                    return r;
                };
                NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;

                function compareAbs(a, b) {
                    if (a.length !== b.length) {
                        return a.length > b.length ? 1 : -1;
                    }
                    for (var i = a.length - 1; i >= 0; i--) {
                        if (a[i] !== b[i])
                            return a[i] > b[i] ? 1 : -1;
                    }
                    return 0;
                }

                BigInteger.prototype.compareAbs = function(v) {
                    var n = parseValue(v),
                        a = this.value,
                        b = n.value;
                    if (n.isSmall)
                        return 1;
                    return compareAbs(a, b);
                };
                SmallInteger.prototype.compareAbs = function(v) {
                    var n = parseValue(v),
                        a = Math.abs(this.value),
                        b = n.value;
                    if (n.isSmall) {
                        b = Math.abs(b);
                        return a === b ? 0 : a > b ? 1 : -1;
                    }
                    return -1;
                };
                NativeBigInt.prototype.compareAbs = function(v) {
                    var a = this.value;
                    var b = parseValue(v).value;
                    a = a >= 0 ? a : -a;
                    b = b >= 0 ? b : -b;
                    return a === b ? 0 : a > b ? 1 : -1;
                }

                BigInteger.prototype.compare = function(v) {
                    // See discussion about comparison with Infinity:
                    // https://github.com/peterolson/BigInteger.js/issues/61
                    if (v === Infinity) {
                        return -1;
                    }
                    if (v === -Infinity) {
                        return 1;
                    }

                    var n = parseValue(v),
                        a = this.value,
                        b = n.value;
                    if (this.sign !== n.sign) {
                        return n.sign ? 1 : -1;
                    }
                    if (n.isSmall) {
                        return this.sign ? -1 : 1;
                    }
                    return compareAbs(a, b) * (this.sign ? -1 : 1);
                };
                BigInteger.prototype.compareTo = BigInteger.prototype.compare;

                SmallInteger.prototype.compare = function(v) {
                    if (v === Infinity) {
                        return -1;
                    }
                    if (v === -Infinity) {
                        return 1;
                    }

                    var n = parseValue(v),
                        a = this.value,
                        b = n.value;
                    if (n.isSmall) {
                        return a == b ? 0 : a > b ? 1 : -1;
                    }
                    if (a < 0 !== n.sign) {
                        return a < 0 ? -1 : 1;
                    }
                    return a < 0 ? 1 : -1;
                };
                SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;

                NativeBigInt.prototype.compare = function(v) {
                    if (v === Infinity) {
                        return -1;
                    }
                    if (v === -Infinity) {
                        return 1;
                    }
                    var a = this.value;
                    var b = parseValue(v).value;
                    return a === b ? 0 : a > b ? 1 : -1;
                }
                NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;

                BigInteger.prototype.equals = function(v) {
                    return this.compare(v) === 0;
                };
                NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;

                BigInteger.prototype.notEquals = function(v) {
                    return this.compare(v) !== 0;
                };
                NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;

                BigInteger.prototype.greater = function(v) {
                    return this.compare(v) > 0;
                };
                NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;

                BigInteger.prototype.lesser = function(v) {
                    return this.compare(v) < 0;
                };
                NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;

                BigInteger.prototype.greaterOrEquals = function(v) {
                    return this.compare(v) >= 0;
                };
                NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;

                BigInteger.prototype.lesserOrEquals = function(v) {
                    return this.compare(v) <= 0;
                };
                NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;

                BigInteger.prototype.isEven = function() {
                    return (this.value[0] & 1) === 0;
                };
                SmallInteger.prototype.isEven = function() {
                    return (this.value & 1) === 0;
                };
                NativeBigInt.prototype.isEven = function() {
                    return (this.value & BigInt(1)) === BigInt(0);
                }

                BigInteger.prototype.isOdd = function() {
                    return (this.value[0] & 1) === 1;
                };
                SmallInteger.prototype.isOdd = function() {
                    return (this.value & 1) === 1;
                };
                NativeBigInt.prototype.isOdd = function() {
                    return (this.value & BigInt(1)) === BigInt(1);
                }

                BigInteger.prototype.isPositive = function() {
                    return !this.sign;
                };
                SmallInteger.prototype.isPositive = function() {
                    return this.value > 0;
                };
                NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;

                BigInteger.prototype.isNegative = function() {
                    return this.sign;
                };
                SmallInteger.prototype.isNegative = function() {
                    return this.value < 0;
                };
                NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;

                BigInteger.prototype.isUnit = function() {
                    return false;
                };
                SmallInteger.prototype.isUnit = function() {
                    return Math.abs(this.value) === 1;
                };
                NativeBigInt.prototype.isUnit = function() {
                    return this.abs().value === BigInt(1);
                }

                BigInteger.prototype.isZero = function() {
                    return false;
                };
                SmallInteger.prototype.isZero = function() {
                    return this.value === 0;
                };
                NativeBigInt.prototype.isZero = function() {
                    return this.value === BigInt(0);
                }

                BigInteger.prototype.isDivisibleBy = function(v) {
                    var n = parseValue(v);
                    if (n.isZero())
                        return false;
                    if (n.isUnit())
                        return true;
                    if (n.compareAbs(2) === 0)
                        return this.isEven();
                    return this.mod(n).isZero();
                };
                NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;

                function isBasicPrime(v) {
                    var n = v.abs();
                    if (n.isUnit())
                        return false;
                    if (n.equals(2) || n.equals(3) || n.equals(5))
                        return true;
                    if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5))
                        return false;
                    if (n.lesser(49))
                        return true;

                }
                // we don't know if it's prime: let the other functions figure it out

                function millerRabinTest(n, a) {
                    var nPrev = n.prev(),
                        b = nPrev,
                        r = 0,
                        d,
                        t,
                        i,
                        x;
                    while (b.isEven())
                        b = b.divide(2),
                        r++;
                    next:
                    for (i = 0; i < a.length; i++) {
                        if (n.lesser(a[i]))
                            continue;
                        x = bigInt(a[i]).modPow(b, n);
                        if (x.isUnit() || x.equals(nPrev))
                            continue;
                        for (d = r - 1; d != 0; d--) {
                            x = x.square().mod(n);
                            if (x.isUnit())
                                return false;
                            if (x.equals(nPrev))
                                continue next;
                        }
                        return false;
                    }
                    return true;
                }

                // Set "strict" to true to force GRH-supported lower bound of 2*log(N)^2
                BigInteger.prototype.isPrime = function(strict) {
                    var isPrime = isBasicPrime(this);
                    if (isPrime !== undefined)
                        return isPrime;
                    var n = this.abs();
                    var bits = n.bitLength();
                    if (bits <= 64)
                        return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);
                    var logN = Math.log(2) * bits.toJSNumber();
                    var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);
                    for (var a = [], i = 0; i < t; i++) {
                        a.push(bigInt(i + 2));
                    }
                    return millerRabinTest(n, a);
                };
                NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;

                BigInteger.prototype.isProbablePrime = function(iterations, rng) {
                    var isPrime = isBasicPrime(this);
                    if (isPrime !== undefined)
                        return isPrime;
                    var n = this.abs();
                    var t = iterations === undefined ? 5 : iterations;
                    for (var a = [], i = 0; i < t; i++) {
                        a.push(bigInt.randBetween(2, n.minus(2), rng));
                    }
                    return millerRabinTest(n, a);
                };
                NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;

                BigInteger.prototype.modInv = function(n) {
                    var t = bigInt.zero,
                        newT = bigInt.one,
                        r = parseValue(n),
                        newR = this.abs(),
                        q,
                        lastT,
                        lastR;
                    while (!newR.isZero()) {
                        q = r.divide(newR);
                        lastT = t;
                        lastR = r;
                        t = newT;
                        r = newR;
                        newT = lastT.subtract(q.multiply(newT));
                        newR = lastR.subtract(q.multiply(newR));
                    }
                    if (!r.isUnit())
                        throw new Error(this.toString() + " and " + n.toString() + " are not co-prime");
                    if (t.compare(0) === -1) {
                        t = t.add(n);
                    }
                    if (this.isNegative()) {
                        return t.negate();
                    }
                    return t;
                };

                NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;

                BigInteger.prototype.next = function() {
                    var value = this.value;
                    if (this.sign) {
                        return subtractSmall(value, 1, this.sign);
                    }
                    return new BigInteger(addSmall(value, 1), this.sign);
                };
                SmallInteger.prototype.next = function() {
                    var value = this.value;
                    if (value + 1 < MAX_INT)
                        return new SmallInteger(value + 1);
                    return new BigInteger(MAX_INT_ARR, false);
                };
                NativeBigInt.prototype.next = function() {
                    return new NativeBigInt(this.value + BigInt(1));
                }

                BigInteger.prototype.prev = function() {
                    var value = this.value;
                    if (this.sign) {
                        return new BigInteger(addSmall(value, 1), true);
                    }
                    return subtractSmall(value, 1, this.sign);
                };
                SmallInteger.prototype.prev = function() {
                    var value = this.value;
                    if (value - 1 > -MAX_INT)
                        return new SmallInteger(value - 1);
                    return new BigInteger(MAX_INT_ARR, true);
                };
                NativeBigInt.prototype.prev = function() {
                    return new NativeBigInt(this.value - BigInt(1));
                }

                var powersOfTwo = [1];
                while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE)
                    powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);
                var powers2Length = powersOfTwo.length,
                    highestPower2 = powersOfTwo[powers2Length - 1];

                function shift_isSmall(n) {
                    return Math.abs(n) <= BASE;
                }

                BigInteger.prototype.shiftLeft = function(v) {
                    var n = parseValue(v).toJSNumber();
                    if (!shift_isSmall(n)) {
                        throw new Error(String(n) + " is too large for shifting.");
                    }
                    if (n < 0)
                        return this.shiftRight(-n);
                    var result = this;
                    if (result.isZero())
                        return result;
                    while (n >= powers2Length) {
                        result = result.multiply(highestPower2);
                        n -= powers2Length - 1;
                    }
                    return result.multiply(powersOfTwo[n]);
                };
                NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;

                BigInteger.prototype.shiftRight = function(v) {
                    var remQuo;
                    var n = parseValue(v).toJSNumber();
                    if (!shift_isSmall(n)) {
                        throw new Error(String(n) + " is too large for shifting.");
                    }
                    if (n < 0)
                        return this.shiftLeft(-n);
                    var result = this;
                    while (n >= powers2Length) {
                        if (result.isZero() || (result.isNegative() && result.isUnit()))
                            return result;
                        remQuo = divModAny(result, highestPower2);
                        result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
                        n -= powers2Length - 1;
                    }
                    remQuo = divModAny(result, powersOfTwo[n]);
                    return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];
                };
                NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;

                function bitwise(x, y, fn) {
                    y = parseValue(y);
                    var xSign = x.isNegative(),
                        ySign = y.isNegative();
                    var xRem = xSign ? x.not() : x,
                        yRem = ySign ? y.not() : y;
                    var xDigit = 0,
                        yDigit = 0;
                    var xDivMod = null,
                        yDivMod = null;
                    var result = [];
                    while (!xRem.isZero() || !yRem.isZero()) {
                        xDivMod = divModAny(xRem, highestPower2);
                        xDigit = xDivMod[1].toJSNumber();
                        if (xSign) {
                            xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers
                        }

                        yDivMod = divModAny(yRem, highestPower2);
                        yDigit = yDivMod[1].toJSNumber();
                        if (ySign) {
                            yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers
                        }

                        xRem = xDivMod[0];
                        yRem = yDivMod[0];
                        result.push(fn(xDigit, yDigit));
                    }
                    var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);
                    for (var i = result.length - 1; i >= 0; i -= 1) {
                        sum = sum.multiply(highestPower2).add(bigInt(result[i]));
                    }
                    return sum;
                }

                BigInteger.prototype.not = function() {
                    return this.negate().prev();
                };
                NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;

                BigInteger.prototype.and = function(n) {
                    return bitwise(this, n, function(a, b) {
                        return a & b;
                    });
                };
                NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;

                BigInteger.prototype.or = function(n) {
                    return bitwise(this, n, function(a, b) {
                        return a | b;
                    });
                };
                NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;

                BigInteger.prototype.xor = function(n) {
                    return bitwise(this, n, function(a, b) {
                        return a ^ b;
                    });
                };
                NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;

                var LOBMASK_I = 1 << 30,
                    LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;
                function roughLOB(n) {
                    // get lowestOneBit (rough)
                    // SmallInteger: return Min(lowestOneBit(n), 1 << 30)
                    // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]
                    var v = n.value,
                        x = typeof v === "number" ? v | LOBMASK_I :
                        typeof v === "bigint" ? v | BigInt(LOBMASK_I) :
                        v[0] + v[1] * BASE | LOBMASK_BI;
                    return x & -x;
                }

                function integerLogarithm(value, base) {
                    if (base.compareTo(value) <= 0) {
                        var tmp = integerLogarithm(value, base.square(base));
                        var p = tmp.p;
                        var e = tmp.e;
                        var t = p.multiply(base);
                        return t.compareTo(value) <= 0 ? {
                            p: t,
                            e: e * 2 + 1
                        } : {
                            p: p,
                            e: e * 2
                        };
                    }
                    return {
                        p: bigInt(1),
                        e: 0
                    };
                }

                BigInteger.prototype.bitLength = function() {
                    var n = this;
                    if (n.compareTo(bigInt(0)) < 0) {
                        n = n.negate().subtract(bigInt(1));
                    }
                    if (n.compareTo(bigInt(0)) === 0) {
                        return bigInt(0);
                    }
                    return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));
                }
                NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;

                function max(a, b) {
                    a = parseValue(a);
                    b = parseValue(b);
                    return a.greater(b) ? a : b;
                }
                function min(a, b) {
                    a = parseValue(a);
                    b = parseValue(b);
                    return a.lesser(b) ? a : b;
                }
                function gcd(a, b) {
                    a = parseValue(a).abs();
                    b = parseValue(b).abs();
                    if (a.equals(b))
                        return a;
                    if (a.isZero())
                        return b;
                    if (b.isZero())
                        return a;
                    var c = Integer[1],
                        d,
                        t;
                    while (a.isEven() && b.isEven()) {
                        d = min(roughLOB(a), roughLOB(b));
                        a = a.divide(d);
                        b = b.divide(d);
                        c = c.multiply(d);
                    }
                    while (a.isEven()) {
                        a = a.divide(roughLOB(a));
                    }
                    do {
                        while (b.isEven()) {
                            b = b.divide(roughLOB(b));
                        }
                        if (a.greater(b)) {
                            t = b;
                            b = a;
                            a = t;
                        }
                        b = b.subtract(a);
                    } while (!b.isZero());
                    return c.isUnit() ? a : a.multiply(c);
                }
                function lcm(a, b) {
                    a = parseValue(a).abs();
                    b = parseValue(b).abs();
                    return a.divide(gcd(a, b)).multiply(b);
                }
                function randBetween(a, b, rng) {
                    a = parseValue(a);
                    b = parseValue(b);
                    var usedRNG = rng || Math.random;
                    var low = min(a, b),
                        high = max(a, b);
                    var range = high.subtract(low).add(1);
                    if (range.isSmall)
                        return low.add(Math.floor(usedRNG() * range));
                    var digits = toBase(range, BASE).value;
                    var result = [],
                        restricted = true;
                    for (var i = 0; i < digits.length; i++) {
                        var top = restricted ? digits[i] : BASE;
                        var digit = truncate(usedRNG() * top);
                        result.push(digit);
                        if (digit < top)
                            restricted = false;
                    }
                    return low.add(Integer.fromArray(result, BASE, false));
                }

                var parseBase = function(text, base, alphabet, caseSensitive) {
                    alphabet = alphabet || DEFAULT_ALPHABET;
                    text = String(text);
                    if (!caseSensitive) {
                        text = text.toLowerCase();
                        alphabet = alphabet.toLowerCase();
                    }
                    var length = text.length;
                    var i;
                    var absBase = Math.abs(base);
                    var alphabetValues = {};
                    for (i = 0; i < alphabet.length; i++) {
                        alphabetValues[alphabet[i]] = i;
                    }
                    for (i = 0; i < length; i++) {
                        var c = text[i];
                        if (c === "-")
                            continue;
                        if (c in alphabetValues) {
                            if (alphabetValues[c] >= absBase) {
                                if (c === "1" && absBase === 1)
                                    continue;
                                throw new Error(c + " is not a valid digit in base " + base + ".");
                            }
                        }
                    }
                    base = parseValue(base);
                    var digits = [];
                    var isNegative = text[0] === "-";
                    for (i = isNegative ? 1 : 0; i < text.length; i++) {
                        var c = text[i];
                        if (c in alphabetValues)
                            digits.push(parseValue(alphabetValues[c]));
                        else if (c === "<") {
                            var start = i;
                            do {
                                i++;
                            } while (text[i] !== ">" && i < text.length);
                            digits.push(parseValue(text.slice(start + 1, i)));
                        }
                        else
                            throw new Error(c + " is not a valid character");
                    }
                    return parseBaseFromArray(digits, base, isNegative);
                };

                function parseBaseFromArray(digits, base, isNegative) {
                    var val = Integer[0],
                        pow = Integer[1],
                        i;
                    for (i = digits.length - 1; i >= 0; i--) {
                        val = val.add(digits[i].times(pow));
                        pow = pow.times(base);
                    }
                    return isNegative ? val.negate() : val;
                }

                function stringify(digit, alphabet) {
                    alphabet = alphabet || DEFAULT_ALPHABET;
                    if (digit < alphabet.length) {
                        return alphabet[digit];
                    }
                    return "<" + digit + ">";
                }

                function toBase(n, base) {
                    base = bigInt(base);
                    if (base.isZero()) {
                        if (n.isZero())
                            return {
                                value: [0],
                                isNegative: false
                            };
                        throw new Error("Cannot convert nonzero numbers to base 0.");
                    }
                    if (base.equals(-1)) {
                        if (n.isZero())
                            return {
                                value: [0],
                                isNegative: false
                            };
                        if (n.isNegative())
                            return {
                                value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))
                                .map(Array.prototype.valueOf, [1, 0])
                                ),
                                isNegative: false
                            };

                        var arr = Array.apply(null, Array(n.toJSNumber() - 1))
                        .map(Array.prototype.valueOf, [0, 1]);
                        arr.unshift([1]);
                        return {
                            value: [].concat.apply([], arr),
                            isNegative: false
                        };
                    }

                    var neg = false;
                    if (n.isNegative() && base.isPositive()) {
                        neg = true;
                        n = n.abs();
                    }
                    if (base.isUnit()) {
                        if (n.isZero())
                            return {
                                value: [0],
                                isNegative: false
                            };

                        return {
                            value: Array.apply(null, Array(n.toJSNumber()))
                            .map(Number.prototype.valueOf, 1),
                            isNegative: neg
                        };
                    }
                    var out = [];
                    var left = n,
                        divmod;
                    while (left.isNegative() || left.compareAbs(base) >= 0) {
                        divmod = left.divmod(base);
                        left = divmod.quotient;
                        var digit = divmod.remainder;
                        if (digit.isNegative()) {
                            digit = base.minus(digit).abs();
                            left = left.next();
                        }
                        out.push(digit.toJSNumber());
                    }
                    out.push(left.toJSNumber());
                    return {
                        value: out.reverse(),
                        isNegative: neg
                    };
                }

                function toBaseString(n, base, alphabet) {
                    var arr = toBase(n, base);
                    return (arr.isNegative ? "-" : "") + arr.value.map(function(x) {
                        return stringify(x, alphabet);
                    }).join('');
                }

                BigInteger.prototype.toArray = function(radix) {
                    return toBase(this, radix);
                };

                SmallInteger.prototype.toArray = function(radix) {
                    return toBase(this, radix);
                };

                NativeBigInt.prototype.toArray = function(radix) {
                    return toBase(this, radix);
                };

                BigInteger.prototype.toString = function(radix, alphabet) {
                    if (radix === undefined)
                        radix = 10;
                    if (radix !== 10)
                        return toBaseString(this, radix, alphabet);
                    var v = this.value,
                        l = v.length,
                        str = String(v[--l]),
                        zeros = "0000000",
                        digit;
                    while (--l >= 0) {
                        digit = String(v[l]);
                        str += zeros.slice(digit.length) + digit;
                    }
                    var sign = this.sign ? "-" : "";
                    return sign + str;
                };

                SmallInteger.prototype.toString = function(radix, alphabet) {
                    if (radix === undefined)
                        radix = 10;
                    if (radix != 10)
                        return toBaseString(this, radix, alphabet);
                    return String(this.value);
                };

                NativeBigInt.prototype.toString = SmallInteger.prototype.toString;

                NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function() {
                    return this.toString();
                }

                BigInteger.prototype.valueOf = function() {
                    return parseInt(this.toString(), 10);
                };
                BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;

                SmallInteger.prototype.valueOf = function() {
                    return this.value;
                };
                SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;
                NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function() {
                    return parseInt(this.toString(), 10);
                }

                function parseStringValue(v) {
                    if (isPrecise(+v)) {
                        var x = +v;
                        if (x === truncate(x))
                            return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);
                        throw new Error("Invalid integer: " + v);
                    }
                    var sign = v[0] === "-";
                    if (sign)
                        v = v.slice(1);
                    var split = v.split(/e/i);
                    if (split.length > 2)
                        throw new Error("Invalid integer: " + split.join("e"));
                    if (split.length === 2) {
                        var exp = split[1];
                        if (exp[0] === "+")
                            exp = exp.slice(1);
                        exp = +exp;
                        if (exp !== truncate(exp) || !isPrecise(exp))
                            throw new Error("Invalid integer: " + exp + " is not a valid exponent.");
                        var text = split[0];
                        var decimalPlace = text.indexOf(".");
                        if (decimalPlace >= 0) {
                            exp -= text.length - decimalPlace - 1;
                            text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);
                        }
                        if (exp < 0)
                            throw new Error("Cannot include negative exponent part for integers");
                        text += (new Array(exp + 1)).join("0");
                        v = text;
                    }
                    var isValid = /^([0-9][0-9]*)$/.test(v);
                    if (!isValid)
                        throw new Error("Invalid integer: " + v);
                    if (supportsNativeBigInt) {
                        return new NativeBigInt(BigInt(sign ? "-" + v : v));
                    }
                    var r = [],
                        max = v.length,
                        l = LOG_BASE,
                        min = max - l;
                    while (max > 0) {
                        r.push(+v.slice(min, max));
                        min -= l;
                        if (min < 0)
                            min = 0;
                        max -= l;
                    }
                    trim(r);
                    return new BigInteger(r, sign);
                }

                function parseNumberValue(v) {
                    if (supportsNativeBigInt) {
                        return new NativeBigInt(BigInt(v));
                    }
                    if (isPrecise(v)) {
                        if (v !== truncate(v))
                            throw new Error(v + " is not an integer.");
                        return new SmallInteger(v);
                    }
                    return parseStringValue(v.toString());
                }

                function parseValue(v) {
                    if (typeof v === "number") {
                        return parseNumberValue(v);
                    }
                    if (typeof v === "string") {
                        return parseStringValue(v);
                    }
                    if (typeof v === "bigint") {
                        return new NativeBigInt(v);
                    }
                    return v;
                }
                // Pre-define numbers in range [-999,999]
                for (var i = 0; i < 1000; i++) {
                    Integer[i] = parseValue(i);
                    if (i > 0)
                        Integer[-i] = parseValue(-i);
                }
                // Backwards compatibility
                Integer.one = Integer[1];
                Integer.zero = Integer[0];
                Integer.minusOne = Integer[-1];
                Integer.max = max;
                Integer.min = min;
                Integer.gcd = gcd;
                Integer.lcm = lcm;
                Integer.isInstance = function(x) {
                    return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt;
                };
                Integer.randBetween = randBetween;

                Integer.fromArray = function(digits, base, isNegative) {
                    return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);
                };

                return Integer;
            })();

            // Node.js check
            if (typeof module !== "undefined" && module.hasOwnProperty("exports")) {
                module.exports = bigInt;
            }

            //amd check
            if (typeof define === "function" && define.amd) {
                define(function() {
                    return bigInt;
                });
            }

        }, {}],
        368: [function(require, module, exports) {
            (function(Buffer) {
                (function() {
                    /*!
                     * The buffer module from node.js, for the browser.
                     *
                     * @author   Feross Aboukhadijeh <https://feross.org>
                     * @license  MIT
                     */
                    /* eslint-disable no-proto */

                    'use strict'

                    var base64 = require('base64-js')
                    var ieee754 = require('ieee754')

                    exports.Buffer = Buffer
                    exports.SlowBuffer = SlowBuffer
                    exports.INSPECT_MAX_BYTES = 50

                    var K_MAX_LENGTH = 0x7fffffff
                    exports.kMaxLength = K_MAX_LENGTH
                    /**
                     * If `Buffer.TYPED_ARRAY_SUPPORT`:
                     *   === true    Use Uint8Array implementation (fastest)
                     *   === false   Print warning and recommend using `buffer` v4.x which has an Object
                     *               implementation (most compatible, even IE6)
                     *
                     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
                     * Opera 11.6+, iOS 4.2+.
                     *
                     * We report that the browser does not support typed arrays if the are not subclassable
                     * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
                     * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
                     * for __proto__ and has a buggy typed array implementation.
                     */
                    Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

                    if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
                    typeof console.error === 'function') {
                        console.error(
                        'This browser lacks typed array (Uint8Array) support which is required by ' +
                        '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
                        )
                    }

                    function typedArraySupport() {
                        // Can typed array instances can be augmented?
                        try {
                            var arr = new Uint8Array(1)
                            arr.__proto__ = {
                                __proto__: Uint8Array.prototype,
                                foo: function() {
                                    return 42
                                }
                            }
                            return arr.foo() === 42
                        } catch (e) {
                            return false
                        }
                    }

                    Object.defineProperty(Buffer.prototype, 'parent', {
                        enumerable: true,
                        get: function() {
                            if (!Buffer.isBuffer(this))
                                return undefined
                            return this.buffer
                        }
                    })

                    Object.defineProperty(Buffer.prototype, 'offset', {
                        enumerable: true,
                        get: function() {
                            if (!Buffer.isBuffer(this))
                                return undefined
                            return this.byteOffset
                        }
                    })

                    function createBuffer(length) {
                        if (length > K_MAX_LENGTH) {
                            throw new RangeError('The value "' + length + '" is invalid for option "size"')
                        }
                        // Return an augmented `Uint8Array` instance
                        var buf = new Uint8Array(length)
                        buf.__proto__ = Buffer.prototype
                        return buf
                    }

                    /**
                     * The Buffer constructor returns instances of `Uint8Array` that have their
                     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
                     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
                     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
                     * returns a single octet.
                     *
                     * The `Uint8Array` prototype remains unmodified.
                     */

                    function Buffer(arg, encodingOrOffset, length) {
                        // Common case.
                        if (typeof arg === 'number') {
                            if (typeof encodingOrOffset === 'string') {
                                throw new TypeError(
                                'The "string" argument must be of type string. Received type number'
                                )
                            }
                            return allocUnsafe(arg)
                        }
                        return from(arg, encodingOrOffset, length)
                    }

                    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
                    if (typeof Symbol !== 'undefined' && Symbol.species != null &&
                    Buffer[Symbol.species] === Buffer) {
                        Object.defineProperty(Buffer, Symbol.species, {
                            value: null,
                            configurable: true,
                            enumerable: false,
                            writable: false
                        })
                    }

                    Buffer.poolSize = 8192 // not used by this implementation

                    function from(value, encodingOrOffset, length) {
                        if (typeof value === 'string') {
                            return fromString(value, encodingOrOffset)
                        }

                        if (ArrayBuffer.isView(value)) {
                            return fromArrayLike(value)
                        }

                        if (value == null) {
                            throw TypeError(
                            'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
                            'or Array-like Object. Received type ' + (typeof value)
                            )
                        }

                        if (isInstance(value, ArrayBuffer) ||
                        (value && isInstance(value.buffer, ArrayBuffer))) {
                            return fromArrayBuffer(value, encodingOrOffset, length)
                        }

                        if (typeof value === 'number') {
                            throw new TypeError(
                            'The "value" argument must not be of type number. Received type number'
                            )
                        }

                        var valueOf = value.valueOf && value.valueOf()
                        if (valueOf != null && valueOf !== value) {
                            return Buffer.from(valueOf, encodingOrOffset, length)
                        }

                        var b = fromObject(value)
                        if (b)
                            return b

                        if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
                        typeof value[Symbol.toPrimitive] === 'function') {
                            return Buffer.from(
                            value[Symbol.toPrimitive]('string'), encodingOrOffset, length
                            )
                        }

                        throw new TypeError(
                        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
                        'or Array-like Object. Received type ' + (typeof value)
                        )
                    }

                    /**
                     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
                     * if value is a number.
                     * Buffer.from(str[, encoding])
                     * Buffer.from(array)
                     * Buffer.from(buffer)
                     * Buffer.from(arrayBuffer[, byteOffset[, length]])
                     **/
                    Buffer.from = function(value, encodingOrOffset, length) {
                        return from(value, encodingOrOffset, length)
                    }
                    // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
                    // https://github.com/feross/buffer/pull/148
                    Buffer.prototype.__proto__ = Uint8Array.prototype
                    Buffer.__proto__ = Uint8Array

                    function assertSize(size) {
                        if (typeof size !== 'number') {
                            throw new TypeError('"size" argument must be of type number')
                        } else if (size < 0) {
                            throw new RangeError('The value "' + size + '" is invalid for option "size"')
                        }
                    }

                    function alloc(size, fill, encoding) {
                        assertSize(size)
                        if (size <= 0) {
                            return createBuffer(size)
                        }
                        if (fill !== undefined) {
                            // Only pay attention to encoding if it's a string. This
                            // prevents accidentally sending in a number that would
                            // be interpretted as a start offset.
                            return typeof encoding === 'string'
                            ? createBuffer(size).fill(fill, encoding)
                            : createBuffer(size).fill(fill)
                        }
                        return createBuffer(size)
                    }

                    /**
                     * Creates a new filled Buffer instance.
                     * alloc(size[, fill[, encoding]])
                     **/
                    Buffer.alloc = function(size, fill, encoding) {
                        return alloc(size, fill, encoding)
                    }

                    function allocUnsafe(size) {
                        assertSize(size)
                        return createBuffer(size < 0 ? 0 : checked(size) | 0)
                    }

                    /**
                     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
                     * */
                    Buffer.allocUnsafe = function(size) {
                        return allocUnsafe(size)
                    }/**
                     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
                     */
                    Buffer.allocUnsafeSlow = function(size) {
                        return allocUnsafe(size)
                    }

                    function fromString(string, encoding) {
                        if (typeof encoding !== 'string' || encoding === '') {
                            encoding = 'utf8'
                        }

                        if (!Buffer.isEncoding(encoding)) {
                            throw new TypeError('Unknown encoding: ' + encoding)
                        }

                        var length = byteLength(string, encoding) | 0
                        var buf = createBuffer(length)

                        var actual = buf.write(string, encoding)

                        if (actual !== length) {
                            // Writing a hex string, for example, that contains invalid characters will
                            // cause everything after the first invalid character to be ignored. (e.g.
                            // 'abxxcd' will be treated as 'ab')
                            buf = buf.slice(0, actual)
                        }

                        return buf
                    }

                    function fromArrayLike(array) {
                        var length = array.length < 0 ? 0 : checked(array.length) | 0
                        var buf = createBuffer(length)
                        for (var i = 0; i < length; i += 1) {
                            buf[i] = array[i] & 255
                        }
                        return buf
                    }

                    function fromArrayBuffer(array, byteOffset, length) {
                        if (byteOffset < 0 || array.byteLength < byteOffset) {
                            throw new RangeError('"offset" is outside of buffer bounds')
                        }

                        if (array.byteLength < byteOffset + (length || 0)) {
                            throw new RangeError('"length" is outside of buffer bounds')
                        }

                        var buf
                        if (byteOffset === undefined && length === undefined) {
                            buf = new Uint8Array(array)
                        } else if (length === undefined) {
                            buf = new Uint8Array(array, byteOffset)
                        } else {
                            buf = new Uint8Array(array, byteOffset, length)
                        }

                        // Return an augmented `Uint8Array` instance
                        buf.__proto__ = Buffer.prototype
                        return buf
                    }

                    function fromObject(obj) {
                        if (Buffer.isBuffer(obj)) {
                            var len = checked(obj.length) | 0
                            var buf = createBuffer(len)

                            if (buf.length === 0) {
                                return buf
                            }

                            obj.copy(buf, 0, 0, len)
                            return buf
                        }

                        if (obj.length !== undefined) {
                            if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                                return createBuffer(0)
                            }
                            return fromArrayLike(obj)
                        }

                        if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                            return fromArrayLike(obj.data)
                        }
                    }

                    function checked(length) {
                        // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
                        // length is NaN (which is otherwise coerced to zero.)
                        if (length >= K_MAX_LENGTH) {
                            throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                            'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
                        }
                        return length | 0
                    }

                    function SlowBuffer(length) {
                        if (+length != length) {
                            // eslint-disable-line eqeqeq
                            length = 0
                        }
                        return Buffer.alloc(+length)
                    }

                    Buffer.isBuffer = function isBuffer(b) {
                        return b != null && b._isBuffer === true &&
                            b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
                    }

                    Buffer.compare = function compare(a, b) {
                        if (isInstance(a, Uint8Array))
                            a = Buffer.from(a, a.offset, a.byteLength)
                        if (isInstance(b, Uint8Array))
                            b = Buffer.from(b, b.offset, b.byteLength)
                        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                            throw new TypeError(
                            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
                            )
                        }

                        if (a === b)
                            return 0

                        var x = a.length
                        var y = b.length

                        for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                            if (a[i] !== b[i]) {
                                x = a[i]
                                y = b[i]
                                break
                            }
                        }

                        if (x < y)
                            return -1
                        if (y < x)
                            return 1
                        return 0
                    }

                    Buffer.isEncoding = function isEncoding(encoding) {
                        switch (String(encoding).toLowerCase()) {
                        case 'hex':
                        case 'utf8':
                        case 'utf-8':
                        case 'ascii':
                        case 'latin1':
                        case 'binary':
                        case 'base64':
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return true
                        default:
                            return false
                        }
                    }

                    Buffer.concat = function concat(list, length) {
                        if (!Array.isArray(list)) {
                            throw new TypeError('"list" argument must be an Array of Buffers')
                        }

                        if (list.length === 0) {
                            return Buffer.alloc(0)
                        }

                        var i
                        if (length === undefined) {
                            length = 0
                            for (i = 0; i < list.length; ++i) {
                                length += list[i].length
                            }
                        }

                        var buffer = Buffer.allocUnsafe(length)
                        var pos = 0
                        for (i = 0; i < list.length; ++i) {
                            var buf = list[i]
                            if (isInstance(buf, Uint8Array)) {
                                buf = Buffer.from(buf)
                            }
                            if (!Buffer.isBuffer(buf)) {
                                throw new TypeError('"list" argument must be an Array of Buffers')
                            }
                            buf.copy(buffer, pos)
                            pos += buf.length
                        }
                        return buffer
                    }

                    function byteLength(string, encoding) {
                        if (Buffer.isBuffer(string)) {
                            return string.length
                        }
                        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                            return string.byteLength
                        }
                        if (typeof string !== 'string') {
                            throw new TypeError(
                            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
                            'Received type ' + typeof string
                            )
                        }

                        var len = string.length
                        var mustMatch = (arguments.length > 2 && arguments[2] === true)
                        if (!mustMatch && len === 0)
                            return 0
                        // Use a for loop to avoid recursion
                        var loweredCase = false
                        for (;;) {
                            switch (encoding) {
                            case 'ascii':
                            case 'latin1':
                            case 'binary':
                                return len
                            case 'utf8':
                            case 'utf-8':
                                return utf8ToBytes(string).length
                            case 'ucs2':
                            case 'ucs-2':
                            case 'utf16le':
                            case 'utf-16le':
                                return len * 2
                            case 'hex':
                                return len >>> 1
                            case 'base64':
                                return base64ToBytes(string).length
                            default:
                                if (loweredCase) {
                                    return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
                                }
                                encoding = ('' + encoding).toLowerCase()
                                loweredCase = true
                            }
                        }
                    }
                    Buffer.byteLength = byteLength

                    function slowToString(encoding, start, end) {
                        var loweredCase = false
                        // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
                        // property of a typed array.

                        // This behaves neither like String nor Uint8Array in that we set start/end
                        // to their upper/lower bounds if the value passed is out of range.
                        // undefined is handled specially as per ECMA-262 6th Edition,
                        // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
                        if (start === undefined || start < 0) {
                            start = 0
                        }
                        // Return early if start > this.length. Done here to prevent potential uint32
                        // coercion fail below.
                        if (start > this.length) {
                            return ''
                        }

                        if (end === undefined || end > this.length) {
                            end = this.length
                        }

                        if (end <= 0) {
                            return ''
                        }

                        // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
                        end >>>= 0
                        start >>>= 0

                        if (end <= start) {
                            return ''
                        }

                        if (!encoding)
                            encoding = 'utf8'

                        while (true) {
                            switch (encoding) {
                            case 'hex':
                                return hexSlice(this, start, end)

                            case 'utf8':
                            case 'utf-8':
                                return utf8Slice(this, start, end)

                            case 'ascii':
                                return asciiSlice(this, start, end)

                            case 'latin1':
                            case 'binary':
                                return latin1Slice(this, start, end)

                            case 'base64':
                                return base64Slice(this, start, end)

                            case 'ucs2':
                            case 'ucs-2':
                            case 'utf16le':
                            case 'utf-16le':
                                return utf16leSlice(this, start, end)

                            default:
                                if (loweredCase)
                                    throw new TypeError('Unknown encoding: ' + encoding)
                                encoding = (encoding + '').toLowerCase()
                                loweredCase = true
                            }
                        }
                    }

                    // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
                    // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
                    // reliably in a browserify context because there could be multiple different
                    // copies of the 'buffer' package in use. This method works even for Buffer
                    // instances that were created from another copy of the `buffer` package.
                    // See: https://github.com/feross/buffer/issues/154
                    Buffer.prototype._isBuffer = true

                    function swap(b, n, m) {
                        var i = b[n]
                        b[n] = b[m]
                        b[m] = i
                    }

                    Buffer.prototype.swap16 = function swap16() {
                        var len = this.length
                        if (len % 2 !== 0) {
                            throw new RangeError('Buffer size must be a multiple of 16-bits')
                        }
                        for (var i = 0; i < len; i += 2) {
                            swap(this, i, i + 1)
                        }
                        return this
                    }

                    Buffer.prototype.swap32 = function swap32() {
                        var len = this.length
                        if (len % 4 !== 0) {
                            throw new RangeError('Buffer size must be a multiple of 32-bits')
                        }
                        for (var i = 0; i < len; i += 4) {
                            swap(this, i, i + 3)
                            swap(this, i + 1, i + 2)
                        }
                        return this
                    }

                    Buffer.prototype.swap64 = function swap64() {
                        var len = this.length
                        if (len % 8 !== 0) {
                            throw new RangeError('Buffer size must be a multiple of 64-bits')
                        }
                        for (var i = 0; i < len; i += 8) {
                            swap(this, i, i + 7)
                            swap(this, i + 1, i + 6)
                            swap(this, i + 2, i + 5)
                            swap(this, i + 3, i + 4)
                        }
                        return this
                    }

                    Buffer.prototype.toString = function toString() {
                        var length = this.length
                        if (length === 0)
                            return ''
                        if (arguments.length === 0)
                            return utf8Slice(this, 0, length)
                        return slowToString.apply(this, arguments)
                    }

                    Buffer.prototype.toLocaleString = Buffer.prototype.toString

                    Buffer.prototype.equals = function equals(b) {
                        if (!Buffer.isBuffer(b))
                            throw new TypeError('Argument must be a Buffer')
                        if (this === b)
                            return true
                        return Buffer.compare(this, b) === 0
                    }

                    Buffer.prototype.inspect = function inspect() {
                        var str = ''
                        var max = exports.INSPECT_MAX_BYTES
                        str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
                        if (this.length > max)
                            str += ' ... '
                        return '<Buffer ' + str + '>'
                    }

                    Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
                        if (isInstance(target, Uint8Array)) {
                            target = Buffer.from(target, target.offset, target.byteLength)
                        }
                        if (!Buffer.isBuffer(target)) {
                            throw new TypeError(
                            'The "target" argument must be one of type Buffer or Uint8Array. ' +
                            'Received type ' + (typeof target)
                            )
                        }

                        if (start === undefined) {
                            start = 0
                        }
                        if (end === undefined) {
                            end = target ? target.length : 0
                        }
                        if (thisStart === undefined) {
                            thisStart = 0
                        }
                        if (thisEnd === undefined) {
                            thisEnd = this.length
                        }

                        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                            throw new RangeError('out of range index')
                        }

                        if (thisStart >= thisEnd && start >= end) {
                            return 0
                        }
                        if (thisStart >= thisEnd) {
                            return -1
                        }
                        if (start >= end) {
                            return 1
                        }

                        start >>>= 0
                        end >>>= 0
                        thisStart >>>= 0
                        thisEnd >>>= 0

                        if (this === target)
                            return 0

                        var x = thisEnd - thisStart
                        var y = end - start
                        var len = Math.min(x, y)

                        var thisCopy = this.slice(thisStart, thisEnd)
                        var targetCopy = target.slice(start, end)

                        for (var i = 0; i < len; ++i) {
                            if (thisCopy[i] !== targetCopy[i]) {
                                x = thisCopy[i]
                                y = targetCopy[i]
                                break
                            }
                        }

                        if (x < y)
                            return -1
                        if (y < x)
                            return 1
                        return 0
                    }
                    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
                    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
                    //
                    // Arguments:
                    // - buffer - a Buffer to search
                    // - val - a string, Buffer, or number
                    // - byteOffset - an index into `buffer`; will be clamped to an int32
                    // - encoding - an optional encoding, relevant is val is a string
                    // - dir - true for indexOf, false for lastIndexOf
                    function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                        // Empty buffer means no match
                        if (buffer.length === 0)
                            return -1
                        // Normalize byteOffset
                        if (typeof byteOffset === 'string') {
                            encoding = byteOffset
                            byteOffset = 0
                        } else if (byteOffset > 0x7fffffff) {
                            byteOffset = 0x7fffffff
                        } else if (byteOffset < -0x80000000) {
                            byteOffset = -0x80000000
                        }
                        byteOffset = +byteOffset // Coerce to Number.
                        if (numberIsNaN(byteOffset)) {
                            // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                            byteOffset = dir ? 0 : (buffer.length - 1)
                        }

                        // Normalize byteOffset: negative offsets start from the end of the buffer
                        if (byteOffset < 0)
                            byteOffset = buffer.length + byteOffset
                        if (byteOffset >= buffer.length) {
                            if (dir)
                                return -1
                            else
                                byteOffset = buffer.length - 1
                        } else if (byteOffset < 0) {
                            if (dir)
                                byteOffset = 0
                            else
                                return -1
                        }

                        // Normalize val
                        if (typeof val === 'string') {
                            val = Buffer.from(val, encoding)
                        }

                        // Finally, search either indexOf (if dir is true) or lastIndexOf
                        if (Buffer.isBuffer(val)) {
                            // Special case: looking for empty string/buffer always fails
                            if (val.length === 0) {
                                return -1
                            }
                            return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
                        } else if (typeof val === 'number') {
                            val = val & 0xFF // Search for a byte value [0-255]
                            if (typeof Uint8Array.prototype.indexOf === 'function') {
                                if (dir) {
                                    return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
                                } else {
                                    return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
                                }
                            }
                            return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
                        }

                        throw new TypeError('val must be string, number or Buffer')
                    }

                    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                        var indexSize = 1
                        var arrLength = arr.length
                        var valLength = val.length

                        if (encoding !== undefined) {
                            encoding = String(encoding).toLowerCase()
                            if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                            encoding === 'utf16le' || encoding === 'utf-16le') {
                                if (arr.length < 2 || val.length < 2) {
                                    return -1
                                }
                                indexSize = 2
                                arrLength /= 2
                                valLength /= 2
                                byteOffset /= 2
                            }
                        }

                        function read(buf, i) {
                            if (indexSize === 1) {
                                return buf[i]
                            } else {
                                return buf.readUInt16BE(i * indexSize)
                            }
                        }

                        var i
                        if (dir) {
                            var foundIndex = -1
                            for (i = byteOffset; i < arrLength; i++) {
                                if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                                    if (foundIndex === -1)
                                        foundIndex = i
                                    if (i - foundIndex + 1 === valLength)
                                        return foundIndex * indexSize
                                } else {
                                    if (foundIndex !== -1)
                                        i -= i - foundIndex
                                    foundIndex = -1
                                }
                            }
                        } else {
                            if (byteOffset + valLength > arrLength)
                                byteOffset = arrLength - valLength
                            for (i = byteOffset; i >= 0; i--) {
                                var found = true
                                for (var j = 0; j < valLength; j++) {
                                    if (read(arr, i + j) !== read(val, j)) {
                                        found = false
                                        break
                                    }
                                }
                                if (found)
                                    return i
                            }
                        }

                        return -1
                    }

                    Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
                        return this.indexOf(val, byteOffset, encoding) !== -1
                    }

                    Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
                        return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
                    }

                    Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
                        return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
                    }

                    function hexWrite(buf, string, offset, length) {
                        offset = Number(offset) || 0
                        var remaining = buf.length - offset
                        if (!length) {
                            length = remaining
                        } else {
                            length = Number(length)
                            if (length > remaining) {
                                length = remaining
                            }
                        }

                        var strLen = string.length

                        if (length > strLen / 2) {
                            length = strLen / 2
                        }
                        for (var i = 0; i < length; ++i) {
                            var parsed = parseInt(string.substr(i * 2, 2), 16)
                            if (numberIsNaN(parsed))
                                return i
                            buf[offset + i] = parsed
                        }
                        return i
                    }

                    function utf8Write(buf, string, offset, length) {
                        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
                    }

                    function asciiWrite(buf, string, offset, length) {
                        return blitBuffer(asciiToBytes(string), buf, offset, length)
                    }

                    function latin1Write(buf, string, offset, length) {
                        return asciiWrite(buf, string, offset, length)
                    }

                    function base64Write(buf, string, offset, length) {
                        return blitBuffer(base64ToBytes(string), buf, offset, length)
                    }

                    function ucs2Write(buf, string, offset, length) {
                        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
                    }

                    Buffer.prototype.write = function write(string, offset, length, encoding) {
                        // Buffer#write(string)
                        if (offset === undefined) {
                            encoding = 'utf8'
                            length = this.length
                            offset = 0

                        } else // Buffer#write(string, encoding)
                        if (length === undefined && typeof offset === 'string') {
                            encoding = offset
                            length = this.length
                            offset = 0

                        } else // Buffer#write(string, offset[, length][, encoding])
                        if (isFinite(offset)) {
                            offset = offset >>> 0
                            if (isFinite(length)) {
                                length = length >>> 0
                                if (encoding === undefined)
                                    encoding = 'utf8'
                            } else {
                                encoding = length
                                length = undefined
                            }
                        } else {
                            throw new Error(
                            'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                            )
                        }

                        var remaining = this.length - offset
                        if (length === undefined || length > remaining)
                            length = remaining

                        if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
                            throw new RangeError('Attempt to write outside buffer bounds')
                        }

                        if (!encoding)
                            encoding = 'utf8'

                        var loweredCase = false
                        for (;;) {
                            switch (encoding) {
                            case 'hex':
                                return hexWrite(this, string, offset, length)

                            case 'utf8':
                            case 'utf-8':
                                return utf8Write(this, string, offset, length)

                            case 'ascii':
                                return asciiWrite(this, string, offset, length)

                            case 'latin1':
                            case 'binary':
                                return latin1Write(this, string, offset, length)

                            case 'base64':
                                // Warning: maxLength not taken into account in base64Write
                                return base64Write(this, string, offset, length)

                            case 'ucs2':
                            case 'ucs-2':
                            case 'utf16le':
                            case 'utf-16le':
                                return ucs2Write(this, string, offset, length)

                            default:
                                if (loweredCase)
                                    throw new TypeError('Unknown encoding: ' + encoding)
                                encoding = ('' + encoding).toLowerCase()
                                loweredCase = true
                            }
                        }
                    }

                    Buffer.prototype.toJSON = function toJSON() {
                        return {
                            type: 'Buffer',
                            data: Array.prototype.slice.call(this._arr || this, 0)
                        }
                    }

                    function base64Slice(buf, start, end) {
                        if (start === 0 && end === buf.length) {
                            return base64.fromByteArray(buf)
                        } else {
                            return base64.fromByteArray(buf.slice(start, end))
                        }
                    }

                    function utf8Slice(buf, start, end) {
                        end = Math.min(buf.length, end)
                        var res = []

                        var i = start
                        while (i < end) {
                            var firstByte = buf[i]
                            var codePoint = null
                            var bytesPerSequence = (firstByte > 0xEF) ? 4
                            : (firstByte > 0xDF) ? 3
                            : (firstByte > 0xBF) ? 2
                            : 1

                            if (i + bytesPerSequence <= end) {
                                var secondByte,
                                    thirdByte,
                                    fourthByte,
                                    tempCodePoint

                                switch (bytesPerSequence) {
                                case 1:
                                    if (firstByte < 0x80) {
                                        codePoint = firstByte
                                    }
                                    break
                                case 2:
                                    secondByte = buf[i + 1]
                                    if ((secondByte & 0xC0) === 0x80) {
                                        tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                                        if (tempCodePoint > 0x7F) {
                                            codePoint = tempCodePoint
                                        }
                                    }
                                    break
                                case 3:
                                    secondByte = buf[i + 1]
                                    thirdByte = buf[i + 2]
                                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                                            codePoint = tempCodePoint
                                        }
                                    }
                                    break
                                case 4:
                                    secondByte = buf[i + 1]
                                    thirdByte = buf[i + 2]
                                    fourthByte = buf[i + 3]
                                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                                            codePoint = tempCodePoint
                                        }
                                    }
                                }
                            }

                            if (codePoint === null) {
                                // we did not generate a valid codePoint so insert a
                                // replacement char (U+FFFD) and advance only 1 byte
                                codePoint = 0xFFFD
                                bytesPerSequence = 1
                            } else if (codePoint > 0xFFFF) {
                                // encode to utf16 (surrogate pair dance)
                                codePoint -= 0x10000
                                res.push(codePoint >>> 10 & 0x3FF | 0xD800)
                                codePoint = 0xDC00 | codePoint & 0x3FF
                            }

                            res.push(codePoint)
                            i += bytesPerSequence
                        }

                        return decodeCodePointsArray(res)
                    }

                    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
                    // the lowest limit is Chrome, with 0x10000 args.
                    // We go 1 magnitude less, for safety
                    var MAX_ARGUMENTS_LENGTH = 0x1000

                    function decodeCodePointsArray(codePoints) {
                        var len = codePoints.length
                        if (len <= MAX_ARGUMENTS_LENGTH) {
                            return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
                        }

                        // Decode in chunks to avoid "call stack size exceeded".
                        var res = ''
                        var i = 0
                        while (i < len) {
                            res += String.fromCharCode.apply(
                            String,
                            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                            )
                        }
                        return res
                    }

                    function asciiSlice(buf, start, end) {
                        var ret = ''
                        end = Math.min(buf.length, end)

                        for (var i = start; i < end; ++i) {
                            ret += String.fromCharCode(buf[i] & 0x7F)
                        }
                        return ret
                    }

                    function latin1Slice(buf, start, end) {
                        var ret = ''
                        end = Math.min(buf.length, end)

                        for (var i = start; i < end; ++i) {
                            ret += String.fromCharCode(buf[i])
                        }
                        return ret
                    }

                    function hexSlice(buf, start, end) {
                        var len = buf.length

                        if (!start || start < 0)
                            start = 0
                        if (!end || end < 0 || end > len)
                            end = len

                        var out = ''
                        for (var i = start; i < end; ++i) {
                            out += toHex(buf[i])
                        }
                        return out
                    }

                    function utf16leSlice(buf, start, end) {
                        var bytes = buf.slice(start, end)
                        var res = ''
                        for (var i = 0; i < bytes.length; i += 2) {
                            res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
                        }
                        return res
                    }

                    Buffer.prototype.slice = function slice(start, end) {
                        var len = this.length
                        start = ~~start
                        end = end === undefined ? len : ~~end

                        if (start < 0) {
                            start += len
                            if (start < 0)
                                start = 0
                        } else if (start > len) {
                            start = len
                        }

                        if (end < 0) {
                            end += len
                            if (end < 0)
                                end = 0
                        } else if (end > len) {
                            end = len
                        }

                        if (end < start)
                            end = start

                        var newBuf = this.subarray(start, end)// Return an augmented `Uint8Array` instance
                        newBuf.__proto__ = Buffer.prototype
                        return newBuf
                    }
                    /*
                     * Need to make sure that buffer isn't trying to write out of bounds.
                     */
                    function checkOffset(offset, ext, length) {
                        if ((offset % 1) !== 0 || offset < 0)
                            throw new RangeError('offset is not uint')
                        if (offset + ext > length)
                            throw new RangeError('Trying to access beyond buffer length')
                    }

                    Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
                        offset = offset >>> 0
                        byteLength = byteLength >>> 0
                        if (!noAssert)
                            checkOffset(offset, byteLength, this.length)

                        var val = this[offset]
                        var mul = 1
                        var i = 0
                        while (++i < byteLength && (mul *= 0x100)) {
                            val += this[offset + i] * mul
                        }

                        return val
                    }

                    Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
                        offset = offset >>> 0
                        byteLength = byteLength >>> 0
                        if (!noAssert) {
                            checkOffset(offset, byteLength, this.length)
                        }

                        var val = this[offset + --byteLength]
                        var mul = 1
                        while (byteLength > 0 && (mul *= 0x100)) {
                            val += this[offset + --byteLength] * mul
                        }

                        return val
                    }

                    Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                        offset = offset >>> 0
                        if (!noAssert)
                            checkOffset(offset, 1, this.length)
                        return this[offset]
                    }

                    Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                        offset = offset >>> 0
                        if (!noAssert)
                            checkOffset(offset, 2, this.length)
                        return this[offset] | (this[offset + 1] << 8)
                    }

                    Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                        offset = offset >>> 0
                        if (!noAssert)
                            checkOffset(offset, 2, this.length)
                        return (this[offset] << 8) | this[offset + 1]
                    }

                    Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                        offset = offset >>> 0
                        if (!noAssert)
                            checkOffset(offset, 4, this.length)

                        return ((this[offset]) |
                        (this[offset + 1] << 8) |
                        (this[offset + 2] << 16)) +
                        (this[offset + 3] * 0x1000000)
                    }

                    Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                        offset = offset >>> 0
                        if (!noAssert)
                            checkOffset(offset, 4, this.length)

                        return (this[offset] * 0x1000000) +
                        ((this[offset + 1] << 16) |
                        (this[offset + 2] << 8) |
                        this[offset + 3])
                    }

                    Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
                        offset = offset >>> 0
                        byteLength = byteLength >>> 0
                        if (!noAssert)
                            checkOffset(offset, byteLength, this.length)

                        var val = this[offset]
                        var mul = 1
                        var i = 0
                        while (++i < byteLength && (mul *= 0x100)) {
                            val += this[offset + i] * mul
                        }
                        mul *= 0x80

                        if (val >= mul)
                            val -= Math.pow(2, 8 * byteLength)

                        return val
                    }

                    Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
                        offset = offset >>> 0
                        byteLength = byteLength >>> 0
                        if (!noAssert)
                            checkOffset(offset, byteLength, this.length)

                        var i = byteLength
                        var mul = 1
                        var val = this[offset + --i]
                        while (i > 0 && (mul *= 0x100)) {
                            val += this[offset + --i] * mul
                        }
                        mul *= 0x80

                        if (val >= mul)
                            val -= Math.pow(2, 8 * byteLength)

                        return val
                    }

                    Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
                        offset = offset >>> 0
                        if (!noAssert)
                            checkOffset(offset, 1, this.length)
                        if (!(this[offset] & 0x80))
                            return ( this[offset])
                        return ( (0xff - this[offset] + 1) * -1)
                    }

                    Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                        offset = offset >>> 0
                        if (!noAssert)
                            checkOffset(offset, 2, this.length)
                        var val = this[offset] | (this[offset + 1] << 8)
                        return (val & 0x8000) ? val | 0xFFFF0000 : val
                    }

                    Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                        offset = offset >>> 0
                        if (!noAssert)
                            checkOffset(offset, 2, this.length)
                        var val = this[offset + 1] | (this[offset] << 8)
                        return (val & 0x8000) ? val | 0xFFFF0000 : val
                    }

                    Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                        offset = offset >>> 0
                        if (!noAssert)
                            checkOffset(offset, 4, this.length)

                        return (this[offset]) |
                        (this[offset + 1] << 8) |
                        (this[offset + 2] << 16) |
                        (this[offset + 3] << 24)
                    }

                    Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                        offset = offset >>> 0
                        if (!noAssert)
                            checkOffset(offset, 4, this.length)

                        return (this[offset] << 24) |
                        (this[offset + 1] << 16) |
                        (this[offset + 2] << 8) |
                        (this[offset + 3])
                    }

                    Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                        offset = offset >>> 0
                        if (!noAssert)
                            checkOffset(offset, 4, this.length)
                        return ieee754.read(this, offset, true, 23, 4)
                    }

                    Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                        offset = offset >>> 0
                        if (!noAssert)
                            checkOffset(offset, 4, this.length)
                        return ieee754.read(this, offset, false, 23, 4)
                    }

                    Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                        offset = offset >>> 0
                        if (!noAssert)
                            checkOffset(offset, 8, this.length)
                        return ieee754.read(this, offset, true, 52, 8)
                    }

                    Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                        offset = offset >>> 0
                        if (!noAssert)
                            checkOffset(offset, 8, this.length)
                        return ieee754.read(this, offset, false, 52, 8)
                    }

                    function checkInt(buf, value, offset, ext, max, min) {
                        if (!Buffer.isBuffer(buf))
                            throw new TypeError('"buffer" argument must be a Buffer instance')
                        if (value > max || value < min)
                            throw new RangeError('"value" argument is out of bounds')
                        if (offset + ext > buf.length)
                            throw new RangeError('Index out of range')
                    }

                    Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
                        value = +value
                        offset = offset >>> 0
                        byteLength = byteLength >>> 0
                        if (!noAssert) {
                            var maxBytes = Math.pow(2, 8 * byteLength) - 1
                            checkInt(this, value, offset, byteLength, maxBytes, 0)
                        }

                        var mul = 1
                        var i = 0
                        this[offset] = value & 0xFF
                        while (++i < byteLength && (mul *= 0x100)) {
                            this[offset + i] = (value / mul) & 0xFF
                        }

                        return offset + byteLength
                    }

                    Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
                        value = +value
                        offset = offset >>> 0
                        byteLength = byteLength >>> 0
                        if (!noAssert) {
                            var maxBytes = Math.pow(2, 8 * byteLength) - 1
                            checkInt(this, value, offset, byteLength, maxBytes, 0)
                        }

                        var i = byteLength - 1
                        var mul = 1
                        this[offset + i] = value & 0xFF
                        while (--i >= 0 && (mul *= 0x100)) {
                            this[offset + i] = (value / mul) & 0xFF
                        }

                        return offset + byteLength
                    }

                    Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                        value = +value
                        offset = offset >>> 0
                        if (!noAssert)
                            checkInt(this, value, offset, 1, 0xff, 0)
                        this[offset] = (value & 0xff)
                        return offset + 1
                    }

                    Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
                        value = +value
                        offset = offset >>> 0
                        if (!noAssert)
                            checkInt(this, value, offset, 2, 0xffff, 0)
                        this[offset] = (value & 0xff)
                        this[offset + 1] = (value >>> 8)
                        return offset + 2
                    }

                    Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
                        value = +value
                        offset = offset >>> 0
                        if (!noAssert)
                            checkInt(this, value, offset, 2, 0xffff, 0)
                        this[offset] = (value >>> 8)
                        this[offset + 1] = (value & 0xff)
                        return offset + 2
                    }

                    Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
                        value = +value
                        offset = offset >>> 0
                        if (!noAssert)
                            checkInt(this, value, offset, 4, 0xffffffff, 0)
                        this[offset + 3] = (value >>> 24)
                        this[offset + 2] = (value >>> 16)
                        this[offset + 1] = (value >>> 8)
                        this[offset] = (value & 0xff)
                        return offset + 4
                    }

                    Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
                        value = +value
                        offset = offset >>> 0
                        if (!noAssert)
                            checkInt(this, value, offset, 4, 0xffffffff, 0)
                        this[offset] = (value >>> 24)
                        this[offset + 1] = (value >>> 16)
                        this[offset + 2] = (value >>> 8)
                        this[offset + 3] = (value & 0xff)
                        return offset + 4
                    }

                    Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
                        value = +value
                        offset = offset >>> 0
                        if (!noAssert) {
                            var limit = Math.pow(2, (8 * byteLength) - 1)

                            checkInt(this, value, offset, byteLength, limit - 1, -limit)
                        }

                        var i = 0
                        var mul = 1
                        var sub = 0
                        this[offset] = value & 0xFF
                        while (++i < byteLength && (mul *= 0x100)) {
                            if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                                sub = 1
                            }
                            this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
                        }

                        return offset + byteLength
                    }

                    Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
                        value = +value
                        offset = offset >>> 0
                        if (!noAssert) {
                            var limit = Math.pow(2, (8 * byteLength) - 1)

                            checkInt(this, value, offset, byteLength, limit - 1, -limit)
                        }

                        var i = byteLength - 1
                        var mul = 1
                        var sub = 0
                        this[offset + i] = value & 0xFF
                        while (--i >= 0 && (mul *= 0x100)) {
                            if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                                sub = 1
                            }
                            this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
                        }

                        return offset + byteLength
                    }

                    Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                        value = +value
                        offset = offset >>> 0
                        if (!noAssert)
                            checkInt(this, value, offset, 1, 0x7f, -0x80)
                        if (value < 0)
                            value = 0xff + value + 1
                        this[offset] = (value & 0xff)
                        return offset + 1
                    }

                    Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
                        value = +value
                        offset = offset >>> 0
                        if (!noAssert)
                            checkInt(this, value, offset, 2, 0x7fff, -0x8000)
                        this[offset] = (value & 0xff)
                        this[offset + 1] = (value >>> 8)
                        return offset + 2
                    }

                    Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
                        value = +value
                        offset = offset >>> 0
                        if (!noAssert)
                            checkInt(this, value, offset, 2, 0x7fff, -0x8000)
                        this[offset] = (value >>> 8)
                        this[offset + 1] = (value & 0xff)
                        return offset + 2
                    }

                    Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
                        value = +value
                        offset = offset >>> 0
                        if (!noAssert)
                            checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
                        this[offset] = (value & 0xff)
                        this[offset + 1] = (value >>> 8)
                        this[offset + 2] = (value >>> 16)
                        this[offset + 3] = (value >>> 24)
                        return offset + 4
                    }

                    Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
                        value = +value
                        offset = offset >>> 0
                        if (!noAssert)
                            checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
                        if (value < 0)
                            value = 0xffffffff + value + 1
                        this[offset] = (value >>> 24)
                        this[offset + 1] = (value >>> 16)
                        this[offset + 2] = (value >>> 8)
                        this[offset + 3] = (value & 0xff)
                        return offset + 4
                    }

                    function checkIEEE754(buf, value, offset, ext, max, min) {
                        if (offset + ext > buf.length)
                            throw new RangeError('Index out of range')
                        if (offset < 0)
                            throw new RangeError('Index out of range')
                    }

                    function writeFloat(buf, value, offset, littleEndian, noAssert) {
                        value = +value
                        offset = offset >>> 0
                        if (!noAssert) {
                            checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
                        }
                        ieee754.write(buf, value, offset, littleEndian, 23, 4)
                        return offset + 4
                    }

                    Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
                        return writeFloat(this, value, offset, true, noAssert)
                    }

                    Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
                        return writeFloat(this, value, offset, false, noAssert)
                    }

                    function writeDouble(buf, value, offset, littleEndian, noAssert) {
                        value = +value
                        offset = offset >>> 0
                        if (!noAssert) {
                            checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
                        }
                        ieee754.write(buf, value, offset, littleEndian, 52, 8)
                        return offset + 8
                    }

                    Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
                        return writeDouble(this, value, offset, true, noAssert)
                    }

                    Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
                        return writeDouble(this, value, offset, false, noAssert)
                    }
                    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
                    Buffer.prototype.copy = function copy(target, targetStart, start, end) {
                        if (!Buffer.isBuffer(target))
                            throw new TypeError('argument should be a Buffer')
                        if (!start)
                            start = 0
                        if (!end && end !== 0)
                            end = this.length
                        if (targetStart >= target.length)
                            targetStart = target.length
                        if (!targetStart)
                            targetStart = 0
                        if (end > 0 && end < start)
                            end = start
                        // Copy 0 bytes; we're done
                        if (end === start)
                            return 0
                        if (target.length === 0 || this.length === 0)
                            return 0
                        // Fatal error conditions
                        if (targetStart < 0) {
                            throw new RangeError('targetStart out of bounds')
                        }
                        if (start < 0 || start >= this.length)
                            throw new RangeError('Index out of range')
                        if (end < 0)
                            throw new RangeError('sourceEnd out of bounds')
                        // Are we oob?
                        if (end > this.length)
                            end = this.length
                        if (target.length - targetStart < end - start) {
                            end = target.length - targetStart + start
                        }

                        var len = end - start

                        if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
                            // Use built-in when available, missing from IE11
                            this.copyWithin(targetStart, start, end)
                        } else if (this === target && start < targetStart && targetStart < end) {
                            // descending copy from end
                            for (var i = len - 1; i >= 0; --i) {
                                target[i + targetStart] = this[i + start]
                            }
                        } else {
                            Uint8Array.prototype.set.call(
                            target,
                            this.subarray(start, end),
                            targetStart
                            )
                        }

                        return len
                    }
                    // Usage:
                    //    buffer.fill(number[, offset[, end]])
                    //    buffer.fill(buffer[, offset[, end]])
                    //    buffer.fill(string[, offset[, end]][, encoding])
                    Buffer.prototype.fill = function fill(val, start, end, encoding) {
                        // Handle string cases:
                        if (typeof val === 'string') {
                            if (typeof start === 'string') {
                                encoding = start
                                start = 0
                                end = this.length
                            } else if (typeof end === 'string') {
                                encoding = end
                                end = this.length
                            }
                            if (encoding !== undefined && typeof encoding !== 'string') {
                                throw new TypeError('encoding must be a string')
                            }
                            if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                                throw new TypeError('Unknown encoding: ' + encoding)
                            }
                            if (val.length === 1) {
                                var code = val.charCodeAt(0)
                                if ((encoding === 'utf8' && code < 128) ||
                                encoding === 'latin1') {
                                    // Fast path: If `val` fits into a single byte, use that numeric value.
                                    val = code
                                }
                            }
                        } else if (typeof val === 'number') {
                            val = val & 255
                        }

                        // Invalid ranges are not set to a default, so can range check early.
                        if (start < 0 || this.length < start || this.length < end) {
                            throw new RangeError('Out of range index')
                        }

                        if (end <= start) {
                            return this
                        }

                        start = start >>> 0
                        end = end === undefined ? this.length : end >>> 0

                        if (!val)
                            val = 0

                        var i
                        if (typeof val === 'number') {
                            for (i = start; i < end; ++i) {
                                this[i] = val
                            }
                        } else {
                            var bytes = Buffer.isBuffer(val)
                            ? val
                            : Buffer.from(val, encoding)
                            var len = bytes.length
                            if (len === 0) {
                                throw new TypeError('The value "' + val +
                                '" is invalid for argument "value"')
                            }
                            for (i = 0; i < end - start; ++i) {
                                this[i + start] = bytes[i % len]
                            }
                        }

                        return this
                    }
                    // HELPER FUNCTIONS
                    // ================

                    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

                    function base64clean(str) {
                        // Node takes equal signs as end of the Base64 encoding
                        str = str.split('=')[0]// Node strips out invalid characters like \n and \t from the string, base64-js does not
                        str = str.trim().replace(INVALID_BASE64_RE, '')// Node converts strings with length < 2 to ''
                        if (str.length < 2)
                            return ''// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
                        while (str.length % 4 !== 0) {
                            str = str + '='
                        }
                        return str
                    }

                    function toHex(n) {
                        if (n < 16)
                            return '0' + n.toString(16)
                        return n.toString(16)
                    }

                    function utf8ToBytes(string, units) {
                        units = units || Infinity
                        var codePoint
                        var length = string.length
                        var leadSurrogate = null
                        var bytes = []

                        for (var i = 0; i < length; ++i) {
                            codePoint = string.charCodeAt(i)
                            // is surrogate component
                            if (codePoint > 0xD7FF && codePoint < 0xE000) {
                                // last char was a lead
                                if (!leadSurrogate) {
                                    // no lead yet
                                    if (codePoint > 0xDBFF) {
                                        // unexpected trail
                                        if ((units -= 3) > -1)
                                            bytes.push(0xEF, 0xBF, 0xBD)
                                        continue
                                    } else if (i + 1 === length) {
                                        // unpaired lead
                                        if ((units -= 3) > -1)
                                            bytes.push(0xEF, 0xBF, 0xBD)
                                        continue
                                    }

                                    // valid lead
                                    leadSurrogate = codePoint

                                    continue
                                }

                                // 2 leads in a row
                                if (codePoint < 0xDC00) {
                                    if ((units -= 3) > -1)
                                        bytes.push(0xEF, 0xBF, 0xBD)
                                    leadSurrogate = codePoint
                                    continue
                                }

                                // valid surrogate pair
                                codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
                            } else if (leadSurrogate) {
                                // valid bmp char, but last char was a lead
                                if ((units -= 3) > -1)
                                    bytes.push(0xEF, 0xBF, 0xBD)
                            }

                            leadSurrogate = null
                            // encode utf8
                            if (codePoint < 0x80) {
                                if ((units -= 1) < 0)
                                    break
                                bytes.push(codePoint)
                            } else if (codePoint < 0x800) {
                                if ((units -= 2) < 0)
                                    break
                                bytes.push(
                                codePoint >> 0x6 | 0xC0,
                                codePoint & 0x3F | 0x80
                                )
                            } else if (codePoint < 0x10000) {
                                if ((units -= 3) < 0)
                                    break
                                bytes.push(
                                codePoint >> 0xC | 0xE0,
                                codePoint >> 0x6 & 0x3F | 0x80,
                                codePoint & 0x3F | 0x80
                                )
                            } else if (codePoint < 0x110000) {
                                if ((units -= 4) < 0)
                                    break
                                bytes.push(
                                codePoint >> 0x12 | 0xF0,
                                codePoint >> 0xC & 0x3F | 0x80,
                                codePoint >> 0x6 & 0x3F | 0x80,
                                codePoint & 0x3F | 0x80
                                )
                            } else {
                                throw new Error('Invalid code point')
                            }
                        }

                        return bytes
                    }

                    function asciiToBytes(str) {
                        var byteArray = []
                        for (var i = 0; i < str.length; ++i) {
                            // Node's code seems to be doing this and not & 0x7F..
                            byteArray.push(str.charCodeAt(i) & 0xFF)
                        }
                        return byteArray
                    }

                    function utf16leToBytes(str, units) {
                        var c,
                            hi,
                            lo
                        var byteArray = []
                        for (var i = 0; i < str.length; ++i) {
                            if ((units -= 2) < 0)
                                break

                            c = str.charCodeAt(i)
                            hi = c >> 8
                            lo = c % 256
                            byteArray.push(lo)
                            byteArray.push(hi)
                        }

                        return byteArray
                    }

                    function base64ToBytes(str) {
                        return base64.toByteArray(base64clean(str))
                    }

                    function blitBuffer(src, dst, offset, length) {
                        for (var i = 0; i < length; ++i) {
                            if ((i + offset >= dst.length) || (i >= src.length))
                                break
                            dst[i + offset] = src[i]
                        }
                        return i
                    }

                    // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
                    // the `instanceof` check but they should be treated as of that type.
                    // See: https://github.com/feross/buffer/issues/166
                    function isInstance(obj, type) {
                        return obj instanceof type ||
                            (obj != null && obj.constructor != null && obj.constructor.name != null &&
                            obj.constructor.name === type.name)
                    }
                    function numberIsNaN(obj) {
                        // For IE11 support
                        return obj !== obj // eslint-disable-line no-self-compare
                    }

                }).call(this)
            }).call(this, require("buffer").Buffer)

        }, {
            "base64-js": 366,
            "buffer": 368,
            "ieee754": 370
        }],
        369: [function(require, module, exports) {
            // https://d3js.org/d3-format/ v1.4.5 Copyright 2020 Mike Bostock
            (function(global, factory) {
                typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
                typeof define === 'function' && define.amd ? define(['exports'], factory) :
                (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3 = global.d3 || {}));
            }(this, (function(exports) {
                'use strict';

                function formatDecimal(x) {
                    return Math.abs(x = Math.round(x)) >= 1e21
                    ? x.toLocaleString("en").replace(/,/g, "")
                    : x.toString(10);
                }

                // Computes the decimal coefficient and exponent of the specified number x with
                // significant digits p, where x is positive and p is in [1, 21] or undefined.
                // For example, formatDecimalParts(1.23) returns ["123", 0].
                function formatDecimalParts(x, p) {
                    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0)
                        return null; // NaN, ±Infinity
                    var i,
                        coefficient = x.slice(0, i);

                    // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
                    // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
                    return [
                    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
                    +x.slice(i + 1)
                    ];
                }

                function exponent(x) {
                    return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
                }

                function formatGroup(grouping, thousands) {
                    return function(value, width) {
                        var i = value.length,
                            t = [],
                            j = 0,
                            g = grouping[0],
                            length = 0;

                        while (i > 0 && g > 0) {
                            if (length + g + 1 > width)
                                g = Math.max(1, width - length);
                            t.push(value.substring(i -= g, i + g));
                            if ((length += g + 1) > width)
                                break;
                            g = grouping[j = (j + 1) % grouping.length];
                        }

                        return t.reverse().join(thousands);
                    };
                }

                function formatNumerals(numerals) {
                    return function(value) {
                        return value.replace(/[0-9]/g, function(i) {
                            return numerals[+i];
                        });
                    };
                }

                // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
                var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

                function formatSpecifier(specifier) {
                    if (!(match = re.exec(specifier)))
                        throw new Error("invalid format: " + specifier);
                    var match;
                    return new FormatSpecifier({
                        fill: match[1],
                        align: match[2],
                        sign: match[3],
                        symbol: match[4],
                        zero: match[5],
                        width: match[6],
                        comma: match[7],
                        precision: match[8] && match[8].slice(1),
                        trim: match[9],
                        type: match[10]
                    });
                }

                formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

                function FormatSpecifier(specifier) {
                    this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
                    this.align = specifier.align === undefined ? ">" : specifier.align + "";
                    this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
                    this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
                    this.zero = !!specifier.zero;
                    this.width = specifier.width === undefined ? undefined : +specifier.width;
                    this.comma = !!specifier.comma;
                    this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
                    this.trim = !!specifier.trim;
                    this.type = specifier.type === undefined ? "" : specifier.type + "";
                }

                FormatSpecifier.prototype.toString = function() {
                    return this.fill
                    + this.align
                    + this.sign
                    + this.symbol
                    + (this.zero ? "0" : "")
                    + (this.width === undefined ? "" : Math.max(1, this.width | 0))
                    + (this.comma ? "," : "")
                    + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
                    + (this.trim ? "~" : "")
                    + this.type;
                };

                // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
                function formatTrim(s) {
                    out:
                    for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
                        switch (s[i]) {
                        case ".":
                            i0 = i1 = i;
                            break;
                        case "0":
                            if (i0 === 0)
                                i0 = i;
                            i1 = i;
                            break;
                        default:
                            if (!+s[i])
                                break out;
                            if (i0 > 0)
                                i0 = 0;
                            break;
                        }
                    }
                    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
                }

                var prefixExponent;

                function formatPrefixAuto(x, p) {
                    var d = formatDecimalParts(x, p);
                    if (!d)
                        return x + "";
                    var coefficient = d[0],
                        exponent = d[1],
                        i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
                        n = coefficient.length;
                    return i === n ? coefficient
                    : i > n ? coefficient + new Array(i - n + 1).join("0")
                    : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
                    : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
                }

                function formatRounded(x, p) {
                    var d = formatDecimalParts(x, p);
                    if (!d)
                        return x + "";
                    var coefficient = d[0],
                        exponent = d[1];
                    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
                    : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
                    : coefficient + new Array(exponent - coefficient.length + 2).join("0");
                }

                var formatTypes = {
                    "%": function(x, p) {
                        return (x * 100).toFixed(p);
                    },
                    "b": function(x) {
                        return Math.round(x).toString(2);
                    },
                    "c": function(x) {
                        return x + "";
                    },
                    "d": formatDecimal,
                    "e": function(x, p) {
                        return x.toExponential(p);
                    },
                    "f": function(x, p) {
                        return x.toFixed(p);
                    },
                    "g": function(x, p) {
                        return x.toPrecision(p);
                    },
                    "o": function(x) {
                        return Math.round(x).toString(8);
                    },
                    "p": function(x, p) {
                        return formatRounded(x * 100, p);
                    },
                    "r": formatRounded,
                    "s": formatPrefixAuto,
                    "X": function(x) {
                        return Math.round(x).toString(16).toUpperCase();
                    },
                    "x": function(x) {
                        return Math.round(x).toString(16);
                    }
                };

                function identity(x) {
                    return x;
                }

                var map = Array.prototype.map,
                    prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];

                function formatLocale(locale) {
                    var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
                        currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
                        currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
                        decimal = locale.decimal === undefined ? "." : locale.decimal + "",
                        numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),
                        percent = locale.percent === undefined ? "%" : locale.percent + "",
                        minus = locale.minus === undefined ? "-" : locale.minus + "",
                        nan = locale.nan === undefined ? "NaN" : locale.nan + "";

                    function newFormat(specifier) {
                        specifier = formatSpecifier(specifier);

                        var fill = specifier.fill,
                            align = specifier.align,
                            sign = specifier.sign,
                            symbol = specifier.symbol,
                            zero = specifier.zero,
                            width = specifier.width,
                            comma = specifier.comma,
                            precision = specifier.precision,
                            trim = specifier.trim,
                            type = specifier.type;

                        // The "n" type is an alias for ",g".
                        if (type === "n")
                            comma = true,
                            type = "g";


                        else // The "" type, and any invalid type, is an alias for ".12~g".
                        if (!formatTypes[type])
                            precision === undefined && (precision = 12),
                            trim = true,
                            type = "g";

                        // If zero fill is specified, padding goes after sign and before digits.
                        if (zero || (fill === "0" && align === "="))
                            zero = true,
                            fill = "0",
                            align = "=";

                        // Compute the prefix and suffix.
                        // For SI-prefix, the suffix is lazily computed.
                        var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
                            suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

                        // What format function should we use?
                        // Is this an integer type?
                        // Can this type generate exponential notation?
                        var formatType = formatTypes[type],
                            maybeSuffix = /[defgprs%]/.test(type);

                        // Set the default precision if not specified,
                        // or clamp the specified precision to the supported range.
                        // For significant precision, it must be in [1, 21].
                        // For fixed precision, it must be in [0, 20].
                        precision = precision === undefined ? 6
                        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
                        : Math.max(0, Math.min(20, precision));

                        function format(value) {
                            var valuePrefix = prefix,
                                valueSuffix = suffix,
                                i,
                                n,
                                c;

                            if (type === "c") {
                                valueSuffix = formatType(value) + valueSuffix;
                                value = "";
                            } else {
                                value = +value;

                                // Determine the sign. -0 is not less than 0, but 1 / -0 is!
                                var valueNegative = value < 0 || 1 / value < 0;

                                // Perform the initial formatting.
                                value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

                                // Trim insignificant zeros.
                                if (trim)
                                    value = formatTrim(value);

                                // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
                                if (valueNegative && +value === 0 && sign !== "+")
                                    valueNegative = false;

                                // Compute the prefix and suffix.
                                valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
                                valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

                                // Break the formatted value into the integer “value” part that can be
                                // grouped, and fractional or exponential “suffix” part that is not.
                                if (maybeSuffix) {
                                    i = -1,
                                    n = value.length;
                                    while (++i < n) {
                                        if (c = value.charCodeAt(i), 48 > c || c > 57) {
                                            valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                                            value = value.slice(0, i);
                                            break;
                                        }
                                    }
                                }
                            }

                            // If the fill character is not "0", grouping is applied before padding.
                            if (comma && !zero)
                                value = group(value, Infinity);

                            // Compute the padding.
                            var length = valuePrefix.length + value.length + valueSuffix.length,
                                padding = length < width ? new Array(width - length + 1).join(fill) : "";

                            // If the fill character is "0", grouping is applied after padding.
                            if (comma && zero)
                                value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity),
                                padding = "";

                            // Reconstruct the final output based on the desired alignment.
                            switch (align) {
                            case "<":
                                value = valuePrefix + value + valueSuffix + padding;
                                break;
                            case "=":
                                value = valuePrefix + padding + value + valueSuffix;
                                break;
                            case "^":
                                value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
                                break;
                            default:
                                value = padding + valuePrefix + value + valueSuffix;
                                break;
                            }

                            return numerals(value);
                        }

                        format.toString = function() {
                            return specifier + "";
                        };

                        return format;
                    }

                    function formatPrefix(specifier, value) {
                        var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
                            e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
                            k = Math.pow(10, -e),
                            prefix = prefixes[8 + e / 3];
                        return function(value) {
                            return f(k * value) + prefix;
                        };
                    }

                    return {
                        format: newFormat,
                        formatPrefix: formatPrefix
                    };
                }

                var locale;

                defaultLocale({
                    decimal: ".",
                    thousands: ",",
                    grouping: [3],
                    currency: ["$", ""],
                    minus: "-"
                });

                function defaultLocale(definition) {
                    locale = formatLocale(definition);
                    exports.format = locale.format;
                    exports.formatPrefix = locale.formatPrefix;
                    return locale;
                }

                function precisionFixed(step) {
                    return Math.max(0, -exponent(Math.abs(step)));
                }

                function precisionPrefix(step, value) {
                    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
                }

                function precisionRound(step, max) {
                    step = Math.abs(step),
                    max = Math.abs(max) - step;
                    return Math.max(0, exponent(max) - exponent(step)) + 1;
                }

                exports.FormatSpecifier = FormatSpecifier;
                exports.formatDefaultLocale = defaultLocale;
                exports.formatLocale = formatLocale;
                exports.formatSpecifier = formatSpecifier;
                exports.precisionFixed = precisionFixed;
                exports.precisionPrefix = precisionPrefix;
                exports.precisionRound = precisionRound;

                Object.defineProperty(exports, '__esModule', {
                    value: true
                });

            })));

        }, {}],
        370: [function(require, module, exports) {
            /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
            exports.read = function(buffer, offset, isLE, mLen, nBytes) {
                var e,
                    m
                var eLen = (nBytes * 8) - mLen - 1
                var eMax = (1 << eLen) - 1
                var eBias = eMax >> 1
                var nBits = -7
                var i = isLE ? (nBytes - 1) : 0
                var d = isLE ? -1 : 1
                var s = buffer[offset + i]

                i += d

                e = s & ((1 << (-nBits)) - 1)
                s >>= (-nBits)
                nBits += eLen
                for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

                m = e & ((1 << (-nBits)) - 1)
                e >>= (-nBits)
                nBits += mLen
                for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

                if (e === 0) {
                    e = 1 - eBias
                } else if (e === eMax) {
                    return m ? NaN : ((s ? -1 : 1) * Infinity)
                } else {
                    m = m + Math.pow(2, mLen)
                    e = e - eBias
                }
                return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
            }

            exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
                var e,
                    m,
                    c
                var eLen = (nBytes * 8) - mLen - 1
                var eMax = (1 << eLen) - 1
                var eBias = eMax >> 1
                var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
                var i = isLE ? 0 : (nBytes - 1)
                var d = isLE ? 1 : -1
                var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

                value = Math.abs(value)

                if (isNaN(value) || value === Infinity) {
                    m = isNaN(value) ? 1 : 0
                    e = eMax
                } else {
                    e = Math.floor(Math.log(value) / Math.LN2)
                    if (value * (c = Math.pow(2, -e)) < 1) {
                        e--
                        c *= 2
                    }
                    if (e + eBias >= 1) {
                        value += rt / c
                    } else {
                        value += rt * Math.pow(2, 1 - eBias)
                    }
                    if (value * c >= 2) {
                        e++
                        c /= 2
                    }

                    if (e + eBias >= eMax) {
                        m = 0
                        e = eMax
                    } else if (e + eBias >= 1) {
                        m = ((value * c) - 1) * Math.pow(2, mLen)
                        e = e + eBias
                    } else {
                        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
                        e = 0
                    }
                }

                for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

                e = (e << mLen) | m
                eLen += mLen
                for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

                buffer[offset + i - d] |= s * 128
            }

        }, {}],
        371: [function(require, module, exports) {
            if (typeof Object.create === 'function') {
                // implementation from standard node.js 'util' module
                module.exports = function inherits(ctor, superCtor) {
                    ctor.super_ = superCtor
                    ctor.prototype = Object.create(superCtor.prototype, {
                        constructor: {
                            value: ctor,
                            enumerable: false,
                            writable: true,
                            configurable: true
                        }
                    });
                };
            } else {
                // old school shim for old browsers
                module.exports = function inherits(ctor, superCtor) {
                    ctor.super_ = superCtor
                    var TempCtor = function() {}
                    TempCtor.prototype = superCtor.prototype
                    ctor.prototype = new TempCtor()
                    ctor.prototype.constructor = ctor
                }
            }

        }, {}],
        372: [function(require, module, exports) {
            module.exports = require('./lib/jspath');
        }, {
            "./lib/jspath": 373
        }],
        373: [function(require, module, exports) {
            'use strict';
            /**
            * JSPath
            *
            * Copyright (c) 2012 Filatov Dmitry (dfilatov@yandex-team.ru)
            * With parts by Marat Dulin (mdevils@gmail.com)
            * Dual licensed under the MIT and GPL licenses:
            * http://www.opensource.org/licenses/mit-license.php
            * http://www.gnu.org/licenses/gpl.html
            *
            * @version 0.4.0
            */

            (function() {

                var SYNTAX = {
                    PATH: 1,
                    SELECTOR: 2,
                    OBJ_PRED: 3,
                    POS_PRED: 4,
                    LOGICAL_EXPR: 5,
                    COMPARISON_EXPR: 6,
                    MATH_EXPR: 7,
                    CONCAT_EXPR: 8,
                    UNARY_EXPR: 9,
                    POS_EXPR: 10,
                    LITERAL: 11
                };

                // parser

                var parse = (function() {

                    var TOKEN = {
                            ID: 1,
                            NUM: 2,
                            STR: 3,
                            BOOL: 4,
                            NULL: 5,
                            PUNCT: 6,
                            EOP: 7
                        },
                        MESSAGES = {
                            UNEXP_TOKEN: 'Unexpected token "%0"',
                            UNEXP_EOP: 'Unexpected end of path'
                        };

                    var path,
                        idx,
                        buf,
                        len;

                    function parse(_path) {
                        path = _path.split('');
                        idx = 0;
                        buf = null;
                        len = path.length;

                        var res = parsePathConcatExpr(),
                            token = lex();

                        if (token.type !== TOKEN.EOP) {
                            throwUnexpected(token);
                        }

                        return res;
                    }

                    function parsePathConcatExpr() {
                        var expr = parsePathConcatPartExpr(),
                            operands;

                        while (match('|')) {
                            lex();
                            (operands || (operands = [expr])).push(parsePathConcatPartExpr());
                        }

                        return operands ?
                        {
                            type: SYNTAX.CONCAT_EXPR,
                            args: operands
                        } :
                        expr;
                    }

                    function parsePathConcatPartExpr() {
                        return match('(') ?
                        parsePathGroupExpr() :
                        parsePath();
                    }

                    function parsePathGroupExpr() {
                        expect('(');
                        var expr = parsePathConcatExpr();
                        expect(')');

                        var parts = [],
                            part;
                        while ((part = parsePredicate())) {
                            parts.push(part);
                        }

                        if (!parts.length) {
                            return expr;
                        }
                        else if (expr.type === SYNTAX.PATH) {
                            expr.parts = expr.parts.concat(parts);
                            return expr;
                        }

                        parts.unshift(expr);

                        return {
                            type: SYNTAX.PATH,
                            parts: parts
                        };
                    }

                    function parsePredicate() {
                        if (match('[')) {
                            return parsePosPredicate();
                        }

                        if (match('{')) {
                            return parseObjectPredicate();
                        }

                        if (match('(')) {
                            return parsePathGroupExpr();
                        }
                    }

                    function parsePath() {
                        if (!matchPath()) {
                            throwUnexpected(lex());
                        }

                        var fromRoot = false,
                            subst;

                        if (match('^')) {
                            lex();
                            fromRoot = true;
                        }
                        else if (matchSubst()) {
                            subst = lex().val.substr(1);
                        }

                        var parts = [],
                            part;
                        while ((part = parsePathPart())) {
                            parts.push(part);
                        }

                        return {
                            type: SYNTAX.PATH,
                            fromRoot: fromRoot,
                            subst: subst,
                            parts: parts
                        };
                    }

                    function parsePathPart() {
                        return matchSelector() ?
                        parseSelector() :
                        parsePredicate();
                    }

                    function parseSelector() {
                        var selector = lex().val,
                            token = lookahead(),
                            prop;

                        if (match('*') || token.type === TOKEN.ID || token.type === TOKEN.STR) {
                            prop = lex().val;
                        }

                        return {
                            type: SYNTAX.SELECTOR,
                            selector: selector,
                            prop: prop
                        };
                    }

                    function parsePosPredicate() {
                        expect('[');
                        var expr = parsePosExpr();
                        expect(']');

                        return {
                            type: SYNTAX.POS_PRED,
                            arg: expr
                        };
                    }

                    function parseObjectPredicate() {
                        expect('{');
                        var expr = parseLogicalORExpr();
                        expect('}');

                        return {
                            type: SYNTAX.OBJ_PRED,
                            arg: expr
                        };
                    }

                    function parseLogicalORExpr() {
                        var expr = parseLogicalANDExpr(),
                            operands;

                        while (match('||')) {
                            lex();
                            (operands || (operands = [expr])).push(parseLogicalANDExpr());
                        }

                        return operands ?
                        {
                            type: SYNTAX.LOGICAL_EXPR,
                            op: '||',
                            args: operands
                        } :
                        expr;
                    }

                    function parseLogicalANDExpr() {
                        var expr = parseEqualityExpr(),
                            operands;

                        while (match('&&')) {
                            lex();
                            (operands || (operands = [expr])).push(parseEqualityExpr());
                        }

                        return operands ?
                        {
                            type: SYNTAX.LOGICAL_EXPR,
                            op: '&&',
                            args: operands
                        } :
                        expr;
                    }

                    function parseEqualityExpr() {
                        var expr = parseRelationalExpr();

                        while (
                        match('==') || match('!=') || match('===') || match('!==') ||
                        match('^==') || match('==^') || match('^=') || match('=^') ||
                        match('$==') || match('==$') || match('$=') || match('=$') ||
                        match('*==') || match('==*') || match('*=') || match('=*')
                        ) {
                            expr = {
                                type: SYNTAX.COMPARISON_EXPR,
                                op: lex().val,
                                args: [expr, parseEqualityExpr()]
                            };
                        }

                        return expr;
                    }

                    function parseRelationalExpr() {
                        var expr = parseAdditiveExpr();

                        while (match('<') || match('>') || match('<=') || match('>=')) {
                            expr = {
                                type: SYNTAX.COMPARISON_EXPR,
                                op: lex().val,
                                args: [expr, parseRelationalExpr()]
                            };
                        }

                        return expr;
                    }

                    function parseAdditiveExpr() {
                        var expr = parseMultiplicativeExpr();

                        while (match('+') || match('-')) {
                            expr = {
                                type: SYNTAX.MATH_EXPR,
                                op: lex().val,
                                args: [expr, parseMultiplicativeExpr()]
                            };
                        }

                        return expr;
                    }

                    function parseMultiplicativeExpr() {
                        var expr = parseUnaryExpr();

                        while (match('*') || match('/') || match('%')) {
                            expr = {
                                type: SYNTAX.MATH_EXPR,
                                op: lex().val,
                                args: [expr, parseMultiplicativeExpr()]
                            };
                        }

                        return expr;
                    }

                    function parsePosExpr() {
                        if (match(':')) {
                            lex();
                            return {
                                type: SYNTAX.POS_EXPR,
                                toIdx: parseUnaryExpr()
                            };
                        }

                        var fromExpr = parseUnaryExpr();
                        if (match(':')) {
                            lex();
                            if (match(']')) {
                                return {
                                    type: SYNTAX.POS_EXPR,
                                    fromIdx: fromExpr
                                };
                            }

                            return {
                                type: SYNTAX.POS_EXPR,
                                fromIdx: fromExpr,
                                toIdx: parseUnaryExpr()
                            };
                        }

                        return {
                            type: SYNTAX.POS_EXPR,
                            idx: fromExpr
                        };
                    }

                    function parseUnaryExpr() {
                        if (match('!') || match('-')) {
                            return {
                                type: SYNTAX.UNARY_EXPR,
                                op: lex().val,
                                arg: parseUnaryExpr()
                            };
                        }

                        return parsePrimaryExpr();
                    }

                    function parsePrimaryExpr() {
                        var token = lookahead(),
                            type = token.type;

                        if (type === TOKEN.STR || type === TOKEN.NUM || type === TOKEN.BOOL || type === TOKEN.NULL) {
                            return {
                                type: SYNTAX.LITERAL,
                                val: lex().val
                            };
                        }

                        if (matchPath()) {
                            return parsePath();
                        }

                        if (match('(')) {
                            return parseGroupExpr();
                        }

                        return throwUnexpected(lex());
                    }

                    function parseGroupExpr() {
                        expect('(');
                        var expr = parseLogicalORExpr();
                        expect(')');

                        return expr;
                    }

                    function match(val) {
                        var token = lookahead();
                        return token.type === TOKEN.PUNCT && token.val === val;
                    }

                    function matchPath() {
                        return matchSelector() || matchSubst() || match('^');
                    }

                    function matchSelector() {
                        var token = lookahead();
                        if (token.type === TOKEN.PUNCT) {
                            var val = token.val;
                            return val === '.' || val === '..';
                        }

                        return false;
                    }

                    function matchSubst() {
                        var token = lookahead();
                        return token.type === TOKEN.ID && token.val[0] === '$';
                    }

                    function expect(val) {
                        var token = lex();
                        if (token.type !== TOKEN.PUNCT || token.val !== val) {
                            throwUnexpected(token);
                        }
                    }

                    function lookahead() {
                        if (buf !== null) {
                            return buf;
                        }

                        var pos = idx;
                        buf = advance();
                        idx = pos;

                        return buf;
                    }

                    function advance() {
                        while (isWhiteSpace(path[idx])) {
                            ++idx;
                        }

                        if (idx >= len) {
                            return {
                                type: TOKEN.EOP,
                                range: [idx, idx]
                            };
                        }

                        var token = scanPunctuator();
                        if (token ||
                        (token = scanId()) ||
                        (token = scanString()) ||
                        (token = scanNumeric())) {
                            return token;
                        }

                        token = {
                            range: [idx, idx]
                        };
                        idx >= len ?
                        token.type = TOKEN.EOP :
                        token.val = path[idx];

                        throwUnexpected(token);
                    }

                    function lex() {
                        var token;

                        if (buf) {
                            idx = buf.range[1];
                            token = buf;
                            buf = null;
                            return token;
                        }

                        return advance();
                    }

                    function isDigit(ch) {
                        return '0123456789'.indexOf(ch) >= 0;
                    }

                    function isWhiteSpace(ch) {
                        return ' \r\n\t'.indexOf(ch) > -1;
                    }

                    function isIdStart(ch) {
                        return ch === '$' || ch === '@' || ch === '_' || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');
                    }

                    function isIdPart(ch) {
                        return isIdStart(ch) || (ch >= '0' && ch <= '9');
                    }

                    function scanId() {
                        var ch = path[idx];

                        if (!isIdStart(ch)) {
                            return;
                        }

                        var start = idx,
                            id = ch;

                        while (++idx < len) {
                            ch = path[idx];
                            if (!isIdPart(ch)) {
                                break;
                            }
                            id += ch;
                        }

                        switch (id) {
                        case 'true':
                        case 'false':
                            return {
                                type: TOKEN.BOOL,
                                val: id === 'true',
                                range: [start, idx]
                            };

                        case 'null':
                            return {
                                type: TOKEN.NULL,
                                val: null,
                                range: [start, idx]
                            };

                        default:
                            return {
                                type: TOKEN.ID,
                                val: id,
                                range: [start, idx]
                            };
                        }
                    }

                    function scanString() {
                        if (path[idx] !== '"' && path[idx] !== '\'') {
                            return;
                        }

                        var orig = path[idx],
                            start = ++idx,
                            str = '',
                            eosFound = false,
                            ch;

                        while (idx < len) {
                            ch = path[idx++];
                            if (ch === '\\') {
                                ch = path[idx++];
                            }
                            else if ((ch === '"' || ch === '\'') && ch === orig) {
                                eosFound = true;
                                break;
                            }
                            str += ch;
                        }

                        if (eosFound) {
                            return {
                                type: TOKEN.STR,
                                val: str,
                                range: [start, idx]
                            };
                        }
                    }

                    function scanNumeric() {
                        var start = idx,
                            ch = path[idx],
                            isFloat = ch === '.';

                        if (isFloat || isDigit(ch)) {
                            var num = ch;
                            while (++idx < len) {
                                ch = path[idx];
                                if (ch === '.') {
                                    if (isFloat) {
                                        return;
                                    }
                                    isFloat = true;
                                }
                                else if (!isDigit(ch)) {
                                    break;
                                }

                                num += ch;
                            }

                            return {
                                type: TOKEN.NUM,
                                val: isFloat ? parseFloat(num) : parseInt(num, 10),
                                range: [start, idx]
                            };
                        }
                    }

                    function scanPunctuator() {
                        var start = idx,
                            ch1 = path[idx],
                            ch2 = path[idx + 1];

                        if (ch1 === '.') {
                            if (isDigit(ch2)) {
                                return;
                            }

                            return path[++idx] === '.' ?
                            {
                                type: TOKEN.PUNCT,
                                val: '..',
                                range: [start, ++idx]
                            } :
                            {
                                type: TOKEN.PUNCT,
                                val: '.',
                                range: [start, idx]
                            };
                        }

                        if (ch2 === '=') {
                            var ch3 = path[idx + 2];
                            if (ch3 === '=') {
                                if ('=!^$*'.indexOf(ch1) >= 0) {
                                    return {
                                        type: TOKEN.PUNCT,
                                        val: ch1 + ch2 + ch3,
                                        range: [start, idx += 3]
                                    };
                                }
                            }
                            else if ('^$*'.indexOf(ch3) >= 0) {
                                if (ch1 === '=') {
                                    return {
                                        type: TOKEN.PUNCT,
                                        val: ch1 + ch2 + ch3,
                                        range: [start, idx += 3]
                                    };
                                }
                            }
                            else if ('=!^$*><'.indexOf(ch1) >= 0) {
                                return {
                                    type: TOKEN.PUNCT,
                                    val: ch1 + ch2,
                                    range: [start, idx += 2]
                                };
                            }
                        }
                        else if (ch1 === '=' && '^$*'.indexOf(ch2) >= 0) {
                            return {
                                type: TOKEN.PUNCT,
                                val: ch1 + ch2,
                                range: [start, idx += 2]
                            };
                        }

                        if (ch1 === ch2 && (ch1 === '|' || ch1 === '&')) {
                            return {
                                type: TOKEN.PUNCT,
                                val: ch1 + ch2,
                                range: [start, idx += 2]
                            };
                        }

                        if (':{}()[]^+-*/%!><|'.indexOf(ch1) >= 0) {
                            return {
                                type: TOKEN.PUNCT,
                                val: ch1,
                                range: [start, ++idx]
                            };
                        }
                    }

                    function throwUnexpected(token) {
                        if (token.type === TOKEN.EOP) {
                            throwError(token, MESSAGES.UNEXP_EOP);
                        }

                        throwError(token, MESSAGES.UNEXP_TOKEN, token.val);
                    }

                    function throwError(token, messageFormat) {
                        var args = Array.prototype.slice.call(arguments, 2),
                            msg = messageFormat.replace(
                            /%(\d)/g,
                            function(_, idx) {
                                return args[idx] || '';
                            }),
                            error = new Error(msg);

                        error.column = token.range[0];

                        throw error;
                    }

                    return parse;
                })();

                // translator

                var translate = (function() {

                    var body,
                        vars,
                        lastVarId,
                        unusedVars;

                    function acquireVar() {
                        if (unusedVars.length) {
                            return unusedVars.shift();
                        }

                        var varName = 'v' + ++lastVarId;
                        vars.push(varName);
                        return varName;
                    }

                    function releaseVars() {
                        var args = arguments,
                            i = args.length;
                        while (i--) {
                            unusedVars.push(args[i]);
                        }
                    }

                    function translate(ast) {
                        body = [];
                        vars = ['res'];
                        lastVarId = 0;
                        unusedVars = [];

                        translateExpr(ast, 'res', 'data');

                        body.unshift(
                        'var ',
                        Array.isArray ?
                        'isArr = Array.isArray' :
                        'toStr = Object.prototype.toString, isArr = function(o) { return toStr.call(o) === "[object Array]"; }',
                        ', concat = Array.prototype.concat',
                        ',', vars.join(','), ';');

                        if (ast.type === SYNTAX.PATH) {
                            var lastPart = ast.parts[ast.parts.length - 1];
                            if (lastPart && lastPart.type === SYNTAX.POS_PRED && 'idx' in lastPart.arg) {
                                body.push('res = res[0];');
                            }
                        }

                        body.push('return res;');

                        return body.join('');
                    }

                    function translatePath(path, dest, ctx) {
                        var parts = path.parts,
                            i = 0,
                            len = parts.length;

                        body.push(
                        dest, '=', path.fromRoot ? 'data' : path.subst ? 'subst.' + path.subst : ctx, ';',
                        'isArr(' + dest + ') || (' + dest + ' = [' + dest + ']);');

                        while (i < len) {
                            var item = parts[i++];
                            switch (item.type) {
                            case SYNTAX.SELECTOR:
                                item.selector === '..' ?
                                translateDescendantSelector(item, dest, dest) :
                                translateSelector(item, dest, dest);
                                break;

                            case SYNTAX.OBJ_PRED:
                                translateObjectPredicate(item, dest, dest);
                                break;

                            case SYNTAX.POS_PRED:
                                translatePosPredicate(item, dest, dest);
                                break;

                            case SYNTAX.CONCAT_EXPR:
                                translateConcatExpr(item, dest, dest);
                                break;
                            }
                        }
                    }

                    function translateSelector(sel, dest, ctx) {
                        if (sel.prop) {
                            var propStr = escapeStr(sel.prop),
                                res = acquireVar(),
                                i = acquireVar(),
                                len = acquireVar(),
                                curCtx = acquireVar(),
                                j = acquireVar(),
                                val = acquireVar(),
                                tmpArr = acquireVar();

                            body.push(
                            res, '= [];', i, '= 0;', len, '=', ctx, '.length;', tmpArr, '= [];',
                            'while(', i, '<', len, ') {',
                            curCtx, '=', ctx, '[', i, '++];',
                            'if(', curCtx, '!= null) {');
                            if (sel.prop === '*') {
                                body.push(
                                'if(typeof ', curCtx, '=== "object") {',
                                'if(isArr(', curCtx, ')) {',
                                res, '=', res, '.concat(', curCtx, ');',
                                '}',
                                'else {',
                                'for(', j, ' in ', curCtx, ') {',
                                'if(', curCtx, '.hasOwnProperty(', j, ')) {',
                                val, '=', curCtx, '[', j, '];');
                                inlineAppendToArray(res, val);
                                body.push(
                                '}',
                                '}',
                                '}',
                                '}');
                            }
                            else {
                                body.push(
                                val, '=', curCtx, '[', propStr, '];');
                                inlineAppendToArray(res, val, tmpArr, len);
                            }
                            body.push(
                            '}',
                            '}',
                            dest, '=', len, '> 1 &&', tmpArr, '.length?', tmpArr, '.length > 1?',
                            'concat.apply(', res, ',', tmpArr, ') :', res, '.concat(', tmpArr, '[0]) :', res, ';');

                            releaseVars(res, i, len, curCtx, j, val, tmpArr);
                        }
                    }

                    function translateDescendantSelector(sel, dest, baseCtx) {
                        var prop = sel.prop,
                            ctx = acquireVar(),
                            curCtx = acquireVar(),
                            childCtxs = acquireVar(),
                            i = acquireVar(),
                            j = acquireVar(),
                            val = acquireVar(),
                            len = acquireVar(),
                            res = acquireVar();

                        body.push(
                        ctx, '=', baseCtx, '.slice(),', res, '= [];',
                        'while(', ctx, '.length) {',
                        curCtx, '=', ctx, '.shift();');
                        prop ?
                        body.push(
                        'if(typeof ', curCtx, '=== "object" &&', curCtx, ') {') :
                        body.push(
                        'if(typeof ', curCtx, '!= null) {');
                        body.push(
                        childCtxs, '= [];',
                        'if(isArr(', curCtx, ')) {',
                        i, '= 0,', len, '=', curCtx, '.length;',
                        'while(', i, '<', len, ') {',
                        val, '=', curCtx, '[', i, '++];');
                        prop && body.push(
                        'if(typeof ', val, '=== "object") {');
                        inlineAppendToArray(childCtxs, val);
                        prop && body.push(
                        '}');
                        body.push(
                        '}',
                        '}',
                        'else {');
                        if (prop) {
                            if (prop !== '*') {
                                body.push(
                                val, '=', curCtx, '["' + prop + '"];');
                                inlineAppendToArray(res, val);
                            }
                        }
                        else {
                            inlineAppendToArray(res, curCtx);
                            body.push(
                            'if(typeof ', curCtx, '=== "object") {');
                        }

                        body.push(
                        'for(', j, ' in ', curCtx, ') {',
                        'if(', curCtx, '.hasOwnProperty(', j, ')) {',
                        val, '=', curCtx, '[', j, '];');
                        inlineAppendToArray(childCtxs, val);
                        prop === '*' && inlineAppendToArray(res, val);
                        body.push(
                        '}',
                        '}');
                        prop || body.push(
                        '}');
                        body.push(
                        '}',
                        childCtxs, '.length &&', ctx, '.unshift.apply(', ctx, ',', childCtxs, ');',
                        '}',
                        '}',
                        dest, '=', res, ';');

                        releaseVars(ctx, curCtx, childCtxs, i, j, val, len, res);
                    }

                    function translateObjectPredicate(expr, dest, ctx) {
                        var resVar = acquireVar(),
                            i = acquireVar(),
                            len = acquireVar(),
                            cond = acquireVar(),
                            curItem = acquireVar();

                        body.push(
                        resVar, '= [];',
                        i, '= 0;',
                        len, '=', ctx, '.length;',
                        'while(', i, '<', len, ') {',
                        curItem, '=', ctx, '[', i, '++];');
                        translateExpr(expr.arg, cond, curItem);
                        body.push(
                        convertToBool(expr.arg, cond), '&&', resVar, '.push(', curItem, ');',
                        '}',
                        dest, '=', resVar, ';');

                        releaseVars(resVar, i, len, curItem, cond);
                    }

                    function translatePosPredicate(item, dest, ctx) {
                        var arrayExpr = item.arg,
                            fromIdx,
                            toIdx;
                        if (arrayExpr.idx) {
                            var idx = acquireVar();
                            translateExpr(arrayExpr.idx, idx, ctx);
                            body.push(
                            idx, '< 0 && (', idx, '=', ctx, '.length +', idx, ');',
                            dest, '=', ctx, '[', idx, '] == null? [] : [', ctx, '[', idx, ']];');
                            releaseVars(idx);
                            return false;
                        }
                        else if (arrayExpr.fromIdx) {
                            if (arrayExpr.toIdx) {
                                translateExpr(arrayExpr.fromIdx, fromIdx = acquireVar(), ctx);
                                translateExpr(arrayExpr.toIdx, toIdx = acquireVar(), ctx);
                                body.push(dest, '=', ctx, '.slice(', fromIdx, ',', toIdx, ');');
                                releaseVars(fromIdx, toIdx);
                            }
                            else {
                                translateExpr(arrayExpr.fromIdx, fromIdx = acquireVar(), ctx);
                                body.push(dest, '=', ctx, '.slice(', fromIdx, ');');
                                releaseVars(fromIdx);
                            }
                        }
                        else {
                            translateExpr(arrayExpr.toIdx, toIdx = acquireVar(), ctx);
                            body.push(dest, '=', ctx, '.slice(0,', toIdx, ');');
                            releaseVars(toIdx);
                        }
                    }

                    function translateExpr(expr, dest, ctx) {
                        switch (expr.type) {
                        case SYNTAX.PATH:
                            translatePath(expr, dest, ctx);
                            break;

                        case SYNTAX.CONCAT_EXPR:
                            translateConcatExpr(expr, dest, ctx);
                            break;

                        case SYNTAX.COMPARISON_EXPR:
                            translateComparisonExpr(expr, dest, ctx);
                            break;

                        case SYNTAX.MATH_EXPR:
                            translateMathExpr(expr, dest, ctx);
                            break;

                        case SYNTAX.LOGICAL_EXPR:
                            translateLogicalExpr(expr, dest, ctx);
                            break;

                        case SYNTAX.UNARY_EXPR:
                            translateUnaryExpr(expr, dest, ctx);
                            break;

                        case SYNTAX.LITERAL:
                            body.push(dest, '=');
                            translateLiteral(expr.val);
                            body.push(';');
                            break;
                        }
                    }

                    function translateLiteral(val) {
                        body.push(typeof val === 'string' ? escapeStr(val) : val === null ? 'null' : val);
                    }

                    function translateComparisonExpr(expr, dest, ctx) {
                        var val1 = acquireVar(),
                            val2 = acquireVar(),
                            isVal1Array = acquireVar(),
                            isVal2Array = acquireVar(),
                            i = acquireVar(),
                            j = acquireVar(),
                            len1 = acquireVar(),
                            len2 = acquireVar(),
                            leftArg = expr.args[0],
                            rightArg = expr.args[1];

                        body.push(dest, '= false;');

                        translateExpr(leftArg, val1, ctx);
                        translateExpr(rightArg, val2, ctx);

                        var isLeftArgPath = leftArg.type === SYNTAX.PATH,
                            isRightArgLiteral = rightArg.type === SYNTAX.LITERAL;

                        body.push(isVal1Array, '=');
                        isLeftArgPath ? body.push('true;') : body.push('isArr(', val1, ');');

                        body.push(isVal2Array, '=');
                        isRightArgLiteral ? body.push('false;') : body.push('isArr(', val2, ');');

                        body.push(
                        'if(');
                        isLeftArgPath || body.push(isVal1Array, '&&');
                        body.push(val1, '.length === 1) {',
                        val1, '=', val1, '[0];',
                        isVal1Array, '= false;',
                        '}');
                        isRightArgLiteral || body.push(
                        'if(', isVal2Array, '&&', val2, '.length === 1) {',
                        val2, '=', val2, '[0];',
                        isVal2Array, '= false;',
                        '}');

                        body.push(i, '= 0;',
                        'if(', isVal1Array, ') {',
                        len1, '=', val1, '.length;');

                        if (!isRightArgLiteral) {
                            body.push(
                            'if(', isVal2Array, ') {',
                            len2, '=', val2, '.length;',
                            'while(', i, '<', len1, '&& !', dest, ') {',
                            j, '= 0;',
                            'while(', j, '<', len2, ') {');
                            writeCondition(expr.op, [val1, '[', i, ']'].join(''), [val2, '[', j, ']'].join(''));
                            body.push(
                            dest, '= true;',
                            'break;',
                            '}',
                            '++', j, ';',
                            '}',
                            '++', i, ';',
                            '}',
                            '}',
                            'else {');
                        }
                        body.push(
                        'while(', i, '<', len1, ') {');
                        writeCondition(expr.op, [val1, '[', i, ']'].join(''), val2);
                        body.push(
                        dest, '= true;',
                        'break;',
                        '}',
                        '++', i, ';',
                        '}');

                        isRightArgLiteral || body.push(
                        '}');

                        body.push(
                        '}');

                        if (!isRightArgLiteral) {
                            body.push(
                            'else if(', isVal2Array, ') {',
                            len2, '=', val2, '.length;',
                            'while(', i, '<', len2, ') {');
                            writeCondition(expr.op, val1, [val2, '[', i, ']'].join(''));
                            body.push(
                            dest, '= true;',
                            'break;',
                            '}',
                            '++', i, ';',
                            '}',
                            '}');
                        }

                        body.push(
                        'else {',
                        dest, '=', binaryOperators[expr.op](val1, val2), ';',
                        '}');

                        releaseVars(val1, val2, isVal1Array, isVal2Array, i, j, len1, len2);
                    }

                    function writeCondition(op, val1Expr, val2Expr) {
                        body.push('if(', binaryOperators[op](val1Expr, val2Expr), ') {');
                    }

                    function translateLogicalExpr(expr, dest, ctx) {
                        var conditionVars = [],
                            args = expr.args,
                            len = args.length,
                            i = 0,
                            val;

                        body.push(dest, '= false;');
                        switch (expr.op) {
                        case '&&':
                            while (i < len) {
                                conditionVars.push(val = acquireVar());
                                translateExpr(args[i], val, ctx);
                                body.push('if(', convertToBool(args[i++], val), ') {');
                            }
                            body.push(dest, '= true;');
                            break;

                        case '||':
                            while (i < len) {
                                conditionVars.push(val = acquireVar());
                                translateExpr(args[i], val, ctx);
                                body.push(
                                'if(', convertToBool(args[i], val), ') {',
                                dest, '= true;',
                                '}');
                                if (i++ + 1 < len) {
                                    body.push('else {');
                                }
                            }
                            --len;
                            break;
                        }

                        while (len--) {
                            body.push('}');
                        }

                        releaseVars.apply(null, conditionVars);
                    }

                    function translateMathExpr(expr, dest, ctx) {
                        var val1 = acquireVar(),
                            val2 = acquireVar(),
                            args = expr.args;

                        translateExpr(args[0], val1, ctx);
                        translateExpr(args[1], val2, ctx);

                        body.push(
                        dest, '=',
                        binaryOperators[expr.op](
                        convertToSingleValue(args[0], val1),
                        convertToSingleValue(args[1], val2)),
                        ';');

                        releaseVars(val1, val2);
                    }

                    function translateUnaryExpr(expr, dest, ctx) {
                        var val = acquireVar(),
                            arg = expr.arg;

                        translateExpr(arg, val, ctx);

                        switch (expr.op) {
                        case '!':
                            body.push(dest, '= !', convertToBool(arg, val) + ';');
                            break;

                        case '-':
                            body.push(dest, '= -', convertToSingleValue(arg, val) + ';');
                            break;
                        }

                        releaseVars(val);
                    }

                    function translateConcatExpr(expr, dest, ctx) {
                        var argVars = [],
                            args = expr.args,
                            len = args.length,
                            i = 0;

                        while (i < len) {
                            argVars.push(acquireVar());
                            translateExpr(args[i], argVars[i++], ctx);
                        }

                        body.push(dest, '= concat.call(', argVars.join(','), ');');

                        releaseVars.apply(null, argVars);
                    }

                    function escapeStr(s) {
                        return '\'' + s.replace(/\\/g, '\\\\').replace(/'/g, '\\\'') + '\'';
                    }

                    function inlineAppendToArray(res, val, tmpArr, len) {
                        body.push(
                        'if(typeof ', val, '!== "undefined") {',
                        'if(isArr(', val, ')) {');
                        if (tmpArr) {
                            body.push(
                            len, '> 1?');
                            inlinePushToArray(tmpArr, val);
                            body.push(
                            ':');
                        }
                        body.push(
                        res, '=', res, '.length?', res, '.concat(', val, ') :', val, '.slice()', ';',
                        '}',
                        'else {');
                        tmpArr && body.push(
                        'if(', tmpArr, '.length) {',
                        res, '= concat.apply(', res, ',', tmpArr, ');',
                        tmpArr, '= [];',
                        '}');
                        inlinePushToArray(res, val);
                        body.push(';',
                        '}',
                        '}');
                    }

                    function inlinePushToArray(res, val) {
                        body.push(res, '.length?', res, '.push(', val, ') :', res, '[0] =', val);
                    }

                    function convertToBool(arg, varName) {
                        switch (arg.type) {
                        case SYNTAX.LOGICAL_EXPR:
                            return varName;

                        case SYNTAX.LITERAL:
                            return '!!' + varName;

                        case SYNTAX.PATH:
                            return varName + '.length > 0';

                        default:
                            return ['(typeof ', varName, '=== "boolean"?',
                            varName, ':',
                            'isArr(', varName, ')?', varName, '.length > 0 : !!', varName, ')'].join('');
                        }
                    }

                    function convertToSingleValue(arg, varName) {
                        switch (arg.type) {
                        case SYNTAX.LITERAL:
                            return varName;

                        case SYNTAX.PATH:
                            return varName + '[0]';

                        default:
                            return ['(isArr(', varName, ')?', varName, '[0] : ', varName, ')'].join('');
                        }
                    }

                    function startsWithStrict(val1, val2) {
                        return ['typeof ', val1, '=== "string" && typeof ', val2, '=== "string" &&',
                        val1, '.indexOf(', val2, ') === 0'].join('');
                    }

                    function startsWith(val1, val2) {
                        return [val1, '!= null &&', val2, '!= null &&',
                        val1, '.toString().toLowerCase().indexOf(', val2, '.toString().toLowerCase()) === 0'].join('');
                    }

                    function endsWithStrict(val1, val2) {
                        return ['typeof ', val1, '=== "string" && typeof ', val2, '=== "string" &&',
                        val1, '.length >=', val2, '.length &&',
                        val1, '.lastIndexOf(', val2, ') ===', val1, '.length -', val2, '.length'].join('');
                    }

                    function endsWith(val1, val2) {
                        return [val1, '!= null &&', val2, '!= null &&',
                        '(', val1, '=', val1, '.toString()).length >=', '(', val2, '=', val2, '.toString()).length &&',
                        '(', val1, '.toLowerCase()).lastIndexOf(', '(', val2, '.toLowerCase())) ===',
                        val1, '.length -', val2, '.length'].join('');
                    }

                    function containsStrict(val1, val2) {
                        return ['typeof ', val1, '=== "string" && typeof ', val2, '=== "string" &&',
                        val1, '.indexOf(', val2, ') > -1'].join('');
                    }

                    function contains(val1, val2) {
                        return [val1, '!= null && ', val2, '!= null &&',
                        val1, '.toString().toLowerCase().indexOf(', val2, '.toString().toLowerCase()) > -1'].join('');
                    }

                    var binaryOperators = {
                        '===': function(val1, val2) {
                            return val1 + '===' + val2;
                        },

                        '==': function(val1, val2) {
                            return ['typeof ', val1, '=== "string" && typeof ', val2, '=== "string"?',
                            val1, '.toLowerCase() ===', val2, '.toLowerCase() :' +
                            val1, '==', val2].join('');
                        },

                        '>=': function(val1, val2) {
                            return val1 + '>=' + val2;
                        },

                        '>': function(val1, val2) {
                            return val1 + '>' + val2;
                        },

                        '<=': function(val1, val2) {
                            return val1 + '<=' + val2;
                        },

                        '<': function(val1, val2) {
                            return val1 + '<' + val2;
                        },

                        '!==': function(val1, val2) {
                            return val1 + '!==' + val2;
                        },

                        '!=': function(val1, val2) {
                            return val1 + '!=' + val2;
                        },

                        '^==': startsWithStrict,

                        '==^': function(val1, val2) {
                            return startsWithStrict(val2, val1);
                        },

                        '^=': startsWith,

                        '=^': function(val1, val2) {
                            return startsWith(val2, val1);
                        },

                        '$==': endsWithStrict,

                        '==$': function(val1, val2) {
                            return endsWithStrict(val2, val1);
                        },

                        '$=': endsWith,

                        '=$': function(val1, val2) {
                            return endsWith(val2, val1);
                        },

                        '*==': containsStrict,

                        '==*': function(val1, val2) {
                            return containsStrict(val2, val1);
                        },

                        '=*': function(val1, val2) {
                            return contains(val2, val1);
                        },

                        '*=': contains,

                        '+': function(val1, val2) {
                            return val1 + '+' + val2;
                        },

                        '-': function(val1, val2) {
                            return val1 + '-' + val2;
                        },

                        '*': function(val1, val2) {
                            return val1 + '*' + val2;
                        },

                        '/': function(val1, val2) {
                            return val1 + '/' + val2;
                        },

                        '%': function(val1, val2) {
                            return val1 + '%' + val2;
                        }
                    };

                    return translate;
                })();

                function compile(path) {
                    return Function('data,subst', translate(parse(path)));
                }

                var cache = {},
                    cacheKeys = [],
                    params = {
                        cacheSize: 100
                    },
                    setParamsHooks = {
                        cacheSize: function(oldVal, newVal) {
                            if (newVal < oldVal && cacheKeys.length > newVal) {
                                var removedKeys = cacheKeys.splice(0, cacheKeys.length - newVal),
                                    i = removedKeys.length;

                                while (i--) {
                                    delete cache[removedKeys[i]];
                                }
                            }
                        }
                    };

                var decl = function(path, ctx, substs) {
                    if (!cache[path]) {
                        cache[path] = compile(path);
                        if (cacheKeys.push(path) > params.cacheSize) {
                            delete cache[cacheKeys.shift()];
                        }
                    }

                    return cache[path](ctx, substs || {});
                };

                decl.version = '0.3.4';

                decl.params = function(_params) {
                    if (!arguments.length) {
                        return params;
                    }

                    for (var name in _params) {
                        if (_params.hasOwnProperty(name)) {
                            setParamsHooks[name] && setParamsHooks[name](params[name], _params[name]);
                            params[name] = _params[name];
                        }
                    }
                };

                decl.compile = compile;

                decl.apply = decl;

                if (typeof module === 'object' && typeof module.exports === 'object') {
                    module.exports = decl;
                }
                else if (typeof modules === 'object') {
                    modules.define('jspath', function(provide) {
                        provide(decl);
                    });
                }
                else if (typeof define === 'function') {
                    define(function(require, exports, module) {
                        module.exports = decl;
                    });
                }
                else {
                    window.JSPath = decl;
                }

            })();

        }, {}],
        374: [function(require, module, exports) {
            var getNative = require('./_getNative'),
                root = require('./_root');

            /* Built-in method references that are verified to be native. */
            var DataView = getNative(root, 'DataView');

            module.exports = DataView;

        }, {
            "./_getNative": 436,
            "./_root": 474
        }],
        375: [function(require, module, exports) {
            var hashClear = require('./_hashClear'),
                hashDelete = require('./_hashDelete'),
                hashGet = require('./_hashGet'),
                hashHas = require('./_hashHas'),
                hashSet = require('./_hashSet');

            /**
             * Creates a hash object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Hash(entries) {
                var index = -1,
                    length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }

            // Add methods to `Hash`.
            Hash.prototype.clear = hashClear;
            Hash.prototype['delete'] = hashDelete;
            Hash.prototype.get = hashGet;
            Hash.prototype.has = hashHas;
            Hash.prototype.set = hashSet;

            module.exports = Hash;

        }, {
            "./_hashClear": 442,
            "./_hashDelete": 443,
            "./_hashGet": 444,
            "./_hashHas": 445,
            "./_hashSet": 446
        }],
        376: [function(require, module, exports) {
            var listCacheClear = require('./_listCacheClear'),
                listCacheDelete = require('./_listCacheDelete'),
                listCacheGet = require('./_listCacheGet'),
                listCacheHas = require('./_listCacheHas'),
                listCacheSet = require('./_listCacheSet');

            /**
             * Creates an list cache object.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function ListCache(entries) {
                var index = -1,
                    length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }

            // Add methods to `ListCache`.
            ListCache.prototype.clear = listCacheClear;
            ListCache.prototype['delete'] = listCacheDelete;
            ListCache.prototype.get = listCacheGet;
            ListCache.prototype.has = listCacheHas;
            ListCache.prototype.set = listCacheSet;

            module.exports = ListCache;

        }, {
            "./_listCacheClear": 455,
            "./_listCacheDelete": 456,
            "./_listCacheGet": 457,
            "./_listCacheHas": 458,
            "./_listCacheSet": 459
        }],
        377: [function(require, module, exports) {
            var getNative = require('./_getNative'),
                root = require('./_root');

            /* Built-in method references that are verified to be native. */
            var Map = getNative(root, 'Map');

            module.exports = Map;

        }, {
            "./_getNative": 436,
            "./_root": 474
        }],
        378: [function(require, module, exports) {
            var mapCacheClear = require('./_mapCacheClear'),
                mapCacheDelete = require('./_mapCacheDelete'),
                mapCacheGet = require('./_mapCacheGet'),
                mapCacheHas = require('./_mapCacheHas'),
                mapCacheSet = require('./_mapCacheSet');

            /**
             * Creates a map cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function MapCache(entries) {
                var index = -1,
                    length = entries == null ? 0 : entries.length;

                this.clear();
                while (++index < length) {
                    var entry = entries[index];
                    this.set(entry[0], entry[1]);
                }
            }

            // Add methods to `MapCache`.
            MapCache.prototype.clear = mapCacheClear;
            MapCache.prototype['delete'] = mapCacheDelete;
            MapCache.prototype.get = mapCacheGet;
            MapCache.prototype.has = mapCacheHas;
            MapCache.prototype.set = mapCacheSet;

            module.exports = MapCache;

        }, {
            "./_mapCacheClear": 460,
            "./_mapCacheDelete": 461,
            "./_mapCacheGet": 462,
            "./_mapCacheHas": 463,
            "./_mapCacheSet": 464
        }],
        379: [function(require, module, exports) {
            var getNative = require('./_getNative'),
                root = require('./_root');

            /* Built-in method references that are verified to be native. */
            var Promise = getNative(root, 'Promise');

            module.exports = Promise;

        }, {
            "./_getNative": 436,
            "./_root": 474
        }],
        380: [function(require, module, exports) {
            var getNative = require('./_getNative'),
                root = require('./_root');

            /* Built-in method references that are verified to be native. */
            var Set = getNative(root, 'Set');

            module.exports = Set;

        }, {
            "./_getNative": 436,
            "./_root": 474
        }],
        381: [function(require, module, exports) {
            var MapCache = require('./_MapCache'),
                setCacheAdd = require('./_setCacheAdd'),
                setCacheHas = require('./_setCacheHas');

            /**
             *
             * Creates an array cache object to store unique values.
             *
             * @private
             * @constructor
             * @param {Array} [values] The values to cache.
             */
            function SetCache(values) {
                var index = -1,
                    length = values == null ? 0 : values.length;

                this.__data__ = new MapCache;
                while (++index < length) {
                    this.add(values[index]);
                }
            }

            // Add methods to `SetCache`.
            SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
            SetCache.prototype.has = setCacheHas;

            module.exports = SetCache;

        }, {
            "./_MapCache": 378,
            "./_setCacheAdd": 475,
            "./_setCacheHas": 476
        }],
        382: [function(require, module, exports) {
            var ListCache = require('./_ListCache'),
                stackClear = require('./_stackClear'),
                stackDelete = require('./_stackDelete'),
                stackGet = require('./_stackGet'),
                stackHas = require('./_stackHas'),
                stackSet = require('./_stackSet');

            /**
             * Creates a stack cache object to store key-value pairs.
             *
             * @private
             * @constructor
             * @param {Array} [entries] The key-value pairs to cache.
             */
            function Stack(entries) {
                var data = this.__data__ = new ListCache(entries);
                this.size = data.size;
            }

            // Add methods to `Stack`.
            Stack.prototype.clear = stackClear;
            Stack.prototype['delete'] = stackDelete;
            Stack.prototype.get = stackGet;
            Stack.prototype.has = stackHas;
            Stack.prototype.set = stackSet;

            module.exports = Stack;

        }, {
            "./_ListCache": 376,
            "./_stackClear": 480,
            "./_stackDelete": 481,
            "./_stackGet": 482,
            "./_stackHas": 483,
            "./_stackSet": 484
        }],
        383: [function(require, module, exports) {
            var root = require('./_root');

            /** Built-in value references. */
            var Symbol = root.Symbol;

            module.exports = Symbol;

        }, {
            "./_root": 474
        }],
        384: [function(require, module, exports) {
            var root = require('./_root');

            /** Built-in value references. */
            var Uint8Array = root.Uint8Array;

            module.exports = Uint8Array;

        }, {
            "./_root": 474
        }],
        385: [function(require, module, exports) {
            var getNative = require('./_getNative'),
                root = require('./_root');

            /* Built-in method references that are verified to be native. */
            var WeakMap = getNative(root, 'WeakMap');

            module.exports = WeakMap;

        }, {
            "./_getNative": 436,
            "./_root": 474
        }],
        386: [function(require, module, exports) {
            /**
             * A faster alternative to `Function#apply`, this function invokes `func`
             * with the `this` binding of `thisArg` and the arguments of `args`.
             *
             * @private
             * @param {Function} func The function to invoke.
             * @param {*} thisArg The `this` binding of `func`.
             * @param {Array} args The arguments to invoke `func` with.
             * @returns {*} Returns the result of `func`.
             */
            function apply(func, thisArg, args) {
                switch (args.length) {
                case 0:
                    return func.call(thisArg);
                case 1:
                    return func.call(thisArg, args[0]);
                case 2:
                    return func.call(thisArg, args[0], args[1]);
                case 3:
                    return func.call(thisArg, args[0], args[1], args[2]);
                }
                return func.apply(thisArg, args);
            }

            module.exports = apply;

        }, {}],
        387: [function(require, module, exports) {
            /**
             * A specialized version of `_.filter` for arrays without support for
             * iteratee shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {Array} Returns the new filtered array.
             */
            function arrayFilter(array, predicate) {
                var index = -1,
                    length = array == null ? 0 : array.length,
                    resIndex = 0,
                    result = [];

                while (++index < length) {
                    var value = array[index];
                    if (predicate(value, index, array)) {
                        result[resIndex++] = value;
                    }
                }
                return result;
            }

            module.exports = arrayFilter;

        }, {}],
        388: [function(require, module, exports) {
            var baseTimes = require('./_baseTimes'),
                isArguments = require('./isArguments'),
                isArray = require('./isArray'),
                isBuffer = require('./isBuffer'),
                isIndex = require('./_isIndex'),
                isTypedArray = require('./isTypedArray');

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * Creates an array of the enumerable property names of the array-like `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @param {boolean} inherited Specify returning inherited property names.
             * @returns {Array} Returns the array of property names.
             */
            function arrayLikeKeys(value, inherited) {
                var isArr = isArray(value),
                    isArg = !isArr && isArguments(value),
                    isBuff = !isArr && !isArg && isBuffer(value),
                    isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                    skipIndexes = isArr || isArg || isBuff || isType,
                    result = skipIndexes ? baseTimes(value.length, String) : [],
                    length = result.length;

                for (var key in value) {
                    if ((inherited || hasOwnProperty.call(value, key)) &&
                    !(skipIndexes && (// Safari 9 has enumerable `arguments.length` in strict mode.
                    key == 'length' ||

                    (// Node.js 0.10 has enumerable non-index properties on buffers.
                    isBuff && (key == 'offset' || key == 'parent')) ||

                    (// PhantomJS 2 has enumerable non-index properties on typed arrays.
                    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) || // Skip index properties.
                    isIndex(key, length)
                    ))) {
                        result.push(key);
                    }
                }
                return result;
            }

            module.exports = arrayLikeKeys;

        }, {
            "./_baseTimes": 418,
            "./_isIndex": 448,
            "./isArguments": 493,
            "./isArray": 494,
            "./isBuffer": 496,
            "./isTypedArray": 502
        }],
        389: [function(require, module, exports) {
            /**
             * A specialized version of `_.map` for arrays without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function arrayMap(array, iteratee) {
                var index = -1,
                    length = array == null ? 0 : array.length,
                    result = Array(length);

                while (++index < length) {
                    result[index] = iteratee(array[index], index, array);
                }
                return result;
            }

            module.exports = arrayMap;

        }, {}],
        390: [function(require, module, exports) {
            /**
             * Appends the elements of `values` to `array`.
             *
             * @private
             * @param {Array} array The array to modify.
             * @param {Array} values The values to append.
             * @returns {Array} Returns `array`.
             */
            function arrayPush(array, values) {
                var index = -1,
                    length = values.length,
                    offset = array.length;

                while (++index < length) {
                    array[offset + index] = values[index];
                }
                return array;
            }

            module.exports = arrayPush;

        }, {}],
        391: [function(require, module, exports) {
            /**
             * A specialized version of `_.some` for arrays without support for iteratee
             * shorthands.
             *
             * @private
             * @param {Array} [array] The array to iterate over.
             * @param {Function} predicate The function invoked per iteration.
             * @returns {boolean} Returns `true` if any element passes the predicate check,
             *  else `false`.
             */
            function arraySome(array, predicate) {
                var index = -1,
                    length = array == null ? 0 : array.length;

                while (++index < length) {
                    if (predicate(array[index], index, array)) {
                        return true;
                    }
                }
                return false;
            }

            module.exports = arraySome;

        }, {}],
        392: [function(require, module, exports) {
            var eq = require('./eq');

            /**
             * Gets the index at which the `key` is found in `array` of key-value pairs.
             *
             * @private
             * @param {Array} array The array to inspect.
             * @param {*} key The key to search for.
             * @returns {number} Returns the index of the matched value, else `-1`.
             */
            function assocIndexOf(array, key) {
                var length = array.length;
                while (length--) {
                    if (eq(array[length][0], key)) {
                        return length;
                    }
                }
                return -1;
            }

            module.exports = assocIndexOf;

        }, {
            "./eq": 489
        }],
        393: [function(require, module, exports) {
            var baseForOwn = require('./_baseForOwn'),
                createBaseEach = require('./_createBaseEach');

            /**
             * The base implementation of `_.forEach` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array|Object} Returns `collection`.
             */
            var baseEach = createBaseEach(baseForOwn);

            module.exports = baseEach;

        }, {
            "./_baseForOwn": 396,
            "./_createBaseEach": 426
        }],
        394: [function(require, module, exports) {
            var arrayPush = require('./_arrayPush'),
                isFlattenable = require('./_isFlattenable');

            /**
             * The base implementation of `_.flatten` with support for restricting flattening.
             *
             * @private
             * @param {Array} array The array to flatten.
             * @param {number} depth The maximum recursion depth.
             * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
             * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
             * @param {Array} [result=[]] The initial result value.
             * @returns {Array} Returns the new flattened array.
             */
            function baseFlatten(array, depth, predicate, isStrict, result) {
                var index = -1,
                    length = array.length;

                predicate || (predicate = isFlattenable);
                result || (result = []);

                while (++index < length) {
                    var value = array[index];
                    if (depth > 0 && predicate(value)) {
                        if (depth > 1) {
                            // Recursively flatten arrays (susceptible to call stack limits).
                            baseFlatten(value, depth - 1, predicate, isStrict, result);
                        } else {
                            arrayPush(result, value);
                        }
                    } else if (!isStrict) {
                        result[result.length] = value;
                    }
                }
                return result;
            }

            module.exports = baseFlatten;

        }, {
            "./_arrayPush": 390,
            "./_isFlattenable": 447
        }],
        395: [function(require, module, exports) {
            var createBaseFor = require('./_createBaseFor');

            /**
             * The base implementation of `baseForOwn` which iterates over `object`
             * properties returned by `keysFunc` and invokes `iteratee` for each property.
             * Iteratee functions may exit iteration early by explicitly returning `false`.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @returns {Object} Returns `object`.
             */
            var baseFor = createBaseFor();

            module.exports = baseFor;

        }, {
            "./_createBaseFor": 427
        }],
        396: [function(require, module, exports) {
            var baseFor = require('./_baseFor'),
                keys = require('./keys');

            /**
             * The base implementation of `_.forOwn` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Object} Returns `object`.
             */
            function baseForOwn(object, iteratee) {
                return object && baseFor(object, iteratee, keys);
            }

            module.exports = baseForOwn;

        }, {
            "./_baseFor": 395,
            "./keys": 503
        }],
        397: [function(require, module, exports) {
            var castPath = require('./_castPath'),
                toKey = require('./_toKey');

            /**
             * The base implementation of `_.get` without support for default values.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @returns {*} Returns the resolved value.
             */
            function baseGet(object, path) {
                path = castPath(path, object);

                var index = 0,
                    length = path.length;

                while (object != null && index < length) {
                    object = object[toKey(path[index++])];
                }
                return (index && index == length) ? object : undefined;
            }

            module.exports = baseGet;

        }, {
            "./_castPath": 422,
            "./_toKey": 486
        }],
        398: [function(require, module, exports) {
            var arrayPush = require('./_arrayPush'),
                isArray = require('./isArray');

            /**
             * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
             * `keysFunc` and `symbolsFunc` to get the enumerable property names and
             * symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Function} keysFunc The function to get the keys of `object`.
             * @param {Function} symbolsFunc The function to get the symbols of `object`.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                var result = keysFunc(object);
                return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
            }

            module.exports = baseGetAllKeys;

        }, {
            "./_arrayPush": 390,
            "./isArray": 494
        }],
        399: [function(require, module, exports) {
            var Symbol = require('./_Symbol'),
                getRawTag = require('./_getRawTag'),
                objectToString = require('./_objectToString');

            /** `Object#toString` result references. */
            var nullTag = '[object Null]',
                undefinedTag = '[object Undefined]';

            /** Built-in value references. */
            var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

            /**
             * The base implementation of `getTag` without fallbacks for buggy environments.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            function baseGetTag(value) {
                if (value == null) {
                    return value === undefined ? undefinedTag : nullTag;
                }
                return (symToStringTag && symToStringTag in Object(value))
                ? getRawTag(value)
                : objectToString(value);
            }

            module.exports = baseGetTag;

        }, {
            "./_Symbol": 383,
            "./_getRawTag": 437,
            "./_objectToString": 471
        }],
        400: [function(require, module, exports) {
            /**
             * The base implementation of `_.hasIn` without support for deep paths.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {Array|string} key The key to check.
             * @returns {boolean} Returns `true` if `key` exists, else `false`.
             */
            function baseHasIn(object, key) {
                return object != null && key in Object(object);
            }

            module.exports = baseHasIn;

        }, {}],
        401: [function(require, module, exports) {
            var baseGetTag = require('./_baseGetTag'),
                isObjectLike = require('./isObjectLike');

            /** `Object#toString` result references. */
            var argsTag = '[object Arguments]';

            /**
             * The base implementation of `_.isArguments`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             */
            function baseIsArguments(value) {
                return isObjectLike(value) && baseGetTag(value) == argsTag;
            }

            module.exports = baseIsArguments;

        }, {
            "./_baseGetTag": 399,
            "./isObjectLike": 500
        }],
        402: [function(require, module, exports) {
            var baseIsEqualDeep = require('./_baseIsEqualDeep'),
                isObjectLike = require('./isObjectLike');

            /**
             * The base implementation of `_.isEqual` which supports partial comparisons
             * and tracks traversed objects.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @param {boolean} bitmask The bitmask flags.
             *  1 - Unordered comparison
             *  2 - Partial comparison
             * @param {Function} [customizer] The function to customize comparisons.
             * @param {Object} [stack] Tracks traversed `value` and `other` objects.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             */
            function baseIsEqual(value, other, bitmask, customizer, stack) {
                if (value === other) {
                    return true;
                }
                if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                    return value !== value && other !== other;
                }
                return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
            }

            module.exports = baseIsEqual;

        }, {
            "./_baseIsEqualDeep": 403,
            "./isObjectLike": 500
        }],
        403: [function(require, module, exports) {
            var Stack = require('./_Stack'),
                equalArrays = require('./_equalArrays'),
                equalByTag = require('./_equalByTag'),
                equalObjects = require('./_equalObjects'),
                getTag = require('./_getTag'),
                isArray = require('./isArray'),
                isBuffer = require('./isBuffer'),
                isTypedArray = require('./isTypedArray');

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1;

            /** `Object#toString` result references. */
            var argsTag = '[object Arguments]',
                arrayTag = '[object Array]',
                objectTag = '[object Object]';

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * A specialized version of `baseIsEqual` for arrays and objects which performs
             * deep comparisons and tracks traversed objects enabling objects with circular
             * references to be compared.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} [stack] Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                var objIsArr = isArray(object),
                    othIsArr = isArray(other),
                    objTag = objIsArr ? arrayTag : getTag(object),
                    othTag = othIsArr ? arrayTag : getTag(other);

                objTag = objTag == argsTag ? objectTag : objTag;
                othTag = othTag == argsTag ? objectTag : othTag;

                var objIsObj = objTag == objectTag,
                    othIsObj = othTag == objectTag,
                    isSameTag = objTag == othTag;

                if (isSameTag && isBuffer(object)) {
                    if (!isBuffer(other)) {
                        return false;
                    }
                    objIsArr = true;
                    objIsObj = false;
                }
                if (isSameTag && !objIsObj) {
                    stack || (stack = new Stack);
                    return (objIsArr || isTypedArray(object))
                    ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
                    : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                }
                if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                    if (objIsWrapped || othIsWrapped) {
                        var objUnwrapped = objIsWrapped ? object.value() : object,
                            othUnwrapped = othIsWrapped ? other.value() : other;

                        stack || (stack = new Stack);
                        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                    }
                }
                if (!isSameTag) {
                    return false;
                }
                stack || (stack = new Stack);
                return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
            }

            module.exports = baseIsEqualDeep;

        }, {
            "./_Stack": 382,
            "./_equalArrays": 429,
            "./_equalByTag": 430,
            "./_equalObjects": 431,
            "./_getTag": 439,
            "./isArray": 494,
            "./isBuffer": 496,
            "./isTypedArray": 502
        }],
        404: [function(require, module, exports) {
            var Stack = require('./_Stack'),
                baseIsEqual = require('./_baseIsEqual');

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1,
                COMPARE_UNORDERED_FLAG = 2;

            /**
             * The base implementation of `_.isMatch` without support for iteratee shorthands.
             *
             * @private
             * @param {Object} object The object to inspect.
             * @param {Object} source The object of property values to match.
             * @param {Array} matchData The property names, values, and compare flags to match.
             * @param {Function} [customizer] The function to customize comparisons.
             * @returns {boolean} Returns `true` if `object` is a match, else `false`.
             */
            function baseIsMatch(object, source, matchData, customizer) {
                var index = matchData.length,
                    length = index,
                    noCustomizer = !customizer;

                if (object == null) {
                    return !length;
                }
                object = Object(object);
                while (index--) {
                    var data = matchData[index];
                    if ((noCustomizer && data[2])
                    ? data[1] !== object[data[0]]
                    : !(data[0] in object)
                    ) {
                        return false;
                    }
                }
                while (++index < length) {
                    data = matchData[index];
                    var key = data[0],
                        objValue = object[key],
                        srcValue = data[1];

                    if (noCustomizer && data[2]) {
                        if (objValue === undefined && !(key in object)) {
                            return false;
                        }
                    } else {
                        var stack = new Stack;
                        if (customizer) {
                            var result = customizer(objValue, srcValue, key, object, source, stack);
                        }
                        if (!(result === undefined
                        ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                        : result
                        )) {
                            return false;
                        }
                    }
                }
                return true;
            }

            module.exports = baseIsMatch;

        }, {
            "./_Stack": 382,
            "./_baseIsEqual": 402
        }],
        405: [function(require, module, exports) {
            var isFunction = require('./isFunction'),
                isMasked = require('./_isMasked'),
                isObject = require('./isObject'),
                toSource = require('./_toSource');

            /**
             * Used to match `RegExp`
             * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
             */
            var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

            /** Used to detect host constructors (Safari). */
            var reIsHostCtor = /^\[object .+?Constructor\]$/;

            /** Used for built-in method references. */
            var funcProto = Function.prototype,
                objectProto = Object.prototype;

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /** Used to detect if a method is native. */
            var reIsNative = RegExp('^' +
            funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
            .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
            );

            /**
             * The base implementation of `_.isNative` without bad shim checks.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a native function,
             *  else `false`.
             */
            function baseIsNative(value) {
                if (!isObject(value) || isMasked(value)) {
                    return false;
                }
                var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                return pattern.test(toSource(value));
            }

            module.exports = baseIsNative;

        }, {
            "./_isMasked": 452,
            "./_toSource": 487,
            "./isFunction": 497,
            "./isObject": 499
        }],
        406: [function(require, module, exports) {
            var baseGetTag = require('./_baseGetTag'),
                isLength = require('./isLength'),
                isObjectLike = require('./isObjectLike');

            /** `Object#toString` result references. */
            var argsTag = '[object Arguments]',
                arrayTag = '[object Array]',
                boolTag = '[object Boolean]',
                dateTag = '[object Date]',
                errorTag = '[object Error]',
                funcTag = '[object Function]',
                mapTag = '[object Map]',
                numberTag = '[object Number]',
                objectTag = '[object Object]',
                regexpTag = '[object RegExp]',
                setTag = '[object Set]',
                stringTag = '[object String]',
                weakMapTag = '[object WeakMap]';

            var arrayBufferTag = '[object ArrayBuffer]',
                dataViewTag = '[object DataView]',
                float32Tag = '[object Float32Array]',
                float64Tag = '[object Float64Array]',
                int8Tag = '[object Int8Array]',
                int16Tag = '[object Int16Array]',
                int32Tag = '[object Int32Array]',
                uint8Tag = '[object Uint8Array]',
                uint8ClampedTag = '[object Uint8ClampedArray]',
                uint16Tag = '[object Uint16Array]',
                uint32Tag = '[object Uint32Array]';

            /** Used to identify `toStringTag` values of typed arrays. */
            var typedArrayTags = {};
            typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
            typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
            typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
            typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
            typedArrayTags[uint32Tag] = true;
            typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
            typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
            typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
            typedArrayTags[errorTag] = typedArrayTags[funcTag] =
            typedArrayTags[mapTag] = typedArrayTags[numberTag] =
            typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
            typedArrayTags[setTag] = typedArrayTags[stringTag] =
            typedArrayTags[weakMapTag] = false;

            /**
             * The base implementation of `_.isTypedArray` without Node.js optimizations.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             */
            function baseIsTypedArray(value) {
                return isObjectLike(value) &&
                    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
            }

            module.exports = baseIsTypedArray;

        }, {
            "./_baseGetTag": 399,
            "./isLength": 498,
            "./isObjectLike": 500
        }],
        407: [function(require, module, exports) {
            var baseMatches = require('./_baseMatches'),
                baseMatchesProperty = require('./_baseMatchesProperty'),
                identity = require('./identity'),
                isArray = require('./isArray'),
                property = require('./property');

            /**
             * The base implementation of `_.iteratee`.
             *
             * @private
             * @param {*} [value=_.identity] The value to convert to an iteratee.
             * @returns {Function} Returns the iteratee.
             */
            function baseIteratee(value) {
                // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                if (typeof value == 'function') {
                    return value;
                }
                if (value == null) {
                    return identity;
                }
                if (typeof value == 'object') {
                    return isArray(value)
                    ? baseMatchesProperty(value[0], value[1])
                    : baseMatches(value);
                }
                return property(value);
            }

            module.exports = baseIteratee;

        }, {
            "./_baseMatches": 410,
            "./_baseMatchesProperty": 411,
            "./identity": 492,
            "./isArray": 494,
            "./property": 505
        }],
        408: [function(require, module, exports) {
            var isPrototype = require('./_isPrototype'),
                nativeKeys = require('./_nativeKeys');

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             */
            function baseKeys(object) {
                if (!isPrototype(object)) {
                    return nativeKeys(object);
                }
                var result = [];
                for (var key in Object(object)) {
                    if (hasOwnProperty.call(object, key) && key != 'constructor') {
                        result.push(key);
                    }
                }
                return result;
            }

            module.exports = baseKeys;

        }, {
            "./_isPrototype": 453,
            "./_nativeKeys": 469
        }],
        409: [function(require, module, exports) {
            var baseEach = require('./_baseEach'),
                isArrayLike = require('./isArrayLike');

            /**
             * The base implementation of `_.map` without support for iteratee shorthands.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the new mapped array.
             */
            function baseMap(collection, iteratee) {
                var index = -1,
                    result = isArrayLike(collection) ? Array(collection.length) : [];

                baseEach(collection, function(value, key, collection) {
                    result[++index] = iteratee(value, key, collection);
                });
                return result;
            }

            module.exports = baseMap;

        }, {
            "./_baseEach": 393,
            "./isArrayLike": 495
        }],
        410: [function(require, module, exports) {
            var baseIsMatch = require('./_baseIsMatch'),
                getMatchData = require('./_getMatchData'),
                matchesStrictComparable = require('./_matchesStrictComparable');

            /**
             * The base implementation of `_.matches` which doesn't clone `source`.
             *
             * @private
             * @param {Object} source The object of property values to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatches(source) {
                var matchData = getMatchData(source);
                if (matchData.length == 1 && matchData[0][2]) {
                    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                }
                return function(object) {
                    return object === source || baseIsMatch(object, source, matchData);
                };
            }

            module.exports = baseMatches;

        }, {
            "./_baseIsMatch": 404,
            "./_getMatchData": 435,
            "./_matchesStrictComparable": 466
        }],
        411: [function(require, module, exports) {
            var baseIsEqual = require('./_baseIsEqual'),
                get = require('./get'),
                hasIn = require('./hasIn'),
                isKey = require('./_isKey'),
                isStrictComparable = require('./_isStrictComparable'),
                matchesStrictComparable = require('./_matchesStrictComparable'),
                toKey = require('./_toKey');

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1,
                COMPARE_UNORDERED_FLAG = 2;

            /**
             * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
             *
             * @private
             * @param {string} path The path of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function baseMatchesProperty(path, srcValue) {
                if (isKey(path) && isStrictComparable(srcValue)) {
                    return matchesStrictComparable(toKey(path), srcValue);
                }
                return function(object) {
                    var objValue = get(object, path);
                    return (objValue === undefined && objValue === srcValue)
                    ? hasIn(object, path)
                    : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                };
            }

            module.exports = baseMatchesProperty;

        }, {
            "./_baseIsEqual": 402,
            "./_isKey": 450,
            "./_isStrictComparable": 454,
            "./_matchesStrictComparable": 466,
            "./_toKey": 486,
            "./get": 490,
            "./hasIn": 491
        }],
        412: [function(require, module, exports) {
            var arrayMap = require('./_arrayMap'),
                baseGet = require('./_baseGet'),
                baseIteratee = require('./_baseIteratee'),
                baseMap = require('./_baseMap'),
                baseSortBy = require('./_baseSortBy'),
                baseUnary = require('./_baseUnary'),
                compareMultiple = require('./_compareMultiple'),
                identity = require('./identity'),
                isArray = require('./isArray');

            /**
             * The base implementation of `_.orderBy` without param guards.
             *
             * @private
             * @param {Array|Object} collection The collection to iterate over.
             * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
             * @param {string[]} orders The sort orders of `iteratees`.
             * @returns {Array} Returns the new sorted array.
             */
            function baseOrderBy(collection, iteratees, orders) {
                if (iteratees.length) {
                    iteratees = arrayMap(iteratees, function(iteratee) {
                        if (isArray(iteratee)) {
                            return function(value) {
                                return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
                            }
                        }
                        return iteratee;
                    });
                } else {
                    iteratees = [identity];
                }

                var index = -1;
                iteratees = arrayMap(iteratees, baseUnary(baseIteratee));

                var result = baseMap(collection, function(value, key, collection) {
                    var criteria = arrayMap(iteratees, function(iteratee) {
                        return iteratee(value);
                    });
                    return {
                        'criteria': criteria,
                        'index': ++index,
                        'value': value
                    };
                });

                return baseSortBy(result, function(object, other) {
                    return compareMultiple(object, other, orders);
                });
            }

            module.exports = baseOrderBy;

        }, {
            "./_arrayMap": 389,
            "./_baseGet": 397,
            "./_baseIteratee": 407,
            "./_baseMap": 409,
            "./_baseSortBy": 417,
            "./_baseUnary": 420,
            "./_compareMultiple": 424,
            "./identity": 492,
            "./isArray": 494
        }],
        413: [function(require, module, exports) {
            /**
             * The base implementation of `_.property` without support for deep paths.
             *
             * @private
             * @param {string} key The key of the property to get.
             * @returns {Function} Returns the new accessor function.
             */
            function baseProperty(key) {
                return function(object) {
                    return object == null ? undefined : object[key];
                };
            }

            module.exports = baseProperty;

        }, {}],
        414: [function(require, module, exports) {
            var baseGet = require('./_baseGet');

            /**
             * A specialized version of `baseProperty` which supports deep paths.
             *
             * @private
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             */
            function basePropertyDeep(path) {
                return function(object) {
                    return baseGet(object, path);
                };
            }

            module.exports = basePropertyDeep;

        }, {
            "./_baseGet": 397
        }],
        415: [function(require, module, exports) {
            var identity = require('./identity'),
                overRest = require('./_overRest'),
                setToString = require('./_setToString');

            /**
             * The base implementation of `_.rest` which doesn't validate or coerce arguments.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @returns {Function} Returns the new function.
             */
            function baseRest(func, start) {
                return setToString(overRest(func, start, identity), func + '');
            }

            module.exports = baseRest;

        }, {
            "./_overRest": 473,
            "./_setToString": 478,
            "./identity": 492
        }],
        416: [function(require, module, exports) {
            var constant = require('./constant'),
                defineProperty = require('./_defineProperty'),
                identity = require('./identity');

            /**
             * The base implementation of `setToString` without support for hot loop shorting.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var baseSetToString = !defineProperty ? identity : function(func, string) {
                return defineProperty(func, 'toString', {
                    'configurable': true,
                    'enumerable': false,
                    'value': constant(string),
                    'writable': true
                });
            };

            module.exports = baseSetToString;

        }, {
            "./_defineProperty": 428,
            "./constant": 488,
            "./identity": 492
        }],
        417: [function(require, module, exports) {
            /**
             * The base implementation of `_.sortBy` which uses `comparer` to define the
             * sort order of `array` and replaces criteria objects with their corresponding
             * values.
             *
             * @private
             * @param {Array} array The array to sort.
             * @param {Function} comparer The function to define sort order.
             * @returns {Array} Returns `array`.
             */
            function baseSortBy(array, comparer) {
                var length = array.length;

                array.sort(comparer);
                while (length--) {
                    array[length] = array[length].value;
                }
                return array;
            }

            module.exports = baseSortBy;

        }, {}],
        418: [function(require, module, exports) {
            /**
             * The base implementation of `_.times` without support for iteratee shorthands
             * or max array length checks.
             *
             * @private
             * @param {number} n The number of times to invoke `iteratee`.
             * @param {Function} iteratee The function invoked per iteration.
             * @returns {Array} Returns the array of results.
             */
            function baseTimes(n, iteratee) {
                var index = -1,
                    result = Array(n);

                while (++index < n) {
                    result[index] = iteratee(index);
                }
                return result;
            }

            module.exports = baseTimes;

        }, {}],
        419: [function(require, module, exports) {
            var Symbol = require('./_Symbol'),
                arrayMap = require('./_arrayMap'),
                isArray = require('./isArray'),
                isSymbol = require('./isSymbol');

            /** Used as references for various `Number` constants. */
            var INFINITY = 1 / 0;

            /** Used to convert symbols to primitives and strings. */
            var symbolProto = Symbol ? Symbol.prototype : undefined,
                symbolToString = symbolProto ? symbolProto.toString : undefined;

            /**
             * The base implementation of `_.toString` which doesn't convert nullish
             * values to empty strings.
             *
             * @private
             * @param {*} value The value to process.
             * @returns {string} Returns the string.
             */
            function baseToString(value) {
                // Exit early for strings to avoid a performance hit in some environments.
                if (typeof value == 'string') {
                    return value;
                }
                if (isArray(value)) {
                    // Recursively convert values (susceptible to call stack limits).
                    return arrayMap(value, baseToString) + '';
                }
                if (isSymbol(value)) {
                    return symbolToString ? symbolToString.call(value) : '';
                }
                var result = (value + '');
                return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
            }

            module.exports = baseToString;

        }, {
            "./_Symbol": 383,
            "./_arrayMap": 389,
            "./isArray": 494,
            "./isSymbol": 501
        }],
        420: [function(require, module, exports) {
            /**
             * The base implementation of `_.unary` without support for storing metadata.
             *
             * @private
             * @param {Function} func The function to cap arguments for.
             * @returns {Function} Returns the new capped function.
             */
            function baseUnary(func) {
                return function(value) {
                    return func(value);
                };
            }

            module.exports = baseUnary;

        }, {}],
        421: [function(require, module, exports) {
            /**
             * Checks if a `cache` value for `key` exists.
             *
             * @private
             * @param {Object} cache The cache to query.
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function cacheHas(cache, key) {
                return cache.has(key);
            }

            module.exports = cacheHas;

        }, {}],
        422: [function(require, module, exports) {
            var isArray = require('./isArray'),
                isKey = require('./_isKey'),
                stringToPath = require('./_stringToPath'),
                toString = require('./toString');

            /**
             * Casts `value` to a path array if it's not one.
             *
             * @private
             * @param {*} value The value to inspect.
             * @param {Object} [object] The object to query keys on.
             * @returns {Array} Returns the cast property path array.
             */
            function castPath(value, object) {
                if (isArray(value)) {
                    return value;
                }
                return isKey(value, object) ? [value] : stringToPath(toString(value));
            }

            module.exports = castPath;

        }, {
            "./_isKey": 450,
            "./_stringToPath": 485,
            "./isArray": 494,
            "./toString": 509
        }],
        423: [function(require, module, exports) {
            var isSymbol = require('./isSymbol');

            /**
             * Compares values to sort them in ascending order.
             *
             * @private
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {number} Returns the sort order indicator for `value`.
             */
            function compareAscending(value, other) {
                if (value !== other) {
                    var valIsDefined = value !== undefined,
                        valIsNull = value === null,
                        valIsReflexive = value === value,
                        valIsSymbol = isSymbol(value);

                    var othIsDefined = other !== undefined,
                        othIsNull = other === null,
                        othIsReflexive = other === other,
                        othIsSymbol = isSymbol(other);

                    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                    (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                    (valIsNull && othIsDefined && othIsReflexive) ||
                    (!valIsDefined && othIsReflexive) ||
                    !valIsReflexive) {
                        return 1;
                    }
                    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                    (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                    (othIsNull && valIsDefined && valIsReflexive) ||
                    (!othIsDefined && valIsReflexive) ||
                    !othIsReflexive) {
                        return -1;
                    }
                }
                return 0;
            }

            module.exports = compareAscending;

        }, {
            "./isSymbol": 501
        }],
        424: [function(require, module, exports) {
            var compareAscending = require('./_compareAscending');

            /**
             * Used by `_.orderBy` to compare multiple properties of a value to another
             * and stable sort them.
             *
             * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
             * specify an order of "desc" for descending or "asc" for ascending sort order
             * of corresponding values.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {boolean[]|string[]} orders The order to sort by for each property.
             * @returns {number} Returns the sort order indicator for `object`.
             */
            function compareMultiple(object, other, orders) {
                var index = -1,
                    objCriteria = object.criteria,
                    othCriteria = other.criteria,
                    length = objCriteria.length,
                    ordersLength = orders.length;

                while (++index < length) {
                    var result = compareAscending(objCriteria[index], othCriteria[index]);
                    if (result) {
                        if (index >= ordersLength) {
                            return result;
                        }
                        var order = orders[index];
                        return result * (order == 'desc' ? -1 : 1);
                    }
                }
                // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
                // that causes it, under certain circumstances, to provide the same value for
                // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
                // for more details.
                //
                // This also ensures a stable sort in V8 and other engines.
                // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
                return object.index - other.index;
            }

            module.exports = compareMultiple;

        }, {
            "./_compareAscending": 423
        }],
        425: [function(require, module, exports) {
            var root = require('./_root');

            /** Used to detect overreaching core-js shims. */
            var coreJsData = root['__core-js_shared__'];

            module.exports = coreJsData;

        }, {
            "./_root": 474
        }],
        426: [function(require, module, exports) {
            var isArrayLike = require('./isArrayLike');

            /**
             * Creates a `baseEach` or `baseEachRight` function.
             *
             * @private
             * @param {Function} eachFunc The function to iterate over a collection.
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseEach(eachFunc, fromRight) {
                return function(collection, iteratee) {
                    if (collection == null) {
                        return collection;
                    }
                    if (!isArrayLike(collection)) {
                        return eachFunc(collection, iteratee);
                    }
                    var length = collection.length,
                        index = fromRight ? length : -1,
                        iterable = Object(collection);

                    while ((fromRight ? index-- : ++index < length)) {
                        if (iteratee(iterable[index], index, iterable) === false) {
                            break;
                        }
                    }
                    return collection;
                };
            }

            module.exports = createBaseEach;

        }, {
            "./isArrayLike": 495
        }],
        427: [function(require, module, exports) {
            /**
             * Creates a base function for methods like `_.forIn` and `_.forOwn`.
             *
             * @private
             * @param {boolean} [fromRight] Specify iterating from right to left.
             * @returns {Function} Returns the new base function.
             */
            function createBaseFor(fromRight) {
                return function(object, iteratee, keysFunc) {
                    var index = -1,
                        iterable = Object(object),
                        props = keysFunc(object),
                        length = props.length;

                    while (length--) {
                        var key = props[fromRight ? length : ++index];
                        if (iteratee(iterable[key], key, iterable) === false) {
                            break;
                        }
                    }
                    return object;
                };
            }

            module.exports = createBaseFor;

        }, {}],
        428: [function(require, module, exports) {
            var getNative = require('./_getNative');

            var defineProperty = (function() {
                try {
                    var func = getNative(Object, 'defineProperty');
                    func({}, '', {});
                    return func;
                } catch (e) {}
            }());

            module.exports = defineProperty;

        }, {
            "./_getNative": 436
        }],
        429: [function(require, module, exports) {
            var SetCache = require('./_SetCache'),
                arraySome = require('./_arraySome'),
                cacheHas = require('./_cacheHas');

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1,
                COMPARE_UNORDERED_FLAG = 2;

            /**
             * A specialized version of `baseIsEqualDeep` for arrays with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Array} array The array to compare.
             * @param {Array} other The other array to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `array` and `other` objects.
             * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
             */
            function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                    arrLength = array.length,
                    othLength = other.length;

                if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                    return false;
                }
                // Check that cyclic values are equal.
                var arrStacked = stack.get(array);
                var othStacked = stack.get(other);
                if (arrStacked && othStacked) {
                    return arrStacked == other && othStacked == array;
                }
                var index = -1,
                    result = true,
                    seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

                stack.set(array, other);
                stack.set(other, array);

                // Ignore non-index properties.
                while (++index < arrLength) {
                    var arrValue = array[index],
                        othValue = other[index];

                    if (customizer) {
                        var compared = isPartial
                        ? customizer(othValue, arrValue, index, other, array, stack)
                        : customizer(arrValue, othValue, index, array, other, stack);
                    }
                    if (compared !== undefined) {
                        if (compared) {
                            continue;
                        }
                        result = false;
                        break;
                    }
                    // Recursively compare arrays (susceptible to call stack limits).
                    if (seen) {
                        if (!arraySome(other, function(othValue, othIndex) {
                            if (!cacheHas(seen, othIndex) &&
                            (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                                return seen.push(othIndex);
                            }
                        })) {
                            result = false;
                            break;
                        }
                    } else if (!(
                    arrValue === othValue ||
                    equalFunc(arrValue, othValue, bitmask, customizer, stack)
                    )) {
                        result = false;
                        break;
                    }
                }
                stack['delete'](array);
                stack['delete'](other);
                return result;
            }

            module.exports = equalArrays;

        }, {
            "./_SetCache": 381,
            "./_arraySome": 391,
            "./_cacheHas": 421
        }],
        430: [function(require, module, exports) {
            var Symbol = require('./_Symbol'),
                Uint8Array = require('./_Uint8Array'),
                eq = require('./eq'),
                equalArrays = require('./_equalArrays'),
                mapToArray = require('./_mapToArray'),
                setToArray = require('./_setToArray');

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1,
                COMPARE_UNORDERED_FLAG = 2;

            /** `Object#toString` result references. */
            var boolTag = '[object Boolean]',
                dateTag = '[object Date]',
                errorTag = '[object Error]',
                mapTag = '[object Map]',
                numberTag = '[object Number]',
                regexpTag = '[object RegExp]',
                setTag = '[object Set]',
                stringTag = '[object String]',
                symbolTag = '[object Symbol]';

            var arrayBufferTag = '[object ArrayBuffer]',
                dataViewTag = '[object DataView]';

            /** Used to convert symbols to primitives and strings. */
            var symbolProto = Symbol ? Symbol.prototype : undefined,
                symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

            /**
             * A specialized version of `baseIsEqualDeep` for comparing objects of
             * the same `toStringTag`.
             *
             * **Note:** This function only supports comparing values with tags of
             * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {string} tag The `toStringTag` of the objects to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                switch (tag) {
                case dataViewTag:
                    if ((object.byteLength != other.byteLength) ||
                    (object.byteOffset != other.byteOffset)) {
                        return false;
                    }
                    object = object.buffer;
                    other = other.buffer;

                case arrayBufferTag:
                    if ((object.byteLength != other.byteLength) ||
                    !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                        return false;
                    }
                    return true;

                case boolTag:
                case dateTag:
                case numberTag:
                    // Coerce booleans to `1` or `0` and dates to milliseconds.
                    // Invalid dates are coerced to `NaN`.
                    return eq(+object, +other);

                case errorTag:
                    return object.name == other.name && object.message == other.message;

                case regexpTag:
                case stringTag:
                    // Coerce regexes to strings and treat strings, primitives and objects,
                    // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                    // for more details.
                    return object == (other + '');

                case mapTag:
                    var convert = mapToArray;

                case setTag:
                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                    convert || (convert = setToArray);

                    if (object.size != other.size && !isPartial) {
                        return false;
                    }
                    // Assume cyclic values are equal.
                    var stacked = stack.get(object);
                    if (stacked) {
                        return stacked == other;
                    }
                    bitmask |= COMPARE_UNORDERED_FLAG;

                    // Recursively compare objects (susceptible to call stack limits).
                    stack.set(object, other);
                    var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                    stack['delete'](object);
                    return result;

                case symbolTag:
                    if (symbolValueOf) {
                        return symbolValueOf.call(object) == symbolValueOf.call(other);
                    }
                }
                return false;
            }

            module.exports = equalByTag;

        }, {
            "./_Symbol": 383,
            "./_Uint8Array": 384,
            "./_equalArrays": 429,
            "./_mapToArray": 465,
            "./_setToArray": 477,
            "./eq": 489
        }],
        431: [function(require, module, exports) {
            var getAllKeys = require('./_getAllKeys');

            /** Used to compose bitmasks for value comparisons. */
            var COMPARE_PARTIAL_FLAG = 1;

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * A specialized version of `baseIsEqualDeep` for objects with support for
             * partial deep comparisons.
             *
             * @private
             * @param {Object} object The object to compare.
             * @param {Object} other The other object to compare.
             * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
             * @param {Function} customizer The function to customize comparisons.
             * @param {Function} equalFunc The function to determine equivalents of values.
             * @param {Object} stack Tracks traversed `object` and `other` objects.
             * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
             */
            function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                    objProps = getAllKeys(object),
                    objLength = objProps.length,
                    othProps = getAllKeys(other),
                    othLength = othProps.length;

                if (objLength != othLength && !isPartial) {
                    return false;
                }
                var index = objLength;
                while (index--) {
                    var key = objProps[index];
                    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                        return false;
                    }
                }
                // Check that cyclic values are equal.
                var objStacked = stack.get(object);
                var othStacked = stack.get(other);
                if (objStacked && othStacked) {
                    return objStacked == other && othStacked == object;
                }
                var result = true;
                stack.set(object, other);
                stack.set(other, object);

                var skipCtor = isPartial;
                while (++index < objLength) {
                    key = objProps[index];
                    var objValue = object[key],
                        othValue = other[key];

                    if (customizer) {
                        var compared = isPartial
                        ? customizer(othValue, objValue, key, other, object, stack)
                        : customizer(objValue, othValue, key, object, other, stack);
                    }
                    // Recursively compare objects (susceptible to call stack limits).
                    if (!(compared === undefined
                    ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                    : compared
                    )) {
                        result = false;
                        break;
                    }
                    skipCtor || (skipCtor = key == 'constructor');
                }
                if (result && !skipCtor) {
                    var objCtor = object.constructor,
                        othCtor = other.constructor;

                    // Non `Object` object instances with different constructors are not equal.
                    if (objCtor != othCtor &&
                    ('constructor' in object && 'constructor' in other) &&
                    !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                    typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                        result = false;
                    }
                }
                stack['delete'](object);
                stack['delete'](other);
                return result;
            }

            module.exports = equalObjects;

        }, {
            "./_getAllKeys": 433
        }],
        432: [function(require, module, exports) {
            (function(global) {
                (function() {
                    /** Detect free variable `global` from Node.js. */
                    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

                    module.exports = freeGlobal;

                }).call(this)
            }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

        }, {}],
        433: [function(require, module, exports) {
            var baseGetAllKeys = require('./_baseGetAllKeys'),
                getSymbols = require('./_getSymbols'),
                keys = require('./keys');

            /**
             * Creates an array of own enumerable property names and symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names and symbols.
             */
            function getAllKeys(object) {
                return baseGetAllKeys(object, keys, getSymbols);
            }

            module.exports = getAllKeys;

        }, {
            "./_baseGetAllKeys": 398,
            "./_getSymbols": 438,
            "./keys": 503
        }],
        434: [function(require, module, exports) {
            var isKeyable = require('./_isKeyable');

            /**
             * Gets the data for `map`.
             *
             * @private
             * @param {Object} map The map to query.
             * @param {string} key The reference key.
             * @returns {*} Returns the map data.
             */
            function getMapData(map, key) {
                var data = map.__data__;
                return isKeyable(key)
                ? data[typeof key == 'string' ? 'string' : 'hash']
                : data.map;
            }

            module.exports = getMapData;

        }, {
            "./_isKeyable": 451
        }],
        435: [function(require, module, exports) {
            var isStrictComparable = require('./_isStrictComparable'),
                keys = require('./keys');

            /**
             * Gets the property names, values, and compare flags of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the match data of `object`.
             */
            function getMatchData(object) {
                var result = keys(object),
                    length = result.length;

                while (length--) {
                    var key = result[length],
                        value = object[key];

                    result[length] = [key, value, isStrictComparable(value)];
                }
                return result;
            }

            module.exports = getMatchData;

        }, {
            "./_isStrictComparable": 454,
            "./keys": 503
        }],
        436: [function(require, module, exports) {
            var baseIsNative = require('./_baseIsNative'),
                getValue = require('./_getValue');

            /**
             * Gets the native function at `key` of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {string} key The key of the method to get.
             * @returns {*} Returns the function if it's native, else `undefined`.
             */
            function getNative(object, key) {
                var value = getValue(object, key);
                return baseIsNative(value) ? value : undefined;
            }

            module.exports = getNative;

        }, {
            "./_baseIsNative": 405,
            "./_getValue": 440
        }],
        437: [function(require, module, exports) {
            var Symbol = require('./_Symbol');

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString = objectProto.toString;

            /** Built-in value references. */
            var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

            /**
             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the raw `toStringTag`.
             */
            function getRawTag(value) {
                var isOwn = hasOwnProperty.call(value, symToStringTag),
                    tag = value[symToStringTag];

                try {
                    value[symToStringTag] = undefined;
                    var unmasked = true;
                } catch (e) {}

                var result = nativeObjectToString.call(value);
                if (unmasked) {
                    if (isOwn) {
                        value[symToStringTag] = tag;
                    } else {
                        delete value[symToStringTag];
                    }
                }
                return result;
            }

            module.exports = getRawTag;

        }, {
            "./_Symbol": 383
        }],
        438: [function(require, module, exports) {
            var arrayFilter = require('./_arrayFilter'),
                stubArray = require('./stubArray');

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Built-in value references. */
            var propertyIsEnumerable = objectProto.propertyIsEnumerable;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeGetSymbols = Object.getOwnPropertySymbols;

            /**
             * Creates an array of the own enumerable symbols of `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of symbols.
             */
            var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
                if (object == null) {
                    return [];
                }
                object = Object(object);
                return arrayFilter(nativeGetSymbols(object), function(symbol) {
                    return propertyIsEnumerable.call(object, symbol);
                });
            };

            module.exports = getSymbols;

        }, {
            "./_arrayFilter": 387,
            "./stubArray": 507
        }],
        439: [function(require, module, exports) {
            var DataView = require('./_DataView'),
                Map = require('./_Map'),
                Promise = require('./_Promise'),
                Set = require('./_Set'),
                WeakMap = require('./_WeakMap'),
                baseGetTag = require('./_baseGetTag'),
                toSource = require('./_toSource');

            /** `Object#toString` result references. */
            var mapTag = '[object Map]',
                objectTag = '[object Object]',
                promiseTag = '[object Promise]',
                setTag = '[object Set]',
                weakMapTag = '[object WeakMap]';

            var dataViewTag = '[object DataView]';

            /** Used to detect maps, sets, and weakmaps. */
            var dataViewCtorString = toSource(DataView),
                mapCtorString = toSource(Map),
                promiseCtorString = toSource(Promise),
                setCtorString = toSource(Set),
                weakMapCtorString = toSource(WeakMap);

            /**
             * Gets the `toStringTag` of `value`.
             *
             * @private
             * @param {*} value The value to query.
             * @returns {string} Returns the `toStringTag`.
             */
            var getTag = baseGetTag;

            // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
            if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
            (Map && getTag(new Map) != mapTag) ||
            (Promise && getTag(Promise.resolve()) != promiseTag) ||
            (Set && getTag(new Set) != setTag) ||
            (WeakMap && getTag(new WeakMap) != weakMapTag)) {
                getTag = function(value) {
                    var result = baseGetTag(value),
                        Ctor = result == objectTag ? value.constructor : undefined,
                        ctorString = Ctor ? toSource(Ctor) : '';

                    if (ctorString) {
                        switch (ctorString) {
                        case dataViewCtorString:
                            return dataViewTag;
                        case mapCtorString:
                            return mapTag;
                        case promiseCtorString:
                            return promiseTag;
                        case setCtorString:
                            return setTag;
                        case weakMapCtorString:
                            return weakMapTag;
                        }
                    }
                    return result;
                };
            }

            module.exports = getTag;

        }, {
            "./_DataView": 374,
            "./_Map": 377,
            "./_Promise": 379,
            "./_Set": 380,
            "./_WeakMap": 385,
            "./_baseGetTag": 399,
            "./_toSource": 487
        }],
        440: [function(require, module, exports) {
            /**
             * Gets the value at `key` of `object`.
             *
             * @private
             * @param {Object} [object] The object to query.
             * @param {string} key The key of the property to get.
             * @returns {*} Returns the property value.
             */
            function getValue(object, key) {
                return object == null ? undefined : object[key];
            }

            module.exports = getValue;

        }, {}],
        441: [function(require, module, exports) {
            var castPath = require('./_castPath'),
                isArguments = require('./isArguments'),
                isArray = require('./isArray'),
                isIndex = require('./_isIndex'),
                isLength = require('./isLength'),
                toKey = require('./_toKey');

            /**
             * Checks if `path` exists on `object`.
             *
             * @private
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @param {Function} hasFunc The function to check properties.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             */
            function hasPath(object, path, hasFunc) {
                path = castPath(path, object);

                var index = -1,
                    length = path.length,
                    result = false;

                while (++index < length) {
                    var key = toKey(path[index]);
                    if (!(result = object != null && hasFunc(object, key))) {
                        break;
                    }
                    object = object[key];
                }
                if (result || ++index != length) {
                    return result;
                }
                length = object == null ? 0 : object.length;
                return !!length && isLength(length) && isIndex(key, length) &&
                    (isArray(object) || isArguments(object));
            }

            module.exports = hasPath;

        }, {
            "./_castPath": 422,
            "./_isIndex": 448,
            "./_toKey": 486,
            "./isArguments": 493,
            "./isArray": 494,
            "./isLength": 498
        }],
        442: [function(require, module, exports) {
            var nativeCreate = require('./_nativeCreate');

            /**
             * Removes all key-value entries from the hash.
             *
             * @private
             * @name clear
             * @memberOf Hash
             */
            function hashClear() {
                this.__data__ = nativeCreate ? nativeCreate(null) : {};
                this.size = 0;
            }

            module.exports = hashClear;

        }, {
            "./_nativeCreate": 468
        }],
        443: [function(require, module, exports) {
            /**
             * Removes `key` and its value from the hash.
             *
             * @private
             * @name delete
             * @memberOf Hash
             * @param {Object} hash The hash to modify.
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function hashDelete(key) {
                var result = this.has(key) && delete this.__data__[key];
                this.size -= result ? 1 : 0;
                return result;
            }

            module.exports = hashDelete;

        }, {}],
        444: [function(require, module, exports) {
            var nativeCreate = require('./_nativeCreate');

            /** Used to stand-in for `undefined` hash values. */
            var HASH_UNDEFINED = '__lodash_hash_undefined__';

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * Gets the hash value for `key`.
             *
             * @private
             * @name get
             * @memberOf Hash
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function hashGet(key) {
                var data = this.__data__;
                if (nativeCreate) {
                    var result = data[key];
                    return result === HASH_UNDEFINED ? undefined : result;
                }
                return hasOwnProperty.call(data, key) ? data[key] : undefined;
            }

            module.exports = hashGet;

        }, {
            "./_nativeCreate": 468
        }],
        445: [function(require, module, exports) {
            var nativeCreate = require('./_nativeCreate');

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /**
             * Checks if a hash value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Hash
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function hashHas(key) {
                var data = this.__data__;
                return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
            }

            module.exports = hashHas;

        }, {
            "./_nativeCreate": 468
        }],
        446: [function(require, module, exports) {
            var nativeCreate = require('./_nativeCreate');

            /** Used to stand-in for `undefined` hash values. */
            var HASH_UNDEFINED = '__lodash_hash_undefined__';

            /**
             * Sets the hash `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Hash
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the hash instance.
             */
            function hashSet(key, value) {
                var data = this.__data__;
                this.size += this.has(key) ? 0 : 1;
                data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
                return this;
            }

            module.exports = hashSet;

        }, {
            "./_nativeCreate": 468
        }],
        447: [function(require, module, exports) {
            var Symbol = require('./_Symbol'),
                isArguments = require('./isArguments'),
                isArray = require('./isArray');

            /** Built-in value references. */
            var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

            /**
             * Checks if `value` is a flattenable `arguments` object or array.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
             */
            function isFlattenable(value) {
                return isArray(value) || isArguments(value) ||
                    !!(spreadableSymbol && value && value[spreadableSymbol]);
            }

            module.exports = isFlattenable;

        }, {
            "./_Symbol": 383,
            "./isArguments": 493,
            "./isArray": 494
        }],
        448: [function(require, module, exports) {
            /** Used as references for various `Number` constants. */
            var MAX_SAFE_INTEGER = 9007199254740991;

            /** Used to detect unsigned integer values. */
            var reIsUint = /^(?:0|[1-9]\d*)$/;

            /**
             * Checks if `value` is a valid array-like index.
             *
             * @private
             * @param {*} value The value to check.
             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
             */
            function isIndex(value, length) {
                var type = typeof value;
                length = length == null ? MAX_SAFE_INTEGER : length;

                return !!length &&
                    (type == 'number' ||
                    (type != 'symbol' && reIsUint.test(value))) &&
                    (value > -1 && value % 1 == 0 && value < length);
            }

            module.exports = isIndex;

        }, {}],
        449: [function(require, module, exports) {
            var eq = require('./eq'),
                isArrayLike = require('./isArrayLike'),
                isIndex = require('./_isIndex'),
                isObject = require('./isObject');

            /**
             * Checks if the given arguments are from an iteratee call.
             *
             * @private
             * @param {*} value The potential iteratee value argument.
             * @param {*} index The potential iteratee index or key argument.
             * @param {*} object The potential iteratee object argument.
             * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
             *  else `false`.
             */
            function isIterateeCall(value, index, object) {
                if (!isObject(object)) {
                    return false;
                }
                var type = typeof index;
                if (type == 'number'
                ? (isArrayLike(object) && isIndex(index, object.length))
                : (type == 'string' && index in object)
                ) {
                    return eq(object[index], value);
                }
                return false;
            }

            module.exports = isIterateeCall;

        }, {
            "./_isIndex": 448,
            "./eq": 489,
            "./isArrayLike": 495,
            "./isObject": 499
        }],
        450: [function(require, module, exports) {
            var isArray = require('./isArray'),
                isSymbol = require('./isSymbol');

            /** Used to match property names within property paths. */
            var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                reIsPlainProp = /^\w*$/;

            /**
             * Checks if `value` is a property name and not a property path.
             *
             * @private
             * @param {*} value The value to check.
             * @param {Object} [object] The object to query keys on.
             * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
             */
            function isKey(value, object) {
                if (isArray(value)) {
                    return false;
                }
                var type = typeof value;
                if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                value == null || isSymbol(value)) {
                    return true;
                }
                return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                    (object != null && value in Object(object));
            }

            module.exports = isKey;

        }, {
            "./isArray": 494,
            "./isSymbol": 501
        }],
        451: [function(require, module, exports) {
            /**
             * Checks if `value` is suitable for use as unique object key.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
             */
            function isKeyable(value) {
                var type = typeof value;
                return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
                ? (value !== '__proto__')
                : (value === null);
            }

            module.exports = isKeyable;

        }, {}],
        452: [function(require, module, exports) {
            var coreJsData = require('./_coreJsData');

            /** Used to detect methods masquerading as native. */
            var maskSrcKey = (function() {
                var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
                return uid ? ('Symbol(src)_1.' + uid) : '';
            }());

            /**
             * Checks if `func` has its source masked.
             *
             * @private
             * @param {Function} func The function to check.
             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
             */
            function isMasked(func) {
                return !!maskSrcKey && (maskSrcKey in func);
            }

            module.exports = isMasked;

        }, {
            "./_coreJsData": 425
        }],
        453: [function(require, module, exports) {
            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /**
             * Checks if `value` is likely a prototype object.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
             */
            function isPrototype(value) {
                var Ctor = value && value.constructor,
                    proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

                return value === proto;
            }

            module.exports = isPrototype;

        }, {}],
        454: [function(require, module, exports) {
            var isObject = require('./isObject');

            /**
             * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` if suitable for strict
             *  equality comparisons, else `false`.
             */
            function isStrictComparable(value) {
                return value === value && !isObject(value);
            }

            module.exports = isStrictComparable;

        }, {
            "./isObject": 499
        }],
        455: [function(require, module, exports) {
            /**
             * Removes all key-value entries from the list cache.
             *
             * @private
             * @name clear
             * @memberOf ListCache
             */
            function listCacheClear() {
                this.__data__ = [];
                this.size = 0;
            }

            module.exports = listCacheClear;

        }, {}],
        456: [function(require, module, exports) {
            var assocIndexOf = require('./_assocIndexOf');

            /** Used for built-in method references. */
            var arrayProto = Array.prototype;

            /** Built-in value references. */
            var splice = arrayProto.splice;

            /**
             * Removes `key` and its value from the list cache.
             *
             * @private
             * @name delete
             * @memberOf ListCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function listCacheDelete(key) {
                var data = this.__data__,
                    index = assocIndexOf(data, key);

                if (index < 0) {
                    return false;
                }
                var lastIndex = data.length - 1;
                if (index == lastIndex) {
                    data.pop();
                } else {
                    splice.call(data, index, 1);
                }
                --this.size;
                return true;
            }

            module.exports = listCacheDelete;

        }, {
            "./_assocIndexOf": 392
        }],
        457: [function(require, module, exports) {
            var assocIndexOf = require('./_assocIndexOf');

            /**
             * Gets the list cache value for `key`.
             *
             * @private
             * @name get
             * @memberOf ListCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function listCacheGet(key) {
                var data = this.__data__,
                    index = assocIndexOf(data, key);

                return index < 0 ? undefined : data[index][1];
            }

            module.exports = listCacheGet;

        }, {
            "./_assocIndexOf": 392
        }],
        458: [function(require, module, exports) {
            var assocIndexOf = require('./_assocIndexOf');

            /**
             * Checks if a list cache value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf ListCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function listCacheHas(key) {
                return assocIndexOf(this.__data__, key) > -1;
            }

            module.exports = listCacheHas;

        }, {
            "./_assocIndexOf": 392
        }],
        459: [function(require, module, exports) {
            var assocIndexOf = require('./_assocIndexOf');

            /**
             * Sets the list cache `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf ListCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the list cache instance.
             */
            function listCacheSet(key, value) {
                var data = this.__data__,
                    index = assocIndexOf(data, key);

                if (index < 0) {
                    ++this.size;
                    data.push([key, value]);
                } else {
                    data[index][1] = value;
                }
                return this;
            }

            module.exports = listCacheSet;

        }, {
            "./_assocIndexOf": 392
        }],
        460: [function(require, module, exports) {
            var Hash = require('./_Hash'),
                ListCache = require('./_ListCache'),
                Map = require('./_Map');

            /**
             * Removes all key-value entries from the map.
             *
             * @private
             * @name clear
             * @memberOf MapCache
             */
            function mapCacheClear() {
                this.size = 0;
                this.__data__ = {
                    'hash': new Hash,
                    'map': new (Map || ListCache),
                    'string': new Hash
                };
            }

            module.exports = mapCacheClear;

        }, {
            "./_Hash": 375,
            "./_ListCache": 376,
            "./_Map": 377
        }],
        461: [function(require, module, exports) {
            var getMapData = require('./_getMapData');

            /**
             * Removes `key` and its value from the map.
             *
             * @private
             * @name delete
             * @memberOf MapCache
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function mapCacheDelete(key) {
                var result = getMapData(this, key)['delete'](key);
                this.size -= result ? 1 : 0;
                return result;
            }

            module.exports = mapCacheDelete;

        }, {
            "./_getMapData": 434
        }],
        462: [function(require, module, exports) {
            var getMapData = require('./_getMapData');

            /**
             * Gets the map value for `key`.
             *
             * @private
             * @name get
             * @memberOf MapCache
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function mapCacheGet(key) {
                return getMapData(this, key).get(key);
            }

            module.exports = mapCacheGet;

        }, {
            "./_getMapData": 434
        }],
        463: [function(require, module, exports) {
            var getMapData = require('./_getMapData');

            /**
             * Checks if a map value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf MapCache
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function mapCacheHas(key) {
                return getMapData(this, key).has(key);
            }

            module.exports = mapCacheHas;

        }, {
            "./_getMapData": 434
        }],
        464: [function(require, module, exports) {
            var getMapData = require('./_getMapData');

            /**
             * Sets the map `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf MapCache
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the map cache instance.
             */
            function mapCacheSet(key, value) {
                var data = getMapData(this, key),
                    size = data.size;

                data.set(key, value);
                this.size += data.size == size ? 0 : 1;
                return this;
            }

            module.exports = mapCacheSet;

        }, {
            "./_getMapData": 434
        }],
        465: [function(require, module, exports) {
            /**
             * Converts `map` to its key-value pairs.
             *
             * @private
             * @param {Object} map The map to convert.
             * @returns {Array} Returns the key-value pairs.
             */
            function mapToArray(map) {
                var index = -1,
                    result = Array(map.size);

                map.forEach(function(value, key) {
                    result[++index] = [key, value];
                });
                return result;
            }

            module.exports = mapToArray;

        }, {}],
        466: [function(require, module, exports) {
            /**
             * A specialized version of `matchesProperty` for source values suitable
             * for strict equality comparisons, i.e. `===`.
             *
             * @private
             * @param {string} key The key of the property to get.
             * @param {*} srcValue The value to match.
             * @returns {Function} Returns the new spec function.
             */
            function matchesStrictComparable(key, srcValue) {
                return function(object) {
                    if (object == null) {
                        return false;
                    }
                    return object[key] === srcValue &&
                        (srcValue !== undefined || (key in Object(object)));
                };
            }

            module.exports = matchesStrictComparable;

        }, {}],
        467: [function(require, module, exports) {
            var memoize = require('./memoize');

            /** Used as the maximum memoize cache size. */
            var MAX_MEMOIZE_SIZE = 500;

            /**
             * A specialized version of `_.memoize` which clears the memoized function's
             * cache when it exceeds `MAX_MEMOIZE_SIZE`.
             *
             * @private
             * @param {Function} func The function to have its output memoized.
             * @returns {Function} Returns the new memoized function.
             */
            function memoizeCapped(func) {
                var result = memoize(func, function(key) {
                    if (cache.size === MAX_MEMOIZE_SIZE) {
                        cache.clear();
                    }
                    return key;
                });

                var cache = result.cache;
                return result;
            }

            module.exports = memoizeCapped;

        }, {
            "./memoize": 504
        }],
        468: [function(require, module, exports) {
            var getNative = require('./_getNative');

            /* Built-in method references that are verified to be native. */
            var nativeCreate = getNative(Object, 'create');

            module.exports = nativeCreate;

        }, {
            "./_getNative": 436
        }],
        469: [function(require, module, exports) {
            var overArg = require('./_overArg');

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeKeys = overArg(Object.keys, Object);

            module.exports = nativeKeys;

        }, {
            "./_overArg": 472
        }],
        470: [function(require, module, exports) {
            var freeGlobal = require('./_freeGlobal');

            /** Detect free variable `exports`. */
            var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

            /** Detect free variable `module`. */
            var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

            /** Detect the popular CommonJS extension `module.exports`. */
            var moduleExports = freeModule && freeModule.exports === freeExports;

            /** Detect free variable `process` from Node.js. */
            var freeProcess = moduleExports && freeGlobal.process;

            /** Used to access faster Node.js helpers. */
            var nodeUtil = (function() {
                try {
                    // Use `util.types` for Node.js 10+.
                    var types = freeModule && freeModule.require && freeModule.require('util').types;

                    if (types) {
                        return types;
                    }

                    // Legacy `process.binding('util')` for Node.js < 10.
                    return freeProcess && freeProcess.binding && freeProcess.binding('util');
                } catch (e) {}
            }());

            module.exports = nodeUtil;

        }, {
            "./_freeGlobal": 432
        }],
        471: [function(require, module, exports) {
            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /**
             * Used to resolve the
             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
             * of values.
             */
            var nativeObjectToString = objectProto.toString;

            /**
             * Converts `value` to a string using `Object.prototype.toString`.
             *
             * @private
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             */
            function objectToString(value) {
                return nativeObjectToString.call(value);
            }

            module.exports = objectToString;

        }, {}],
        472: [function(require, module, exports) {
            /**
             * Creates a unary function that invokes `func` with its argument transformed.
             *
             * @private
             * @param {Function} func The function to wrap.
             * @param {Function} transform The argument transform.
             * @returns {Function} Returns the new function.
             */
            function overArg(func, transform) {
                return function(arg) {
                    return func(transform(arg));
                };
            }

            module.exports = overArg;

        }, {}],
        473: [function(require, module, exports) {
            var apply = require('./_apply');

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeMax = Math.max;

            /**
             * A specialized version of `baseRest` which transforms the rest array.
             *
             * @private
             * @param {Function} func The function to apply a rest parameter to.
             * @param {number} [start=func.length-1] The start position of the rest parameter.
             * @param {Function} transform The rest array transform.
             * @returns {Function} Returns the new function.
             */
            function overRest(func, start, transform) {
                start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
                return function() {
                    var args = arguments,
                        index = -1,
                        length = nativeMax(args.length - start, 0),
                        array = Array(length);

                    while (++index < length) {
                        array[index] = args[start + index];
                    }
                    index = -1;
                    var otherArgs = Array(start + 1);
                    while (++index < start) {
                        otherArgs[index] = args[index];
                    }
                    otherArgs[start] = transform(array);
                    return apply(func, this, otherArgs);
                };
            }

            module.exports = overRest;

        }, {
            "./_apply": 386
        }],
        474: [function(require, module, exports) {
            var freeGlobal = require('./_freeGlobal');

            /** Detect free variable `self`. */
            var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

            /** Used as a reference to the global object. */
            var root = freeGlobal || freeSelf || Function('return this')();

            module.exports = root;

        }, {
            "./_freeGlobal": 432
        }],
        475: [function(require, module, exports) {
            /** Used to stand-in for `undefined` hash values. */
            var HASH_UNDEFINED = '__lodash_hash_undefined__';

            /**
             * Adds `value` to the array cache.
             *
             * @private
             * @name add
             * @memberOf SetCache
             * @alias push
             * @param {*} value The value to cache.
             * @returns {Object} Returns the cache instance.
             */
            function setCacheAdd(value) {
                this.__data__.set(value, HASH_UNDEFINED);
                return this;
            }

            module.exports = setCacheAdd;

        }, {}],
        476: [function(require, module, exports) {
            /**
             * Checks if `value` is in the array cache.
             *
             * @private
             * @name has
             * @memberOf SetCache
             * @param {*} value The value to search for.
             * @returns {number} Returns `true` if `value` is found, else `false`.
             */
            function setCacheHas(value) {
                return this.__data__.has(value);
            }

            module.exports = setCacheHas;

        }, {}],
        477: [function(require, module, exports) {
            /**
             * Converts `set` to an array of its values.
             *
             * @private
             * @param {Object} set The set to convert.
             * @returns {Array} Returns the values.
             */
            function setToArray(set) {
                var index = -1,
                    result = Array(set.size);

                set.forEach(function(value) {
                    result[++index] = value;
                });
                return result;
            }

            module.exports = setToArray;

        }, {}],
        478: [function(require, module, exports) {
            var baseSetToString = require('./_baseSetToString'),
                shortOut = require('./_shortOut');

            /**
             * Sets the `toString` method of `func` to return `string`.
             *
             * @private
             * @param {Function} func The function to modify.
             * @param {Function} string The `toString` result.
             * @returns {Function} Returns `func`.
             */
            var setToString = shortOut(baseSetToString);

            module.exports = setToString;

        }, {
            "./_baseSetToString": 416,
            "./_shortOut": 479
        }],
        479: [function(require, module, exports) {
            /** Used to detect hot functions by number of calls within a span of milliseconds. */
            var HOT_COUNT = 800,
                HOT_SPAN = 16;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeNow = Date.now;

            /**
             * Creates a function that'll short out and invoke `identity` instead
             * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
             * milliseconds.
             *
             * @private
             * @param {Function} func The function to restrict.
             * @returns {Function} Returns the new shortable function.
             */
            function shortOut(func) {
                var count = 0,
                    lastCalled = 0;

                return function() {
                    var stamp = nativeNow(),
                        remaining = HOT_SPAN - (stamp - lastCalled);

                    lastCalled = stamp;
                    if (remaining > 0) {
                        if (++count >= HOT_COUNT) {
                            return arguments[0];
                        }
                    } else {
                        count = 0;
                    }
                    return func.apply(undefined, arguments);
                };
            }

            module.exports = shortOut;

        }, {}],
        480: [function(require, module, exports) {
            var ListCache = require('./_ListCache');

            /**
             * Removes all key-value entries from the stack.
             *
             * @private
             * @name clear
             * @memberOf Stack
             */
            function stackClear() {
                this.__data__ = new ListCache;
                this.size = 0;
            }

            module.exports = stackClear;

        }, {
            "./_ListCache": 376
        }],
        481: [function(require, module, exports) {
            /**
             * Removes `key` and its value from the stack.
             *
             * @private
             * @name delete
             * @memberOf Stack
             * @param {string} key The key of the value to remove.
             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
             */
            function stackDelete(key) {
                var data = this.__data__,
                    result = data['delete'](key);

                this.size = data.size;
                return result;
            }

            module.exports = stackDelete;

        }, {}],
        482: [function(require, module, exports) {
            /**
             * Gets the stack value for `key`.
             *
             * @private
             * @name get
             * @memberOf Stack
             * @param {string} key The key of the value to get.
             * @returns {*} Returns the entry value.
             */
            function stackGet(key) {
                return this.__data__.get(key);
            }

            module.exports = stackGet;

        }, {}],
        483: [function(require, module, exports) {
            /**
             * Checks if a stack value for `key` exists.
             *
             * @private
             * @name has
             * @memberOf Stack
             * @param {string} key The key of the entry to check.
             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
             */
            function stackHas(key) {
                return this.__data__.has(key);
            }

            module.exports = stackHas;

        }, {}],
        484: [function(require, module, exports) {
            var ListCache = require('./_ListCache'),
                Map = require('./_Map'),
                MapCache = require('./_MapCache');

            /** Used as the size to enable large array optimizations. */
            var LARGE_ARRAY_SIZE = 200;

            /**
             * Sets the stack `key` to `value`.
             *
             * @private
             * @name set
             * @memberOf Stack
             * @param {string} key The key of the value to set.
             * @param {*} value The value to set.
             * @returns {Object} Returns the stack cache instance.
             */
            function stackSet(key, value) {
                var data = this.__data__;
                if (data instanceof ListCache) {
                    var pairs = data.__data__;
                    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                        pairs.push([key, value]);
                        this.size = ++data.size;
                        return this;
                    }
                    data = this.__data__ = new MapCache(pairs);
                }
                data.set(key, value);
                this.size = data.size;
                return this;
            }

            module.exports = stackSet;

        }, {
            "./_ListCache": 376,
            "./_Map": 377,
            "./_MapCache": 378
        }],
        485: [function(require, module, exports) {
            var memoizeCapped = require('./_memoizeCapped');

            /** Used to match property names within property paths. */
            var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

            /** Used to match backslashes in property paths. */
            var reEscapeChar = /\\(\\)?/g;

            /**
             * Converts `string` to a property path array.
             *
             * @private
             * @param {string} string The string to convert.
             * @returns {Array} Returns the property path array.
             */
            var stringToPath = memoizeCapped(function(string) {
                var result = [];
                if (string.charCodeAt(0) === 46 /* . */
                ) {
                    result.push('');
                }
                string.replace(rePropName, function(match, number, quote, subString) {
                    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
                });
                return result;
            });

            module.exports = stringToPath;

        }, {
            "./_memoizeCapped": 467
        }],
        486: [function(require, module, exports) {
            var isSymbol = require('./isSymbol');

            /** Used as references for various `Number` constants. */
            var INFINITY = 1 / 0;

            /**
             * Converts `value` to a string key if it's not a string or symbol.
             *
             * @private
             * @param {*} value The value to inspect.
             * @returns {string|symbol} Returns the key.
             */
            function toKey(value) {
                if (typeof value == 'string' || isSymbol(value)) {
                    return value;
                }
                var result = (value + '');
                return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
            }

            module.exports = toKey;

        }, {
            "./isSymbol": 501
        }],
        487: [function(require, module, exports) {
            /** Used for built-in method references. */
            var funcProto = Function.prototype;

            /** Used to resolve the decompiled source of functions. */
            var funcToString = funcProto.toString;

            /**
             * Converts `func` to its source code.
             *
             * @private
             * @param {Function} func The function to convert.
             * @returns {string} Returns the source code.
             */
            function toSource(func) {
                if (func != null) {
                    try {
                        return funcToString.call(func);
                    } catch (e) {}
                    try {
                        return ( func + '') ;
                    } catch (e) {}
                }
                return '';
            }

            module.exports = toSource;

        }, {}],
        488: [function(require, module, exports) {
            /**
             * Creates a function that returns `value`.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {*} value The value to return from the new function.
             * @returns {Function} Returns the new constant function.
             * @example
             *
             * var objects = _.times(2, _.constant({ 'a': 1 }));
             *
             * console.log(objects);
             * // => [{ 'a': 1 }, { 'a': 1 }]
             *
             * console.log(objects[0] === objects[1]);
             * // => true
             */
            function constant(value) {
                return function() {
                    return value;
                };
            }

            module.exports = constant;

        }, {}],
        489: [function(require, module, exports) {
            /**
             * Performs a
             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
             * comparison between two values to determine if they are equivalent.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to compare.
             * @param {*} other The other value to compare.
             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
             * @example
             *
             * var object = { 'a': 1 };
             * var other = { 'a': 1 };
             *
             * _.eq(object, object);
             * // => true
             *
             * _.eq(object, other);
             * // => false
             *
             * _.eq('a', 'a');
             * // => true
             *
             * _.eq('a', Object('a'));
             * // => false
             *
             * _.eq(NaN, NaN);
             * // => true
             */
            function eq(value, other) {
                return value === other || (value !== value && other !== other);
            }

            module.exports = eq;

        }, {}],
        490: [function(require, module, exports) {
            var baseGet = require('./_baseGet');

            /**
             * Gets the value at `path` of `object`. If the resolved value is
             * `undefined`, the `defaultValue` is returned in its place.
             *
             * @static
             * @memberOf _
             * @since 3.7.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path of the property to get.
             * @param {*} [defaultValue] The value returned for `undefined` resolved values.
             * @returns {*} Returns the resolved value.
             * @example
             *
             * var object = { 'a': [{ 'b': { 'c': 3 } }] };
             *
             * _.get(object, 'a[0].b.c');
             * // => 3
             *
             * _.get(object, ['a', '0', 'b', 'c']);
             * // => 3
             *
             * _.get(object, 'a.b.c', 'default');
             * // => 'default'
             */
            function get(object, path, defaultValue) {
                var result = object == null ? undefined : baseGet(object, path);
                return result === undefined ? defaultValue : result;
            }

            module.exports = get;

        }, {
            "./_baseGet": 397
        }],
        491: [function(require, module, exports) {
            var baseHasIn = require('./_baseHasIn'),
                hasPath = require('./_hasPath');

            /**
             * Checks if `path` is a direct or inherited property of `object`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Object
             * @param {Object} object The object to query.
             * @param {Array|string} path The path to check.
             * @returns {boolean} Returns `true` if `path` exists, else `false`.
             * @example
             *
             * var object = _.create({ 'a': _.create({ 'b': 2 }) });
             *
             * _.hasIn(object, 'a');
             * // => true
             *
             * _.hasIn(object, 'a.b');
             * // => true
             *
             * _.hasIn(object, ['a', 'b']);
             * // => true
             *
             * _.hasIn(object, 'b');
             * // => false
             */
            function hasIn(object, path) {
                return object != null && hasPath(object, path, baseHasIn);
            }

            module.exports = hasIn;

        }, {
            "./_baseHasIn": 400,
            "./_hasPath": 441
        }],
        492: [function(require, module, exports) {
            /**
             * This method returns the first argument it receives.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Util
             * @param {*} value Any value.
             * @returns {*} Returns `value`.
             * @example
             *
             * var object = { 'a': 1 };
             *
             * console.log(_.identity(object) === object);
             * // => true
             */
            function identity(value) {
                return value;
            }

            module.exports = identity;

        }, {}],
        493: [function(require, module, exports) {
            var baseIsArguments = require('./_baseIsArguments'),
                isObjectLike = require('./isObjectLike');

            /** Used for built-in method references. */
            var objectProto = Object.prototype;

            /** Used to check objects for own properties. */
            var hasOwnProperty = objectProto.hasOwnProperty;

            /** Built-in value references. */
            var propertyIsEnumerable = objectProto.propertyIsEnumerable;

            /**
             * Checks if `value` is likely an `arguments` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
             *  else `false`.
             * @example
             *
             * _.isArguments(function() { return arguments; }());
             * // => true
             *
             * _.isArguments([1, 2, 3]);
             * // => false
             */
            var isArguments = baseIsArguments(function() {
                return arguments;
            }()) ? baseIsArguments : function(value) {
                return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
                    !propertyIsEnumerable.call(value, 'callee');
            };

            module.exports = isArguments;

        }, {
            "./_baseIsArguments": 401,
            "./isObjectLike": 500
        }],
        494: [function(require, module, exports) {
            /**
             * Checks if `value` is classified as an `Array` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
             * @example
             *
             * _.isArray([1, 2, 3]);
             * // => true
             *
             * _.isArray(document.body.children);
             * // => false
             *
             * _.isArray('abc');
             * // => false
             *
             * _.isArray(_.noop);
             * // => false
             */
            var isArray = Array.isArray;

            module.exports = isArray;

        }, {}],
        495: [function(require, module, exports) {
            var isFunction = require('./isFunction'),
                isLength = require('./isLength');

            /**
             * Checks if `value` is array-like. A value is considered array-like if it's
             * not a function and has a `value.length` that's an integer greater than or
             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
             * @example
             *
             * _.isArrayLike([1, 2, 3]);
             * // => true
             *
             * _.isArrayLike(document.body.children);
             * // => true
             *
             * _.isArrayLike('abc');
             * // => true
             *
             * _.isArrayLike(_.noop);
             * // => false
             */
            function isArrayLike(value) {
                return value != null && isLength(value.length) && !isFunction(value);
            }

            module.exports = isArrayLike;

        }, {
            "./isFunction": 497,
            "./isLength": 498
        }],
        496: [function(require, module, exports) {
            var root = require('./_root'),
                stubFalse = require('./stubFalse');

            /** Detect free variable `exports`. */
            var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

            /** Detect free variable `module`. */
            var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

            /** Detect the popular CommonJS extension `module.exports`. */
            var moduleExports = freeModule && freeModule.exports === freeExports;

            /** Built-in value references. */
            var Buffer = moduleExports ? root.Buffer : undefined;

            /* Built-in method references for those with the same name as other `lodash` methods. */
            var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

            /**
             * Checks if `value` is a buffer.
             *
             * @static
             * @memberOf _
             * @since 4.3.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
             * @example
             *
             * _.isBuffer(new Buffer(2));
             * // => true
             *
             * _.isBuffer(new Uint8Array(2));
             * // => false
             */
            var isBuffer = nativeIsBuffer || stubFalse;

            module.exports = isBuffer;

        }, {
            "./_root": 474,
            "./stubFalse": 508
        }],
        497: [function(require, module, exports) {
            var baseGetTag = require('./_baseGetTag'),
                isObject = require('./isObject');

            /** `Object#toString` result references. */
            var asyncTag = '[object AsyncFunction]',
                funcTag = '[object Function]',
                genTag = '[object GeneratorFunction]',
                proxyTag = '[object Proxy]';

            /**
             * Checks if `value` is classified as a `Function` object.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
             * @example
             *
             * _.isFunction(_);
             * // => true
             *
             * _.isFunction(/abc/);
             * // => false
             */
            function isFunction(value) {
                if (!isObject(value)) {
                    return false;
                }
                // The use of `Object#toString` avoids issues with the `typeof` operator
                // in Safari 9 which returns 'object' for typed arrays and other constructors.
                var tag = baseGetTag(value);
                return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
            }

            module.exports = isFunction;

        }, {
            "./_baseGetTag": 399,
            "./isObject": 499
        }],
        498: [function(require, module, exports) {
            /** Used as references for various `Number` constants. */
            var MAX_SAFE_INTEGER = 9007199254740991;

            /**
             * Checks if `value` is a valid array-like length.
             *
             * **Note:** This method is loosely based on
             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
             * @example
             *
             * _.isLength(3);
             * // => true
             *
             * _.isLength(Number.MIN_VALUE);
             * // => false
             *
             * _.isLength(Infinity);
             * // => false
             *
             * _.isLength('3');
             * // => false
             */
            function isLength(value) {
                return typeof value == 'number' &&
                    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
            }

            module.exports = isLength;

        }, {}],
        499: [function(require, module, exports) {
            /**
             * Checks if `value` is the
             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
             * @example
             *
             * _.isObject({});
             * // => true
             *
             * _.isObject([1, 2, 3]);
             * // => true
             *
             * _.isObject(_.noop);
             * // => true
             *
             * _.isObject(null);
             * // => false
             */
            function isObject(value) {
                var type = typeof value;
                return value != null && (type == 'object' || type == 'function');
            }

            module.exports = isObject;

        }, {}],
        500: [function(require, module, exports) {
            /**
             * Checks if `value` is object-like. A value is object-like if it's not `null`
             * and has a `typeof` result of "object".
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
             * @example
             *
             * _.isObjectLike({});
             * // => true
             *
             * _.isObjectLike([1, 2, 3]);
             * // => true
             *
             * _.isObjectLike(_.noop);
             * // => false
             *
             * _.isObjectLike(null);
             * // => false
             */
            function isObjectLike(value) {
                return value != null && typeof value == 'object';
            }

            module.exports = isObjectLike;

        }, {}],
        501: [function(require, module, exports) {
            var baseGetTag = require('./_baseGetTag'),
                isObjectLike = require('./isObjectLike');

            /** `Object#toString` result references. */
            var symbolTag = '[object Symbol]';

            /**
             * Checks if `value` is classified as a `Symbol` primitive or object.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
             * @example
             *
             * _.isSymbol(Symbol.iterator);
             * // => true
             *
             * _.isSymbol('abc');
             * // => false
             */
            function isSymbol(value) {
                return typeof value == 'symbol' ||
                    (isObjectLike(value) && baseGetTag(value) == symbolTag);
            }

            module.exports = isSymbol;

        }, {
            "./_baseGetTag": 399,
            "./isObjectLike": 500
        }],
        502: [function(require, module, exports) {
            var baseIsTypedArray = require('./_baseIsTypedArray'),
                baseUnary = require('./_baseUnary'),
                nodeUtil = require('./_nodeUtil');

            /* Node.js helper references. */
            var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

            /**
             * Checks if `value` is classified as a typed array.
             *
             * @static
             * @memberOf _
             * @since 3.0.0
             * @category Lang
             * @param {*} value The value to check.
             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
             * @example
             *
             * _.isTypedArray(new Uint8Array);
             * // => true
             *
             * _.isTypedArray([]);
             * // => false
             */
            var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

            module.exports = isTypedArray;

        }, {
            "./_baseIsTypedArray": 406,
            "./_baseUnary": 420,
            "./_nodeUtil": 470
        }],
        503: [function(require, module, exports) {
            var arrayLikeKeys = require('./_arrayLikeKeys'),
                baseKeys = require('./_baseKeys'),
                isArrayLike = require('./isArrayLike');

            /**
             * Creates an array of the own enumerable property names of `object`.
             *
             * **Note:** Non-object values are coerced to objects. See the
             * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
             * for more details.
             *
             * @static
             * @since 0.1.0
             * @memberOf _
             * @category Object
             * @param {Object} object The object to query.
             * @returns {Array} Returns the array of property names.
             * @example
             *
             * function Foo() {
             *   this.a = 1;
             *   this.b = 2;
             * }
             *
             * Foo.prototype.c = 3;
             *
             * _.keys(new Foo);
             * // => ['a', 'b'] (iteration order is not guaranteed)
             *
             * _.keys('hi');
             * // => ['0', '1']
             */
            function keys(object) {
                return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
            }

            module.exports = keys;

        }, {
            "./_arrayLikeKeys": 388,
            "./_baseKeys": 408,
            "./isArrayLike": 495
        }],
        504: [function(require, module, exports) {
            var MapCache = require('./_MapCache');

            /** Error message constants. */
            var FUNC_ERROR_TEXT = 'Expected a function';

            /**
             * Creates a function that memoizes the result of `func`. If `resolver` is
             * provided, it determines the cache key for storing the result based on the
             * arguments provided to the memoized function. By default, the first argument
             * provided to the memoized function is used as the map cache key. The `func`
             * is invoked with the `this` binding of the memoized function.
             *
             * **Note:** The cache is exposed as the `cache` property on the memoized
             * function. Its creation may be customized by replacing the `_.memoize.Cache`
             * constructor with one whose instances implement the
             * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
             * method interface of `clear`, `delete`, `get`, `has`, and `set`.
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Function
             * @param {Function} func The function to have its output memoized.
             * @param {Function} [resolver] The function to resolve the cache key.
             * @returns {Function} Returns the new memoized function.
             * @example
             *
             * var object = { 'a': 1, 'b': 2 };
             * var other = { 'c': 3, 'd': 4 };
             *
             * var values = _.memoize(_.values);
             * values(object);
             * // => [1, 2]
             *
             * values(other);
             * // => [3, 4]
             *
             * object.a = 2;
             * values(object);
             * // => [1, 2]
             *
             * // Modify the result cache.
             * values.cache.set(object, ['a', 'b']);
             * values(object);
             * // => ['a', 'b']
             *
             * // Replace `_.memoize.Cache`.
             * _.memoize.Cache = WeakMap;
             */
            function memoize(func, resolver) {
                if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                var memoized = function() {
                    var args = arguments,
                        key = resolver ? resolver.apply(this, args) : args[0],
                        cache = memoized.cache;

                    if (cache.has(key)) {
                        return cache.get(key);
                    }
                    var result = func.apply(this, args);
                    memoized.cache = cache.set(key, result) || cache;
                    return result;
                };
                memoized.cache = new (memoize.Cache || MapCache);
                return memoized;
            }

            // Expose `MapCache`.
            memoize.Cache = MapCache;

            module.exports = memoize;

        }, {
            "./_MapCache": 378
        }],
        505: [function(require, module, exports) {
            var baseProperty = require('./_baseProperty'),
                basePropertyDeep = require('./_basePropertyDeep'),
                isKey = require('./_isKey'),
                toKey = require('./_toKey');

            /**
             * Creates a function that returns the value at `path` of a given object.
             *
             * @static
             * @memberOf _
             * @since 2.4.0
             * @category Util
             * @param {Array|string} path The path of the property to get.
             * @returns {Function} Returns the new accessor function.
             * @example
             *
             * var objects = [
             *   { 'a': { 'b': 2 } },
             *   { 'a': { 'b': 1 } }
             * ];
             *
             * _.map(objects, _.property('a.b'));
             * // => [2, 1]
             *
             * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
             * // => [1, 2]
             */
            function property(path) {
                return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
            }

            module.exports = property;

        }, {
            "./_baseProperty": 413,
            "./_basePropertyDeep": 414,
            "./_isKey": 450,
            "./_toKey": 486
        }],
        506: [function(require, module, exports) {
            var baseFlatten = require('./_baseFlatten'),
                baseOrderBy = require('./_baseOrderBy'),
                baseRest = require('./_baseRest'),
                isIterateeCall = require('./_isIterateeCall');

            /**
             * Creates an array of elements, sorted in ascending order by the results of
             * running each element in a collection thru each iteratee. This method
             * performs a stable sort, that is, it preserves the original sort order of
             * equal elements. The iteratees are invoked with one argument: (value).
             *
             * @static
             * @memberOf _
             * @since 0.1.0
             * @category Collection
             * @param {Array|Object} collection The collection to iterate over.
             * @param {...(Function|Function[])} [iteratees=[_.identity]]
             *  The iteratees to sort by.
             * @returns {Array} Returns the new sorted array.
             * @example
             *
             * var users = [
             *   { 'user': 'fred',   'age': 48 },
             *   { 'user': 'barney', 'age': 36 },
             *   { 'user': 'fred',   'age': 30 },
             *   { 'user': 'barney', 'age': 34 }
             * ];
             *
             * _.sortBy(users, [function(o) { return o.user; }]);
             * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
             *
             * _.sortBy(users, ['user', 'age']);
             * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
             */
            var sortBy = baseRest(function(collection, iteratees) {
                if (collection == null) {
                    return [];
                }
                var length = iteratees.length;
                if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                    iteratees = [];
                } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                    iteratees = [iteratees[0]];
                }
                return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
            });

            module.exports = sortBy;

        }, {
            "./_baseFlatten": 394,
            "./_baseOrderBy": 412,
            "./_baseRest": 415,
            "./_isIterateeCall": 449
        }],
        507: [function(require, module, exports) {
            /**
             * This method returns a new empty array.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {Array} Returns the new empty array.
             * @example
             *
             * var arrays = _.times(2, _.stubArray);
             *
             * console.log(arrays);
             * // => [[], []]
             *
             * console.log(arrays[0] === arrays[1]);
             * // => false
             */
            function stubArray() {
                return [];
            }

            module.exports = stubArray;

        }, {}],
        508: [function(require, module, exports) {
            /**
             * This method returns `false`.
             *
             * @static
             * @memberOf _
             * @since 4.13.0
             * @category Util
             * @returns {boolean} Returns `false`.
             * @example
             *
             * _.times(2, _.stubFalse);
             * // => [false, false]
             */
            function stubFalse() {
                return false;
            }

            module.exports = stubFalse;

        }, {}],
        509: [function(require, module, exports) {
            var baseToString = require('./_baseToString');

            /**
             * Converts `value` to a string. An empty string is returned for `null`
             * and `undefined` values. The sign of `-0` is preserved.
             *
             * @static
             * @memberOf _
             * @since 4.0.0
             * @category Lang
             * @param {*} value The value to convert.
             * @returns {string} Returns the converted string.
             * @example
             *
             * _.toString(null);
             * // => ''
             *
             * _.toString(-0);
             * // => '-0'
             *
             * _.toString([1, 2, 3]);
             * // => '1,2,3'
             */
            function toString(value) {
                return value == null ? '' : baseToString(value);
            }

            module.exports = toString;

        }, {
            "./_baseToString": 419
        }],
        510: [function(require, module, exports) {
            'use strict'
            // A linked list to keep track of recently-used-ness
            const Yallist = require('yallist')

            const MAX = Symbol('max')
            const LENGTH = Symbol('length')
            const LENGTH_CALCULATOR = Symbol('lengthCalculator')
            const ALLOW_STALE = Symbol('allowStale')
            const MAX_AGE = Symbol('maxAge')
            const DISPOSE = Symbol('dispose')
            const NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')
            const LRU_LIST = Symbol('lruList')
            const CACHE = Symbol('cache')
            const UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')

            const naiveLength = () => 1
            // lruList is a yallist where the head is the youngest
            // item, and the tail is the oldest.  the list contains the Hit
            // objects as the entries.
            // Each Hit object has a reference to its Yallist.Node.  This
            // never changes.
            //
            // cache is a Map (or PseudoMap) that matches the keys to
            // the Yallist.Node object.
            class LRUCache {
                constructor(options)
                {
                    if (typeof options === 'number')
                        options = {
                            max: options
                        }

                    if (!options)
                        options = {}

                    if (options.max && (typeof options.max !== 'number' || options.max < 0))
                        throw new TypeError('max must be a non-negative number')// Kind of weird to have a default max of Infinity, but oh well.
                    const max = this[MAX] = options.max || Infinity

                    const lc = options.length || naiveLength
                    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc
                    this[ALLOW_STALE] = options.stale || false
                    if (options.maxAge && typeof options.maxAge !== 'number')
                        throw new TypeError('maxAge must be a number')
                    this[MAX_AGE] = options.maxAge || 0
                    this[DISPOSE] = options.dispose
                    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false
                    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false
                    this.reset()
                }

                // resize the cache when the max changes.
                set max(mL)
                {
                    if (typeof mL !== 'number' || mL < 0)
                        throw new TypeError('max must be a non-negative number')

                    this[MAX] = mL || Infinity
                    trim(this)
                }
                get max()
                {
                    return this[MAX]
                }

                set allowStale(allowStale)
                {
                    this[ALLOW_STALE] = !!allowStale
                }
                get allowStale()
                {
                    return this[ALLOW_STALE]
                }

                set maxAge(mA)
                {
                    if (typeof mA !== 'number')
                        throw new TypeError('maxAge must be a non-negative number')

                    this[MAX_AGE] = mA
                    trim(this)
                }
                get maxAge()
                {
                    return this[MAX_AGE]
                }

                // resize the cache when the lengthCalculator changes.
                set lengthCalculator(lC)
                {
                    if (typeof lC !== 'function')
                        lC = naiveLength

                    if (lC !== this[LENGTH_CALCULATOR]) {
                        this[LENGTH_CALCULATOR] = lC
                        this[LENGTH] = 0
                        this[LRU_LIST].forEach(hit => {
                            hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)
                            this[LENGTH] += hit.length
                        })
                    }
                    trim(this)
                }
                get lengthCalculator()
                {
                    return this[LENGTH_CALCULATOR]
                }

                get length()
                {
                    return this[LENGTH]
                }
                get itemCount()
                {
                    return this[LRU_LIST].length
                }

                rforEach(fn, thisp)
                {
                    thisp = thisp || this
                    for (let walker = this[LRU_LIST].tail; walker !== null;) {
                        const prev = walker.prev
                        forEachStep(this, fn, walker, thisp)
                        walker = prev
                    }
                }

                forEach(fn, thisp)
                {
                    thisp = thisp || this
                    for (let walker = this[LRU_LIST].head; walker !== null;) {
                        const next = walker.next
                        forEachStep(this, fn, walker, thisp)
                        walker = next
                    }
                }

                keys()
                {
                    return this[LRU_LIST].toArray().map(k => k.key)
                }

                values()
                {
                    return this[LRU_LIST].toArray().map(k => k.value)
                }

                reset()
                {
                    if (this[DISPOSE] &&
                    this[LRU_LIST] &&
                    this[LRU_LIST].length) {
                        this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))
                    }

                    this[CACHE] = new Map() // hash of items by key
                    this[LRU_LIST] = new Yallist() // list of items in order of use recency
                    this[LENGTH] = 0 // length of items in the list
                }

                dump()
                {
                    return this[LRU_LIST].map(hit =>
                    isStale(this, hit) ? false : {
                        k: hit.key,
                        v: hit.value,
                        e: hit.now + (hit.maxAge || 0)
                    }).toArray().filter(h => h)
                }

                dumpLru()
                {
                    return this[LRU_LIST]
                }

                set(key, value, maxAge)
                {
                    maxAge = maxAge || this[MAX_AGE]

                    if (maxAge && typeof maxAge !== 'number')
                        throw new TypeError('maxAge must be a number')

                    const now = maxAge ? Date.now() : 0
                    const len = this[LENGTH_CALCULATOR](value, key)

                    if (this[CACHE].has(key)) {
                        if (len > this[MAX]) {
                            del(this, this[CACHE].get(key))
                            return false
                        }

                        const node = this[CACHE].get(key)
                        const item = node.value
                        // dispose of the old one before overwriting
                        // split out into 2 ifs for better coverage tracking
                        if (this[DISPOSE]) {
                            if (!this[NO_DISPOSE_ON_SET])
                                this[DISPOSE](key, item.value)
                        }

                        item.now = now
                        item.maxAge = maxAge
                        item.value = value
                        this[LENGTH] += len - item.length
                        item.length = len
                        this.get(key)
                        trim(this)
                        return true
                    }

                    const hit = new Entry(key, value, len, now, maxAge)
                    // oversized objects fall out of cache automatically.
                    if (hit.length > this[MAX]) {
                        if (this[DISPOSE])
                            this[DISPOSE](key, value)

                        return false
                    }

                    this[LENGTH] += hit.length
                    this[LRU_LIST].unshift(hit)
                    this[CACHE].set(key, this[LRU_LIST].head)
                    trim(this)
                    return true
                }

                has(key)
                {
                    if (!this[CACHE].has(key))
                        return false
                    const hit = this[CACHE].get(key).value
                    return !isStale(this, hit)
                }

                get(key)
                {
                    return get(this, key, true)
                }

                peek(key)
                {
                    return get(this, key, false)
                }

                pop()
                {
                    const node = this[LRU_LIST].tail
                    if (!node)
                        return null

                    del(this, node)
                    return node.value
                }

                del(key)
                {
                    del(this, this[CACHE].get(key))
                }

                load(arr)
                {
                    // reset the cache
                    this.reset()

                    const now = Date.now()// A previous serialized cache has the most recent items first
                    for (let l = arr.length - 1; l >= 0; l--) {
                        const hit = arr[l]
                        const expiresAt = hit.e || 0
                        if (expiresAt === 0)// the item was created without expiration in a non aged cache
                        this.set(hit.k, hit.v)
                        else {
                            const maxAge = expiresAt - now// dont add already expired items
                            if (maxAge > 0) {
                                this.set(hit.k, hit.v, maxAge)
                            }
                        }
                    }
                }

                prune()
                {
                    this[CACHE].forEach((value, key) => get(this, key, false))
                }
            }

            const get = (self, key, doUse) => {
                const node = self[CACHE].get(key)
                if (node) {
                    const hit = node.value
                    if (isStale(self, hit)) {
                        del(self, node)
                        if (!self[ALLOW_STALE])
                            return undefined
                    } else {
                        if (doUse) {
                            if (self[UPDATE_AGE_ON_GET])
                                node.value.now = Date.now()
                            self[LRU_LIST].unshiftNode(node)
                        }
                    }
                    return hit.value
                }
            }

            const isStale = (self, hit) => {
                if (!hit || (!hit.maxAge && !self[MAX_AGE]))
                    return false

                const diff = Date.now() - hit.now
                return hit.maxAge ? diff > hit.maxAge
                : self[MAX_AGE] && (diff > self[MAX_AGE])
            }

            const trim = self => {
                if (self[LENGTH] > self[MAX]) {
                    for (let walker = self[LRU_LIST].tail;
                    self[LENGTH] > self[MAX] && walker !== null;) {
                        // We know that we're about to delete this one, and also
                        // what the next least recently used key will be, so just
                        // go ahead and set it now.
                        const prev = walker.prev
                        del(self, walker)
                        walker = prev
                    }
                }
            }

            const del = (self, node) => {
                if (node) {
                    const hit = node.value
                    if (self[DISPOSE])
                        self[DISPOSE](hit.key, hit.value)

                    self[LENGTH] -= hit.length
                    self[CACHE].delete(hit.key)
                    self[LRU_LIST].removeNode(node)
                }
            }

            class Entry {
                constructor(key, value, length, now, maxAge)
                {
                    this.key = key
                    this.value = value
                    this.length = length
                    this.now = now
                    this.maxAge = maxAge || 0
                }
            }

            const forEachStep = (self, fn, node, thisp) => {
                let hit = node.value
                if (isStale(self, hit)) {
                    del(self, node)
                    if (!self[ALLOW_STALE])
                        hit = undefined
                }
                if (hit)
                    fn.call(thisp, hit.value, hit.key, self)
            }

            module.exports = LRUCache

        }, {
            "yallist": 520
        }],
        511: [function(require, module, exports) {
            module.exports = {
                "version": "2020a",
                "zones": [
                "Africa/Abidjan|LMT GMT|g.8 0|01|-2ldXH.Q|48e5",
                "Africa/Accra|LMT GMT +0020|.Q 0 -k|012121212121212121212121212121212121212121212121|-26BbX.8 6tzX.8 MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE|41e5",
                "Africa/Nairobi|LMT EAT +0230 +0245|-2r.g -30 -2u -2J|01231|-1F3Cr.g 3Dzr.g okMu MFXJ|47e5",
                "Africa/Algiers|PMT WET WEST CET CEST|-9.l 0 -10 -10 -20|0121212121212121343431312123431213|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 DA0 Imo0 rd0 De0 9Xz0 1fb0 1ap0 16K0 2yo0 mEp0 hwL0 jxA0 11A0 dDd0 17b0 11B0 1cN0 2Dy0 1cN0 1fB0 1cL0|26e5",
                "Africa/Lagos|LMT WAT|-d.A -10|01|-22y0d.A|17e6",
                "Africa/Bissau|LMT -01 GMT|12.k 10 0|012|-2ldX0 2xoo0|39e4",
                "Africa/Maputo|LMT CAT|-2a.k -20|01|-2GJea.k|26e5",
                "Africa/Cairo|EET EEST|-20 -30|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1bIO0 vb0 1ip0 11z0 1iN0 1nz0 12p0 1pz0 10N0 1pz0 16p0 1jz0 s3d0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1WL0 rd0 1Rz0 wp0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1qL0 Xd0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1ny0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 WL0 1qN0 Rb0 1wp0 On0 1zd0 Lz0 1EN0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0|15e6",
                "Africa/Casablanca|LMT +00 +01|u.k 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0|32e5",
                "Africa/Ceuta|WET WEST CET CEST|0 -10 -10 -20|010101010101010101010232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-25KN0 11z0 drd0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1y7o0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4VB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|85e3",
                "Africa/El_Aaiun|LMT -01 +00 +01|Q.M 10 0 -10|012323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1rDz7.c 1GVA7.c 6L0 AL0 1Nd0 XX0 1Cp0 pz0 1cBB0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0|20e4",
                "Africa/Johannesburg|SAST SAST SAST|-1u -20 -30|012121|-2GJdu 1Ajdu 1cL0 1cN0 1cL0|84e5",
                "Africa/Juba|LMT CAT CAST EAT|-26.s -20 -30 -30|01212121212121212121212121212121213|-1yW26.s 1zK06.s 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0|",
                "Africa/Khartoum|LMT CAT CAST EAT|-2a.8 -20 -30 -30|012121212121212121212121212121212131|-1yW2a.8 1zK0a.8 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0 HjL0|51e5",
                "Africa/Monrovia|MMT MMT GMT|H.8 I.u 0|012|-23Lzg.Q 28G01.m|11e5",
                "Africa/Ndjamena|LMT WAT WAST|-10.c -10 -20|0121|-2le10.c 2J3c0.c Wn0|13e5",
                "Africa/Sao_Tome|LMT GMT WAT|A.J 0 -10|0121|-2le00 4i6N0 2q00|",
                "Africa/Tripoli|LMT CET CEST EET|-Q.I -10 -20 -20|012121213121212121212121213123123|-21JcQ.I 1hnBQ.I vx0 4iP0 xx0 4eN0 Bb0 7ip0 U0n0 A10 1db0 1cN0 1db0 1dd0 1db0 1eN0 1bb0 1e10 1cL0 1c10 1db0 1dd0 1db0 1cN0 1db0 1q10 fAn0 1ep0 1db0 AKq0 TA0 1o00|11e5",
                "Africa/Tunis|PMT CET CEST|-9.l -10 -20|0121212121212121212121212121212121|-2nco9.l 18pa9.l 1qM0 DA0 3Tc0 11B0 1ze0 WM0 7z0 3d0 14L0 1cN0 1f90 1ar0 16J0 1gXB0 WM0 1rA0 11c0 nwo0 Ko0 1cM0 1cM0 1rA0 10M0 zuM0 10N0 1aN0 1qM0 WM0 1qM0 11A0 1o00|20e5",
                "Africa/Windhoek|+0130 SAST SAST CAT WAT|-1u -20 -30 -20 -10|01213434343434343434343434343434343434343434343434343|-2GJdu 1Ajdu 1cL0 1SqL0 9Io0 16P0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0|32e4",
                "America/Adak|NST NWT NPT BST BDT AHST HST HDT|b0 a0 a0 b0 a0 a0 a0 90|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|326",
                "America/Anchorage|AST AWT APT AHST AHDT YST AKST AKDT|a0 90 90 a0 90 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T00 8wX0 iA0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|30e4",
                "America/Port_of_Spain|LMT AST|46.4 40|01|-2kNvR.U|43e3",
                "America/Araguaina|LMT -03 -02|3c.M 30 20|0121212121212121212121212121212121212121212121212121|-2glwL.c HdKL.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 ny10 Lz0|14e4",
                "America/Argentina/Buenos_Aires|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 A4p0 uL0 1qN0 WL0|",
                "America/Argentina/Catamarca|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 7B0 8zb0 uL0|",
                "America/Argentina/Cordoba|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0 1qN0 WL0|",
                "America/Argentina/Jujuy|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1ze0 TX0 1ld0 WK0 1wp0 TX0 A4p0 uL0|",
                "America/Argentina/La_Rioja|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0|",
                "America/Argentina/Mendoza|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232312121321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1u20 SL0 1vd0 Tb0 1wp0 TW0 ri10 Op0 7TX0 uL0|",
                "America/Argentina/Rio_Gallegos|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0|",
                "America/Argentina/Salta|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0|",
                "America/Argentina/San_Juan|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rld0 m10 8lb0 uL0|",
                "America/Argentina/San_Luis|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121212321212|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 XX0 1q20 SL0 AN0 vDb0 m10 8lb0 8L0 jd0 1qN0 WL0 1qN0|",
                "America/Argentina/Tucuman|CMT -04 -03 -02|4g.M 40 30 20|0121212121212121212121212121212121212121212323232313232123232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 4N0 8BX0 uL0 1qN0 WL0|",
                "America/Argentina/Ushuaia|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rkN0 8p0 8zb0 uL0|",
                "America/Curacao|LMT -0430 AST|4z.L 4u 40|012|-2kV7o.d 28KLS.d|15e4",
                "America/Asuncion|AMT -04 -03|3O.E 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-1x589.k 1DKM9.k 3CL0 3Dd0 10L0 1pB0 10n0 1pB0 10n0 1pB0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1lB0 14n0 1dd0 1cL0 1fd0 WL0 1rd0 1aL0 1dB0 Xz0 1qp0 Xb0 1qN0 10L0 1rB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 WN0 1qL0 11B0 1nX0 1ip0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 TX0 1tB0 19X0 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0|28e5",
                "America/Atikokan|CST CDT CWT CPT EST|60 50 50 50 50|0101234|-25TQ0 1in0 Rnb0 3je0 8x30 iw0|28e2",
                "America/Bahia_Banderas|LMT MST CST PST MDT CDT|71 70 60 80 60 50|0121212131414141414141414141414141414152525252525252525252525252525252525252525252525252525252|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|84e3",
                "America/Bahia|LMT -03 -02|2y.4 30 20|01212121212121212121212121212121212121212121212121212121212121|-2glxp.U HdLp.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 l5B0 Rb0|27e5",
                "America/Barbados|LMT BMT AST ADT|3W.t 3W.t 40 30|01232323232|-1Q0I1.v jsM0 1ODC1.v IL0 1ip0 17b0 1ip0 17b0 1ld0 13b0|28e4",
                "America/Belem|LMT -03 -02|3d.U 30 20|012121212121212121212121212121|-2glwK.4 HdKK.4 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|20e5",
                "America/Belize|LMT CST -0530 CDT|5Q.M 60 5u 50|01212121212121212121212121212121212121212121212121213131|-2kBu7.c fPA7.c Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1f0Mu qn0 lxB0 mn0|57e3",
                "America/Blanc-Sablon|AST ADT AWT APT|40 30 30 30|010230|-25TS0 1in0 UGp0 8x50 iu0|11e2",
                "America/Boa_Vista|LMT -04 -03|42.E 40 30|0121212121212121212121212121212121|-2glvV.k HdKV.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 smp0 WL0 1tB0 2L0|62e2",
                "America/Bogota|BMT -05 -04|4U.g 50 40|0121|-2eb73.I 38yo3.I 2en0|90e5",
                "America/Boise|PST PDT MST MWT MPT MDT|80 70 70 60 60 60|0101023425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-261q0 1nX0 11B0 1nX0 8C10 JCL0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 Dd0 1Kn0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e4",
                "America/Cambridge_Bay|-00 MST MWT MPT MDDT MDT CST CDT EST|0 70 60 60 50 60 60 50 50|0123141515151515151515151515151515151515151515678651515151515151515151515151515151515151515151515151515151515151515151515151|-21Jc0 RO90 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11A0 1nX0 2K0 WQ0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e2",
                "America/Campo_Grande|LMT -04 -03|3C.s 40 30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwl.w HdLl.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|77e4",
                "America/Cancun|LMT CST EST EDT CDT|5L.4 60 50 40 50|0123232341414141414141414141414141414141412|-1UQG0 2q2o0 yLB0 1lb0 14p0 1lb0 14p0 Lz0 xB0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4",
                "America/Caracas|CMT -0430 -04|4r.E 4u 40|01212|-2kV7w.k 28KM2.k 1IwOu kqo0|29e5",
                "America/Cayenne|LMT -04 -03|3t.k 40 30|012|-2mrwu.E 2gWou.E|58e3",
                "America/Panama|CMT EST|5j.A 50|01|-2uduE.o|15e5",
                "America/Chicago|CST CDT EST CWT CPT|60 50 50 50 50|01010101010101010101010101010101010102010101010103401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 1wp0 TX0 WN0 1qL0 1cN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 11B0 1Hz0 14p0 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|92e5",
                "America/Chihuahua|LMT MST CST CDT MDT|74.k 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|81e4",
                "America/Costa_Rica|SJMT CST CDT|5A.d 60 50|0121212121|-1Xd6n.L 2lu0n.L Db0 1Kp0 Db0 pRB0 15b0 1kp0 mL0|12e5",
                "America/Creston|MST PST|70 80|010|-29DR0 43B0|53e2",
                "America/Cuiaba|LMT -04 -03|3I.k 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwf.E HdLf.E 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 4a10 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|54e4",
                "America/Danmarkshavn|LMT -03 -02 GMT|1e.E 30 20 0|01212121212121212121212121212121213|-2a5WJ.k 2z5fJ.k 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 DC0|8",
                "America/Dawson_Creek|PST PDT PWT PPT MST|80 70 70 70 70|0102301010101010101010101010101010101010101010101010101014|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 ML0|12e3",
                "America/Dawson|YST YDT YWT YPT YDDT PST PDT MST|90 80 80 80 70 80 70 70|01010230405656565656565656565656565656565656565656565656565656565656565656565656565656565657|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 jrA0 fNd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|13e2",
                "America/Denver|MST MDT MWT MPT|70 60 60 60|01010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 11B0 1qL0 WN0 mn0 Ord0 8x20 ix0 LCN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e5",
                "America/Detroit|LMT CST EST EWT EPT EDT|5w.b 60 50 40 40 40|0123425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2Cgir.N peqr.N 156L0 8x40 iv0 6fd0 11z0 JxX1 SMX 1cN0 1cL0 aW10 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e5",
                "America/Edmonton|LMT MST MDT MWT MPT|7x.Q 70 60 60 60|0121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2yd4q.8 shdq.8 1in0 17d0 hz0 2dB0 1fz0 1a10 11z0 1qN0 WL0 1qN0 11z0 IGN0 8x20 ix0 3NB0 11z0 XQp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|10e5",
                "America/Eirunepe|LMT -05 -04|4D.s 50 40|0121212121212121212121212121212121|-2glvk.w HdLk.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0 yTd0 d5X0|31e3",
                "America/El_Salvador|LMT CST CDT|5U.M 60 50|012121|-1XiG3.c 2Fvc3.c WL0 1qN0 WL0|11e5",
                "America/Tijuana|LMT MST PST PDT PWT PPT|7M.4 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOO0 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|20e5",
                "America/Fort_Nelson|PST PDT PWT PPT MST|80 70 70 70 70|01023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010104|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2",
                "America/Fort_Wayne|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010101023010101010101010101040454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 QI10 Db0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 5Tz0 1o10 qLb0 1cL0 1cN0 1cL0 1qhd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "America/Fortaleza|LMT -03 -02|2y 30 20|0121212121212121212121212121212121212121|-2glxq HdLq 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 5z0 2mN0 On0|34e5",
                "America/Glace_Bay|LMT AST ADT AWT APT|3X.M 40 30 30 30|012134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsI0.c CwO0.c 1in0 UGp0 8x50 iu0 iq10 11z0 Jg10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3",
                "America/Godthab|LMT -03 -02|3q.U 30 20|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5Ux.4 2z5dx.4 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e3",
                "America/Goose_Bay|NST NDT NST NDT NWT NPT AST ADT ADDT|3u.Q 2u.Q 3u 2u 2u 2u 40 30 20|010232323232323245232323232323232323232323232323232323232326767676767676767676767676767676767676767676768676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-25TSt.8 1in0 DXb0 2HbX.8 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 S10 g0u 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|76e2",
                "America/Grand_Turk|KMT EST EDT AST|57.a 50 40 40|01212121212121212121212121212121212121212121212121212121212121212121212121232121212121212121212121212121212121212121|-2l1uQ.O 2HHBQ.O 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 5Ip0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2",
                "America/Guatemala|LMT CST CDT|62.4 60 50|0121212121|-24KhV.U 2efXV.U An0 mtd0 Nz0 ifB0 17b0 zDB0 11z0|13e5",
                "America/Guayaquil|QMT -05 -04|5e 50 40|0121|-1yVSK 2uILK rz0|27e5",
                "America/Guyana|LMT -0345 -03 -04|3Q.E 3J 30 40|0123|-2dvU7.k 2r6LQ.k Bxbf|80e4",
                "America/Halifax|LMT AST ADT AWT APT|4e.o 40 30 30 30|0121212121212121212121212121212121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsHJ.A xzzJ.A 1db0 3I30 1in0 3HX0 IL0 1E10 ML0 1yN0 Pb0 1Bd0 Mn0 1Bd0 Rz0 1w10 Xb0 1w10 LX0 1w10 Xb0 1w10 Lz0 1C10 Jz0 1E10 OL0 1yN0 Un0 1qp0 Xb0 1qp0 11X0 1w10 Lz0 1HB0 LX0 1C10 FX0 1w10 Xb0 1qp0 Xb0 1BB0 LX0 1td0 Xb0 1qp0 Xb0 Rf0 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 6i10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|39e4",
                "America/Havana|HMT CST CDT|5t.A 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Meuu.o 72zu.o ML0 sld0 An0 1Nd0 Db0 1Nd0 An0 6Ep0 An0 1Nd0 An0 JDd0 Mn0 1Ap0 On0 1fd0 11X0 1qN0 WL0 1wp0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 14n0 1ld0 14L0 1kN0 15b0 1kp0 1cL0 1cN0 1fz0 1a10 1fz0 1fB0 11z0 14p0 1nX0 11B0 1nX0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 1a10 1in0 1a10 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 17c0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 11A0 6i00 Rc0 1wo0 U00 1tA0 Rc0 1wo0 U00 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0|21e5",
                "America/Hermosillo|LMT MST CST PST MDT|7n.Q 70 60 80 60|0121212131414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0|64e4",
                "America/Indiana/Knox|CST CDT CWT CPT EST|60 50 50 50 50|0101023010101010101010101010101010101040101010101010101010101010101010101010101010101010141010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 3Cn0 8wp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 z8o0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "America/Indiana/Marengo|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010104545454545414545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 dyN0 11z0 6fd0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1e6p0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "America/Indiana/Petersburg|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010104010101010101010101010141014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 3Fb0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 19co0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "America/Indiana/Tell_City|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010401054541010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 8wn0 1cN0 1cL0 1cN0 1cK0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "America/Indiana/Vevay|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010102304545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 kPB0 Awn0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1lnd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "America/Indiana/Vincennes|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "America/Indiana/Winamac|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010101010454541054545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1za0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "America/Inuvik|-00 PST PDDT MST MDT|0 80 60 70 60|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-FnA0 tWU0 1fA0 wPe0 2pz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|35e2",
                "America/Iqaluit|-00 EWT EPT EST EDDT EDT CST CDT|0 40 40 50 30 40 60 50|01234353535353535353535353535353535353535353567353535353535353535353535353535353535353535353535353535353535353535353535353|-16K00 7nX0 iv0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|67e2",
                "America/Jamaica|KMT EST EDT|57.a 50 40|0121212121212121212121|-2l1uQ.O 2uM1Q.O 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0|94e4",
                "America/Juneau|PST PWT PPT PDT YDT YST AKST AKDT|80 70 70 70 80 90 90 80|01203030303030303030303030403030356767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cM0 1cM0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|33e3",
                "America/Kentucky/Louisville|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101010102301010101010101010101010101454545454545414545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 3Fd0 Nb0 LPd0 11z0 RB0 8x30 iw0 1nX1 e0X 9vd0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 xz0 gso0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "America/Kentucky/Monticello|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 SWp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "America/La_Paz|CMT BST -04|4w.A 3w.A 40|012|-1x37r.o 13b0|19e5",
                "America/Lima|LMT -05 -04|58.A 50 40|0121212121212121|-2tyGP.o 1bDzP.o zX0 1aN0 1cL0 1cN0 1cL0 1PrB0 zX0 1O10 zX0 6Gp0 zX0 98p0 zX0|11e6",
                "America/Los_Angeles|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 5Wp1 1VaX 3dA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e6",
                "America/Maceio|LMT -03 -02|2m.Q 30 20|012121212121212121212121212121212121212121|-2glxB.8 HdLB.8 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 8Q10 WL0 1tB0 5z0 2mN0 On0|93e4",
                "America/Managua|MMT CST EST CDT|5J.c 60 50 50|0121313121213131|-1quie.M 1yAMe.M 4mn0 9Up0 Dz0 1K10 Dz0 s3F0 1KH0 DB0 9In0 k8p0 19X0 1o30 11y0|22e5",
                "America/Manaus|LMT -04 -03|40.4 40 30|01212121212121212121212121212121|-2glvX.U HdKX.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0|19e5",
                "America/Martinique|FFMT AST ADT|44.k 40 30|0121|-2mPTT.E 2LPbT.E 19X0|39e4",
                "America/Matamoros|LMT CST CDT|6E 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|45e4",
                "America/Mazatlan|LMT MST CST PST MDT|75.E 70 60 80 60|0121212131414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|44e4",
                "America/Menominee|CST CDT CWT CPT EST|60 50 50 50 50|01010230101041010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 LCN0 1fz0 6410 9Jb0 1cM0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|85e2",
                "America/Merida|LMT CST EST CDT|5W.s 60 50 50|0121313131313131313131313131313131313131313131313131313131313131313131313131313131313131|-1UQG0 2q2o0 2hz0 wu30 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|11e5",
                "America/Metlakatla|PST PWT PPT PDT AKST AKDT|80 70 70 70 90 80|01203030303030303030303030303030304545450454545454545454545454545454545454545454|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1hU10 Rd0 1zb0 Op0 1zb0 Op0 1zb0 uM0 jB0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2",
                "America/Mexico_City|LMT MST CST CDT CWT|6A.A 70 60 50 50|012121232324232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 gEn0 TX0 3xd0 Jb0 6zB0 SL0 e5d0 17b0 1Pff0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|20e6",
                "America/Miquelon|LMT AST -03 -02|3I.E 40 30 20|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2mKkf.k 2LTAf.k gQ10 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|61e2",
                "America/Moncton|EST AST ADT AWT APT|50 40 30 30 30|012121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsH0 CwN0 1in0 zAo0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1K10 Lz0 1zB0 NX0 1u10 Wn0 S20 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14n1 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 ReX 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|64e3",
                "America/Monterrey|LMT CST CDT|6F.g 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|41e5",
                "America/Montevideo|LMT MMT -04 -03 -0330 -0230 -02 -0130|3I.P 3I.P 40 30 3u 2u 20 1u|012343434343434343434343435353636353636375363636363636363636363636363636363636363636363|-2tRUf.9 sVc0 8jcf.9 1db0 1dcu 1cLu 1dcu 1cLu ircu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu WLu 1fAu 1cLu 1o0u 11zu NAu 3jXu zXu Dq0u 19Xu pcu jz0 cm10 19X0 6tB0 1fbu 3o0u jX0 4vB0 xz0 3Cp0 mmu 1a10 IMu Db0 4c10 uL0 1Nd0 An0 1SN0 uL0 mp0 28L0 iPB0 un0 1SN0 xz0 1zd0 Lz0 1zd0 Rb0 1zd0 On0 1wp0 Rb0 s8p0 1fB0 1ip0 11z0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0|17e5",
                "America/Toronto|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 11Wu 1nzu 1fD0 WJ0 1wr0 Nb0 1Ap0 On0 1zd0 On0 1wp0 TX0 1tB0 TX0 1tB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kM0 8x40 iv0 1o10 11z0 1nX0 11z0 1o10 11z0 1o10 1qL0 11D0 1nX0 11B0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e5",
                "America/Nassau|LMT EST EDT|59.u 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2kNuO.u 26XdO.u 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|24e4",
                "America/New_York|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 11B0 1qL0 1a10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e6",
                "America/Nipigon|EST EDT EWT EPT|50 40 40 40|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 Rnb0 3je0 8x40 iv0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|16e2",
                "America/Nome|NST NWT NPT BST BDT YST AKST AKDT|b0 a0 a0 b0 a0 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cl0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|38e2",
                "America/Noronha|LMT -02 -01|29.E 20 10|0121212121212121212121212121212121212121|-2glxO.k HdKO.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|30e2",
                "America/North_Dakota/Beulah|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "America/North_Dakota/Center|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "America/North_Dakota/New_Salem|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "America/Ojinaga|LMT MST CST CDT MDT|6V.E 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3",
                "America/Pangnirtung|-00 AST AWT APT ADDT ADT EDT EST CST CDT|0 40 30 30 20 30 40 50 60 50|012314151515151515151515151515151515167676767689767676767676767676767676767676767676767676767676767676767676767676767676767|-1XiM0 PnG0 8x50 iu0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1o00 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2",
                "America/Paramaribo|LMT PMT PMT -0330 -03|3E.E 3E.Q 3E.A 3u 30|01234|-2nDUj.k Wqo0.c qanX.I 1yVXN.o|24e4",
                "America/Phoenix|MST MDT MWT|70 60 60|01010202010|-261r0 1nX0 11B0 1nX0 SgN0 4Al1 Ap0 1db0 SWqX 1cL0|42e5",
                "America/Port-au-Prince|PPMT EST EDT|4N 50 40|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-28RHb 2FnMb 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14q0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 i6n0 1nX0 11B0 1nX0 d430 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 3iN0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5",
                "America/Rio_Branco|LMT -05 -04|4v.c 50 40|01212121212121212121212121212121|-2glvs.M HdLs.M 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0 d5X0|31e4",
                "America/Porto_Velho|LMT -04 -03|4f.A 40 30|012121212121212121212121212121|-2glvI.o HdKI.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|37e4",
                "America/Puerto_Rico|AST AWT APT|40 30 30|0120|-17lU0 7XT0 iu0|24e5",
                "America/Punta_Arenas|SMT -05 -04 -03|4G.K 50 40 30|0102021212121212121232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 blz0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|",
                "America/Rainy_River|CST CDT CWT CPT|60 50 50 50|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TQ0 1in0 Rnb0 3je0 8x30 iw0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|842",
                "America/Rankin_Inlet|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313131313131313131313131313131313131313131313131313131313131313131|-vDc0 keu0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e2",
                "America/Recife|LMT -03 -02|2j.A 30 20|0121212121212121212121212121212121212121|-2glxE.o HdLE.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|33e5",
                "America/Regina|LMT MST MDT MWT MPT CST|6W.A 70 60 60 60 60|012121212121212121212121341212121212121212121212121215|-2AD51.o uHe1.o 1in0 s2L0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 66N0 1cL0 1cN0 19X0 1fB0 1cL0 1fB0 1cL0 1cN0 1cL0 M30 8x20 ix0 1ip0 1cL0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 3NB0 1cL0 1cN0|19e4",
                "America/Resolute|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313431313131313131313131313131313131313131313131313131313131313131|-SnA0 GWS0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|229",
                "America/Santarem|LMT -04 -03|3C.M 40 30|0121212121212121212121212121212|-2glwl.c HdLl.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0|21e4",
                "America/Santiago|SMT -05 -04 -03|4G.K 50 40 30|010202121212121212321232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 9Bz0 jb0 1oN0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0|62e5",
                "America/Santo_Domingo|SDMT EST EDT -0430 AST|4E 50 40 4u 40|01213131313131414|-1ttjk 1lJMk Mn0 6sp0 Lbu 1Cou yLu 1RAu wLu 1QMu xzu 1Q0u xXu 1PAu 13jB0 e00|29e5",
                "America/Sao_Paulo|LMT -03 -02|36.s 30 20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwR.w HdKR.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 pTd0 PX0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|20e6",
                "America/Scoresbysund|LMT -02 -01 +00|1r.Q 20 10 0|0121323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2a5Ww.8 2z5ew.8 1a00 1cK0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|452",
                "America/Sitka|PST PWT PPT PDT YST AKST AKDT|80 70 70 70 90 90 80|01203030303030303030303030303030345656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|90e2",
                "America/St_Johns|NST NDT NST NDT NWT NPT NDDT|3u.Q 2u.Q 3u 2u 2u 2u 1u|01010101010101010101010101010101010102323232323232324523232323232323232323232323232323232323232323232323232323232323232323232323232323232326232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28oit.8 14L0 1nB0 1in0 1gm0 Dz0 1JB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1fB0 19X0 1fB0 19X0 10O0 eKX.8 19X0 1iq0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4",
                "America/Swift_Current|LMT MST MDT MWT MPT CST|7b.k 70 60 60 60 60|012134121212121212121215|-2AD4M.E uHdM.E 1in0 UGp0 8x20 ix0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 isN0 1cL0 3Cp0 1cL0 1cN0 11z0 1qN0 WL0 pMp0|16e3",
                "America/Tegucigalpa|LMT CST CDT|5M.Q 60 50|01212121|-1WGGb.8 2ETcb.8 WL0 1qN0 WL0 GRd0 AL0|11e5",
                "America/Thule|LMT AST ADT|4z.8 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5To.Q 31NBo.Q 1cL0 1cN0 1cL0 1fB0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|656",
                "America/Thunder_Bay|CST EST EWT EPT EDT|60 50 40 40 40|0123141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2q5S0 1iaN0 8x40 iv0 XNB0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4",
                "America/Vancouver|PST PDT PWT PPT|80 70 70 70|0102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TO0 1in0 UGp0 8x10 iy0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5",
                "America/Whitehorse|YST YDT YWT YPT YDDT PST PDT MST|90 80 80 80 70 80 70 70|01010230405656565656565656565656565656565656565656565656565656565656565656565656565656565657|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 3NA0 vrd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|23e3",
                "America/Winnipeg|CST CDT CWT CPT|60 50 50 50|010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aIi0 WL0 3ND0 1in0 Jap0 Rb0 aCN0 8x30 iw0 1tB0 11z0 1ip0 11z0 1o10 11z0 1o10 11z0 1rd0 10L0 1op0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 1cL0 1cN0 11z0 6i10 WL0 6i10 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|66e4",
                "America/Yakutat|YST YWT YPT YDT AKST AKDT|90 80 80 80 90 80|01203030303030303030303030303030304545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-17T10 8x00 iz0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cn0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|642",
                "America/Yellowknife|-00 MST MWT MPT MDDT MDT|0 70 60 60 50 60|012314151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151|-1pdA0 hix0 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3",
                "Antarctica/Casey|-00 +08 +11|0 -80 -b0|01212121|-2q00 1DjS0 T90 40P0 KL0 blz0 3m10|10",
                "Antarctica/Davis|-00 +07 +05|0 -70 -50|01012121|-vyo0 iXt0 alj0 1D7v0 VB0 3Wn0 KN0|70",
                "Antarctica/DumontDUrville|-00 +10|0 -a0|0101|-U0o0 cfq0 bFm0|80",
                "Antarctica/Macquarie|AEST AEDT -00 +11|-a0 -b0 0 -b0|0102010101010101010101010101010101010101010101010101010101010101010101010101010101010101013|-29E80 19X0 4SL0 1ayy0 Lvs0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0|1",
                "Antarctica/Mawson|-00 +06 +05|0 -60 -50|012|-CEo0 2fyk0|60",
                "Pacific/Auckland|NZMT NZST NZST NZDT|-bu -cu -c0 -d0|01020202020202020202020202023232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1GCVu Lz0 1tB0 11zu 1o0u 11zu 1o0u 11zu 1o0u 14nu 1lcu 14nu 1lcu 1lbu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1qLu WMu 1qLu 11Au 1n1bu IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|14e5",
                "Antarctica/Palmer|-00 -03 -04 -02|0 30 40 20|0121212121213121212121212121212121212121212121212121212121212121212121212121212121|-cao0 nD0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 jsN0 14N0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|40",
                "Antarctica/Rothera|-00 -03|0 30|01|gOo0|130",
                "Antarctica/Syowa|-00 +03|0 -30|01|-vs00|20",
                "Antarctica/Troll|-00 +00 +02|0 0 -20|01212121212121212121212121212121212121212121212121212121212121212121|1puo0 hd0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|40",
                "Antarctica/Vostok|-00 +06|0 -60|01|-tjA0|25",
                "Europe/Oslo|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2awM0 Qm0 W6o0 5pf0 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 wJc0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1qM0 WM0 zpc0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e4",
                "Asia/Riyadh|LMT +03|-36.Q -30|01|-TvD6.Q|57e5",
                "Asia/Almaty|LMT +05 +06 +07|-57.M -50 -60 -70|012323232323232323232321232323232323232323232323232|-1Pc57.M eUo7.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|15e5",
                "Asia/Amman|LMT EET EEST|-2n.I -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1yW2n.I 1HiMn.I KL0 1oN0 11b0 1oN0 11b0 1pd0 1dz0 1cp0 11b0 1op0 11b0 fO10 1db0 1e10 1cL0 1cN0 1cL0 1cN0 1fz0 1pd0 10n0 1ld0 14n0 1hB0 15b0 1ip0 19X0 1cN0 1cL0 1cN0 17b0 1ld0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1So0 y00 1fc0 1dc0 1co0 1dc0 1cM0 1cM0 1cM0 1o00 11A0 1lc0 17c0 1cM0 1cM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|25e5",
                "Asia/Anadyr|LMT +12 +13 +14 +11|-bN.U -c0 -d0 -e0 -b0|01232121212121212121214121212121212121212121212121212121212141|-1PcbN.U eUnN.U 23CL0 1db0 2q10 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|13e3",
                "Asia/Aqtau|LMT +04 +05 +06|-3l.4 -40 -50 -60|012323232323232323232123232312121212121212121212|-1Pc3l.4 eUnl.4 24PX0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|15e4",
                "Asia/Aqtobe|LMT +04 +05 +06|-3M.E -40 -50 -60|0123232323232323232321232323232323232323232323232|-1Pc3M.E eUnM.E 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|27e4",
                "Asia/Ashgabat|LMT +04 +05 +06|-3R.w -40 -50 -60|0123232323232323232323212|-1Pc3R.w eUnR.w 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0|41e4",
                "Asia/Atyrau|LMT +03 +05 +06 +04|-3r.I -30 -50 -60 -40|01232323232323232323242323232323232324242424242|-1Pc3r.I eUor.I 24PW0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 2sp0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|",
                "Asia/Baghdad|BMT +03 +04|-2V.A -30 -40|012121212121212121212121212121212121212121212121212121|-26BeV.A 2ACnV.A 11b0 1cp0 1dz0 1dd0 1db0 1cN0 1cp0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1de0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0|66e5",
                "Asia/Qatar|LMT +04 +03|-3q.8 -40 -30|012|-21Jfq.8 27BXq.8|96e4",
                "Asia/Baku|LMT +03 +04 +05|-3j.o -30 -40 -50|01232323232323232323232123232323232323232323232323232323232323232|-1Pc3j.o 1jUoj.o WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 9Je0 1o00 11z0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|27e5",
                "Asia/Bangkok|BMT +07|-6G.4 -70|01|-218SG.4|15e6",
                "Asia/Barnaul|LMT +06 +07 +08|-5z -60 -70 -80|0123232323232323232323212323232321212121212121212121212121212121212|-21S5z pCnz 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 p90 LE0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|",
                "Asia/Beirut|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-21aq0 1on0 1410 1db0 19B0 1in0 1ip0 WL0 1lQp0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 q6N0 En0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1op0 11b0 dA10 17b0 1iN0 17b0 1iN0 17b0 1iN0 17b0 1vB0 SL0 1mp0 13z0 1iN0 17b0 1iN0 17b0 1jd0 12n0 1a10 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0|22e5",
                "Asia/Bishkek|LMT +05 +06 +07|-4W.o -50 -60 -70|012323232323232323232321212121212121212121212121212|-1Pc4W.o eUnW.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2e00 1tX0 17b0 1ip0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1cPu 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0|87e4",
                "Asia/Brunei|LMT +0730 +08|-7D.E -7u -80|012|-1KITD.E gDc9.E|42e4",
                "Asia/Kolkata|MMT IST +0630|-5l.a -5u -6u|012121|-2zOtl.a 1r2LP.a 1un0 HB0 7zX0|15e6",
                "Asia/Chita|LMT +08 +09 +10|-7x.Q -80 -90 -a0|012323232323232323232321232323232323232323232323232323232323232312|-21Q7x.Q pAnx.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3re0|33e4",
                "Asia/Choibalsan|LMT +07 +08 +10 +09|-7C -70 -80 -a0 -90|0123434343434343434343434343434343434343434343424242|-2APHC 2UkoC cKn0 1da0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 3Db0 h1f0 1cJ0 1cP0 1cJ0|38e3",
                "Asia/Shanghai|CST CDT|-80 -90|01010101010101010101010101010|-23uw0 18n0 OjB0 Rz0 11d0 1wL0 A10 8HX0 1G10 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 aL0 1tU30 Rb0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0|23e6",
                "Asia/Colombo|MMT +0530 +06 +0630|-5j.w -5u -60 -6u|01231321|-2zOtj.w 1rFbN.w 1zzu 7Apu 23dz0 11zu n3cu|22e5",
                "Asia/Dhaka|HMT +0630 +0530 +06 +07|-5R.k -6u -5u -60 -70|0121343|-18LFR.k 1unn.k HB0 m6n0 2kxbu 1i00|16e6",
                "Asia/Damascus|LMT EET EEST|-2p.c -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-21Jep.c Hep.c 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1xRB0 11X0 1oN0 10L0 1pB0 11b0 1oN0 10L0 1mp0 13X0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 Nb0 1AN0 Nb0 bcp0 19X0 1gp0 19X0 3ld0 1xX0 Vd0 1Bz0 Sp0 1vX0 10p0 1dz0 1cN0 1cL0 1db0 1db0 1g10 1an0 1ap0 1db0 1fd0 1db0 1cN0 1db0 1dd0 1db0 1cp0 1dz0 1c10 1dX0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 19z0 1fB0 1qL0 11B0 1on0 Wp0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0|26e5",
                "Asia/Dili|LMT +08 +09|-8m.k -80 -90|01212|-2le8m.k 1dnXm.k 1nfA0 Xld0|19e4",
                "Asia/Dubai|LMT +04|-3F.c -40|01|-21JfF.c|39e5",
                "Asia/Dushanbe|LMT +05 +06 +07|-4z.c -50 -60 -70|012323232323232323232321|-1Pc4z.c eUnz.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2hB0|76e4",
                "Asia/Famagusta|LMT EET EEST +03|-2f.M -20 -30 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212312121212121212121212121212121212121212121|-1Vc2f.M 2a3cf.M 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 15U0 2Ks0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|",
                "Asia/Gaza|EET EEST IST IDT|-20 -30 -20 -30|0101010101010101010101010101010123232323232323232323232323232320101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 bXd0 gM0 8Q00 IM0 1wM0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 11z0 1o10 14o0 1lA1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 WN0 1qL0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0|18e5",
                "Asia/Hebron|EET EEST IST IDT|-20 -30 -20 -30|010101010101010101010101010101012323232323232323232323232323232010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 bXd0 gM0 8Q00 IM0 1wM0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 12L0 1mN0 14o0 1lc0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 WN0 1qL0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0|25e4",
                "Asia/Ho_Chi_Minh|LMT PLMT +07 +08 +09|-76.E -76.u -70 -80 -90|0123423232|-2yC76.E bK00.a 1h7b6.u 5lz0 18o0 3Oq0 k5b0 aW00 BAM0|90e5",
                "Asia/Hong_Kong|LMT HKT HKST HKWT JST|-7A.G -80 -90 -8u -90|0123412121212121212121212121212121212121212121212121212121212121212121|-2CFH0 1taO0 Hc0 xUu 9tBu 11z0 1tDu Rc0 1wo0 11A0 1cM0 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1nX0 U10 1tz0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|73e5",
                "Asia/Hovd|LMT +06 +07 +08|-66.A -60 -70 -80|012323232323232323232323232323232323232323232323232|-2APG6.A 2Uko6.A cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|81e3",
                "Asia/Irkutsk|IMT +07 +08 +09|-6V.5 -70 -80 -90|01232323232323232323232123232323232323232323232323232323232323232|-21zGV.5 pjXV.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4",
                "Europe/Istanbul|IMT EET EEST +03 +04|-1U.U -20 -30 -30 -40|0121212121212121212121212121212121212121212121234312121212121212121212121212121212121212121212121212121212121212123|-2ogNU.U dzzU.U 11b0 8tB0 1on0 1410 1db0 19B0 1in0 3Rd0 Un0 1oN0 11b0 zSN0 CL0 mp0 1Vz0 1gN0 8yn0 1yp0 ML0 1kp0 17b0 1ip0 17b0 1fB0 19X0 1ip0 19X0 1ip0 17b0 qdB0 38L0 1jd0 Tz0 l6O0 11A0 WN0 1qL0 TB0 1tX0 U10 1tz0 11B0 1in0 17d0 z90 cne0 pb0 2Cp0 1800 14o0 1dc0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1a00 1fA0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WO0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 15w0|13e6",
                "Asia/Jakarta|BMT +0720 +0730 +09 +08 WIB|-77.c -7k -7u -90 -80 -70|01232425|-1Q0Tk luM0 mPzO 8vWu 6kpu 4PXu xhcu|31e6",
                "Asia/Jayapura|LMT +09 +0930 WIT|-9m.M -90 -9u -90|0123|-1uu9m.M sMMm.M L4nu|26e4",
                "Asia/Jerusalem|JMT IST IDT IDDT|-2k.E -20 -30 -40|012121212121321212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-26Bek.E SyMk.E 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 3LB0 Em0 or0 1cn0 1dB0 16n0 10O0 1ja0 1tC0 14o0 1cM0 1a00 11A0 1Na0 An0 1MP0 AJ0 1Kp0 LC0 1oo0 Wl0 EQN0 Db0 1fB0 Rb0 bXd0 gM0 8Q00 IM0 1wM0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 1hB0 1dX0 1ep0 1aL0 1eN0 17X0 1nf0 11z0 1tB0 19W0 1e10 17b0 1ep0 1gL0 18N0 1fz0 1eN0 17b0 1gq0 1gn0 19d0 1dz0 1c10 17X0 1hB0 1gn0 19d0 1dz0 1c10 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0|81e4",
                "Asia/Kabul|+04 +0430|-40 -4u|01|-10Qs0|46e5",
                "Asia/Kamchatka|LMT +11 +12 +13|-ay.A -b0 -c0 -d0|012323232323232323232321232323232323232323232323232323232323212|-1SLKy.A ivXy.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|18e4",
                "Asia/Karachi|LMT +0530 +0630 +05 PKT PKST|-4s.c -5u -6u -50 -50 -60|012134545454|-2xoss.c 1qOKW.c 7zX0 eup0 LqMu 1fy00 1cL0 dK10 11b0 1610 1jX0|24e6",
                "Asia/Urumqi|LMT +06|-5O.k -60|01|-1GgtO.k|32e5",
                "Asia/Kathmandu|LMT +0530 +0545|-5F.g -5u -5J|012|-21JhF.g 2EGMb.g|12e5",
                "Asia/Khandyga|LMT +08 +09 +10 +11|-92.d -80 -90 -a0 -b0|0123232323232323232323212323232323232323232323232343434343434343432|-21Q92.d pAp2.d 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 qK0 yN0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|66e2",
                "Asia/Krasnoyarsk|LMT +06 +07 +08|-6b.q -60 -70 -80|01232323232323232323232123232323232323232323232323232323232323232|-21Hib.q prAb.q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5",
                "Asia/Kuala_Lumpur|SMT +07 +0720 +0730 +09 +08|-6T.p -70 -7k -7u -90 -80|0123435|-2Bg6T.p 17anT.p l5XE 17bO 8Fyu 1so1u|71e5",
                "Asia/Kuching|LMT +0730 +08 +0820 +09|-7l.k -7u -80 -8k -90|0123232323232323242|-1KITl.k gDbP.k 6ynu AnE 1O0k AnE 1NAk AnE 1NAk AnE 1NAk AnE 1O0k AnE 1NAk AnE pAk 8Fz0|13e4",
                "Asia/Macau|LMT CST +09 +10 CDT|-7y.a -80 -90 -a0 -90|012323214141414141414141414141414141414141414141414141414141414141414141|-2CFHy.a 1uqKy.a PX0 1kn0 15B0 11b0 4Qq0 1oM0 11c0 1ko0 1u00 11A0 1cM0 11c0 1o00 11A0 1o00 11A0 1oo0 1400 1o00 11A0 1o00 U00 1tA0 U00 1wo0 Rc0 1wru U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cK0 1cO0 1cK0 1cO0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|57e4",
                "Asia/Magadan|LMT +10 +11 +12|-a3.c -a0 -b0 -c0|012323232323232323232321232323232323232323232323232323232323232312|-1Pca3.c eUo3.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Cq0|95e3",
                "Asia/Makassar|LMT MMT +08 +09 WITA|-7V.A -7V.A -80 -90 -80|01234|-21JjV.A vfc0 myLV.A 8ML0|15e5",
                "Asia/Manila|PST PDT JST|-80 -90 -90|010201010|-1kJI0 AL0 cK10 65X0 mXB0 vX0 VK10 1db0|24e6",
                "Asia/Nicosia|LMT EET EEST|-2d.s -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Vc2d.s 2a3cd.s 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|32e4",
                "Asia/Novokuznetsk|LMT +06 +07 +08|-5M.M -60 -70 -80|012323232323232323232321232323232323232323232323232323232323212|-1PctM.M eULM.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|55e4",
                "Asia/Novosibirsk|LMT +06 +07 +08|-5v.E -60 -70 -80|0123232323232323232323212323212121212121212121212121212121212121212|-21Qnv.E pAFv.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 ml0 Os0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 4eN0|15e5",
                "Asia/Omsk|LMT +05 +06 +07|-4R.u -50 -60 -70|01232323232323232323232123232323232323232323232323232323232323232|-224sR.u pMLR.u 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|12e5",
                "Asia/Oral|LMT +03 +05 +06 +04|-3p.o -30 -50 -60 -40|01232323232323232424242424242424242424242424242|-1Pc3p.o eUop.o 23CK0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 1cM0 IM0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|27e4",
                "Asia/Pontianak|LMT PMT +0730 +09 +08 WITA WIB|-7h.k -7h.k -7u -90 -80 -80 -70|012324256|-2ua7h.k XE00 munL.k 8Rau 6kpu 4PXu xhcu Wqnu|23e4",
                "Asia/Pyongyang|LMT KST JST KST|-8n -8u -90 -90|012313|-2um8n 97XR 1lTzu 2Onc0 6BA0|29e5",
                "Asia/Qostanay|LMT +04 +05 +06|-4e.s -40 -50 -60|012323232323232323232123232323232323232323232323|-1Pc4e.s eUoe.s 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|",
                "Asia/Qyzylorda|LMT +04 +05 +06|-4l.Q -40 -50 -60|01232323232323232323232323232323232323232323232|-1Pc4l.Q eUol.Q 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 3ao0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 zQl0|73e4",
                "Asia/Rangoon|RMT +0630 +09|-6o.L -6u -90|0121|-21Jio.L SmnS.L 7j9u|48e5",
                "Asia/Sakhalin|LMT +09 +11 +12 +10|-9u.M -90 -b0 -c0 -a0|01232323232323232323232423232323232424242424242424242424242424242|-2AGVu.M 1BoMu.M 1qFa0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 2pB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|58e4",
                "Asia/Samarkand|LMT +04 +05 +06|-4r.R -40 -50 -60|01232323232323232323232|-1Pc4r.R eUor.R 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0|36e4",
                "Asia/Seoul|LMT KST JST KST KDT KDT|-8r.Q -8u -90 -90 -a0 -9u|012343434343151515151515134343|-2um8r.Q 97XV.Q 1m1zu 6CM0 Fz0 1kN0 14n0 1kN0 14L0 1zd0 On0 69B0 2I0u OL0 1FB0 Rb0 1qN0 TX0 1tB0 TX0 1tB0 TX0 1tB0 TX0 2ap0 12FBu 11A0 1o00 11A0|23e6",
                "Asia/Srednekolymsk|LMT +10 +11 +12|-ae.Q -a0 -b0 -c0|01232323232323232323232123232323232323232323232323232323232323232|-1Pcae.Q eUoe.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|35e2",
                "Asia/Taipei|CST JST CDT|-80 -90 -90|01020202020202020202020202020202020202020|-1iw80 joM0 1yo0 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 10N0 1BX0 10p0 1pz0 10p0 1pz0 10p0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1BB0 ML0 1Bd0 ML0 uq10 1db0 1cN0 1db0 97B0 AL0|74e5",
                "Asia/Tashkent|LMT +05 +06 +07|-4B.b -50 -60 -70|012323232323232323232321|-1Pc4B.b eUnB.b 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0|23e5",
                "Asia/Tbilisi|TBMT +03 +04 +05|-2X.b -30 -40 -50|0123232323232323232323212121232323232323232323212|-1Pc2X.b 1jUnX.b WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cK0 1cL0 1cN0 1cL0 1cN0 2pz0 1cL0 1fB0 3Nz0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 An0 Os0 WM0|11e5",
                "Asia/Tehran|LMT TMT +0330 +04 +05 +0430|-3p.I -3p.I -3u -40 -50 -4u|01234325252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2btDp.I 1d3c0 1huLT.I TXu 1pz0 sN0 vAu 1cL0 1dB0 1en0 pNB0 UL0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 64p0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0|14e6",
                "Asia/Thimphu|LMT +0530 +06|-5W.A -5u -60|012|-Su5W.A 1BGMs.A|79e3",
                "Asia/Tokyo|JST JDT|-90 -a0|010101010|-QJJ0 Rc0 1lc0 14o0 1zc0 Oo0 1zc0 Oo0|38e6",
                "Asia/Tomsk|LMT +06 +07 +08|-5D.P -60 -70 -80|0123232323232323232323212323232323232323232323212121212121212121212|-21NhD.P pxzD.P 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 co0 1bB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Qp0|10e5",
                "Asia/Ulaanbaatar|LMT +07 +08 +09|-77.w -70 -80 -90|012323232323232323232323232323232323232323232323232|-2APH7.w 2Uko7.w cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|12e5",
                "Asia/Ust-Nera|LMT +08 +09 +12 +11 +10|-9w.S -80 -90 -c0 -b0 -a0|012343434343434343434345434343434343434343434343434343434343434345|-21Q9w.S pApw.S 23CL0 1d90 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|65e2",
                "Asia/Vladivostok|LMT +09 +10 +11|-8L.v -90 -a0 -b0|01232323232323232323232123232323232323232323232323232323232323232|-1SJIL.v itXL.v 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4",
                "Asia/Yakutsk|LMT +08 +09 +10|-8C.W -80 -90 -a0|01232323232323232323232123232323232323232323232323232323232323232|-21Q8C.W pAoC.W 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|28e4",
                "Asia/Yekaterinburg|LMT PMT +04 +05 +06|-42.x -3J.5 -40 -50 -60|012343434343434343434343234343434343434343434343434343434343434343|-2ag42.x 7mQh.s qBvJ.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|14e5",
                "Asia/Yerevan|LMT +03 +04 +05|-2W -30 -40 -50|0123232323232323232323212121212323232323232323232323232323232|-1Pc2W 1jUnW WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 4RX0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|13e5",
                "Atlantic/Azores|HMT -02 -01 +00 WET|1S.w 20 10 0 0|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121232323232323232323232323232323234323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2ldW0 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|25e4",
                "Atlantic/Bermuda|LMT AST ADT|4j.i 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1BnRE.G 1LTbE.G 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e3",
                "Atlantic/Canary|LMT -01 WET WEST|11.A 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UtaW.o XPAW.o 1lAK0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
                "Atlantic/Cape_Verde|LMT -02 -01|1y.4 20 10|01212|-2ldW0 1eEo0 7zX0 1djf0|50e4",
                "Atlantic/Faroe|LMT WET WEST|r.4 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2uSnw.U 2Wgow.U 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|49e3",
                "Atlantic/Madeira|FMT -01 +00 +01 WET WEST|17.A 10 0 -10 0 -10|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldX0 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e4",
                "Atlantic/Reykjavik|LMT -01 +00 GMT|1s 10 0 0|012121212121212121212121212121212121212121212121212121212121212121213|-2uWmw mfaw 1Bd0 ML0 1LB0 Cn0 1LB0 3fX0 C10 HrX0 1cO0 LB0 1EL0 LA0 1C00 Oo0 1wo0 Rc0 1wo0 Rc0 1wo0 Rc0 1zc0 Oo0 1zc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0|12e4",
                "Atlantic/South_Georgia|-02|20|0||30",
                "Atlantic/Stanley|SMT -04 -03 -02|3P.o 40 30 20|012121212121212323212121212121212121212121212121212121212121212121212|-2kJw8.A 12bA8.A 19X0 1fB0 19X0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 Cn0 1Cc10 WL0 1qL0 U10 1tz0 2mN0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 U10 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qN0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 U10 1tz0 U10 1tz0 U10|21e2",
                "Australia/Sydney|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|40e5",
                "Australia/Adelaide|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 WM0 1qM0 Rc0 1zc0 U00 1tA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|11e5",
                "Australia/Brisbane|AEST AEDT|-a0 -b0|01010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0|20e5",
                "Australia/Broken_Hill|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|18e3",
                "Australia/Currie|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|746",
                "Australia/Darwin|ACST ACDT|-9u -au|010101010|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0|12e4",
                "Australia/Eucla|+0845 +0945|-8J -9J|0101010101010101010|-293kI xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|368",
                "Australia/Hobart|AEST AEDT|-a0 -b0|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 VfB0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|21e4",
                "Australia/Lord_Howe|AEST +1030 +1130 +11|-a0 -au -bu -b0|0121212121313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|raC0 1zdu Rb0 1zd0 On0 1zd0 On0 1zd0 On0 1zd0 TXu 1qMu WLu 1tAu WLu 1tAu TXu 1tAu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 11Au 1nXu 1qMu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu 11zu 1o0u WLu 1qMu 14nu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu|347",
                "Australia/Lindeman|AEST AEDT|-a0 -b0|010101010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0|10",
                "Australia/Melbourne|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1qM0 11A0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|39e5",
                "Australia/Perth|AWST AWDT|-80 -90|0101010101010101010|-293jX xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|18e5",
                "CET|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|",
                "Pacific/Easter|EMT -07 -06 -05|7h.s 70 60 50|012121212121212121212121212123232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1uSgG.w 1s4IG.w WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 2pA0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0|30e2",
                "CST6CDT|CST CDT CWT CPT|60 50 50 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "EET|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|",
                "Europe/Dublin|DMT IST GMT BST IST|p.l -y.D 0 -10 -10|01232323232324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242|-2ax9y.D Rc0 1fzy.D 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 g600 14o0 1wo0 17c0 1io0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
                "EST|EST|50|0||",
                "EST5EDT|EST EDT EWT EPT|50 40 40 40|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 SgN0 8x40 iv0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "Etc/GMT-0|GMT|0|0||",
                "Etc/GMT-1|+01|-10|0||",
                "Pacific/Port_Moresby|+10|-a0|0||25e4",
                "Etc/GMT-11|+11|-b0|0||",
                "Pacific/Tarawa|+12|-c0|0||29e3",
                "Etc/GMT-13|+13|-d0|0||",
                "Etc/GMT-14|+14|-e0|0||",
                "Etc/GMT-2|+02|-20|0||",
                "Etc/GMT-3|+03|-30|0||",
                "Etc/GMT-4|+04|-40|0||",
                "Etc/GMT-5|+05|-50|0||",
                "Etc/GMT-6|+06|-60|0||",
                "Indian/Christmas|+07|-70|0||21e2",
                "Etc/GMT-8|+08|-80|0||",
                "Pacific/Palau|+09|-90|0||21e3",
                "Etc/GMT+1|-01|10|0||",
                "Etc/GMT+10|-10|a0|0||",
                "Etc/GMT+11|-11|b0|0||",
                "Etc/GMT+12|-12|c0|0||",
                "Etc/GMT+3|-03|30|0||",
                "Etc/GMT+4|-04|40|0||",
                "Etc/GMT+5|-05|50|0||",
                "Etc/GMT+6|-06|60|0||",
                "Etc/GMT+7|-07|70|0||",
                "Etc/GMT+8|-08|80|0||",
                "Etc/GMT+9|-09|90|0||",
                "Etc/UTC|UTC|0|0||",
                "Europe/Amsterdam|AMT NST +0120 +0020 CEST CET|-j.w -1j.w -1k -k -20 -10|010101010101010101010101010101010101010101012323234545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2aFcj.w 11b0 1iP0 11A0 1io0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1co0 1io0 1yo0 Pc0 1a00 1fA0 1Bc0 Mo0 1tc0 Uo0 1tA0 U00 1uo0 W00 1s00 VA0 1so0 Vc0 1sM0 UM0 1wo0 Rc0 1u00 Wo0 1rA0 W00 1s00 VA0 1sM0 UM0 1w00 fV0 BCX.w 1tA0 U00 1u00 Wo0 1sm0 601k WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|16e5",
                "Europe/Andorra|WET CET CEST|0 -10 -20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-UBA0 1xIN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|79e3",
                "Europe/Astrakhan|LMT +03 +04 +05|-3c.c -30 -40 -50|012323232323232323212121212121212121212121212121212121212121212|-1Pcrc.c eUMc.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|10e5",
                "Europe/Athens|AMT EET EEST CEST CET|-1y.Q -20 -30 -20 -10|012123434121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a61x.Q CNbx.Q mn0 kU10 9b0 3Es0 Xa0 1fb0 1dd0 k3X0 Nz0 SCp0 1vc0 SO0 1cM0 1a00 1ao0 1fc0 1a10 1fG0 1cg0 1dX0 1bX0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|35e5",
                "Europe/London|GMT BST BDST|0 -10 -20|0101010101010101010101010101010101010101010101010121212121210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|10e6",
                "Europe/Belgrade|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19RC0 3IP0 WM0 1fA0 1cM0 1cM0 1rc0 Qo0 1vmo0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
                "Europe/Berlin|CET CEST CEMT|-10 -20 -30|01010101010101210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 kL0 Nc0 m10 WM0 1ao0 1cp0 dX0 jz0 Dd0 1io0 17c0 1fA0 1a00 1ehA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e5",
                "Europe/Prague|CET CEST GMT|-10 -20 0|01010101010101010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 1qM0 11c0 mp0 xA0 mn0 17c0 1io0 17c0 1fc0 1ao0 1bNc0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|13e5",
                "Europe/Brussels|WET CET CEST WEST|0 -10 -20 -10|0121212103030303030303030303030303030303030303030303212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ehc0 3zX0 11c0 1iO0 11A0 1o00 11A0 my0 Ic0 1qM0 Rc0 1EM0 UM0 1u00 10o0 1io0 1io0 17c0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a30 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 y00 5Wn0 WM0 1fA0 1cM0 16M0 1iM0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|21e5",
                "Europe/Bucharest|BMT EET EEST|-1I.o -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1xApI.o 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Axc0 On0 1fA0 1a10 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|19e5",
                "Europe/Budapest|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1ip0 17b0 1op0 1tb0 Q2m0 3Ne0 WM0 1fA0 1cM0 1cM0 1oJ0 1dc0 1030 1fA0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1iM0 1fA0 8Ha0 Rb0 1wN0 Rb0 1BB0 Lz0 1C20 LB0 SNX0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5",
                "Europe/Zurich|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19Lc0 11A0 1o00 11A0 1xG10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e4",
                "Europe/Chisinau|CMT BMT EET EEST CEST CET MSK MSD|-1T -1I.o -20 -30 -20 -10 -30 -40|012323232323232323234545467676767676767676767323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-26jdT wGMa.A 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 27A0 2en0 39g0 WM0 1fA0 1cM0 V90 1t7z0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 gL0 WO0 1cM0 1cM0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11D0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|67e4",
                "Europe/Copenhagen|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 Tz0 VuO0 60q0 WM0 1fA0 1cM0 1cM0 1cM0 S00 1HA0 Nc0 1C00 Dc0 1Nc0 Ao0 1h5A0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
                "Europe/Gibraltar|GMT BST BDST CET CEST|0 -10 -20 -10 -20|010101010101010101010101010101010101010101010101012121212121010121010101010101010101034343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 10Jz0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|30e3",
                "Europe/Helsinki|HMT EET EEST|-1D.N -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1WuND.N OULD.N 1dA0 1xGq0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
                "Europe/Kaliningrad|CET CEST EET EEST MSK MSD +03|-10 -20 -20 -30 -30 -40 -30|01010101010101232454545454545454543232323232323232323232323232323232323232323262|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 390 7A0 1en0 12N0 1pbb0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|44e4",
                "Europe/Kiev|KMT EET MSK CEST CET MSD EEST|-22.4 -20 -30 -20 -10 -40 -30|0123434252525252525252525256161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc22.4 eUo2.4 rnz0 2Hg0 WM0 1fA0 da0 1v4m0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 Db0 3220 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|34e5",
                "Europe/Kirov|LMT +03 +04 +05|-3i.M -30 -40 -50|01232323232323232321212121212121212121212121212121212121212121|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|48e4",
                "Europe/Lisbon|LMT WET WEST WEMT CET CEST|A.J 0 -10 -20 -10 -20|012121212121212121212121212121212121212121212321232123212321212121212121212121212121212121212121214121212121212121212121212121212124545454212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2le00 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 pvy0 1cM0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5",
                "Europe/Luxembourg|LMT CET CEST WET WEST WEST WET|-o.A -10 -20 0 -10 -20 -10|0121212134343434343434343434343434343434343434343434565651212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2DG0o.A t6mo.A TB0 1nX0 Up0 1o20 11A0 rW0 CM0 1qP0 R90 1EO0 UK0 1u20 10m0 1ip0 1in0 17e0 19W0 1fB0 1db0 1cp0 1in0 17d0 1fz0 1a10 1in0 1a10 1in0 17f0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 vA0 60L0 WM0 1fA0 1cM0 17c0 1io0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
                "Europe/Madrid|WET WEST WEMT CET CEST|0 -10 -20 -10 -20|010101010101010101210343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-25Td0 19B0 1cL0 1dd0 b1z0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1in0 17d0 iIn0 Hd0 1cL0 bb0 1200 2s20 14n0 5aL0 Mp0 1vz0 17d0 1in0 17d0 1in0 17d0 1in0 17d0 6hX0 11B0 XHX0 1a10 1fz0 1a10 19X0 1cN0 1fz0 1a10 1fC0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e5",
                "Europe/Malta|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1co0 17c0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1co0 1cM0 1lA0 Xc0 1qq0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1iN0 19z0 1fB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4",
                "Europe/Minsk|MMT EET MSK CEST CET MSD EEST +03|-1O -20 -30 -20 -10 -40 -30 -30|01234343252525252525252525261616161616161616161616161616161616161617|-1Pc1O eUnO qNX0 3gQ0 WM0 1fA0 1cM0 Al0 1tsn0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fc0 1cN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0|19e5",
                "Europe/Monaco|PMT WET WEST WEMT CET CEST|-9.l 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121212121232323232345454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 2RV0 11z0 11B0 1ze0 WM0 1fA0 1cM0 1fa0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e3",
                "Europe/Moscow|MMT MMT MST MDST MSD MSK +05 EET EEST MSK|-2u.h -2v.j -3v.j -4v.j -40 -30 -50 -20 -30 -40|012132345464575454545454545454545458754545454545454545454545454545454545454595|-2ag2u.h 2pyW.W 1bA0 11X0 GN0 1Hb0 c4v.j ik0 3DA0 dz0 15A0 c10 2q10 iM10 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|16e6",
                "Europe/Paris|PMT WET WEST CEST CET WEMT|-9.l 0 -10 -20 -10 -20|0121212121212121212121212121212121212121212121212123434352543434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2nco8.l cNb8.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 Ik0 5M30 WM0 1fA0 1cM0 Vx0 hB0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e6",
                "Europe/Riga|RMT LST EET MSK CEST CET MSD EEST|-1A.y -2A.y -20 -30 -20 -10 -40 -30|010102345454536363636363636363727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272|-25TzA.y 11A0 1iM0 ko0 gWm0 yDXA.y 2bX0 3fE0 WM0 1fA0 1cM0 1cM0 4m0 1sLy0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1o00 11A0 1o00 11A0 1qM0 3oo0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|64e4",
                "Europe/Rome|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1cM0 16M0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1C00 LA0 1zc0 Oo0 1C00 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1zc0 Oo0 1fC0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|39e5",
                "Europe/Samara|LMT +03 +04 +05|-3k.k -30 -40 -50|0123232323232323232121232323232323232323232323232323232323212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2y10 14m0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|12e5",
                "Europe/Saratov|LMT +03 +04 +05|-34.i -30 -40 -50|012323232323232321212121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 5810|",
                "Europe/Simferopol|SMT EET MSK CEST CET MSD EEST MSK|-2g -20 -30 -20 -10 -40 -30 -40|012343432525252525252525252161616525252616161616161616161616161616161616172|-1Pc2g eUog rEn0 2qs0 WM0 1fA0 1cM0 3V0 1u0L0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 4eL0 1cL0 1cN0 1cL0 1cN0 dX0 WL0 1cN0 1cL0 1fB0 1o30 11B0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0|33e4",
                "Europe/Sofia|EET CET CEST EEST|-20 -10 -20 -30|01212103030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030|-168L0 WM0 1fA0 1cM0 1cM0 1cN0 1mKH0 1dd0 1fb0 1ap0 1fb0 1a20 1fy0 1a30 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5",
                "Europe/Stockholm|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 TB0 2yDe0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|15e5",
                "Europe/Tallinn|TMT CET CEST EET MSK MSD EEST|-1D -10 -20 -20 -30 -40 -30|012103421212454545454545454546363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363|-26oND teD 11A0 1Ta0 4rXl KSLD 2FX0 2Jg0 WM0 1fA0 1cM0 18J0 1sTX0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o10 11A0 1qM0 5QM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e4",
                "Europe/Tirane|LMT CET CEST|-1j.k -10 -20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glBj.k 14pcj.k 5LC0 WM0 4M0 1fCK0 10n0 1op0 11z0 1pd0 11z0 1qN0 WL0 1qp0 Xb0 1qp0 Xb0 1qp0 11z0 1lB0 11z0 1qN0 11z0 1iN0 16n0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4",
                "Europe/Ulyanovsk|LMT +03 +04 +05 +02|-3d.A -30 -40 -50 -20|01232323232323232321214121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|13e5",
                "Europe/Uzhgorod|CET CEST MSK MSD EET EEST|-10 -20 -30 -40 -20 -30|010101023232323232323232320454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-1cqL0 6i00 WM0 1fA0 1cM0 1ml0 1Cp0 1r3W0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 1Nf0 2pw0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e4",
                "Europe/Vienna|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 3KM0 14o0 LA00 6i00 WM0 1fA0 1cM0 1cM0 1cM0 400 2qM0 1ao0 1co0 1cM0 1io0 17c0 1gHa0 19X0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|18e5",
                "Europe/Vilnius|WMT KMT CET EET MSK CEST MSD EEST|-1o -1z.A -10 -20 -30 -20 -40 -30|012324525254646464646464646473737373737373737352537373737373737373737373737373737373737373737373737373737373737373737373|-293do 6ILM.o 1Ooz.A zz0 Mfd0 29W0 3is0 WM0 1fA0 1cM0 LV0 1tgL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11B0 1o00 11A0 1qM0 8io0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4",
                "Europe/Volgograd|LMT +03 +04 +05|-2V.E -30 -40 -50|012323232323232321212121212121212121212121212121212121212121212|-21IqV.E psLV.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 9Jd0|10e5",
                "Europe/Warsaw|WMT CET CEST EET EEST|-1o -10 -20 -20 -30|012121234312121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ctdo 1LXo 11d0 1iO0 11A0 1o00 11A0 1on0 11A0 6zy0 HWP0 5IM0 WM0 1fA0 1cM0 1dz0 1mL0 1en0 15B0 1aq0 1nA0 11A0 1io0 17c0 1fA0 1a00 iDX0 LA0 1cM0 1cM0 1C00 Oo0 1cM0 1cM0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1C00 LA0 uso0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5",
                "Europe/Zaporozhye|+0220 EET MSK CEST CET MSD EEST|-2k -20 -30 -20 -10 -40 -30|01234342525252525252525252526161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc2k eUok rdb0 2RE0 WM0 1fA0 8m0 1v9a0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cK0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|77e4",
                "HST|HST|a0|0||",
                "Indian/Chagos|LMT +05 +06|-4N.E -50 -60|012|-2xosN.E 3AGLN.E|30e2",
                "Indian/Cocos|+0630|-6u|0||596",
                "Indian/Kerguelen|-00 +05|0 -50|01|-MG00|130",
                "Indian/Mahe|LMT +04|-3F.M -40|01|-2yO3F.M|79e3",
                "Indian/Maldives|MMT +05|-4S -50|01|-olgS|35e4",
                "Indian/Mauritius|LMT +04 +05|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0|15e4",
                "Indian/Reunion|LMT +04|-3F.Q -40|01|-2mDDF.Q|84e4",
                "Pacific/Kwajalein|+11 +10 +09 -12 +12|-b0 -a0 -90 c0 -c0|012034|-1kln0 akp0 6Up0 12ry0 Wan0|14e3",
                "MET|MET MEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|",
                "MST|MST|70|0||",
                "MST7MDT|MST MDT MWT MPT|70 60 60 60|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "Pacific/Chatham|+1215 +1245 +1345|-cf -cJ -dJ|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-WqAf 1adef IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|600",
                "Pacific/Apia|LMT -1130 -11 -10 +14 +13|bq.U bu b0 a0 -e0 -d0|01232345454545454545454545454545454545454545454545454545454|-2nDMx.4 1yW03.4 2rRbu 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|37e3",
                "Pacific/Bougainville|+10 +09 +11|-a0 -90 -b0|0102|-16Wy0 7CN0 2MQp0|18e4",
                "Pacific/Chuuk|+10 +09|-a0 -90|01010|-2ewy0 axB0 RVX0 axd0|49e3",
                "Pacific/Efate|LMT +11 +12|-bd.g -b0 -c0|0121212121212121212121|-2l9nd.g 2Szcd.g 1cL0 1oN0 10L0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 Lz0 1Nd0 An0|66e3",
                "Pacific/Enderbury|-12 -11 +13|c0 b0 -d0|012|nIc0 B7X0|1",
                "Pacific/Fakaofo|-11 +13|b0 -d0|01|1Gfn0|483",
                "Pacific/Fiji|LMT +12 +13|-bT.I -c0 -d0|0121212121212121212121212121212121212121212121212121212121212121|-2bUzT.I 3m8NT.I LA0 1EM0 IM0 nJc0 LA0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 s00 20o0 pc0 20o0 s00 20o0 pc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 s00 1VA0 s00 20o0 pc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 s00 20o0 pc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 s00 1VA0 s00|88e4",
                "Pacific/Galapagos|LMT -05 -06|5W.o 50 60|01212|-1yVS1.A 2dTz1.A gNd0 rz0|25e3",
                "Pacific/Gambier|LMT -09|8X.M 90|01|-2jof0.c|125",
                "Pacific/Guadalcanal|LMT +11|-aD.M -b0|01|-2joyD.M|11e4",
                "Pacific/Guam|GST +09 GDT ChST|-a0 -90 -b0 -a0|01020202020202020203|-18jK0 6pB0 AhB0 3QL0 g2p0 3p91 WOX rX0 1zd0 Rb0 1wp0 Rb0 5xd0 rX0 5sN0 zb1 1C0X On0 ULb0|17e4",
                "Pacific/Honolulu|HST HDT HWT HPT HST|au 9u 9u 9u a0|0102304|-1thLu 8x0 lef0 8wWu iAu 46p0|37e4",
                "Pacific/Kiritimati|-1040 -10 +14|aE a0 -e0|012|nIaE B7Xk|51e2",
                "Pacific/Kosrae|+11 +09 +10 +12|-b0 -90 -a0 -c0|01021030|-2ewz0 axC0 HBy0 akp0 axd0 WOK0 1bdz0|66e2",
                "Pacific/Majuro|+11 +09 +10 +12|-b0 -90 -a0 -c0|0102103|-2ewz0 axC0 HBy0 akp0 6RB0 12um0|28e3",
                "Pacific/Marquesas|LMT -0930|9i 9u|01|-2joeG|86e2",
                "Pacific/Pago_Pago|LMT SST|bm.M b0|01|-2nDMB.c|37e2",
                "Pacific/Nauru|LMT +1130 +09 +12|-b7.E -bu -90 -c0|01213|-1Xdn7.E QCnB.E 7mqu 1lnbu|10e3",
                "Pacific/Niue|-1120 -1130 -11|bk bu b0|012|-KfME 17y0a|12e2",
                "Pacific/Norfolk|+1112 +1130 +1230 +11 +12|-bc -bu -cu -b0 -c0|012134343434343434343434343434343434343434|-Kgbc W01G Oo0 1COo0 9Jcu 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|25e4",
                "Pacific/Noumea|LMT +11 +12|-b5.M -b0 -c0|01212121|-2l9n5.M 2EqM5.M xX0 1PB0 yn0 HeP0 Ao0|98e3",
                "Pacific/Pitcairn|-0830 -08|8u 80|01|18Vku|56",
                "Pacific/Pohnpei|+11 +09 +10|-b0 -90 -a0|010210|-2ewz0 axC0 HBy0 akp0 axd0|34e3",
                "Pacific/Rarotonga|-1030 -0930 -10|au 9u a0|012121212121212121212121212|lyWu IL0 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu|13e3",
                "Pacific/Tahiti|LMT -10|9W.g a0|01|-2joe1.I|18e4",
                "Pacific/Tongatapu|+1220 +13 +14|-ck -d0 -e0|0121212121|-1aB0k 2n5dk 15A0 1wo0 xz0 1Q10 xz0 zWN0 s00|75e3",
                "PST8PDT|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|",
                "WET|WET WEST|0 -10|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|"
                ],
                "links": [
                "Africa/Abidjan|Africa/Bamako",
                "Africa/Abidjan|Africa/Banjul",
                "Africa/Abidjan|Africa/Conakry",
                "Africa/Abidjan|Africa/Dakar",
                "Africa/Abidjan|Africa/Freetown",
                "Africa/Abidjan|Africa/Lome",
                "Africa/Abidjan|Africa/Nouakchott",
                "Africa/Abidjan|Africa/Ouagadougou",
                "Africa/Abidjan|Africa/Timbuktu",
                "Africa/Abidjan|Atlantic/St_Helena",
                "Africa/Cairo|Egypt",
                "Africa/Johannesburg|Africa/Maseru",
                "Africa/Johannesburg|Africa/Mbabane",
                "Africa/Lagos|Africa/Bangui",
                "Africa/Lagos|Africa/Brazzaville",
                "Africa/Lagos|Africa/Douala",
                "Africa/Lagos|Africa/Kinshasa",
                "Africa/Lagos|Africa/Libreville",
                "Africa/Lagos|Africa/Luanda",
                "Africa/Lagos|Africa/Malabo",
                "Africa/Lagos|Africa/Niamey",
                "Africa/Lagos|Africa/Porto-Novo",
                "Africa/Maputo|Africa/Blantyre",
                "Africa/Maputo|Africa/Bujumbura",
                "Africa/Maputo|Africa/Gaborone",
                "Africa/Maputo|Africa/Harare",
                "Africa/Maputo|Africa/Kigali",
                "Africa/Maputo|Africa/Lubumbashi",
                "Africa/Maputo|Africa/Lusaka",
                "Africa/Nairobi|Africa/Addis_Ababa",
                "Africa/Nairobi|Africa/Asmara",
                "Africa/Nairobi|Africa/Asmera",
                "Africa/Nairobi|Africa/Dar_es_Salaam",
                "Africa/Nairobi|Africa/Djibouti",
                "Africa/Nairobi|Africa/Kampala",
                "Africa/Nairobi|Africa/Mogadishu",
                "Africa/Nairobi|Indian/Antananarivo",
                "Africa/Nairobi|Indian/Comoro",
                "Africa/Nairobi|Indian/Mayotte",
                "Africa/Tripoli|Libya",
                "America/Adak|America/Atka",
                "America/Adak|US/Aleutian",
                "America/Anchorage|US/Alaska",
                "America/Argentina/Buenos_Aires|America/Buenos_Aires",
                "America/Argentina/Catamarca|America/Argentina/ComodRivadavia",
                "America/Argentina/Catamarca|America/Catamarca",
                "America/Argentina/Cordoba|America/Cordoba",
                "America/Argentina/Cordoba|America/Rosario",
                "America/Argentina/Jujuy|America/Jujuy",
                "America/Argentina/Mendoza|America/Mendoza",
                "America/Atikokan|America/Coral_Harbour",
                "America/Chicago|US/Central",
                "America/Curacao|America/Aruba",
                "America/Curacao|America/Kralendijk",
                "America/Curacao|America/Lower_Princes",
                "America/Denver|America/Shiprock",
                "America/Denver|Navajo",
                "America/Denver|US/Mountain",
                "America/Detroit|US/Michigan",
                "America/Edmonton|Canada/Mountain",
                "America/Fort_Wayne|America/Indiana/Indianapolis",
                "America/Fort_Wayne|America/Indianapolis",
                "America/Fort_Wayne|US/East-Indiana",
                "America/Godthab|America/Nuuk",
                "America/Halifax|Canada/Atlantic",
                "America/Havana|Cuba",
                "America/Indiana/Knox|America/Knox_IN",
                "America/Indiana/Knox|US/Indiana-Starke",
                "America/Jamaica|Jamaica",
                "America/Kentucky/Louisville|America/Louisville",
                "America/Los_Angeles|US/Pacific",
                "America/Los_Angeles|US/Pacific-New",
                "America/Manaus|Brazil/West",
                "America/Mazatlan|Mexico/BajaSur",
                "America/Mexico_City|Mexico/General",
                "America/New_York|US/Eastern",
                "America/Noronha|Brazil/DeNoronha",
                "America/Panama|America/Cayman",
                "America/Phoenix|US/Arizona",
                "America/Port_of_Spain|America/Anguilla",
                "America/Port_of_Spain|America/Antigua",
                "America/Port_of_Spain|America/Dominica",
                "America/Port_of_Spain|America/Grenada",
                "America/Port_of_Spain|America/Guadeloupe",
                "America/Port_of_Spain|America/Marigot",
                "America/Port_of_Spain|America/Montserrat",
                "America/Port_of_Spain|America/St_Barthelemy",
                "America/Port_of_Spain|America/St_Kitts",
                "America/Port_of_Spain|America/St_Lucia",
                "America/Port_of_Spain|America/St_Thomas",
                "America/Port_of_Spain|America/St_Vincent",
                "America/Port_of_Spain|America/Tortola",
                "America/Port_of_Spain|America/Virgin",
                "America/Regina|Canada/Saskatchewan",
                "America/Rio_Branco|America/Porto_Acre",
                "America/Rio_Branco|Brazil/Acre",
                "America/Santiago|Chile/Continental",
                "America/Sao_Paulo|Brazil/East",
                "America/St_Johns|Canada/Newfoundland",
                "America/Tijuana|America/Ensenada",
                "America/Tijuana|America/Santa_Isabel",
                "America/Tijuana|Mexico/BajaNorte",
                "America/Toronto|America/Montreal",
                "America/Toronto|Canada/Eastern",
                "America/Vancouver|Canada/Pacific",
                "America/Whitehorse|Canada/Yukon",
                "America/Winnipeg|Canada/Central",
                "Asia/Ashgabat|Asia/Ashkhabad",
                "Asia/Bangkok|Asia/Phnom_Penh",
                "Asia/Bangkok|Asia/Vientiane",
                "Asia/Dhaka|Asia/Dacca",
                "Asia/Dubai|Asia/Muscat",
                "Asia/Ho_Chi_Minh|Asia/Saigon",
                "Asia/Hong_Kong|Hongkong",
                "Asia/Jerusalem|Asia/Tel_Aviv",
                "Asia/Jerusalem|Israel",
                "Asia/Kathmandu|Asia/Katmandu",
                "Asia/Kolkata|Asia/Calcutta",
                "Asia/Kuala_Lumpur|Asia/Singapore",
                "Asia/Kuala_Lumpur|Singapore",
                "Asia/Macau|Asia/Macao",
                "Asia/Makassar|Asia/Ujung_Pandang",
                "Asia/Nicosia|Europe/Nicosia",
                "Asia/Qatar|Asia/Bahrain",
                "Asia/Rangoon|Asia/Yangon",
                "Asia/Riyadh|Asia/Aden",
                "Asia/Riyadh|Asia/Kuwait",
                "Asia/Seoul|ROK",
                "Asia/Shanghai|Asia/Chongqing",
                "Asia/Shanghai|Asia/Chungking",
                "Asia/Shanghai|Asia/Harbin",
                "Asia/Shanghai|PRC",
                "Asia/Taipei|ROC",
                "Asia/Tehran|Iran",
                "Asia/Thimphu|Asia/Thimbu",
                "Asia/Tokyo|Japan",
                "Asia/Ulaanbaatar|Asia/Ulan_Bator",
                "Asia/Urumqi|Asia/Kashgar",
                "Atlantic/Faroe|Atlantic/Faeroe",
                "Atlantic/Reykjavik|Iceland",
                "Atlantic/South_Georgia|Etc/GMT+2",
                "Australia/Adelaide|Australia/South",
                "Australia/Brisbane|Australia/Queensland",
                "Australia/Broken_Hill|Australia/Yancowinna",
                "Australia/Darwin|Australia/North",
                "Australia/Hobart|Australia/Tasmania",
                "Australia/Lord_Howe|Australia/LHI",
                "Australia/Melbourne|Australia/Victoria",
                "Australia/Perth|Australia/West",
                "Australia/Sydney|Australia/ACT",
                "Australia/Sydney|Australia/Canberra",
                "Australia/Sydney|Australia/NSW",
                "Etc/GMT-0|Etc/GMT",
                "Etc/GMT-0|Etc/GMT+0",
                "Etc/GMT-0|Etc/GMT0",
                "Etc/GMT-0|Etc/Greenwich",
                "Etc/GMT-0|GMT",
                "Etc/GMT-0|GMT+0",
                "Etc/GMT-0|GMT-0",
                "Etc/GMT-0|GMT0",
                "Etc/GMT-0|Greenwich",
                "Etc/UTC|Etc/UCT",
                "Etc/UTC|Etc/Universal",
                "Etc/UTC|Etc/Zulu",
                "Etc/UTC|UCT",
                "Etc/UTC|UTC",
                "Etc/UTC|Universal",
                "Etc/UTC|Zulu",
                "Europe/Belgrade|Europe/Ljubljana",
                "Europe/Belgrade|Europe/Podgorica",
                "Europe/Belgrade|Europe/Sarajevo",
                "Europe/Belgrade|Europe/Skopje",
                "Europe/Belgrade|Europe/Zagreb",
                "Europe/Chisinau|Europe/Tiraspol",
                "Europe/Dublin|Eire",
                "Europe/Helsinki|Europe/Mariehamn",
                "Europe/Istanbul|Asia/Istanbul",
                "Europe/Istanbul|Turkey",
                "Europe/Lisbon|Portugal",
                "Europe/London|Europe/Belfast",
                "Europe/London|Europe/Guernsey",
                "Europe/London|Europe/Isle_of_Man",
                "Europe/London|Europe/Jersey",
                "Europe/London|GB",
                "Europe/London|GB-Eire",
                "Europe/Moscow|W-SU",
                "Europe/Oslo|Arctic/Longyearbyen",
                "Europe/Oslo|Atlantic/Jan_Mayen",
                "Europe/Prague|Europe/Bratislava",
                "Europe/Rome|Europe/San_Marino",
                "Europe/Rome|Europe/Vatican",
                "Europe/Warsaw|Poland",
                "Europe/Zurich|Europe/Busingen",
                "Europe/Zurich|Europe/Vaduz",
                "Indian/Christmas|Etc/GMT-7",
                "Pacific/Auckland|Antarctica/McMurdo",
                "Pacific/Auckland|Antarctica/South_Pole",
                "Pacific/Auckland|NZ",
                "Pacific/Chatham|NZ-CHAT",
                "Pacific/Chuuk|Pacific/Truk",
                "Pacific/Chuuk|Pacific/Yap",
                "Pacific/Easter|Chile/EasterIsland",
                "Pacific/Guam|Pacific/Saipan",
                "Pacific/Honolulu|Pacific/Johnston",
                "Pacific/Honolulu|US/Hawaii",
                "Pacific/Kwajalein|Kwajalein",
                "Pacific/Pago_Pago|Pacific/Midway",
                "Pacific/Pago_Pago|Pacific/Samoa",
                "Pacific/Pago_Pago|US/Samoa",
                "Pacific/Palau|Etc/GMT-9",
                "Pacific/Pohnpei|Pacific/Ponape",
                "Pacific/Port_Moresby|Etc/GMT-10",
                "Pacific/Tarawa|Etc/GMT-12",
                "Pacific/Tarawa|Pacific/Funafuti",
                "Pacific/Tarawa|Pacific/Wake",
                "Pacific/Tarawa|Pacific/Wallis"
                ],
                "countries": [
                "AD|Europe/Andorra",
                "AE|Asia/Dubai",
                "AF|Asia/Kabul",
                "AG|America/Port_of_Spain America/Antigua",
                "AI|America/Port_of_Spain America/Anguilla",
                "AL|Europe/Tirane",
                "AM|Asia/Yerevan",
                "AO|Africa/Lagos Africa/Luanda",
                "AQ|Antarctica/Casey Antarctica/Davis Antarctica/DumontDUrville Antarctica/Mawson Antarctica/Palmer Antarctica/Rothera Antarctica/Syowa Antarctica/Troll Antarctica/Vostok Pacific/Auckland Antarctica/McMurdo",
                "AR|America/Argentina/Buenos_Aires America/Argentina/Cordoba America/Argentina/Salta America/Argentina/Jujuy America/Argentina/Tucuman America/Argentina/Catamarca America/Argentina/La_Rioja America/Argentina/San_Juan America/Argentina/Mendoza America/Argentina/San_Luis America/Argentina/Rio_Gallegos America/Argentina/Ushuaia",
                "AS|Pacific/Pago_Pago",
                "AT|Europe/Vienna",
                "AU|Australia/Lord_Howe Antarctica/Macquarie Australia/Hobart Australia/Currie Australia/Melbourne Australia/Sydney Australia/Broken_Hill Australia/Brisbane Australia/Lindeman Australia/Adelaide Australia/Darwin Australia/Perth Australia/Eucla",
                "AW|America/Curacao America/Aruba",
                "AX|Europe/Helsinki Europe/Mariehamn",
                "AZ|Asia/Baku",
                "BA|Europe/Belgrade Europe/Sarajevo",
                "BB|America/Barbados",
                "BD|Asia/Dhaka",
                "BE|Europe/Brussels",
                "BF|Africa/Abidjan Africa/Ouagadougou",
                "BG|Europe/Sofia",
                "BH|Asia/Qatar Asia/Bahrain",
                "BI|Africa/Maputo Africa/Bujumbura",
                "BJ|Africa/Lagos Africa/Porto-Novo",
                "BL|America/Port_of_Spain America/St_Barthelemy",
                "BM|Atlantic/Bermuda",
                "BN|Asia/Brunei",
                "BO|America/La_Paz",
                "BQ|America/Curacao America/Kralendijk",
                "BR|America/Noronha America/Belem America/Fortaleza America/Recife America/Araguaina America/Maceio America/Bahia America/Sao_Paulo America/Campo_Grande America/Cuiaba America/Santarem America/Porto_Velho America/Boa_Vista America/Manaus America/Eirunepe America/Rio_Branco",
                "BS|America/Nassau",
                "BT|Asia/Thimphu",
                "BW|Africa/Maputo Africa/Gaborone",
                "BY|Europe/Minsk",
                "BZ|America/Belize",
                "CA|America/St_Johns America/Halifax America/Glace_Bay America/Moncton America/Goose_Bay America/Blanc-Sablon America/Toronto America/Nipigon America/Thunder_Bay America/Iqaluit America/Pangnirtung America/Atikokan America/Winnipeg America/Rainy_River America/Resolute America/Rankin_Inlet America/Regina America/Swift_Current America/Edmonton America/Cambridge_Bay America/Yellowknife America/Inuvik America/Creston America/Dawson_Creek America/Fort_Nelson America/Vancouver America/Whitehorse America/Dawson",
                "CC|Indian/Cocos",
                "CD|Africa/Maputo Africa/Lagos Africa/Kinshasa Africa/Lubumbashi",
                "CF|Africa/Lagos Africa/Bangui",
                "CG|Africa/Lagos Africa/Brazzaville",
                "CH|Europe/Zurich",
                "CI|Africa/Abidjan",
                "CK|Pacific/Rarotonga",
                "CL|America/Santiago America/Punta_Arenas Pacific/Easter",
                "CM|Africa/Lagos Africa/Douala",
                "CN|Asia/Shanghai Asia/Urumqi",
                "CO|America/Bogota",
                "CR|America/Costa_Rica",
                "CU|America/Havana",
                "CV|Atlantic/Cape_Verde",
                "CW|America/Curacao",
                "CX|Indian/Christmas",
                "CY|Asia/Nicosia Asia/Famagusta",
                "CZ|Europe/Prague",
                "DE|Europe/Zurich Europe/Berlin Europe/Busingen",
                "DJ|Africa/Nairobi Africa/Djibouti",
                "DK|Europe/Copenhagen",
                "DM|America/Port_of_Spain America/Dominica",
                "DO|America/Santo_Domingo",
                "DZ|Africa/Algiers",
                "EC|America/Guayaquil Pacific/Galapagos",
                "EE|Europe/Tallinn",
                "EG|Africa/Cairo",
                "EH|Africa/El_Aaiun",
                "ER|Africa/Nairobi Africa/Asmara",
                "ES|Europe/Madrid Africa/Ceuta Atlantic/Canary",
                "ET|Africa/Nairobi Africa/Addis_Ababa",
                "FI|Europe/Helsinki",
                "FJ|Pacific/Fiji",
                "FK|Atlantic/Stanley",
                "FM|Pacific/Chuuk Pacific/Pohnpei Pacific/Kosrae",
                "FO|Atlantic/Faroe",
                "FR|Europe/Paris",
                "GA|Africa/Lagos Africa/Libreville",
                "GB|Europe/London",
                "GD|America/Port_of_Spain America/Grenada",
                "GE|Asia/Tbilisi",
                "GF|America/Cayenne",
                "GG|Europe/London Europe/Guernsey",
                "GH|Africa/Accra",
                "GI|Europe/Gibraltar",
                "GL|America/Nuuk America/Danmarkshavn America/Scoresbysund America/Thule",
                "GM|Africa/Abidjan Africa/Banjul",
                "GN|Africa/Abidjan Africa/Conakry",
                "GP|America/Port_of_Spain America/Guadeloupe",
                "GQ|Africa/Lagos Africa/Malabo",
                "GR|Europe/Athens",
                "GS|Atlantic/South_Georgia",
                "GT|America/Guatemala",
                "GU|Pacific/Guam",
                "GW|Africa/Bissau",
                "GY|America/Guyana",
                "HK|Asia/Hong_Kong",
                "HN|America/Tegucigalpa",
                "HR|Europe/Belgrade Europe/Zagreb",
                "HT|America/Port-au-Prince",
                "HU|Europe/Budapest",
                "ID|Asia/Jakarta Asia/Pontianak Asia/Makassar Asia/Jayapura",
                "IE|Europe/Dublin",
                "IL|Asia/Jerusalem",
                "IM|Europe/London Europe/Isle_of_Man",
                "IN|Asia/Kolkata",
                "IO|Indian/Chagos",
                "IQ|Asia/Baghdad",
                "IR|Asia/Tehran",
                "IS|Atlantic/Reykjavik",
                "IT|Europe/Rome",
                "JE|Europe/London Europe/Jersey",
                "JM|America/Jamaica",
                "JO|Asia/Amman",
                "JP|Asia/Tokyo",
                "KE|Africa/Nairobi",
                "KG|Asia/Bishkek",
                "KH|Asia/Bangkok Asia/Phnom_Penh",
                "KI|Pacific/Tarawa Pacific/Enderbury Pacific/Kiritimati",
                "KM|Africa/Nairobi Indian/Comoro",
                "KN|America/Port_of_Spain America/St_Kitts",
                "KP|Asia/Pyongyang",
                "KR|Asia/Seoul",
                "KW|Asia/Riyadh Asia/Kuwait",
                "KY|America/Panama America/Cayman",
                "KZ|Asia/Almaty Asia/Qyzylorda Asia/Qostanay Asia/Aqtobe Asia/Aqtau Asia/Atyrau Asia/Oral",
                "LA|Asia/Bangkok Asia/Vientiane",
                "LB|Asia/Beirut",
                "LC|America/Port_of_Spain America/St_Lucia",
                "LI|Europe/Zurich Europe/Vaduz",
                "LK|Asia/Colombo",
                "LR|Africa/Monrovia",
                "LS|Africa/Johannesburg Africa/Maseru",
                "LT|Europe/Vilnius",
                "LU|Europe/Luxembourg",
                "LV|Europe/Riga",
                "LY|Africa/Tripoli",
                "MA|Africa/Casablanca",
                "MC|Europe/Monaco",
                "MD|Europe/Chisinau",
                "ME|Europe/Belgrade Europe/Podgorica",
                "MF|America/Port_of_Spain America/Marigot",
                "MG|Africa/Nairobi Indian/Antananarivo",
                "MH|Pacific/Majuro Pacific/Kwajalein",
                "MK|Europe/Belgrade Europe/Skopje",
                "ML|Africa/Abidjan Africa/Bamako",
                "MM|Asia/Yangon",
                "MN|Asia/Ulaanbaatar Asia/Hovd Asia/Choibalsan",
                "MO|Asia/Macau",
                "MP|Pacific/Guam Pacific/Saipan",
                "MQ|America/Martinique",
                "MR|Africa/Abidjan Africa/Nouakchott",
                "MS|America/Port_of_Spain America/Montserrat",
                "MT|Europe/Malta",
                "MU|Indian/Mauritius",
                "MV|Indian/Maldives",
                "MW|Africa/Maputo Africa/Blantyre",
                "MX|America/Mexico_City America/Cancun America/Merida America/Monterrey America/Matamoros America/Mazatlan America/Chihuahua America/Ojinaga America/Hermosillo America/Tijuana America/Bahia_Banderas",
                "MY|Asia/Kuala_Lumpur Asia/Kuching",
                "MZ|Africa/Maputo",
                "NA|Africa/Windhoek",
                "NC|Pacific/Noumea",
                "NE|Africa/Lagos Africa/Niamey",
                "NF|Pacific/Norfolk",
                "NG|Africa/Lagos",
                "NI|America/Managua",
                "NL|Europe/Amsterdam",
                "NO|Europe/Oslo",
                "NP|Asia/Kathmandu",
                "NR|Pacific/Nauru",
                "NU|Pacific/Niue",
                "NZ|Pacific/Auckland Pacific/Chatham",
                "OM|Asia/Dubai Asia/Muscat",
                "PA|America/Panama",
                "PE|America/Lima",
                "PF|Pacific/Tahiti Pacific/Marquesas Pacific/Gambier",
                "PG|Pacific/Port_Moresby Pacific/Bougainville",
                "PH|Asia/Manila",
                "PK|Asia/Karachi",
                "PL|Europe/Warsaw",
                "PM|America/Miquelon",
                "PN|Pacific/Pitcairn",
                "PR|America/Puerto_Rico",
                "PS|Asia/Gaza Asia/Hebron",
                "PT|Europe/Lisbon Atlantic/Madeira Atlantic/Azores",
                "PW|Pacific/Palau",
                "PY|America/Asuncion",
                "QA|Asia/Qatar",
                "RE|Indian/Reunion",
                "RO|Europe/Bucharest",
                "RS|Europe/Belgrade",
                "RU|Europe/Kaliningrad Europe/Moscow Europe/Simferopol Europe/Kirov Europe/Astrakhan Europe/Volgograd Europe/Saratov Europe/Ulyanovsk Europe/Samara Asia/Yekaterinburg Asia/Omsk Asia/Novosibirsk Asia/Barnaul Asia/Tomsk Asia/Novokuznetsk Asia/Krasnoyarsk Asia/Irkutsk Asia/Chita Asia/Yakutsk Asia/Khandyga Asia/Vladivostok Asia/Ust-Nera Asia/Magadan Asia/Sakhalin Asia/Srednekolymsk Asia/Kamchatka Asia/Anadyr",
                "RW|Africa/Maputo Africa/Kigali",
                "SA|Asia/Riyadh",
                "SB|Pacific/Guadalcanal",
                "SC|Indian/Mahe",
                "SD|Africa/Khartoum",
                "SE|Europe/Stockholm",
                "SG|Asia/Singapore",
                "SH|Africa/Abidjan Atlantic/St_Helena",
                "SI|Europe/Belgrade Europe/Ljubljana",
                "SJ|Europe/Oslo Arctic/Longyearbyen",
                "SK|Europe/Prague Europe/Bratislava",
                "SL|Africa/Abidjan Africa/Freetown",
                "SM|Europe/Rome Europe/San_Marino",
                "SN|Africa/Abidjan Africa/Dakar",
                "SO|Africa/Nairobi Africa/Mogadishu",
                "SR|America/Paramaribo",
                "SS|Africa/Juba",
                "ST|Africa/Sao_Tome",
                "SV|America/El_Salvador",
                "SX|America/Curacao America/Lower_Princes",
                "SY|Asia/Damascus",
                "SZ|Africa/Johannesburg Africa/Mbabane",
                "TC|America/Grand_Turk",
                "TD|Africa/Ndjamena",
                "TF|Indian/Reunion Indian/Kerguelen",
                "TG|Africa/Abidjan Africa/Lome",
                "TH|Asia/Bangkok",
                "TJ|Asia/Dushanbe",
                "TK|Pacific/Fakaofo",
                "TL|Asia/Dili",
                "TM|Asia/Ashgabat",
                "TN|Africa/Tunis",
                "TO|Pacific/Tongatapu",
                "TR|Europe/Istanbul",
                "TT|America/Port_of_Spain",
                "TV|Pacific/Funafuti",
                "TW|Asia/Taipei",
                "TZ|Africa/Nairobi Africa/Dar_es_Salaam",
                "UA|Europe/Simferopol Europe/Kiev Europe/Uzhgorod Europe/Zaporozhye",
                "UG|Africa/Nairobi Africa/Kampala",
                "UM|Pacific/Pago_Pago Pacific/Wake Pacific/Honolulu Pacific/Midway",
                "US|America/New_York America/Detroit America/Kentucky/Louisville America/Kentucky/Monticello America/Indiana/Indianapolis America/Indiana/Vincennes America/Indiana/Winamac America/Indiana/Marengo America/Indiana/Petersburg America/Indiana/Vevay America/Chicago America/Indiana/Tell_City America/Indiana/Knox America/Menominee America/North_Dakota/Center America/North_Dakota/New_Salem America/North_Dakota/Beulah America/Denver America/Boise America/Phoenix America/Los_Angeles America/Anchorage America/Juneau America/Sitka America/Metlakatla America/Yakutat America/Nome America/Adak Pacific/Honolulu",
                "UY|America/Montevideo",
                "UZ|Asia/Samarkand Asia/Tashkent",
                "VA|Europe/Rome Europe/Vatican",
                "VC|America/Port_of_Spain America/St_Vincent",
                "VE|America/Caracas",
                "VG|America/Port_of_Spain America/Tortola",
                "VI|America/Port_of_Spain America/St_Thomas",
                "VN|Asia/Bangkok Asia/Ho_Chi_Minh",
                "VU|Pacific/Efate",
                "WF|Pacific/Wallis",
                "WS|Pacific/Apia",
                "YE|Asia/Riyadh Asia/Aden",
                "YT|Africa/Nairobi Indian/Mayotte",
                "ZA|Africa/Johannesburg",
                "ZM|Africa/Maputo Africa/Lusaka",
                "ZW|Africa/Maputo Africa/Harare"
                ]
            }
        }, {}],
        512: [function(require, module, exports) {
            var moment = module.exports = require("./moment-timezone");
            moment.tz.load(require('./data/packed/latest.json'));

        }, {
            "./data/packed/latest.json": 511,
            "./moment-timezone": 513
        }],
        513: [function(require, module, exports) {
            //! moment-timezone.js
            //! version : 0.5.31
            //! Copyright (c) JS Foundation and other contributors
            //! license : MIT
            //! github.com/moment/moment-timezone

            (function(root, factory) {
                "use strict";

                /*global define*/
                if (typeof module === 'object' && module.exports) {
                    module.exports = factory(require('moment')); // Node
                } else if (typeof define === 'function' && define.amd) {
                    define(['moment'], factory); // AMD
                } else {
                    factory(root.moment); // Browser
                }
            }(this, function(moment) {
                "use strict";

                // Resolves es6 module loading issue
                if (moment.version === undefined && moment.default) {
                    moment = moment.default;
                }

                // Do not load moment-timezone a second time.
                // if (moment.tz !== undefined) {
                //  logError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);
                //  return moment;
                // }

                var VERSION = "0.5.31",
                    zones = {},
                    links = {},
                    countries = {},
                    names = {},
                    guesses = {},
                    cachedGuess;

                if (!moment || typeof moment.version !== 'string') {
                    logError('Moment Timezone requires Moment.js. See https://momentjs.com/timezone/docs/#/use-it/browser/');
                }

                var momentVersion = moment.version.split('.'),
                    major = +momentVersion[0],
                    minor = +momentVersion[1];

                // Moment.js version check
                if (major < 2 || (major === 2 && minor < 6)) {
                    logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');
                }

                /************************************
                    Unpacking
                  ************************************/

                function charCodeToInt(charCode) {
                    if (charCode > 96) {
                        return charCode - 87;
                    } else if (charCode > 64) {
                        return charCode - 29;
                    }
                    return charCode - 48;
                }

                function unpackBase60(string) {
                    var i = 0,
                        parts = string.split('.'),
                        whole = parts[0],
                        fractional = parts[1] || '',
                        multiplier = 1,
                        num,
                        out = 0,
                        sign = 1;

                    // handle negative numbers
                    if (string.charCodeAt(0) === 45) {
                        i = 1;
                        sign = -1;
                    }

                    // handle digits before the decimal
                    for (i; i < whole.length; i++) {
                        num = charCodeToInt(whole.charCodeAt(i));
                        out = 60 * out + num;
                    }

                    // handle digits after the decimal
                    for (i = 0; i < fractional.length; i++) {
                        multiplier = multiplier / 60;
                        num = charCodeToInt(fractional.charCodeAt(i));
                        out += num * multiplier;
                    }

                    return out * sign;
                }

                function arrayToInt(array) {
                    for (var i = 0; i < array.length; i++) {
                        array[i] = unpackBase60(array[i]);
                    }
                }

                function intToUntil(array, length) {
                    for (var i = 0; i < length; i++) {
                        array[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds
                    }

                    array[length - 1] = Infinity;
                }

                function mapIndices(source, indices) {
                    var out = [],
                        i;

                    for (i = 0; i < indices.length; i++) {
                        out[i] = source[indices[i]];
                    }

                    return out;
                }

                function unpack(string) {
                    var data = string.split('|'),
                        offsets = data[2].split(' '),
                        indices = data[3].split(''),
                        untils = data[4].split(' ');

                    arrayToInt(offsets);
                    arrayToInt(indices);
                    arrayToInt(untils);

                    intToUntil(untils, indices.length);

                    return {
                        name: data[0],
                        abbrs: mapIndices(data[1].split(' '), indices),
                        offsets: mapIndices(offsets, indices),
                        untils: untils,
                        population: data[5] | 0
                    };
                }

                /************************************
                    Zone object
                  ************************************/

                function Zone(packedString) {
                    if (packedString) {
                        this._set(unpack(packedString));
                    }
                }

                Zone.prototype = {
                    _set: function(unpacked) {
                        this.name = unpacked.name;
                        this.abbrs = unpacked.abbrs;
                        this.untils = unpacked.untils;
                        this.offsets = unpacked.offsets;
                        this.population = unpacked.population;
                    },

                    _index: function(timestamp) {
                        var target = +timestamp,
                            untils = this.untils,
                            i;

                        for (i = 0; i < untils.length; i++) {
                            if (target < untils[i]) {
                                return i;
                            }
                        }
                    },

                    countries: function() {
                        var zone_name = this.name;
                        return Object.keys(countries).filter(function(country_code) {
                            return countries[country_code].zones.indexOf(zone_name) !== -1;
                        });
                    },

                    parse: function(timestamp) {
                        var target = +timestamp,
                            offsets = this.offsets,
                            untils = this.untils,
                            max = untils.length - 1,
                            offset,
                            offsetNext,
                            offsetPrev,
                            i;

                        for (i = 0; i < max; i++) {
                            offset = offsets[i];
                            offsetNext = offsets[i + 1];
                            offsetPrev = offsets[i ? i - 1 : i];

                            if (offset < offsetNext && tz.moveAmbiguousForward) {
                                offset = offsetNext;
                            } else if (offset > offsetPrev && tz.moveInvalidForward) {
                                offset = offsetPrev;
                            }

                            if (target < untils[i] - (offset * 60000)) {
                                return offsets[i];
                            }
                        }

                        return offsets[max];
                    },

                    abbr: function(mom) {
                        return this.abbrs[this._index(mom)];
                    },

                    offset: function(mom) {
                        logError("zone.offset has been deprecated in favor of zone.utcOffset");
                        return this.offsets[this._index(mom)];
                    },

                    utcOffset: function(mom) {
                        return this.offsets[this._index(mom)];
                    }
                };

                /************************************
                    Country object
                  ************************************/

                function Country(country_name, zone_names) {
                    this.name = country_name;
                    this.zones = zone_names;
                }

                /************************************
                    Current Timezone
                  ************************************/

                function OffsetAt(at) {
                    var timeString = at.toTimeString();
                    var abbr = timeString.match(/\([a-z ]+\)/i);
                    if (abbr && abbr[0]) {
                        // 17:56:31 GMT-0600 (CST)
                        // 17:56:31 GMT-0600 (Central Standard Time)
                        abbr = abbr[0].match(/[A-Z]/g);
                        abbr = abbr ? abbr.join('') : undefined;
                    } else {
                        // 17:56:31 CST
                        // 17:56:31 GMT+0800 (台北標準時間)
                        abbr = timeString.match(/[A-Z]{3,5}/g);
                        abbr = abbr ? abbr[0] : undefined;
                    }

                    if (abbr === 'GMT') {
                        abbr = undefined;
                    }

                    this.at = +at;
                    this.abbr = abbr;
                    this.offset = at.getTimezoneOffset();
                }

                function ZoneScore(zone) {
                    this.zone = zone;
                    this.offsetScore = 0;
                    this.abbrScore = 0;
                }

                ZoneScore.prototype.scoreOffsetAt = function(offsetAt) {
                    this.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);
                    if (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {
                        this.abbrScore++;
                    }
                };

                function findChange(low, high) {
                    var mid,
                        diff;

                    while ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {
                        mid = new OffsetAt(new Date(low.at + diff));
                        if (mid.offset === low.offset) {
                            low = mid;
                        } else {
                            high = mid;
                        }
                    }

                    return low;
                }

                function userOffsets() {
                    var startYear = new Date().getFullYear() - 2,
                        last = new OffsetAt(new Date(startYear, 0, 1)),
                        offsets = [last],
                        change,
                        next,
                        i;

                    for (i = 1; i < 48; i++) {
                        next = new OffsetAt(new Date(startYear, i, 1));
                        if (next.offset !== last.offset) {
                            change = findChange(last, next);
                            offsets.push(change);
                            offsets.push(new OffsetAt(new Date(change.at + 6e4)));
                        }
                        last = next;
                    }

                    for (i = 0; i < 4; i++) {
                        offsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));
                        offsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));
                    }

                    return offsets;
                }

                function sortZoneScores(a, b) {
                    if (a.offsetScore !== b.offsetScore) {
                        return a.offsetScore - b.offsetScore;
                    }
                    if (a.abbrScore !== b.abbrScore) {
                        return a.abbrScore - b.abbrScore;
                    }
                    if (a.zone.population !== b.zone.population) {
                        return b.zone.population - a.zone.population;
                    }
                    return b.zone.name.localeCompare(a.zone.name);
                }

                function addToGuesses(name, offsets) {
                    var i,
                        offset;
                    arrayToInt(offsets);
                    for (i = 0; i < offsets.length; i++) {
                        offset = offsets[i];
                        guesses[offset] = guesses[offset] || {};
                        guesses[offset][name] = true;
                    }
                }

                function guessesForUserOffsets(offsets) {
                    var offsetsLength = offsets.length,
                        filteredGuesses = {},
                        out = [],
                        i,
                        j,
                        guessesOffset;

                    for (i = 0; i < offsetsLength; i++) {
                        guessesOffset = guesses[offsets[i].offset] || {};
                        for (j in guessesOffset) {
                            if (guessesOffset.hasOwnProperty(j)) {
                                filteredGuesses[j] = true;
                            }
                        }
                    }

                    for (i in filteredGuesses) {
                        if (filteredGuesses.hasOwnProperty(i)) {
                            out.push(names[i]);
                        }
                    }

                    return out;
                }

                function rebuildGuess() {

                    // use Intl API when available and returning valid time zone
                    try {
                        var intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;
                        if (intlName && intlName.length > 3) {
                            var name = names[normalizeName(intlName)];
                            if (name) {
                                return name;
                            }
                            logError("Moment Timezone found " + intlName + " from the Intl api, but did not have that data loaded.");
                        }
                    } catch (e) {

                    }

                    var offsets = userOffsets(),
                        offsetsLength = offsets.length,
                        guesses = guessesForUserOffsets(offsets),
                        zoneScores = [],
                        zoneScore,
                        i,
                        j;

                    for (i = 0; i < guesses.length; i++) {
                        zoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);
                        for (j = 0; j < offsetsLength; j++) {
                            zoneScore.scoreOffsetAt(offsets[j]);
                        }
                        zoneScores.push(zoneScore);
                    }

                    zoneScores.sort(sortZoneScores);

                    return zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;
                }

                function guess(ignoreCache) {
                    if (!cachedGuess || ignoreCache) {
                        cachedGuess = rebuildGuess();
                    }
                    return cachedGuess;
                }

                /************************************
                    Global Methods
                  ************************************/

                function normalizeName(name) {
                    return (name || '').toLowerCase().replace(/\//g, '_');
                }

                function addZone(packed) {
                    var i,
                        name,
                        split,
                        normalized;

                    if (typeof packed === "string") {
                        packed = [packed];
                    }

                    for (i = 0; i < packed.length; i++) {
                        split = packed[i].split('|');
                        name = split[0];
                        normalized = normalizeName(name);
                        zones[normalized] = packed[i];
                        names[normalized] = name;
                        addToGuesses(normalized, split[2].split(' '));
                    }
                }

                function getZone(name, caller) {

                    name = normalizeName(name);

                    var zone = zones[name];
                    var link;

                    if (zone instanceof Zone) {
                        return zone;
                    }

                    if (typeof zone === 'string') {
                        zone = new Zone(zone);
                        zones[name] = zone;
                        return zone;
                    }

                    // Pass getZone to prevent recursion more than 1 level deep
                    if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
                        zone = zones[name] = new Zone();
                        zone._set(link);
                        zone.name = names[name];
                        return zone;
                    }

                    return null;
                }

                function getNames() {
                    var i,
                        out = [];

                    for (i in names) {
                        if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {
                            out.push(names[i]);
                        }
                    }

                    return out.sort();
                }

                function getCountryNames() {
                    return Object.keys(countries);
                }

                function addLink(aliases) {
                    var i,
                        alias,
                        normal0,
                        normal1;

                    if (typeof aliases === "string") {
                        aliases = [aliases];
                    }

                    for (i = 0; i < aliases.length; i++) {
                        alias = aliases[i].split('|');

                        normal0 = normalizeName(alias[0]);
                        normal1 = normalizeName(alias[1]);

                        links[normal0] = normal1;
                        names[normal0] = alias[0];

                        links[normal1] = normal0;
                        names[normal1] = alias[1];
                    }
                }

                function addCountries(data) {
                    var i,
                        country_code,
                        country_zones,
                        split;
                    if (!data || !data.length)
                        return;
                    for (i = 0; i < data.length; i++) {
                        split = data[i].split('|');
                        country_code = split[0].toUpperCase();
                        country_zones = split[1].split(' ');
                        countries[country_code] = new Country(
                        country_code,
                        country_zones
                        );
                    }
                }

                function getCountry(name) {
                    name = name.toUpperCase();
                    return countries[name] || null;
                }

                function zonesForCountry(country, with_offset) {
                    country = getCountry(country);

                    if (!country)
                        return null;

                    var zones = country.zones.sort();

                    if (with_offset) {
                        return zones.map(function(zone_name) {
                            var zone = getZone(zone_name);
                            return {
                                name: zone_name,
                                offset: zone.utcOffset(new Date())
                            };
                        });
                    }

                    return zones;
                }

                function loadData(data) {
                    addZone(data.zones);
                    addLink(data.links);
                    addCountries(data.countries);
                    tz.dataVersion = data.version;
                }

                function zoneExists(name) {
                    if (!zoneExists.didShowError) {
                        zoneExists.didShowError = true;
                        logError("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");
                    }
                    return !!getZone(name);
                }

                function needsOffset(m) {
                    var isUnixTimestamp = (m._f === 'X' || m._f === 'x');
                    return !!(m._a && (m._tzm === undefined) && !isUnixTimestamp);
                }

                function logError(message) {
                    if (typeof console !== 'undefined' && typeof console.error === 'function') {
                        console.error(message);
                    }
                }

                /************************************
                    moment.tz namespace
                  ************************************/

                function tz(input) {
                    var args = Array.prototype.slice.call(arguments, 0, -1),
                        name = arguments[arguments.length - 1],
                        zone = getZone(name),
                        out = moment.utc.apply(null, args);

                    if (zone && !moment.isMoment(input) && needsOffset(out)) {
                        out.add(zone.parse(out), 'minutes');
                    }

                    out.tz(name);

                    return out;
                }

                tz.version = VERSION;
                tz.dataVersion = '';
                tz._zones = zones;
                tz._links = links;
                tz._names = names;
                tz._countries = countries;
                tz.add = addZone;
                tz.link = addLink;
                tz.load = loadData;
                tz.zone = getZone;
                tz.zoneExists = zoneExists; // deprecated in 0.1.0
                tz.guess = guess;
                tz.names = getNames;
                tz.Zone = Zone;
                tz.unpack = unpack;
                tz.unpackBase60 = unpackBase60;
                tz.needsOffset = needsOffset;
                tz.moveInvalidForward = true;
                tz.moveAmbiguousForward = false;
                tz.countries = getCountryNames;
                tz.zonesForCountry = zonesForCountry;

                /************************************
                    Interface with Moment.js
                  ************************************/

                var fn = moment.fn;

                moment.tz = tz;

                moment.defaultZone = null;

                moment.updateOffset = function(mom, keepTime) {
                    var zone = moment.defaultZone,
                        offset;

                    if (mom._z === undefined) {
                        if (zone && needsOffset(mom) && !mom._isUTC) {
                            mom._d = moment.utc(mom._a)._d;
                            mom.utc().add(zone.parse(mom), 'minutes');
                        }
                        mom._z = zone;
                    }
                    if (mom._z) {
                        offset = mom._z.utcOffset(mom);
                        if (Math.abs(offset) < 16) {
                            offset = offset / 60;
                        }
                        if (mom.utcOffset !== undefined) {
                            var z = mom._z;
                            mom.utcOffset(-offset, keepTime);
                            mom._z = z;
                        } else {
                            mom.zone(offset, keepTime);
                        }
                    }
                };

                fn.tz = function(name, keepTime) {
                    if (name) {
                        if (typeof name !== 'string') {
                            throw new Error('Time zone name must be a string, got ' + name + ' [' + typeof name + ']');
                        }
                        this._z = getZone(name);
                        if (this._z) {
                            moment.updateOffset(this, keepTime);
                        } else {
                            logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");
                        }
                        return this;
                    }
                    if (this._z) {
                        return this._z.name;
                    }
                };

                function abbrWrap(old) {
                    return function() {
                        if (this._z) {
                            return this._z.abbr(this);
                        }
                        return old.call(this);
                    };
                }

                function resetZoneWrap(old) {
                    return function() {
                        this._z = null;
                        return old.apply(this, arguments);
                    };
                }

                function resetZoneWrap2(old) {
                    return function() {
                        if (arguments.length > 0)
                            this._z = null;
                        return old.apply(this, arguments);
                    };
                }

                fn.zoneName = abbrWrap(fn.zoneName);
                fn.zoneAbbr = abbrWrap(fn.zoneAbbr);
                fn.utc = resetZoneWrap(fn.utc);
                fn.local = resetZoneWrap(fn.local);
                fn.utcOffset = resetZoneWrap2(fn.utcOffset);

                moment.tz.setDefault = function(name) {
                    if (major < 2 || (major === 2 && minor < 9)) {
                        logError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');
                    }
                    moment.defaultZone = name ? getZone(name) : null;
                    return moment;
                };

                // Cloning a moment should include the _z property.
                var momentProperties = moment.momentProperties;
                if (Object.prototype.toString.call(momentProperties) === '[object Array]') {
                    // moment 2.8.1+
                    momentProperties.push('_z');
                    momentProperties.push('_a');
                } else if (momentProperties) {
                    // moment 2.7.0
                    momentProperties._z = null;
                }

                // INJECT DATA

                return moment;
            }));

        }, {
            "moment": 514
        }],
        514: [function(require, module, exports) {
            //! moment.js
            //! version : 2.29.1
            //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
            //! license : MIT
            //! momentjs.com

            ;
            (function(global, factory) {
                typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
                typeof define === 'function' && define.amd ? define(factory) :
                global.moment = factory()
            }(this, (function() {
                'use strict';

                var hookCallback;

                function hooks() {
                    return hookCallback.apply(null, arguments);
                }

                // This is done to register the method called with moment()
                // without creating circular dependencies.
                function setHookCallback(callback) {
                    hookCallback = callback;
                }

                function isArray(input) {
                    return (
                        input instanceof Array ||
                        Object.prototype.toString.call(input) === '[object Array]'
                        ) ;
                }

                function isObject(input) {
                    // IE8 will treat undefined and null as object if it wasn't for
                    // input != null
                    return (
                        input != null &&
                        Object.prototype.toString.call(input) === '[object Object]'
                        ) ;
                }

                function hasOwnProp(a, b) {
                    return Object.prototype.hasOwnProperty.call(a, b);
                }

                function isObjectEmpty(obj) {
                    if (Object.getOwnPropertyNames) {
                        return Object.getOwnPropertyNames(obj).length === 0;
                    } else {
                        var k;
                        for (k in obj) {
                            if (hasOwnProp(obj, k)) {
                                return false;
                            }
                        }
                        return true;
                    }
                }

                function isUndefined(input) {
                    return input === void 0;
                }

                function isNumber(input) {
                    return (
                        typeof input === 'number' ||
                        Object.prototype.toString.call(input) === '[object Number]'
                        ) ;
                }

                function isDate(input) {
                    return (
                        input instanceof Date ||
                        Object.prototype.toString.call(input) === '[object Date]'
                        ) ;
                }

                function map(arr, fn) {
                    var res = [],
                        i;
                    for (i = 0; i < arr.length; ++i) {
                        res.push(fn(arr[i], i));
                    }
                    return res;
                }

                function extend(a, b) {
                    for (var i in b) {
                        if (hasOwnProp(b, i)) {
                            a[i] = b[i];
                        }
                    }

                    if (hasOwnProp(b, 'toString')) {
                        a.toString = b.toString;
                    }

                    if (hasOwnProp(b, 'valueOf')) {
                        a.valueOf = b.valueOf;
                    }

                    return a;
                }

                function createUTC(input, format, locale, strict) {
                    return createLocalOrUTC(input, format, locale, strict, true).utc();
                }

                function defaultParsingFlags() {
                    // We need to deep clone this object.
                    return {
                        empty: false,
                        unusedTokens: [],
                        unusedInput: [],
                        overflow: -2,
                        charsLeftOver: 0,
                        nullInput: false,
                        invalidEra: null,
                        invalidMonth: null,
                        invalidFormat: false,
                        userInvalidated: false,
                        iso: false,
                        parsedDateParts: [],
                        era: null,
                        meridiem: null,
                        rfc2822: false,
                        weekdayMismatch: false,
                    };
                }

                function getParsingFlags(m) {
                    if (m._pf == null) {
                        m._pf = defaultParsingFlags();
                    }
                    return m._pf;
                }

                var some;
                if (Array.prototype.some) {
                    some = Array.prototype.some;
                } else {
                    some = function(fun) {
                        var t = Object(this),
                            len = t.length >>> 0,
                            i;

                        for (i = 0; i < len; i++) {
                            if (i in t && fun.call(this, t[i], i, t)) {
                                return true;
                            }
                        }

                        return false;
                    };
                }

                function isValid(m) {
                    if (m._isValid == null) {
                        var flags = getParsingFlags(m),
                            parsedParts = some.call(flags.parsedDateParts, function(i) {
                                return i != null;
                            }),
                            isNowValid =
                            !isNaN(m._d.getTime()) &&
                            flags.overflow < 0 &&
                            !flags.empty &&
                            !flags.invalidEra &&
                            !flags.invalidMonth &&
                            !flags.invalidWeekday &&
                            !flags.weekdayMismatch &&
                            !flags.nullInput &&
                            !flags.invalidFormat &&
                            !flags.userInvalidated &&
                            (!flags.meridiem || (flags.meridiem && parsedParts));

                        if (m._strict) {
                            isNowValid =
                            isNowValid &&
                            flags.charsLeftOver === 0 &&
                            flags.unusedTokens.length === 0 &&
                            flags.bigHour === undefined;
                        }

                        if (Object.isFrozen == null || !Object.isFrozen(m)) {
                            m._isValid = isNowValid;
                        } else {
                            return isNowValid;
                        }
                    }
                    return m._isValid;
                }

                function createInvalid(flags) {
                    var m = createUTC(NaN);
                    if (flags != null) {
                        extend(getParsingFlags(m), flags);
                    } else {
                        getParsingFlags(m).userInvalidated = true;
                    }

                    return m;
                }

                // Plugins that add properties should also add the key here (null value),
                // so we can properly clone ourselves.
                var momentProperties = (hooks.momentProperties = []),
                    updateInProgress = false;

                function copyConfig(to, from) {
                    var i,
                        prop,
                        val;

                    if (!isUndefined(from._isAMomentObject)) {
                        to._isAMomentObject = from._isAMomentObject;
                    }
                    if (!isUndefined(from._i)) {
                        to._i = from._i;
                    }
                    if (!isUndefined(from._f)) {
                        to._f = from._f;
                    }
                    if (!isUndefined(from._l)) {
                        to._l = from._l;
                    }
                    if (!isUndefined(from._strict)) {
                        to._strict = from._strict;
                    }
                    if (!isUndefined(from._tzm)) {
                        to._tzm = from._tzm;
                    }
                    if (!isUndefined(from._isUTC)) {
                        to._isUTC = from._isUTC;
                    }
                    if (!isUndefined(from._offset)) {
                        to._offset = from._offset;
                    }
                    if (!isUndefined(from._pf)) {
                        to._pf = getParsingFlags(from);
                    }
                    if (!isUndefined(from._locale)) {
                        to._locale = from._locale;
                    }

                    if (momentProperties.length > 0) {
                        for (i = 0; i < momentProperties.length; i++) {
                            prop = momentProperties[i];
                            val = from[prop];
                            if (!isUndefined(val)) {
                                to[prop] = val;
                            }
                        }
                    }

                    return to;
                }

                // Moment prototype object
                function Moment(config) {
                    copyConfig(this, config);
                    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
                    if (!this.isValid()) {
                        this._d = new Date(NaN);
                    }
                    // Prevent infinite loop in case updateOffset creates new moment
                    // objects.
                    if (updateInProgress === false) {
                        updateInProgress = true;
                        hooks.updateOffset(this);
                        updateInProgress = false;
                    }
                }

                function isMoment(obj) {
                    return (
                        obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
                        ) ;
                }

                function warn(msg) {
                    if (
                    hooks.suppressDeprecationWarnings === false &&
                    typeof console !== 'undefined' &&
                    console.warn
                    ) {
                        console.warn('Deprecation warning: ' + msg);
                    }
                }

                function deprecate(msg, fn) {
                    var firstTime = true;

                    return extend(function() {
                        if (hooks.deprecationHandler != null) {
                            hooks.deprecationHandler(null, msg);
                        }
                        if (firstTime) {
                            var args = [],
                                arg,
                                i,
                                key;
                            for (i = 0; i < arguments.length; i++) {
                                arg = '';
                                if (typeof arguments[i] === 'object') {
                                    arg += '\n[' + i + '] ';
                                    for (key in arguments[0]) {
                                        if (hasOwnProp(arguments[0], key)) {
                                            arg += key + ': ' + arguments[0][key] + ', ';
                                        }
                                    }
                                    arg = arg.slice(0, -2); // Remove trailing comma and space
                                } else {
                                    arg = arguments[i];
                                }
                                args.push(arg);
                            }
                            warn(
                            msg +
                            '\nArguments: ' +
                            Array.prototype.slice.call(args).join('') +
                            '\n' +
                            new Error().stack
                            );
                            firstTime = false;
                        }
                        return fn.apply(this, arguments);
                    }, fn);
                }

                var deprecations = {};

                function deprecateSimple(name, msg) {
                    if (hooks.deprecationHandler != null) {
                        hooks.deprecationHandler(name, msg);
                    }
                    if (!deprecations[name]) {
                        warn(msg);
                        deprecations[name] = true;
                    }
                }

                hooks.suppressDeprecationWarnings = false;
                hooks.deprecationHandler = null;

                function isFunction(input) {
                    return (
                        (typeof Function !== 'undefined' && input instanceof Function) ||
                        Object.prototype.toString.call(input) === '[object Function]'
                        ) ;
                }

                function set(config) {
                    var prop,
                        i;
                    for (i in config) {
                        if (hasOwnProp(config, i)) {
                            prop = config[i];
                            if (isFunction(prop)) {
                                this[i] = prop;
                            } else {
                                this['_' + i] = prop;
                            }
                        }
                    }
                    this._config = config;
                    // Lenient ordinal parsing accepts just a number in addition to
                    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
                    // TODO: Remove "ordinalParse" fallback in next major release.
                    this._dayOfMonthOrdinalParseLenient = new RegExp(
                    (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                    '|' +
                    /\d{1,2}/.source
                    );
                }

                function mergeConfigs(parentConfig, childConfig) {
                    var res = extend({}, parentConfig),
                        prop;
                    for (prop in childConfig) {
                        if (hasOwnProp(childConfig, prop)) {
                            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                                res[prop] = {};
                                extend(res[prop], parentConfig[prop]);
                                extend(res[prop], childConfig[prop]);
                            } else if (childConfig[prop] != null) {
                                res[prop] = childConfig[prop];
                            } else {
                                delete res[prop];
                            }
                        }
                    }
                    for (prop in parentConfig) {
                        if (
                        hasOwnProp(parentConfig, prop) &&
                        !hasOwnProp(childConfig, prop) &&
                        isObject(parentConfig[prop])
                        ) {
                            // make sure changes to properties don't modify parent config
                            res[prop] = extend({}, res[prop]);
                        }
                    }
                    return res;
                }

                function Locale(config) {
                    if (config != null) {
                        this.set(config);
                    }
                }

                var keys;

                if (Object.keys) {
                    keys = Object.keys;
                } else {
                    keys = function(obj) {
                        var i,
                            res = [];
                        for (i in obj) {
                            if (hasOwnProp(obj, i)) {
                                res.push(i);
                            }
                        }
                        return res;
                    };
                }

                var defaultCalendar = {
                    sameDay: '[Today at] LT',
                    nextDay: '[Tomorrow at] LT',
                    nextWeek: 'dddd [at] LT',
                    lastDay: '[Yesterday at] LT',
                    lastWeek: '[Last] dddd [at] LT',
                    sameElse: 'L',
                };

                function calendar(key, mom, now) {
                    var output = this._calendar[key] || this._calendar['sameElse'];
                    return isFunction(output) ? output.call(mom, now) : output;
                }

                function zeroFill(number, targetLength, forceSign) {
                    var absNumber = '' + Math.abs(number),
                        zerosToFill = targetLength - absNumber.length,
                        sign = number >= 0;
                    return (
                    (sign ? (forceSign ? '+' : '') : '-') +
                    Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
                    absNumber
                    ) ;
                }

                var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
                    localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
                    formatFunctions = {},
                    formatTokenFunctions = {};

                // token:    'M'
                // padded:   ['MM', 2]
                // ordinal:  'Mo'
                // callback: function () { this.month() + 1 }
                function addFormatToken(token, padded, ordinal, callback) {
                    var func = callback;
                    if (typeof callback === 'string') {
                        func = function() {
                            return this[callback]();
                        };
                    }
                    if (token) {
                        formatTokenFunctions[token] = func;
                    }
                    if (padded) {
                        formatTokenFunctions[padded[0]] = function() {
                            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
                        };
                    }
                    if (ordinal) {
                        formatTokenFunctions[ordinal] = function() {
                            return this.localeData().ordinal(
                            func.apply(this, arguments),
                            token
                            );
                        };
                    }
                }

                function removeFormattingTokens(input) {
                    if (input.match(/\[[\s\S]/)) {
                        return input.replace(/^\[|\]$/g, '');
                    }
                    return input.replace(/\\/g, '');
                }

                function makeFormatFunction(format) {
                    var array = format.match(formattingTokens),
                        i,
                        length;

                    for (i = 0, length = array.length; i < length; i++) {
                        if (formatTokenFunctions[array[i]]) {
                            array[i] = formatTokenFunctions[array[i]];
                        } else {
                            array[i] = removeFormattingTokens(array[i]);
                        }
                    }

                    return function(mom) {
                        var output = '',
                            i;
                        for (i = 0; i < length; i++) {
                            output += isFunction(array[i])
                            ? array[i].call(mom, format)
                            : array[i];
                        }
                        return output;
                    };
                }

                // format date using native date object
                function formatMoment(m, format) {
                    if (!m.isValid()) {
                        return m.localeData().invalidDate();
                    }

                    format = expandFormat(format, m.localeData());
                    formatFunctions[format] =
                    formatFunctions[format] || makeFormatFunction(format);

                    return formatFunctions[format](m);
                }

                function expandFormat(format, locale) {
                    var i = 5;

                    function replaceLongDateFormatTokens(input) {
                        return locale.longDateFormat(input) || input;
                    }

                    localFormattingTokens.lastIndex = 0;
                    while (i >= 0 && localFormattingTokens.test(format)) {
                        format = format.replace(
                        localFormattingTokens,
                        replaceLongDateFormatTokens
                        );
                        localFormattingTokens.lastIndex = 0;
                        i -= 1;
                    }

                    return format;
                }

                var defaultLongDateFormat = {
                    LTS: 'h:mm:ss A',
                    LT: 'h:mm A',
                    L: 'MM/DD/YYYY',
                    LL: 'MMMM D, YYYY',
                    LLL: 'MMMM D, YYYY h:mm A',
                    LLLL: 'dddd, MMMM D, YYYY h:mm A',
                };

                function longDateFormat(key) {
                    var format = this._longDateFormat[key],
                        formatUpper = this._longDateFormat[key.toUpperCase()];

                    if (format || !formatUpper) {
                        return format;
                    }

                    this._longDateFormat[key] = formatUpper
                    .match(formattingTokens)
                    .map(function(tok) {
                        if (
                        tok === 'MMMM' ||
                        tok === 'MM' ||
                        tok === 'DD' ||
                        tok === 'dddd'
                        ) {
                            return tok.slice(1);
                        }
                        return tok;
                    })
                    .join('');

                    return this._longDateFormat[key];
                }

                var defaultInvalidDate = 'Invalid date';

                function invalidDate() {
                    return this._invalidDate;
                }

                var defaultOrdinal = '%d',
                    defaultDayOfMonthOrdinalParse = /\d{1,2}/;

                function ordinal(number) {
                    return this._ordinal.replace('%d', number);
                }

                var defaultRelativeTime = {
                    future: 'in %s',
                    past: '%s ago',
                    s: 'a few seconds',
                    ss: '%d seconds',
                    m: 'a minute',
                    mm: '%d minutes',
                    h: 'an hour',
                    hh: '%d hours',
                    d: 'a day',
                    dd: '%d days',
                    w: 'a week',
                    ww: '%d weeks',
                    M: 'a month',
                    MM: '%d months',
                    y: 'a year',
                    yy: '%d years',
                };

                function relativeTime(number, withoutSuffix, string, isFuture) {
                    var output = this._relativeTime[string];
                    return isFunction(output)
                    ? output(number, withoutSuffix, string, isFuture)
                    : output.replace(/%d/i, number);
                }

                function pastFuture(diff, output) {
                    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
                    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
                }

                var aliases = {};

                function addUnitAlias(unit, shorthand) {
                    var lowerCase = unit.toLowerCase();
                    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
                }

                function normalizeUnits(units) {
                    return typeof units === 'string'
                    ? aliases[units] || aliases[units.toLowerCase()]
                    : undefined;
                }

                function normalizeObjectUnits(inputObject) {
                    var normalizedInput = {},
                        normalizedProp,
                        prop;

                    for (prop in inputObject) {
                        if (hasOwnProp(inputObject, prop)) {
                            normalizedProp = normalizeUnits(prop);
                            if (normalizedProp) {
                                normalizedInput[normalizedProp] = inputObject[prop];
                            }
                        }
                    }

                    return normalizedInput;
                }

                var priorities = {};

                function addUnitPriority(unit, priority) {
                    priorities[unit] = priority;
                }

                function getPrioritizedUnits(unitsObj) {
                    var units = [],
                        u;
                    for (u in unitsObj) {
                        if (hasOwnProp(unitsObj, u)) {
                            units.push({
                                unit: u,
                                priority: priorities[u]
                            });
                        }
                    }
                    units.sort(function(a, b) {
                        return a.priority - b.priority;
                    });
                    return units;
                }

                function isLeapYear(year) {
                    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
                }

                function absFloor(number) {
                    if (number < 0) {
                        // -0 -> 0
                        return Math.ceil(number) || 0;
                    } else {
                        return Math.floor(number);
                    }
                }

                function toInt(argumentForCoercion) {
                    var coercedNumber = +argumentForCoercion,
                        value = 0;

                    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                        value = absFloor(coercedNumber);
                    }

                    return value;
                }

                function makeGetSet(unit, keepTime) {
                    return function(value) {
                        if (value != null) {
                            set$1(this, unit, value);
                            hooks.updateOffset(this, keepTime);
                            return this;
                        } else {
                            return get(this, unit);
                        }
                    };
                }

                function get(mom, unit) {
                    return mom.isValid()
                    ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
                    : NaN;
                }

                function set$1(mom, unit, value) {
                    if (mom.isValid() && !isNaN(value)) {
                        if (
                        unit === 'FullYear' &&
                        isLeapYear(mom.year()) &&
                        mom.month() === 1 &&
                        mom.date() === 29
                        ) {
                            value = toInt(value);
                            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                            value,
                            mom.month(),
                            daysInMonth(value, mom.month())
                            );
                        } else {
                            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
                        }
                    }
                }

                // MOMENTS

                function stringGet(units) {
                    units = normalizeUnits(units);
                    if (isFunction(this[units])) {
                        return this[units]();
                    }
                    return this;
                }

                function stringSet(units, value) {
                    if (typeof units === 'object') {
                        units = normalizeObjectUnits(units);
                        var prioritized = getPrioritizedUnits(units),
                            i;
                        for (i = 0; i < prioritized.length; i++) {
                            this[prioritized[i].unit](units[prioritized[i].unit]);
                        }
                    } else {
                        units = normalizeUnits(units);
                        if (isFunction(this[units])) {
                            return this[units](value);
                        }
                    }
                    return this;
                }

                var match1 = /\d/,
                    //       0 - 9
                    match2 = /\d\d/,
                    //      00 - 99
                    match3 = /\d{3}/,
                    //     000 - 999
                    match4 = /\d{4}/,
                    //    0000 - 9999
                    match6 = /[+-]?\d{6}/,
                    // -999999 - 999999
                    match1to2 = /\d\d?/,
                    //       0 - 99
                    match3to4 = /\d\d\d\d?/,
                    //     999 - 9999
                    match5to6 = /\d\d\d\d\d\d?/,
                    //   99999 - 999999
                    match1to3 = /\d{1,3}/,
                    //       0 - 999
                    match1to4 = /\d{1,4}/,
                    //       0 - 9999
                    match1to6 = /[+-]?\d{1,6}/,
                    // -999999 - 999999
                    matchUnsigned = /\d+/,
                    //       0 - inf
                    matchSigned = /[+-]?\d+/,
                    //    -inf - inf
                    matchOffset = /Z|[+-]\d\d:?\d\d/gi,
                    // +00:00 -00:00 +0000 -0000 or Z
                    matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi,
                    // +00 -00 +00:00 -00:00 +0000 -0000 or Z
                    matchTimestamp = /[+-]?\d+(\.\d{1,3})?/,
                    // 123456789 123456789.123
                    // any word (or two) characters or numbers including two/three word month in arabic.
                    // includes scottish gaelic two word and hyphenated months
                    matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
                    regexes;

                regexes = {};

                function addRegexToken(token, regex, strictRegex) {
                    regexes[token] = isFunction(regex)
                    ? regex
                    : function(isStrict, localeData) {
                        return isStrict && strictRegex ? strictRegex : regex;
                    };
                }

                function getParseRegexForToken(token, config) {
                    if (!hasOwnProp(regexes, token)) {
                        return new RegExp(unescapeFormat(token));
                    }

                    return regexes[token](config._strict, config._locale);
                }

                // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
                function unescapeFormat(s) {
                    return regexEscape(
                    s
                    .replace('\\', '')
                    .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(
                    matched,
                    p1,
                    p2,
                    p3,
                    p4
                    ) {
                        return p1 || p2 || p3 || p4;
                    })
                    );
                }

                function regexEscape(s) {
                    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
                }

                var tokens = {};

                function addParseToken(token, callback) {
                    var i,
                        func = callback;
                    if (typeof token === 'string') {
                        token = [token];
                    }
                    if (isNumber(callback)) {
                        func = function(input, array) {
                            array[callback] = toInt(input);
                        };
                    }
                    for (i = 0; i < token.length; i++) {
                        tokens[token[i]] = func;
                    }
                }

                function addWeekParseToken(token, callback) {
                    addParseToken(token, function(input, array, config, token) {
                        config._w = config._w || {};
                        callback(input, config._w, config, token);
                    });
                }

                function addTimeToArrayFromToken(token, input, config) {
                    if (input != null && hasOwnProp(tokens, token)) {
                        tokens[token](input, config._a, config, token);
                    }
                }

                var YEAR = 0,
                    MONTH = 1,
                    DATE = 2,
                    HOUR = 3,
                    MINUTE = 4,
                    SECOND = 5,
                    MILLISECOND = 6,
                    WEEK = 7,
                    WEEKDAY = 8;

                function mod(n, x) {
                    return ((n % x) + x) % x;
                }

                var indexOf;

                if (Array.prototype.indexOf) {
                    indexOf = Array.prototype.indexOf;
                } else {
                    indexOf = function(o) {
                        // I know
                        var i;
                        for (i = 0; i < this.length; ++i) {
                            if (this[i] === o) {
                                return i;
                            }
                        }
                        return -1;
                    };
                }

                function daysInMonth(year, month) {
                    if (isNaN(year) || isNaN(month)) {
                        return NaN;
                    }
                    var modMonth = mod(month, 12);
                    year += (month - modMonth) / 12;
                    return modMonth === 1
                    ? isLeapYear(year)
                    ? 29
                    : 28
                    : 31 - ((modMonth % 7) % 2);
                }

                // FORMATTING

                addFormatToken('M', ['MM', 2], 'Mo', function() {
                    return this.month() + 1;
                });

                addFormatToken('MMM', 0, 0, function(format) {
                    return this.localeData().monthsShort(this, format);
                });

                addFormatToken('MMMM', 0, 0, function(format) {
                    return this.localeData().months(this, format);
                });

                // ALIASES

                addUnitAlias('month', 'M');

                // PRIORITY

                addUnitPriority('month', 8);

                // PARSING

                addRegexToken('M', match1to2);
                addRegexToken('MM', match1to2, match2);
                addRegexToken('MMM', function(isStrict, locale) {
                    return locale.monthsShortRegex(isStrict);
                });
                addRegexToken('MMMM', function(isStrict, locale) {
                    return locale.monthsRegex(isStrict);
                });

                addParseToken(['M', 'MM'], function(input, array) {
                    array[MONTH] = toInt(input) - 1;
                });

                addParseToken(['MMM', 'MMMM'], function(input, array, config, token) {
                    var month = config._locale.monthsParse(input, token, config._strict);
                    // if we didn't find a month name, mark the date as invalid.
                    if (month != null) {
                        array[MONTH] = month;
                    } else {
                        getParsingFlags(config).invalidMonth = input;
                    }
                });

                // LOCALES

                var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
                    '_'
                    ),
                    defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
                    '_'
                    ),
                    MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
                    defaultMonthsShortRegex = matchWord,
                    defaultMonthsRegex = matchWord;

                function localeMonths(m, format) {
                    if (!m) {
                        return isArray(this._months)
                        ? this._months
                        : this._months['standalone'];
                    }
                    return isArray(this._months)
                    ? this._months[m.month()]
                    : this._months[
                    (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                    ? 'format'
                    : 'standalone'
                    ][m.month()];
                }

                function localeMonthsShort(m, format) {
                    if (!m) {
                        return isArray(this._monthsShort)
                        ? this._monthsShort
                        : this._monthsShort['standalone'];
                    }
                    return isArray(this._monthsShort)
                    ? this._monthsShort[m.month()]
                    : this._monthsShort[
                    MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
                    ][m.month()];
                }

                function handleStrictParse(monthName, format, strict) {
                    var i,
                        ii,
                        mom,
                        llc = monthName.toLocaleLowerCase();
                    if (!this._monthsParse) {
                        // this is not used
                        this._monthsParse = [];
                        this._longMonthsParse = [];
                        this._shortMonthsParse = [];
                        for (i = 0; i < 12; ++i) {
                            mom = createUTC([2000, i]);
                            this._shortMonthsParse[i] = this.monthsShort(
                            mom,
                            ''
                            ).toLocaleLowerCase();
                            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
                        }
                    }

                    if (strict) {
                        if (format === 'MMM') {
                            ii = indexOf.call(this._shortMonthsParse, llc);
                            return ii !== -1 ? ii : null;
                        } else {
                            ii = indexOf.call(this._longMonthsParse, llc);
                            return ii !== -1 ? ii : null;
                        }
                    } else {
                        if (format === 'MMM') {
                            ii = indexOf.call(this._shortMonthsParse, llc);
                            if (ii !== -1) {
                                return ii;
                            }
                            ii = indexOf.call(this._longMonthsParse, llc);
                            return ii !== -1 ? ii : null;
                        } else {
                            ii = indexOf.call(this._longMonthsParse, llc);
                            if (ii !== -1) {
                                return ii;
                            }
                            ii = indexOf.call(this._shortMonthsParse, llc);
                            return ii !== -1 ? ii : null;
                        }
                    }
                }

                function localeMonthsParse(monthName, format, strict) {
                    var i,
                        mom,
                        regex;

                    if (this._monthsParseExact) {
                        return handleStrictParse.call(this, monthName, format, strict);
                    }

                    if (!this._monthsParse) {
                        this._monthsParse = [];
                        this._longMonthsParse = [];
                        this._shortMonthsParse = [];
                    }

                    // TODO: add sorting
                    // Sorting makes sure if one month (or abbr) is a prefix of another
                    // see sorting in computeMonthsParse
                    for (i = 0; i < 12; i++) {
                        // make the regex if we don't have it already
                        mom = createUTC([2000, i]);
                        if (strict && !this._longMonthsParse[i]) {
                            this._longMonthsParse[i] = new RegExp(
                            '^' + this.months(mom, '').replace('.', '') + '$',
                            'i'
                            );
                            this._shortMonthsParse[i] = new RegExp(
                            '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                            'i'
                            );
                        }
                        if (!strict && !this._monthsParse[i]) {
                            regex =
                            '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                        }
                        // test the regex
                        if (
                        strict &&
                        format === 'MMMM' &&
                        this._longMonthsParse[i].test(monthName)
                        ) {
                            return i;
                        } else if (
                        strict &&
                        format === 'MMM' &&
                        this._shortMonthsParse[i].test(monthName)
                        ) {
                            return i;
                        } else if (!strict && this._monthsParse[i].test(monthName)) {
                            return i;
                        }
                    }
                }

                // MOMENTS

                function setMonth(mom, value) {
                    var dayOfMonth;

                    if (!mom.isValid()) {
                        // No op
                        return mom;
                    }

                    if (typeof value === 'string') {
                        if (/^\d+$/.test(value)) {
                            value = toInt(value);
                        } else {
                            value = mom.localeData().monthsParse(value);
                            // TODO: Another silent failure?
                            if (!isNumber(value)) {
                                return mom;
                            }
                        }
                    }

                    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
                    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
                    return mom;
                }

                function getSetMonth(value) {
                    if (value != null) {
                        setMonth(this, value);
                        hooks.updateOffset(this, true);
                        return this;
                    } else {
                        return get(this, 'Month');
                    }
                }

                function getDaysInMonth() {
                    return daysInMonth(this.year(), this.month());
                }

                function monthsShortRegex(isStrict) {
                    if (this._monthsParseExact) {
                        if (!hasOwnProp(this, '_monthsRegex')) {
                            computeMonthsParse.call(this);
                        }
                        if (isStrict) {
                            return this._monthsShortStrictRegex;
                        } else {
                            return this._monthsShortRegex;
                        }
                    } else {
                        if (!hasOwnProp(this, '_monthsShortRegex')) {
                            this._monthsShortRegex = defaultMonthsShortRegex;
                        }
                        return this._monthsShortStrictRegex && isStrict
                        ? this._monthsShortStrictRegex
                        : this._monthsShortRegex;
                    }
                }

                function monthsRegex(isStrict) {
                    if (this._monthsParseExact) {
                        if (!hasOwnProp(this, '_monthsRegex')) {
                            computeMonthsParse.call(this);
                        }
                        if (isStrict) {
                            return this._monthsStrictRegex;
                        } else {
                            return this._monthsRegex;
                        }
                    } else {
                        if (!hasOwnProp(this, '_monthsRegex')) {
                            this._monthsRegex = defaultMonthsRegex;
                        }
                        return this._monthsStrictRegex && isStrict
                        ? this._monthsStrictRegex
                        : this._monthsRegex;
                    }
                }

                function computeMonthsParse() {
                    function cmpLenRev(a, b) {
                        return b.length - a.length;
                    }

                    var shortPieces = [],
                        longPieces = [],
                        mixedPieces = [],
                        i,
                        mom;
                    for (i = 0; i < 12; i++) {
                        // make the regex if we don't have it already
                        mom = createUTC([2000, i]);
                        shortPieces.push(this.monthsShort(mom, ''));
                        longPieces.push(this.months(mom, ''));
                        mixedPieces.push(this.months(mom, ''));
                        mixedPieces.push(this.monthsShort(mom, ''));
                    }
                    // Sorting makes sure if one month (or abbr) is a prefix of another it
                    // will match the longer piece.
                    shortPieces.sort(cmpLenRev);
                    longPieces.sort(cmpLenRev);
                    mixedPieces.sort(cmpLenRev);
                    for (i = 0; i < 12; i++) {
                        shortPieces[i] = regexEscape(shortPieces[i]);
                        longPieces[i] = regexEscape(longPieces[i]);
                    }
                    for (i = 0; i < 24; i++) {
                        mixedPieces[i] = regexEscape(mixedPieces[i]);
                    }

                    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
                    this._monthsShortRegex = this._monthsRegex;
                    this._monthsStrictRegex = new RegExp(
                    '^(' + longPieces.join('|') + ')',
                    'i'
                    );
                    this._monthsShortStrictRegex = new RegExp(
                    '^(' + shortPieces.join('|') + ')',
                    'i'
                    );
                }

                // FORMATTING

                addFormatToken('Y', 0, 0, function() {
                    var y = this.year();
                    return y <= 9999 ? zeroFill(y, 4) : '+' + y;
                });

                addFormatToken(0, ['YY', 2], 0, function() {
                    return this.year() % 100;
                });

                addFormatToken(0, ['YYYY', 4], 0, 'year');
                addFormatToken(0, ['YYYYY', 5], 0, 'year');
                addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

                // ALIASES

                addUnitAlias('year', 'y');

                // PRIORITIES

                addUnitPriority('year', 1);

                // PARSING

                addRegexToken('Y', matchSigned);
                addRegexToken('YY', match1to2, match2);
                addRegexToken('YYYY', match1to4, match4);
                addRegexToken('YYYYY', match1to6, match6);
                addRegexToken('YYYYYY', match1to6, match6);

                addParseToken(['YYYYY', 'YYYYYY'], YEAR);
                addParseToken('YYYY', function(input, array) {
                    array[YEAR] =
                    input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
                });
                addParseToken('YY', function(input, array) {
                    array[YEAR] = hooks.parseTwoDigitYear(input);
                });
                addParseToken('Y', function(input, array) {
                    array[YEAR] = parseInt(input, 10);
                });

                // HELPERS

                function daysInYear(year) {
                    return isLeapYear(year) ? 366 : 365;
                }

                // HOOKS

                hooks.parseTwoDigitYear = function(input) {
                    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
                };

                // MOMENTS

                var getSetYear = makeGetSet('FullYear', true);

                function getIsLeapYear() {
                    return isLeapYear(this.year());
                }

                function createDate(y, m, d, h, M, s, ms) {
                    // can't just apply() to create a date:
                    // https://stackoverflow.com/q/181348
                    var date;
                    // the date constructor remaps years 0-99 to 1900-1999
                    if (y < 100 && y >= 0) {
                        // preserve leap years using a full 400 year cycle, then reset
                        date = new Date(y + 400, m, d, h, M, s, ms);
                        if (isFinite(date.getFullYear())) {
                            date.setFullYear(y);
                        }
                    } else {
                        date = new Date(y, m, d, h, M, s, ms);
                    }

                    return date;
                }

                function createUTCDate(y) {
                    var date,
                        args;
                    // the Date.UTC function remaps years 0-99 to 1900-1999
                    if (y < 100 && y >= 0) {
                        args = Array.prototype.slice.call(arguments);
                        // preserve leap years using a full 400 year cycle, then reset
                        args[0] = y + 400;
                        date = new Date(Date.UTC.apply(null, args));
                        if (isFinite(date.getUTCFullYear())) {
                            date.setUTCFullYear(y);
                        }
                    } else {
                        date = new Date(Date.UTC.apply(null, arguments));
                    }

                    return date;
                }

                // start-of-first-week - start-of-year
                function firstWeekOffset(year, dow, doy) {
                    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
                        fwd = 7 + dow - doy,
                        // first-week day local weekday -- which local weekday is fwd
                        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

                    return -fwdlw + fwd - 1;
                }

                // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
                function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
                    var localWeekday = (7 + weekday - dow) % 7,
                        weekOffset = firstWeekOffset(year, dow, doy),
                        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                        resYear,
                        resDayOfYear;

                    if (dayOfYear <= 0) {
                        resYear = year - 1;
                        resDayOfYear = daysInYear(resYear) + dayOfYear;
                    } else if (dayOfYear > daysInYear(year)) {
                        resYear = year + 1;
                        resDayOfYear = dayOfYear - daysInYear(year);
                    } else {
                        resYear = year;
                        resDayOfYear = dayOfYear;
                    }

                    return {
                        year: resYear,
                        dayOfYear: resDayOfYear,
                    };
                }

                function weekOfYear(mom, dow, doy) {
                    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                        resWeek,
                        resYear;

                    if (week < 1) {
                        resYear = mom.year() - 1;
                        resWeek = week + weeksInYear(resYear, dow, doy);
                    } else if (week > weeksInYear(mom.year(), dow, doy)) {
                        resWeek = week - weeksInYear(mom.year(), dow, doy);
                        resYear = mom.year() + 1;
                    } else {
                        resYear = mom.year();
                        resWeek = week;
                    }

                    return {
                        week: resWeek,
                        year: resYear,
                    };
                }

                function weeksInYear(year, dow, doy) {
                    var weekOffset = firstWeekOffset(year, dow, doy),
                        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
                    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
                }

                // FORMATTING

                addFormatToken('w', ['ww', 2], 'wo', 'week');
                addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

                // ALIASES

                addUnitAlias('week', 'w');
                addUnitAlias('isoWeek', 'W');

                // PRIORITIES

                addUnitPriority('week', 5);
                addUnitPriority('isoWeek', 5);

                // PARSING

                addRegexToken('w', match1to2);
                addRegexToken('ww', match1to2, match2);
                addRegexToken('W', match1to2);
                addRegexToken('WW', match1to2, match2);

                addWeekParseToken(['w', 'ww', 'W', 'WW'], function(
                input,
                week,
                config,
                token
                ) {
                    week[token.substr(0, 1)] = toInt(input);
                });

                // HELPERS

                // LOCALES

                function localeWeek(mom) {
                    return weekOfYear(mom, this._week.dow, this._week.doy).week;
                }

                var defaultLocaleWeek = {
                    dow: 0,
                    // Sunday is the first day of the week.
                    doy: 6,
                };
                // The week that contains Jan 6th is the first week of the year.

                function localeFirstDayOfWeek() {
                    return this._week.dow;
                }

                function localeFirstDayOfYear() {
                    return this._week.doy;
                }

                // MOMENTS

                function getSetWeek(input) {
                    var week = this.localeData().week(this);
                    return input == null ? week : this.add((input - week) * 7, 'd');
                }

                function getSetISOWeek(input) {
                    var week = weekOfYear(this, 1, 4).week;
                    return input == null ? week : this.add((input - week) * 7, 'd');
                }

                // FORMATTING

                addFormatToken('d', 0, 'do', 'day');

                addFormatToken('dd', 0, 0, function(format) {
                    return this.localeData().weekdaysMin(this, format);
                });

                addFormatToken('ddd', 0, 0, function(format) {
                    return this.localeData().weekdaysShort(this, format);
                });

                addFormatToken('dddd', 0, 0, function(format) {
                    return this.localeData().weekdays(this, format);
                });

                addFormatToken('e', 0, 0, 'weekday');
                addFormatToken('E', 0, 0, 'isoWeekday');

                // ALIASES

                addUnitAlias('day', 'd');
                addUnitAlias('weekday', 'e');
                addUnitAlias('isoWeekday', 'E');

                // PRIORITY
                addUnitPriority('day', 11);
                addUnitPriority('weekday', 11);
                addUnitPriority('isoWeekday', 11);

                // PARSING

                addRegexToken('d', match1to2);
                addRegexToken('e', match1to2);
                addRegexToken('E', match1to2);
                addRegexToken('dd', function(isStrict, locale) {
                    return locale.weekdaysMinRegex(isStrict);
                });
                addRegexToken('ddd', function(isStrict, locale) {
                    return locale.weekdaysShortRegex(isStrict);
                });
                addRegexToken('dddd', function(isStrict, locale) {
                    return locale.weekdaysRegex(isStrict);
                });

                addWeekParseToken(['dd', 'ddd', 'dddd'], function(input, week, config, token) {
                    var weekday = config._locale.weekdaysParse(input, token, config._strict);
                    // if we didn't get a weekday name, mark the date as invalid
                    if (weekday != null) {
                        week.d = weekday;
                    } else {
                        getParsingFlags(config).invalidWeekday = input;
                    }
                });

                addWeekParseToken(['d', 'e', 'E'], function(input, week, config, token) {
                    week[token] = toInt(input);
                });

                // HELPERS

                function parseWeekday(input, locale) {
                    if (typeof input !== 'string') {
                        return input;
                    }

                    if (!isNaN(input)) {
                        return parseInt(input, 10);
                    }

                    input = locale.weekdaysParse(input);
                    if (typeof input === 'number') {
                        return input;
                    }

                    return null;
                }

                function parseIsoWeekday(input, locale) {
                    if (typeof input === 'string') {
                        return locale.weekdaysParse(input) % 7 || 7;
                    }
                    return isNaN(input) ? null : input;
                }

                // LOCALES
                function shiftWeekdays(ws, n) {
                    return ws.slice(n, 7).concat(ws.slice(0, n));
                }

                var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
                    '_'
                    ),
                    defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
                    defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
                    defaultWeekdaysRegex = matchWord,
                    defaultWeekdaysShortRegex = matchWord,
                    defaultWeekdaysMinRegex = matchWord;

                function localeWeekdays(m, format) {
                    var weekdays = isArray(this._weekdays)
                    ? this._weekdays
                    : this._weekdays[
                    m && m !== true && this._weekdays.isFormat.test(format)
                    ? 'format'
                    : 'standalone'
                    ];
                    return m === true
                    ? shiftWeekdays(weekdays, this._week.dow)
                    : m
                    ? weekdays[m.day()]
                    : weekdays;
                }

                function localeWeekdaysShort(m) {
                    return m === true
                    ? shiftWeekdays(this._weekdaysShort, this._week.dow)
                    : m
                    ? this._weekdaysShort[m.day()]
                    : this._weekdaysShort;
                }

                function localeWeekdaysMin(m) {
                    return m === true
                    ? shiftWeekdays(this._weekdaysMin, this._week.dow)
                    : m
                    ? this._weekdaysMin[m.day()]
                    : this._weekdaysMin;
                }

                function handleStrictParse$1(weekdayName, format, strict) {
                    var i,
                        ii,
                        mom,
                        llc = weekdayName.toLocaleLowerCase();
                    if (!this._weekdaysParse) {
                        this._weekdaysParse = [];
                        this._shortWeekdaysParse = [];
                        this._minWeekdaysParse = [];

                        for (i = 0; i < 7; ++i) {
                            mom = createUTC([2000, 1]).day(i);
                            this._minWeekdaysParse[i] = this.weekdaysMin(
                            mom,
                            ''
                            ).toLocaleLowerCase();
                            this._shortWeekdaysParse[i] = this.weekdaysShort(
                            mom,
                            ''
                            ).toLocaleLowerCase();
                            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
                        }
                    }

                    if (strict) {
                        if (format === 'dddd') {
                            ii = indexOf.call(this._weekdaysParse, llc);
                            return ii !== -1 ? ii : null;
                        } else if (format === 'ddd') {
                            ii = indexOf.call(this._shortWeekdaysParse, llc);
                            return ii !== -1 ? ii : null;
                        } else {
                            ii = indexOf.call(this._minWeekdaysParse, llc);
                            return ii !== -1 ? ii : null;
                        }
                    } else {
                        if (format === 'dddd') {
                            ii = indexOf.call(this._weekdaysParse, llc);
                            if (ii !== -1) {
                                return ii;
                            }
                            ii = indexOf.call(this._shortWeekdaysParse, llc);
                            if (ii !== -1) {
                                return ii;
                            }
                            ii = indexOf.call(this._minWeekdaysParse, llc);
                            return ii !== -1 ? ii : null;
                        } else if (format === 'ddd') {
                            ii = indexOf.call(this._shortWeekdaysParse, llc);
                            if (ii !== -1) {
                                return ii;
                            }
                            ii = indexOf.call(this._weekdaysParse, llc);
                            if (ii !== -1) {
                                return ii;
                            }
                            ii = indexOf.call(this._minWeekdaysParse, llc);
                            return ii !== -1 ? ii : null;
                        } else {
                            ii = indexOf.call(this._minWeekdaysParse, llc);
                            if (ii !== -1) {
                                return ii;
                            }
                            ii = indexOf.call(this._weekdaysParse, llc);
                            if (ii !== -1) {
                                return ii;
                            }
                            ii = indexOf.call(this._shortWeekdaysParse, llc);
                            return ii !== -1 ? ii : null;
                        }
                    }
                }

                function localeWeekdaysParse(weekdayName, format, strict) {
                    var i,
                        mom,
                        regex;

                    if (this._weekdaysParseExact) {
                        return handleStrictParse$1.call(this, weekdayName, format, strict);
                    }

                    if (!this._weekdaysParse) {
                        this._weekdaysParse = [];
                        this._minWeekdaysParse = [];
                        this._shortWeekdaysParse = [];
                        this._fullWeekdaysParse = [];
                    }

                    for (i = 0; i < 7; i++) {
                        // make the regex if we don't have it already

                        mom = createUTC([2000, 1]).day(i);
                        if (strict && !this._fullWeekdaysParse[i]) {
                            this._fullWeekdaysParse[i] = new RegExp(
                            '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                            'i'
                            );
                            this._shortWeekdaysParse[i] = new RegExp(
                            '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                            'i'
                            );
                            this._minWeekdaysParse[i] = new RegExp(
                            '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                            'i'
                            );
                        }
                        if (!this._weekdaysParse[i]) {
                            regex =
                            '^' +
                            this.weekdays(mom, '') +
                            '|^' +
                            this.weekdaysShort(mom, '') +
                            '|^' +
                            this.weekdaysMin(mom, '');
                            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                        }
                        // test the regex
                        if (
                        strict &&
                        format === 'dddd' &&
                        this._fullWeekdaysParse[i].test(weekdayName)
                        ) {
                            return i;
                        } else if (
                        strict &&
                        format === 'ddd' &&
                        this._shortWeekdaysParse[i].test(weekdayName)
                        ) {
                            return i;
                        } else if (
                        strict &&
                        format === 'dd' &&
                        this._minWeekdaysParse[i].test(weekdayName)
                        ) {
                            return i;
                        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                            return i;
                        }
                    }
                }

                // MOMENTS

                function getSetDayOfWeek(input) {
                    if (!this.isValid()) {
                        return input != null ? this : NaN;
                    }
                    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
                    if (input != null) {
                        input = parseWeekday(input, this.localeData());
                        return this.add(input - day, 'd');
                    } else {
                        return day;
                    }
                }

                function getSetLocaleDayOfWeek(input) {
                    if (!this.isValid()) {
                        return input != null ? this : NaN;
                    }
                    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
                    return input == null ? weekday : this.add(input - weekday, 'd');
                }

                function getSetISODayOfWeek(input) {
                    if (!this.isValid()) {
                        return input != null ? this : NaN;
                    }

                    // behaves the same as moment#day except
                    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
                    // as a setter, sunday should belong to the previous week.

                    if (input != null) {
                        var weekday = parseIsoWeekday(input, this.localeData());
                        return this.day(this.day() % 7 ? weekday : weekday - 7);
                    } else {
                        return this.day() || 7;
                    }
                }

                function weekdaysRegex(isStrict) {
                    if (this._weekdaysParseExact) {
                        if (!hasOwnProp(this, '_weekdaysRegex')) {
                            computeWeekdaysParse.call(this);
                        }
                        if (isStrict) {
                            return this._weekdaysStrictRegex;
                        } else {
                            return this._weekdaysRegex;
                        }
                    } else {
                        if (!hasOwnProp(this, '_weekdaysRegex')) {
                            this._weekdaysRegex = defaultWeekdaysRegex;
                        }
                        return this._weekdaysStrictRegex && isStrict
                        ? this._weekdaysStrictRegex
                        : this._weekdaysRegex;
                    }
                }

                function weekdaysShortRegex(isStrict) {
                    if (this._weekdaysParseExact) {
                        if (!hasOwnProp(this, '_weekdaysRegex')) {
                            computeWeekdaysParse.call(this);
                        }
                        if (isStrict) {
                            return this._weekdaysShortStrictRegex;
                        } else {
                            return this._weekdaysShortRegex;
                        }
                    } else {
                        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
                        }
                        return this._weekdaysShortStrictRegex && isStrict
                        ? this._weekdaysShortStrictRegex
                        : this._weekdaysShortRegex;
                    }
                }

                function weekdaysMinRegex(isStrict) {
                    if (this._weekdaysParseExact) {
                        if (!hasOwnProp(this, '_weekdaysRegex')) {
                            computeWeekdaysParse.call(this);
                        }
                        if (isStrict) {
                            return this._weekdaysMinStrictRegex;
                        } else {
                            return this._weekdaysMinRegex;
                        }
                    } else {
                        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
                        }
                        return this._weekdaysMinStrictRegex && isStrict
                        ? this._weekdaysMinStrictRegex
                        : this._weekdaysMinRegex;
                    }
                }

                function computeWeekdaysParse() {
                    function cmpLenRev(a, b) {
                        return b.length - a.length;
                    }

                    var minPieces = [],
                        shortPieces = [],
                        longPieces = [],
                        mixedPieces = [],
                        i,
                        mom,
                        minp,
                        shortp,
                        longp;
                    for (i = 0; i < 7; i++) {
                        // make the regex if we don't have it already
                        mom = createUTC([2000, 1]).day(i);
                        minp = regexEscape(this.weekdaysMin(mom, ''));
                        shortp = regexEscape(this.weekdaysShort(mom, ''));
                        longp = regexEscape(this.weekdays(mom, ''));
                        minPieces.push(minp);
                        shortPieces.push(shortp);
                        longPieces.push(longp);
                        mixedPieces.push(minp);
                        mixedPieces.push(shortp);
                        mixedPieces.push(longp);
                    }
                    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
                    // will match the longer piece.
                    minPieces.sort(cmpLenRev);
                    shortPieces.sort(cmpLenRev);
                    longPieces.sort(cmpLenRev);
                    mixedPieces.sort(cmpLenRev);

                    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
                    this._weekdaysShortRegex = this._weekdaysRegex;
                    this._weekdaysMinRegex = this._weekdaysRegex;

                    this._weekdaysStrictRegex = new RegExp(
                    '^(' + longPieces.join('|') + ')',
                    'i'
                    );
                    this._weekdaysShortStrictRegex = new RegExp(
                    '^(' + shortPieces.join('|') + ')',
                    'i'
                    );
                    this._weekdaysMinStrictRegex = new RegExp(
                    '^(' + minPieces.join('|') + ')',
                    'i'
                    );
                }

                // FORMATTING

                function hFormat() {
                    return this.hours() % 12 || 12;
                }

                function kFormat() {
                    return this.hours() || 24;
                }

                addFormatToken('H', ['HH', 2], 0, 'hour');
                addFormatToken('h', ['hh', 2], 0, hFormat);
                addFormatToken('k', ['kk', 2], 0, kFormat);

                addFormatToken('hmm', 0, 0, function() {
                    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
                });

                addFormatToken('hmmss', 0, 0, function() {
                    return (
                    '' +
                    hFormat.apply(this) +
                    zeroFill(this.minutes(), 2) +
                    zeroFill(this.seconds(), 2)
                    ) ;
                });

                addFormatToken('Hmm', 0, 0, function() {
                    return '' + this.hours() + zeroFill(this.minutes(), 2);
                });

                addFormatToken('Hmmss', 0, 0, function() {
                    return (
                    '' +
                    this.hours() +
                    zeroFill(this.minutes(), 2) +
                    zeroFill(this.seconds(), 2)
                    ) ;
                });

                function meridiem(token, lowercase) {
                    addFormatToken(token, 0, 0, function() {
                        return this.localeData().meridiem(
                        this.hours(),
                        this.minutes(),
                        lowercase
                        );
                    });
                }

                meridiem('a', true);
                meridiem('A', false);

                // ALIASES

                addUnitAlias('hour', 'h');

                // PRIORITY
                addUnitPriority('hour', 13);

                // PARSING

                function matchMeridiem(isStrict, locale) {
                    return locale._meridiemParse;
                }

                addRegexToken('a', matchMeridiem);
                addRegexToken('A', matchMeridiem);
                addRegexToken('H', match1to2);
                addRegexToken('h', match1to2);
                addRegexToken('k', match1to2);
                addRegexToken('HH', match1to2, match2);
                addRegexToken('hh', match1to2, match2);
                addRegexToken('kk', match1to2, match2);

                addRegexToken('hmm', match3to4);
                addRegexToken('hmmss', match5to6);
                addRegexToken('Hmm', match3to4);
                addRegexToken('Hmmss', match5to6);

                addParseToken(['H', 'HH'], HOUR);
                addParseToken(['k', 'kk'], function(input, array, config) {
                    var kInput = toInt(input);
                    array[HOUR] = kInput === 24 ? 0 : kInput;
                });
                addParseToken(['a', 'A'], function(input, array, config) {
                    config._isPm = config._locale.isPM(input);
                    config._meridiem = input;
                });
                addParseToken(['h', 'hh'], function(input, array, config) {
                    array[HOUR] = toInt(input);
                    getParsingFlags(config).bigHour = true;
                });
                addParseToken('hmm', function(input, array, config) {
                    var pos = input.length - 2;
                    array[HOUR] = toInt(input.substr(0, pos));
                    array[MINUTE] = toInt(input.substr(pos));
                    getParsingFlags(config).bigHour = true;
                });
                addParseToken('hmmss', function(input, array, config) {
                    var pos1 = input.length - 4,
                        pos2 = input.length - 2;
                    array[HOUR] = toInt(input.substr(0, pos1));
                    array[MINUTE] = toInt(input.substr(pos1, 2));
                    array[SECOND] = toInt(input.substr(pos2));
                    getParsingFlags(config).bigHour = true;
                });
                addParseToken('Hmm', function(input, array, config) {
                    var pos = input.length - 2;
                    array[HOUR] = toInt(input.substr(0, pos));
                    array[MINUTE] = toInt(input.substr(pos));
                });
                addParseToken('Hmmss', function(input, array, config) {
                    var pos1 = input.length - 4,
                        pos2 = input.length - 2;
                    array[HOUR] = toInt(input.substr(0, pos1));
                    array[MINUTE] = toInt(input.substr(pos1, 2));
                    array[SECOND] = toInt(input.substr(pos2));
                });

                // LOCALES

                function localeIsPM(input) {
                    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
                    // Using charAt should be more compatible.
                    return (input + '').toLowerCase().charAt(0) === 'p';
                }

                var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
                    // Setting the hour should keep the time, because the user explicitly
                    // specified which hour they want. So trying to maintain the same hour (in
                    // a new timezone) makes sense. Adding/subtracting hours does not follow
                    // this rule.
                    getSetHour = makeGetSet('Hours', true);

                function localeMeridiem(hours, minutes, isLower) {
                    if (hours > 11) {
                        return isLower ? 'pm' : 'PM';
                    } else {
                        return isLower ? 'am' : 'AM';
                    }
                }

                var baseConfig = {
                    calendar: defaultCalendar,
                    longDateFormat: defaultLongDateFormat,
                    invalidDate: defaultInvalidDate,
                    ordinal: defaultOrdinal,
                    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
                    relativeTime: defaultRelativeTime,

                    months: defaultLocaleMonths,
                    monthsShort: defaultLocaleMonthsShort,

                    week: defaultLocaleWeek,

                    weekdays: defaultLocaleWeekdays,
                    weekdaysMin: defaultLocaleWeekdaysMin,
                    weekdaysShort: defaultLocaleWeekdaysShort,

                    meridiemParse: defaultLocaleMeridiemParse,
                };

                // internal storage for locale config files
                var locales = {},
                    localeFamilies = {},
                    globalLocale;

                function commonPrefix(arr1, arr2) {
                    var i,
                        minl = Math.min(arr1.length, arr2.length);
                    for (i = 0; i < minl; i += 1) {
                        if (arr1[i] !== arr2[i]) {
                            return i;
                        }
                    }
                    return minl;
                }

                function normalizeLocale(key) {
                    return key ? key.toLowerCase().replace('_', '-') : key;
                }

                // pick the locale from the array
                // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
                // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
                function chooseLocale(names) {
                    var i = 0,
                        j,
                        next,
                        locale,
                        split;

                    while (i < names.length) {
                        split = normalizeLocale(names[i]).split('-');
                        j = split.length;
                        next = normalizeLocale(names[i + 1]);
                        next = next ? next.split('-') : null;
                        while (j > 0) {
                            locale = loadLocale(split.slice(0, j).join('-'));
                            if (locale) {
                                return locale;
                            }
                            if (
                            next &&
                            next.length >= j &&
                            commonPrefix(split, next) >= j - 1
                            ) {
                                //the next array item is better than a shallower substring of this one
                                break;
                            }
                            j--;
                        }
                        i++;
                    }
                    return globalLocale;
                }

                function loadLocale(name) {
                    var oldLocale = null,
                        aliasedRequire;
                    // TODO: Find a better way to register and load all the locales in Node
                    if (
                    locales[name] === undefined &&
                    typeof module !== 'undefined' &&
                    module &&
                    module.exports
                    ) {
                        try {
                            oldLocale = globalLocale._abbr;
                            aliasedRequire = require;
                            aliasedRequire('./locale/' + name);
                            getSetGlobalLocale(oldLocale);
                        } catch (e) {
                            // mark as not found to avoid repeating expensive file require call causing high CPU
                            // when trying to find en-US, en_US, en-us for every format call
                            locales[name] = null; // null means not found
                        }
                    }
                    return locales[name];
                }

                // This function will load locale and then set the global locale.  If
                // no arguments are passed in, it will simply return the current global
                // locale key.
                function getSetGlobalLocale(key, values) {
                    var data;
                    if (key) {
                        if (isUndefined(values)) {
                            data = getLocale(key);
                        } else {
                            data = defineLocale(key, values);
                        }

                        if (data) {
                            // moment.duration._locale = moment._locale = data;
                            globalLocale = data;
                        } else {
                            if (typeof console !== 'undefined' && console.warn) {
                                //warn user if arguments are passed but the locale could not be set
                                console.warn(
                                'Locale ' + key + ' not found. Did you forget to load it?'
                                );
                            }
                        }
                    }

                    return globalLocale._abbr;
                }

                function defineLocale(name, config) {
                    if (config !== null) {
                        var locale,
                            parentConfig = baseConfig;
                        config.abbr = name;
                        if (locales[name] != null) {
                            deprecateSimple(
                            'defineLocaleOverride',
                            'use moment.updateLocale(localeName, config) to change ' +
                            'an existing locale. moment.defineLocale(localeName, ' +
                            'config) should only be used for creating a new locale ' +
                            'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                            );
                            parentConfig = locales[name]._config;
                        } else if (config.parentLocale != null) {
                            if (locales[config.parentLocale] != null) {
                                parentConfig = locales[config.parentLocale]._config;
                            } else {
                                locale = loadLocale(config.parentLocale);
                                if (locale != null) {
                                    parentConfig = locale._config;
                                } else {
                                    if (!localeFamilies[config.parentLocale]) {
                                        localeFamilies[config.parentLocale] = [];
                                    }
                                    localeFamilies[config.parentLocale].push({
                                        name: name,
                                        config: config,
                                    });
                                    return null;
                                }
                            }
                        }
                        locales[name] = new Locale(mergeConfigs(parentConfig, config));

                        if (localeFamilies[name]) {
                            localeFamilies[name].forEach(function(x) {
                                defineLocale(x.name, x.config);
                            });
                        }

                        // backwards compat for now: also set the locale
                        // make sure we set the locale AFTER all child locales have been
                        // created, so we won't end up with the child locale set.
                        getSetGlobalLocale(name);

                        return locales[name];
                    } else {
                        // useful for testing
                        delete locales[name];
                        return null;
                    }
                }

                function updateLocale(name, config) {
                    if (config != null) {
                        var locale,
                            tmpLocale,
                            parentConfig = baseConfig;

                        if (locales[name] != null && locales[name].parentLocale != null) {
                            // Update existing child locale in-place to avoid memory-leaks
                            locales[name].set(mergeConfigs(locales[name]._config, config));
                        } else {
                            // MERGE
                            tmpLocale = loadLocale(name);
                            if (tmpLocale != null) {
                                parentConfig = tmpLocale._config;
                            }
                            config = mergeConfigs(parentConfig, config);
                            if (tmpLocale == null) {
                                // updateLocale is called for creating a new locale
                                // Set abbr so it will have a name (getters return
                                // undefined otherwise).
                                config.abbr = name;
                            }
                            locale = new Locale(config);
                            locale.parentLocale = locales[name];
                            locales[name] = locale;
                        }

                        // backwards compat for now: also set the locale
                        getSetGlobalLocale(name);
                    } else {
                        // pass null for config to unupdate, useful for tests
                        if (locales[name] != null) {
                            if (locales[name].parentLocale != null) {
                                locales[name] = locales[name].parentLocale;
                                if (name === getSetGlobalLocale()) {
                                    getSetGlobalLocale(name);
                                }
                            } else if (locales[name] != null) {
                                delete locales[name];
                            }
                        }
                    }
                    return locales[name];
                }

                // returns locale data
                function getLocale(key) {
                    var locale;

                    if (key && key._locale && key._locale._abbr) {
                        key = key._locale._abbr;
                    }

                    if (!key) {
                        return globalLocale;
                    }

                    if (!isArray(key)) {
                        //short-circuit everything else
                        locale = loadLocale(key);
                        if (locale) {
                            return locale;
                        }
                        key = [key];
                    }

                    return chooseLocale(key);
                }

                function listLocales() {
                    return keys(locales);
                }

                function checkOverflow(m) {
                    var overflow,
                        a = m._a;

                    if (a && getParsingFlags(m).overflow === -2) {
                        overflow =
                        a[MONTH] < 0 || a[MONTH] > 11
                        ? MONTH
                        : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                        ? DATE
                        : a[HOUR] < 0 ||
                        a[HOUR] > 24 ||
                        (a[HOUR] === 24 &&
                        (a[MINUTE] !== 0 ||
                        a[SECOND] !== 0 ||
                        a[MILLISECOND] !== 0))
                        ? HOUR
                        : a[MINUTE] < 0 || a[MINUTE] > 59
                        ? MINUTE
                        : a[SECOND] < 0 || a[SECOND] > 59
                        ? SECOND
                        : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                        ? MILLISECOND
                        : -1;

                        if (
                        getParsingFlags(m)._overflowDayOfYear &&
                        (overflow < YEAR || overflow > DATE)
                        ) {
                            overflow = DATE;
                        }
                        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                            overflow = WEEK;
                        }
                        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                            overflow = WEEKDAY;
                        }

                        getParsingFlags(m).overflow = overflow;
                    }

                    return m;
                }

                // iso 8601 regex
                // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
                var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
                    basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
                    tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
                    isoDates = [
                    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                    ['YYYY-DDD', /\d{4}-\d{3}/],
                    ['YYYY-MM', /\d{4}-\d\d/, false],
                    ['YYYYYYMMDD', /[+-]\d{10}/],
                    ['YYYYMMDD', /\d{8}/],
                    ['GGGG[W]WWE', /\d{4}W\d{3}/],
                    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                    ['YYYYDDD', /\d{7}/],
                    ['YYYYMM', /\d{6}/, false],
                    ['YYYY', /\d{4}/, false],
                    ],
                    // iso time formats and regexes
                    isoTimes = [
                    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                    ['HH:mm', /\d\d:\d\d/],
                    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                    ['HHmmss', /\d\d\d\d\d\d/],
                    ['HHmm', /\d\d\d\d/],
                    ['HH', /\d\d/],
                    ],
                    aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
                    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
                    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
                    obsOffsets = {
                        UT: 0,
                        GMT: 0,
                        EDT: -4 * 60,
                        EST: -5 * 60,
                        CDT: -5 * 60,
                        CST: -6 * 60,
                        MDT: -6 * 60,
                        MST: -7 * 60,
                        PDT: -7 * 60,
                        PST: -8 * 60,
                    };

                // date from iso format
                function configFromISO(config) {
                    var i,
                        l,
                        string = config._i,
                        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                        allowTime,
                        dateFormat,
                        timeFormat,
                        tzFormat;

                    if (match) {
                        getParsingFlags(config).iso = true;

                        for (i = 0, l = isoDates.length; i < l; i++) {
                            if (isoDates[i][1].exec(match[1])) {
                                dateFormat = isoDates[i][0];
                                allowTime = isoDates[i][2] !== false;
                                break;
                            }
                        }
                        if (dateFormat == null) {
                            config._isValid = false;
                            return;
                        }
                        if (match[3]) {
                            for (i = 0, l = isoTimes.length; i < l; i++) {
                                if (isoTimes[i][1].exec(match[3])) {
                                    // match[2] should be 'T' or space
                                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                                    break;
                                }
                            }
                            if (timeFormat == null) {
                                config._isValid = false;
                                return;
                            }
                        }
                        if (!allowTime && timeFormat != null) {
                            config._isValid = false;
                            return;
                        }
                        if (match[4]) {
                            if (tzRegex.exec(match[4])) {
                                tzFormat = 'Z';
                            } else {
                                config._isValid = false;
                                return;
                            }
                        }
                        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
                        configFromStringAndFormat(config);
                    } else {
                        config._isValid = false;
                    }
                }

                function extractFromRFC2822Strings(
                yearStr,
                monthStr,
                dayStr,
                hourStr,
                minuteStr,
                secondStr
                ) {
                    var result = [
                    untruncateYear(yearStr),
                    defaultLocaleMonthsShort.indexOf(monthStr),
                    parseInt(dayStr, 10),
                    parseInt(hourStr, 10),
                    parseInt(minuteStr, 10),
                    ];

                    if (secondStr) {
                        result.push(parseInt(secondStr, 10));
                    }

                    return result;
                }

                function untruncateYear(yearStr) {
                    var year = parseInt(yearStr, 10);
                    if (year <= 49) {
                        return 2000 + year;
                    } else if (year <= 999) {
                        return 1900 + year;
                    }
                    return year;
                }

                function preprocessRFC2822(s) {
                    // Remove comments and folding whitespace and replace multiple-spaces with a single space
                    return s
                    .replace(/\([^)]*\)|[\n\t]/g, ' ')
                    .replace(/(\s\s+)/g, ' ')
                    .replace(/^\s\s*/, '')
                    .replace(/\s\s*$/, '');
                }

                function checkWeekday(weekdayStr, parsedInput, config) {
                    if (weekdayStr) {
                        // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
                        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                            weekdayActual = new Date(
                            parsedInput[0],
                            parsedInput[1],
                            parsedInput[2]
                            ).getDay();
                        if (weekdayProvided !== weekdayActual) {
                            getParsingFlags(config).weekdayMismatch = true;
                            config._isValid = false;
                            return false;
                        }
                    }
                    return true;
                }

                function calculateOffset(obsOffset, militaryOffset, numOffset) {
                    if (obsOffset) {
                        return obsOffsets[obsOffset];
                    } else if (militaryOffset) {
                        // the only allowed military tz is Z
                        return 0;
                    } else {
                        var hm = parseInt(numOffset, 10),
                            m = hm % 100,
                            h = (hm - m) / 100;
                        return h * 60 + m;
                    }
                }

                // date and time from ref 2822 format
                function configFromRFC2822(config) {
                    var match = rfc2822.exec(preprocessRFC2822(config._i)),
                        parsedArray;
                    if (match) {
                        parsedArray = extractFromRFC2822Strings(
                        match[4],
                        match[3],
                        match[2],
                        match[5],
                        match[6],
                        match[7]
                        );
                        if (!checkWeekday(match[1], parsedArray, config)) {
                            return;
                        }

                        config._a = parsedArray;
                        config._tzm = calculateOffset(match[8], match[9], match[10]);

                        config._d = createUTCDate.apply(null, config._a);
                        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

                        getParsingFlags(config).rfc2822 = true;
                    } else {
                        config._isValid = false;
                    }
                }

                // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
                function configFromString(config) {
                    var matched = aspNetJsonRegex.exec(config._i);
                    if (matched !== null) {
                        config._d = new Date(+matched[1]);
                        return;
                    }

                    configFromISO(config);
                    if (config._isValid === false) {
                        delete config._isValid;
                    } else {
                        return;
                    }

                    configFromRFC2822(config);
                    if (config._isValid === false) {
                        delete config._isValid;
                    } else {
                        return;
                    }

                    if (config._strict) {
                        config._isValid = false;
                    } else {
                        // Final attempt, use Input Fallback
                        hooks.createFromInputFallback(config);
                    }
                }

                hooks.createFromInputFallback = deprecate(
                'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
                'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
                'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
                function(config) {
                    config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
                }
                );

                // Pick the first defined of two or three arguments.
                function defaults(a, b, c) {
                    if (a != null) {
                        return a;
                    }
                    if (b != null) {
                        return b;
                    }
                    return c;
                }

                function currentDateArray(config) {
                    // hooks is actually the exported moment object
                    var nowValue = new Date(hooks.now());
                    if (config._useUTC) {
                        return [
                        nowValue.getUTCFullYear(),
                        nowValue.getUTCMonth(),
                        nowValue.getUTCDate(),
                        ];
                    }
                    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
                }

                // convert an array to a date.
                // the array should mirror the parameters below
                // note: all values past the year are optional and will default to the lowest possible value.
                // [year, month, day , hour, minute, second, millisecond]
                function configFromArray(config) {
                    var i,
                        date,
                        input = [],
                        currentDate,
                        expectedWeekday,
                        yearToUse;

                    if (config._d) {
                        return;
                    }

                    currentDate = currentDateArray(config);

                    //compute day of the year from weeks and weekdays
                    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                        dayOfYearFromWeekInfo(config);
                    }

                    //if the day of the year is set, figure out what it is
                    if (config._dayOfYear != null) {
                        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

                        if (
                        config._dayOfYear > daysInYear(yearToUse) ||
                        config._dayOfYear === 0
                        ) {
                            getParsingFlags(config)._overflowDayOfYear = true;
                        }

                        date = createUTCDate(yearToUse, 0, config._dayOfYear);
                        config._a[MONTH] = date.getUTCMonth();
                        config._a[DATE] = date.getUTCDate();
                    }

                    // Default to current date.
                    // * if no year, month, day of month are given, default to today
                    // * if day of month is given, default month and year
                    // * if month is given, default only year
                    // * if year is given, don't default anything
                    for (i = 0; i < 3 && config._a[i] == null; ++i) {
                        config._a[i] = input[i] = currentDate[i];
                    }

                    // Zero out whatever was not defaulted, including time
                    for (; i < 7; i++) {
                        config._a[i] = input[i] =
                        config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
                    }

                    // Check for 24:00:00.000
                    if (
                    config._a[HOUR] === 24 &&
                    config._a[MINUTE] === 0 &&
                    config._a[SECOND] === 0 &&
                    config._a[MILLISECOND] === 0
                    ) {
                        config._nextDay = true;
                        config._a[HOUR] = 0;
                    }

                    config._d = (config._useUTC ? createUTCDate : createDate).apply(
                    null,
                    input
                    );
                    expectedWeekday = config._useUTC
                    ? config._d.getUTCDay()
                    : config._d.getDay();

                    // Apply timezone offset from input. The actual utcOffset can be changed
                    // with parseZone.
                    if (config._tzm != null) {
                        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
                    }

                    if (config._nextDay) {
                        config._a[HOUR] = 24;
                    }

                    // check for mismatching day of week
                    if (
                    config._w &&
                    typeof config._w.d !== 'undefined' &&
                    config._w.d !== expectedWeekday
                    ) {
                        getParsingFlags(config).weekdayMismatch = true;
                    }
                }

                function dayOfYearFromWeekInfo(config) {
                    var w,
                        weekYear,
                        week,
                        weekday,
                        dow,
                        doy,
                        temp,
                        weekdayOverflow,
                        curWeek;

                    w = config._w;
                    if (w.GG != null || w.W != null || w.E != null) {
                        dow = 1;
                        doy = 4;

                        // TODO: We need to take the current isoWeekYear, but that depends on
                        // how we interpret now (local, utc, fixed offset). So create
                        // a now version of current config (take local/utc/offset flags, and
                        // create now).
                        weekYear = defaults(
                        w.GG,
                        config._a[YEAR],
                        weekOfYear(createLocal(), 1, 4).year
                        );
                        week = defaults(w.W, 1);
                        weekday = defaults(w.E, 1);
                        if (weekday < 1 || weekday > 7) {
                            weekdayOverflow = true;
                        }
                    } else {
                        dow = config._locale._week.dow;
                        doy = config._locale._week.doy;

                        curWeek = weekOfYear(createLocal(), dow, doy);

                        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

                        // Default to current week.
                        week = defaults(w.w, curWeek.week);

                        if (w.d != null) {
                            // weekday -- low day numbers are considered next week
                            weekday = w.d;
                            if (weekday < 0 || weekday > 6) {
                                weekdayOverflow = true;
                            }
                        } else if (w.e != null) {
                            // local weekday -- counting starts from beginning of week
                            weekday = w.e + dow;
                            if (w.e < 0 || w.e > 6) {
                                weekdayOverflow = true;
                            }
                        } else {
                            // default to beginning of week
                            weekday = dow;
                        }
                    }
                    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
                        getParsingFlags(config)._overflowWeeks = true;
                    } else if (weekdayOverflow != null) {
                        getParsingFlags(config)._overflowWeekday = true;
                    } else {
                        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                        config._a[YEAR] = temp.year;
                        config._dayOfYear = temp.dayOfYear;
                    }
                }

                // constant that refers to the ISO standard
                hooks.ISO_8601 = function() {};

                // constant that refers to the RFC 2822 form
                hooks.RFC_2822 = function() {};

                // date from string and format string
                function configFromStringAndFormat(config) {
                    // TODO: Move this to another part of the creation flow to prevent circular deps
                    if (config._f === hooks.ISO_8601) {
                        configFromISO(config);
                        return;
                    }
                    if (config._f === hooks.RFC_2822) {
                        configFromRFC2822(config);
                        return;
                    }
                    config._a = [];
                    getParsingFlags(config).empty = true;

                    // This array is used to make a Date, either with `new Date` or `Date.UTC`
                    var string = '' + config._i,
                        i,
                        parsedInput,
                        tokens,
                        token,
                        skipped,
                        stringLength = string.length,
                        totalParsedInputLength = 0,
                        era;

                    tokens =
                    expandFormat(config._f, config._locale).match(formattingTokens) || [];

                    for (i = 0; i < tokens.length; i++) {
                        token = tokens[i];
                        parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                        [])[0];
                        if (parsedInput) {
                            skipped = string.substr(0, string.indexOf(parsedInput));
                            if (skipped.length > 0) {
                                getParsingFlags(config).unusedInput.push(skipped);
                            }
                            string = string.slice(
                            string.indexOf(parsedInput) + parsedInput.length
                            );
                            totalParsedInputLength += parsedInput.length;
                        }
                        // don't parse if it's not a known token
                        if (formatTokenFunctions[token]) {
                            if (parsedInput) {
                                getParsingFlags(config).empty = false;
                            } else {
                                getParsingFlags(config).unusedTokens.push(token);
                            }
                            addTimeToArrayFromToken(token, parsedInput, config);
                        } else if (config._strict && !parsedInput) {
                            getParsingFlags(config).unusedTokens.push(token);
                        }
                    }

                    // add remaining unparsed input length to the string
                    getParsingFlags(config).charsLeftOver =
                    stringLength - totalParsedInputLength;
                    if (string.length > 0) {
                        getParsingFlags(config).unusedInput.push(string);
                    }

                    // clear _12h flag if hour is <= 12
                    if (
                    config._a[HOUR] <= 12 &&
                    getParsingFlags(config).bigHour === true &&
                    config._a[HOUR] > 0
                    ) {
                        getParsingFlags(config).bigHour = undefined;
                    }

                    getParsingFlags(config).parsedDateParts = config._a.slice(0);
                    getParsingFlags(config).meridiem = config._meridiem;
                    // handle meridiem
                    config._a[HOUR] = meridiemFixWrap(
                    config._locale,
                    config._a[HOUR],
                    config._meridiem
                    );

                    // handle era
                    era = getParsingFlags(config).era;
                    if (era !== null) {
                        config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
                    }

                    configFromArray(config);
                    checkOverflow(config);
                }

                function meridiemFixWrap(locale, hour, meridiem) {
                    var isPm;

                    if (meridiem == null) {
                        // nothing to do
                        return hour;
                    }
                    if (locale.meridiemHour != null) {
                        return locale.meridiemHour(hour, meridiem);
                    } else if (locale.isPM != null) {
                        // Fallback
                        isPm = locale.isPM(meridiem);
                        if (isPm && hour < 12) {
                            hour += 12;
                        }
                        if (!isPm && hour === 12) {
                            hour = 0;
                        }
                        return hour;
                    } else {
                        // this is not supposed to happen
                        return hour;
                    }
                }

                // date from string and array of format strings
                function configFromStringAndArray(config) {
                    var tempConfig,
                        bestMoment,
                        scoreToBeat,
                        i,
                        currentScore,
                        validFormatFound,
                        bestFormatIsValid = false;

                    if (config._f.length === 0) {
                        getParsingFlags(config).invalidFormat = true;
                        config._d = new Date(NaN);
                        return;
                    }

                    for (i = 0; i < config._f.length; i++) {
                        currentScore = 0;
                        validFormatFound = false;
                        tempConfig = copyConfig({}, config);
                        if (config._useUTC != null) {
                            tempConfig._useUTC = config._useUTC;
                        }
                        tempConfig._f = config._f[i];
                        configFromStringAndFormat(tempConfig);

                        if (isValid(tempConfig)) {
                            validFormatFound = true;
                        }

                        // if there is any input that was not parsed add a penalty for that format
                        currentScore += getParsingFlags(tempConfig).charsLeftOver;

                        //or tokens
                        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

                        getParsingFlags(tempConfig).score = currentScore;

                        if (!bestFormatIsValid) {
                            if (
                            scoreToBeat == null ||
                            currentScore < scoreToBeat ||
                            validFormatFound
                            ) {
                                scoreToBeat = currentScore;
                                bestMoment = tempConfig;
                                if (validFormatFound) {
                                    bestFormatIsValid = true;
                                }
                            }
                        } else {
                            if (currentScore < scoreToBeat) {
                                scoreToBeat = currentScore;
                                bestMoment = tempConfig;
                            }
                        }
                    }

                    extend(config, bestMoment || tempConfig);
                }

                function configFromObject(config) {
                    if (config._d) {
                        return;
                    }

                    var i = normalizeObjectUnits(config._i),
                        dayOrDate = i.day === undefined ? i.date : i.day;
                    config._a = map(
                    [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
                    function(obj) {
                        return obj && parseInt(obj, 10);
                    }
                    );

                    configFromArray(config);
                }

                function createFromConfig(config) {
                    var res = new Moment(checkOverflow(prepareConfig(config)));
                    if (res._nextDay) {
                        // Adding is smart enough around DST
                        res.add(1, 'd');
                        res._nextDay = undefined;
                    }

                    return res;
                }

                function prepareConfig(config) {
                    var input = config._i,
                        format = config._f;

                    config._locale = config._locale || getLocale(config._l);

                    if (input === null || (format === undefined && input === '')) {
                        return createInvalid({
                            nullInput: true
                        });
                    }

                    if (typeof input === 'string') {
                        config._i = input = config._locale.preparse(input);
                    }

                    if (isMoment(input)) {
                        return new Moment(checkOverflow(input));
                    } else if (isDate(input)) {
                        config._d = input;
                    } else if (isArray(format)) {
                        configFromStringAndArray(config);
                    } else if (format) {
                        configFromStringAndFormat(config);
                    } else {
                        configFromInput(config);
                    }

                    if (!isValid(config)) {
                        config._d = null;
                    }

                    return config;
                }

                function configFromInput(config) {
                    var input = config._i;
                    if (isUndefined(input)) {
                        config._d = new Date(hooks.now());
                    } else if (isDate(input)) {
                        config._d = new Date(input.valueOf());
                    } else if (typeof input === 'string') {
                        configFromString(config);
                    } else if (isArray(input)) {
                        config._a = map(input.slice(0), function(obj) {
                            return parseInt(obj, 10);
                        });
                        configFromArray(config);
                    } else if (isObject(input)) {
                        configFromObject(config);
                    } else if (isNumber(input)) {
                        // from milliseconds
                        config._d = new Date(input);
                    } else {
                        hooks.createFromInputFallback(config);
                    }
                }

                function createLocalOrUTC(input, format, locale, strict, isUTC) {
                    var c = {};

                    if (format === true || format === false) {
                        strict = format;
                        format = undefined;
                    }

                    if (locale === true || locale === false) {
                        strict = locale;
                        locale = undefined;
                    }

                    if (
                    (isObject(input) && isObjectEmpty(input)) ||
                    (isArray(input) && input.length === 0)
                    ) {
                        input = undefined;
                    }
                    // object construction must be done this way.
                    // https://github.com/moment/moment/issues/1423
                    c._isAMomentObject = true;
                    c._useUTC = c._isUTC = isUTC;
                    c._l = locale;
                    c._i = input;
                    c._f = format;
                    c._strict = strict;

                    return createFromConfig(c);
                }

                function createLocal(input, format, locale, strict) {
                    return createLocalOrUTC(input, format, locale, strict, false);
                }

                var prototypeMin = deprecate(
                    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
                    function() {
                        var other = createLocal.apply(null, arguments);
                        if (this.isValid() && other.isValid()) {
                            return other < this ? this : other;
                        } else {
                            return createInvalid();
                        }
                    }
                    ),
                    prototypeMax = deprecate(
                    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
                    function() {
                        var other = createLocal.apply(null, arguments);
                        if (this.isValid() && other.isValid()) {
                            return other > this ? this : other;
                        } else {
                            return createInvalid();
                        }
                    }
                    );

                // Pick a moment m from moments so that m[fn](other) is true for all
                // other. This relies on the function fn to be transitive.
                //
                // moments should either be an array of moment objects or an array, whose
                // first element is an array of moment objects.
                function pickBy(fn, moments) {
                    var res,
                        i;
                    if (moments.length === 1 && isArray(moments[0])) {
                        moments = moments[0];
                    }
                    if (!moments.length) {
                        return createLocal();
                    }
                    res = moments[0];
                    for (i = 1; i < moments.length; ++i) {
                        if (!moments[i].isValid() || moments[i][fn](res)) {
                            res = moments[i];
                        }
                    }
                    return res;
                }

                // TODO: Use [].sort instead?
                function min() {
                    var args = [].slice.call(arguments, 0);

                    return pickBy('isBefore', args);
                }

                function max() {
                    var args = [].slice.call(arguments, 0);

                    return pickBy('isAfter', args);
                }

                var now = function() {
                    return Date.now ? Date.now() : +new Date();
                };

                var ordering = [
                'year',
                'quarter',
                'month',
                'week',
                'day',
                'hour',
                'minute',
                'second',
                'millisecond',
                ];

                function isDurationValid(m) {
                    var key,
                        unitHasDecimal = false,
                        i;
                    for (key in m) {
                        if (
                        hasOwnProp(m, key) &&
                        !(
                        indexOf.call(ordering, key) !== -1 &&
                        (m[key] == null || !isNaN(m[key]))
                        )
                        ) {
                            return false;
                        }
                    }

                    for (i = 0; i < ordering.length; ++i) {
                        if (m[ordering[i]]) {
                            if (unitHasDecimal) {
                                return false; // only allow non-integers for smallest unit
                            }
                            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                                unitHasDecimal = true;
                            }
                        }
                    }

                    return true;
                }

                function isValid$1() {
                    return this._isValid;
                }

                function createInvalid$1() {
                    return createDuration(NaN);
                }

                function Duration(duration) {
                    var normalizedInput = normalizeObjectUnits(duration),
                        years = normalizedInput.year || 0,
                        quarters = normalizedInput.quarter || 0,
                        months = normalizedInput.month || 0,
                        weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
                        days = normalizedInput.day || 0,
                        hours = normalizedInput.hour || 0,
                        minutes = normalizedInput.minute || 0,
                        seconds = normalizedInput.second || 0,
                        milliseconds = normalizedInput.millisecond || 0;

                    this._isValid = isDurationValid(normalizedInput);

                    // representation for dateAddRemove
                    this._milliseconds =
                    +milliseconds +
                    seconds * 1e3 + // 1000
                    minutes * 6e4 + // 1000 * 60
                    hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
                    // Because of dateAddRemove treats 24 hours as different from a
                    // day when working around DST, we need to store them separately
                    this._days = +days + weeks * 7;
                    // It is impossible to translate months into days without knowing
                    // which months you are are talking about, so we have to store
                    // it separately.
                    this._months = +months + quarters * 3 + years * 12;

                    this._data = {};

                    this._locale = getLocale();

                    this._bubble();
                }

                function isDuration(obj) {
                    return obj instanceof Duration;
                }

                function absRound(number) {
                    if (number < 0) {
                        return Math.round(-1 * number) * -1;
                    } else {
                        return Math.round(number);
                    }
                }

                // compare two arrays, return the number of differences
                function compareArrays(array1, array2, dontConvert) {
                    var len = Math.min(array1.length, array2.length),
                        lengthDiff = Math.abs(array1.length - array2.length),
                        diffs = 0,
                        i;
                    for (i = 0; i < len; i++) {
                        if (
                        (dontConvert && array1[i] !== array2[i]) ||
                        (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
                        ) {
                            diffs++;
                        }
                    }
                    return diffs + lengthDiff;
                }

                // FORMATTING

                function offset(token, separator) {
                    addFormatToken(token, 0, 0, function() {
                        var offset = this.utcOffset(),
                            sign = '+';
                        if (offset < 0) {
                            offset = -offset;
                            sign = '-';
                        }
                        return (
                        sign +
                        zeroFill(~~(offset / 60), 2) +
                        separator +
                        zeroFill(~~offset % 60, 2)
                        ) ;
                    });
                }

                offset('Z', ':');
                offset('ZZ', '');

                // PARSING

                addRegexToken('Z', matchShortOffset);
                addRegexToken('ZZ', matchShortOffset);
                addParseToken(['Z', 'ZZ'], function(input, array, config) {
                    config._useUTC = true;
                    config._tzm = offsetFromString(matchShortOffset, input);
                });

                // HELPERS

                // timezone chunker
                // '+10:00' > ['10',  '00']
                // '-1530'  > ['-15', '30']
                var chunkOffset = /([\+\-]|\d\d)/gi;

                function offsetFromString(matcher, string) {
                    var matches = (string || '').match(matcher),
                        chunk,
                        parts,
                        minutes;

                    if (matches === null) {
                        return null;
                    }

                    chunk = matches[matches.length - 1] || [];
                    parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
                    minutes = +(parts[1] * 60) + toInt(parts[2]);

                    return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
                }

                // Return a moment from input, that is local/utc/zone equivalent to model.
                function cloneWithOffset(input, model) {
                    var res,
                        diff;
                    if (model._isUTC) {
                        res = model.clone();
                        diff =
                        (isMoment(input) || isDate(input)
                        ? input.valueOf()
                        : createLocal(input).valueOf()) - res.valueOf();
                        // Use low-level api, because this fn is low-level api.
                        res._d.setTime(res._d.valueOf() + diff);
                        hooks.updateOffset(res, false);
                        return res;
                    } else {
                        return createLocal(input).local();
                    }
                }

                function getDateOffset(m) {
                    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
                    // https://github.com/moment/moment/pull/1871
                    return -Math.round(m._d.getTimezoneOffset());
                }

                // HOOKS

                // This function will be called whenever a moment is mutated.
                // It is intended to keep the offset in sync with the timezone.
                hooks.updateOffset = function() {};

                // MOMENTS

                // keepLocalTime = true means only change the timezone, without
                // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
                // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
                // +0200, so we adjust the time as needed, to be valid.
                //
                // Keeping the time actually adds/subtracts (one hour)
                // from the actual represented time. That is why we call updateOffset
                // a second time. In case it wants us to change the offset again
                // _changeInProgress == true case, then we have to adjust, because
                // there is no such time in the given timezone.
                function getSetOffset(input, keepLocalTime, keepMinutes) {
                    var offset = this._offset || 0,
                        localAdjust;
                    if (!this.isValid()) {
                        return input != null ? this : NaN;
                    }
                    if (input != null) {
                        if (typeof input === 'string') {
                            input = offsetFromString(matchShortOffset, input);
                            if (input === null) {
                                return this;
                            }
                        } else if (Math.abs(input) < 16 && !keepMinutes) {
                            input = input * 60;
                        }
                        if (!this._isUTC && keepLocalTime) {
                            localAdjust = getDateOffset(this);
                        }
                        this._offset = input;
                        this._isUTC = true;
                        if (localAdjust != null) {
                            this.add(localAdjust, 'm');
                        }
                        if (offset !== input) {
                            if (!keepLocalTime || this._changeInProgress) {
                                addSubtract(
                                this,
                                createDuration(input - offset, 'm'),
                                1,
                                false
                                );
                            } else if (!this._changeInProgress) {
                                this._changeInProgress = true;
                                hooks.updateOffset(this, true);
                                this._changeInProgress = null;
                            }
                        }
                        return this;
                    } else {
                        return this._isUTC ? offset : getDateOffset(this);
                    }
                }

                function getSetZone(input, keepLocalTime) {
                    if (input != null) {
                        if (typeof input !== 'string') {
                            input = -input;
                        }

                        this.utcOffset(input, keepLocalTime);

                        return this;
                    } else {
                        return -this.utcOffset();
                    }
                }

                function setOffsetToUTC(keepLocalTime) {
                    return this.utcOffset(0, keepLocalTime);
                }

                function setOffsetToLocal(keepLocalTime) {
                    if (this._isUTC) {
                        this.utcOffset(0, keepLocalTime);
                        this._isUTC = false;

                        if (keepLocalTime) {
                            this.subtract(getDateOffset(this), 'm');
                        }
                    }
                    return this;
                }

                function setOffsetToParsedOffset() {
                    if (this._tzm != null) {
                        this.utcOffset(this._tzm, false, true);
                    } else if (typeof this._i === 'string') {
                        var tZone = offsetFromString(matchOffset, this._i);
                        if (tZone != null) {
                            this.utcOffset(tZone);
                        } else {
                            this.utcOffset(0, true);
                        }
                    }
                    return this;
                }

                function hasAlignedHourOffset(input) {
                    if (!this.isValid()) {
                        return false;
                    }
                    input = input ? createLocal(input).utcOffset() : 0;

                    return (this.utcOffset() - input) % 60 === 0;
                }

                function isDaylightSavingTime() {
                    return (
                        this.utcOffset() > this.clone().month(0).utcOffset() ||
                        this.utcOffset() > this.clone().month(5).utcOffset()
                        ) ;
                }

                function isDaylightSavingTimeShifted() {
                    if (!isUndefined(this._isDSTShifted)) {
                        return this._isDSTShifted;
                    }

                    var c = {},
                        other;

                    copyConfig(c, this);
                    c = prepareConfig(c);

                    if (c._a) {
                        other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                        this._isDSTShifted =
                        this.isValid() && compareArrays(c._a, other.toArray()) > 0;
                    } else {
                        this._isDSTShifted = false;
                    }

                    return this._isDSTShifted;
                }

                function isLocal() {
                    return this.isValid() ? !this._isUTC : false;
                }

                function isUtcOffset() {
                    return this.isValid() ? this._isUTC : false;
                }

                function isUtc() {
                    return this.isValid() ? this._isUTC && this._offset === 0 : false;
                }

                // ASP.NET json date format regex
                var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
                    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
                    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
                    // and further modified to allow for strings containing both week and day
                    isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

                function createDuration(input, key) {
                    var duration = input,
                        // matching against regexp is expensive, do it on demand
                        match = null,
                        sign,
                        ret,
                        diffRes;

                    if (isDuration(input)) {
                        duration = {
                            ms: input._milliseconds,
                            d: input._days,
                            M: input._months,
                        };
                    } else if (isNumber(input) || !isNaN(+input)) {
                        duration = {};
                        if (key) {
                            duration[key] = +input;
                        } else {
                            duration.milliseconds = +input;
                        }
                    } else if ((match = aspNetRegex.exec(input))) {
                        sign = match[1] === '-' ? -1 : 1;
                        duration = {
                            y: 0,
                            d: toInt(match[DATE]) * sign,
                            h: toInt(match[HOUR]) * sign,
                            m: toInt(match[MINUTE]) * sign,
                            s: toInt(match[SECOND]) * sign,
                            ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign,
                        };
                    } else // the millisecond decimal point is included in the match
                    if ((match = isoRegex.exec(input))) {
                        sign = match[1] === '-' ? -1 : 1;
                        duration = {
                            y: parseIso(match[2], sign),
                            M: parseIso(match[3], sign),
                            w: parseIso(match[4], sign),
                            d: parseIso(match[5], sign),
                            h: parseIso(match[6], sign),
                            m: parseIso(match[7], sign),
                            s: parseIso(match[8], sign),
                        };
                    } else if (duration == null) {
                        // checks for null or undefined
                        duration = {};
                    } else if (
                    typeof duration === 'object' &&
                    ('from' in duration || 'to' in duration)
                    ) {
                        diffRes = momentsDifference(
                        createLocal(duration.from),
                        createLocal(duration.to)
                        );

                        duration = {};
                        duration.ms = diffRes.milliseconds;
                        duration.M = diffRes.months;
                    }

                    ret = new Duration(duration);

                    if (isDuration(input) && hasOwnProp(input, '_locale')) {
                        ret._locale = input._locale;
                    }

                    if (isDuration(input) && hasOwnProp(input, '_isValid')) {
                        ret._isValid = input._isValid;
                    }

                    return ret;
                }

                createDuration.fn = Duration.prototype;
                createDuration.invalid = createInvalid$1;

                function parseIso(inp, sign) {
                    // We'd normally use ~~inp for this, but unfortunately it also
                    // converts floats to ints.
                    // inp may be undefined, so careful calling replace on it.
                    var res = inp && parseFloat(inp.replace(',', '.'));
                    // apply sign while we're at it
                    return (isNaN(res) ? 0 : res) * sign;
                }

                function positiveMomentsDifference(base, other) {
                    var res = {};

                    res.months =
                    other.month() - base.month() + (other.year() - base.year()) * 12;
                    if (base.clone().add(res.months, 'M').isAfter(other)) {
                        --res.months;
                    }

                    res.milliseconds = +other - +base.clone().add(res.months, 'M');

                    return res;
                }

                function momentsDifference(base, other) {
                    var res;
                    if (!(base.isValid() && other.isValid())) {
                        return {
                            milliseconds: 0,
                            months: 0
                        };
                    }

                    other = cloneWithOffset(other, base);
                    if (base.isBefore(other)) {
                        res = positiveMomentsDifference(base, other);
                    } else {
                        res = positiveMomentsDifference(other, base);
                        res.milliseconds = -res.milliseconds;
                        res.months = -res.months;
                    }

                    return res;
                }

                // TODO: remove 'name' arg after deprecation is removed
                function createAdder(direction, name) {
                    return function(val, period) {
                        var dur,
                            tmp;
                        //invert the arguments, but complain about it
                        if (period !== null && !isNaN(+period)) {
                            deprecateSimple(
                            name,
                            'moment().' +
                            name +
                            '(period, number) is deprecated. Please use moment().' +
                            name +
                            '(number, period). ' +
                            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                            );
                            tmp = val;
                            val = period;
                            period = tmp;
                        }

                        dur = createDuration(val, period);
                        addSubtract(this, dur, direction);
                        return this;
                    };
                }

                function addSubtract(mom, duration, isAdding, updateOffset) {
                    var milliseconds = duration._milliseconds,
                        days = absRound(duration._days),
                        months = absRound(duration._months);

                    if (!mom.isValid()) {
                        // No op
                        return;
                    }

                    updateOffset = updateOffset == null ? true : updateOffset;

                    if (months) {
                        setMonth(mom, get(mom, 'Month') + months * isAdding);
                    }
                    if (days) {
                        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
                    }
                    if (milliseconds) {
                        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
                    }
                    if (updateOffset) {
                        hooks.updateOffset(mom, days || months);
                    }
                }

                var add = createAdder(1, 'add'),
                    subtract = createAdder(-1, 'subtract');

                function isString(input) {
                    return typeof input === 'string' || input instanceof String;
                }

                // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
                function isMomentInput(input) {
                    return (
                        isMoment(input) ||
                        isDate(input) ||
                        isString(input) ||
                        isNumber(input) ||
                        isNumberOrStringArray(input) ||
                        isMomentInputObject(input) ||
                        input === null ||
                        input === undefined
                        ) ;
                }

                function isMomentInputObject(input) {
                    var objectTest = isObject(input) && !isObjectEmpty(input),
                        propertyTest = false,
                        properties = [
                        'years',
                        'year',
                        'y',
                        'months',
                        'month',
                        'M',
                        'days',
                        'day',
                        'd',
                        'dates',
                        'date',
                        'D',
                        'hours',
                        'hour',
                        'h',
                        'minutes',
                        'minute',
                        'm',
                        'seconds',
                        'second',
                        's',
                        'milliseconds',
                        'millisecond',
                        'ms',
                        ],
                        i,
                        property;

                    for (i = 0; i < properties.length; i += 1) {
                        property = properties[i];
                        propertyTest = propertyTest || hasOwnProp(input, property);
                    }

                    return objectTest && propertyTest;
                }

                function isNumberOrStringArray(input) {
                    var arrayTest = isArray(input),
                        dataTypeTest = false;
                    if (arrayTest) {
                        dataTypeTest =
                        input.filter(function(item) {
                            return !isNumber(item) && isString(input);
                        }).length === 0;
                    }
                    return arrayTest && dataTypeTest;
                }

                function isCalendarSpec(input) {
                    var objectTest = isObject(input) && !isObjectEmpty(input),
                        propertyTest = false,
                        properties = [
                        'sameDay',
                        'nextDay',
                        'lastDay',
                        'nextWeek',
                        'lastWeek',
                        'sameElse',
                        ],
                        i,
                        property;

                    for (i = 0; i < properties.length; i += 1) {
                        property = properties[i];
                        propertyTest = propertyTest || hasOwnProp(input, property);
                    }

                    return objectTest && propertyTest;
                }

                function getCalendarFormat(myMoment, now) {
                    var diff = myMoment.diff(now, 'days', true);
                    return diff < -6
                    ? 'sameElse'
                    : diff < -1
                    ? 'lastWeek'
                    : diff < 0
                    ? 'lastDay'
                    : diff < 1
                    ? 'sameDay'
                    : diff < 2
                    ? 'nextDay'
                    : diff < 7
                    ? 'nextWeek'
                    : 'sameElse';
                }

                function calendar$1(time, formats) {
                    // Support for single parameter, formats only overload to the calendar function
                    if (arguments.length === 1) {
                        if (!arguments[0]) {
                            time = undefined;
                            formats = undefined;
                        } else if (isMomentInput(arguments[0])) {
                            time = arguments[0];
                            formats = undefined;
                        } else if (isCalendarSpec(arguments[0])) {
                            formats = arguments[0];
                            time = undefined;
                        }
                    }
                    // We want to compare the start of today, vs this.
                    // Getting start-of-today depends on whether we're local/utc/offset or not.
                    var now = time || createLocal(),
                        sod = cloneWithOffset(now, this).startOf('day'),
                        format = hooks.calendarFormat(this, sod) || 'sameElse',
                        output =
                        formats &&
                        (isFunction(formats[format])
                        ? formats[format].call(this, now)
                        : formats[format]);

                    return this.format(
                    output || this.localeData().calendar(format, this, createLocal(now))
                    );
                }

                function clone() {
                    return new Moment(this);
                }

                function isAfter(input, units) {
                    var localInput = isMoment(input) ? input : createLocal(input);
                    if (!(this.isValid() && localInput.isValid())) {
                        return false;
                    }
                    units = normalizeUnits(units) || 'millisecond';
                    if (units === 'millisecond') {
                        return this.valueOf() > localInput.valueOf();
                    } else {
                        return localInput.valueOf() < this.clone().startOf(units).valueOf();
                    }
                }

                function isBefore(input, units) {
                    var localInput = isMoment(input) ? input : createLocal(input);
                    if (!(this.isValid() && localInput.isValid())) {
                        return false;
                    }
                    units = normalizeUnits(units) || 'millisecond';
                    if (units === 'millisecond') {
                        return this.valueOf() < localInput.valueOf();
                    } else {
                        return this.clone().endOf(units).valueOf() < localInput.valueOf();
                    }
                }

                function isBetween(from, to, units, inclusivity) {
                    var localFrom = isMoment(from) ? from : createLocal(from),
                        localTo = isMoment(to) ? to : createLocal(to);
                    if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
                        return false;
                    }
                    inclusivity = inclusivity || '()';
                    return (
                        (inclusivity[0] === '('
                        ? this.isAfter(localFrom, units)
                        : !this.isBefore(localFrom, units)) &&
                        (inclusivity[1] === ')'
                        ? this.isBefore(localTo, units)
                        : !this.isAfter(localTo, units))
                        ) ;
                }

                function isSame(input, units) {
                    var localInput = isMoment(input) ? input : createLocal(input),
                        inputMs;
                    if (!(this.isValid() && localInput.isValid())) {
                        return false;
                    }
                    units = normalizeUnits(units) || 'millisecond';
                    if (units === 'millisecond') {
                        return this.valueOf() === localInput.valueOf();
                    } else {
                        inputMs = localInput.valueOf();
                        return (
                            this.clone().startOf(units).valueOf() <= inputMs &&
                            inputMs <= this.clone().endOf(units).valueOf()
                            ) ;
                    }
                }

                function isSameOrAfter(input, units) {
                    return this.isSame(input, units) || this.isAfter(input, units);
                }

                function isSameOrBefore(input, units) {
                    return this.isSame(input, units) || this.isBefore(input, units);
                }

                function diff(input, units, asFloat) {
                    var that,
                        zoneDelta,
                        output;

                    if (!this.isValid()) {
                        return NaN;
                    }

                    that = cloneWithOffset(input, this);

                    if (!that.isValid()) {
                        return NaN;
                    }

                    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

                    units = normalizeUnits(units);

                    switch (units) {
                    case 'year':
                        output = monthDiff(this, that) / 12;
                        break;
                    case 'month':
                        output = monthDiff(this, that);
                        break;
                    case 'quarter':
                        output = monthDiff(this, that) / 3;
                        break;
                    case 'second':
                        output = (this - that) / 1e3;
                        break; // 1000
                    case 'minute':
                        output = (this - that) / 6e4;
                        break; // 1000 * 60
                    case 'hour':
                        output = (this - that) / 36e5;
                        break; // 1000 * 60 * 60
                    case 'day':
                        output = (this - that - zoneDelta) / 864e5;
                        break; // 1000 * 60 * 60 * 24, negate dst
                    case 'week':
                        output = (this - that - zoneDelta) / 6048e5;
                        break; // 1000 * 60 * 60 * 24 * 7, negate dst
                    default:
                        output = this - that;
                    }

                    return asFloat ? output : absFloor(output);
                }

                function monthDiff(a, b) {
                    if (a.date() < b.date()) {
                        // end-of-month calculations work correct when the start month has more
                        // days than the end month.
                        return -monthDiff(b, a);
                    }
                    // difference in months
                    var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
                        // b is in (anchor - 1 month, anchor + 1 month)
                        anchor = a.clone().add(wholeMonthDiff, 'months'),
                        anchor2,
                        adjust;

                    if (b - anchor < 0) {
                        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
                        // linear across the month
                        adjust = (b - anchor) / (anchor - anchor2);
                    } else {
                        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
                        // linear across the month
                        adjust = (b - anchor) / (anchor2 - anchor);
                    }

                    //check for negative zero, return zero if negative zero
                    return -(wholeMonthDiff + adjust) || 0;
                }

                hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
                hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

                function toString() {
                    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
                }

                function toISOString(keepOffset) {
                    if (!this.isValid()) {
                        return null;
                    }
                    var utc = keepOffset !== true,
                        m = utc ? this.clone().utc() : this;
                    if (m.year() < 0 || m.year() > 9999) {
                        return formatMoment(
                        m,
                        utc
                        ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                        : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
                        );
                    }
                    if (isFunction(Date.prototype.toISOString)) {
                        // native implementation is ~50x faster, use it when we can
                        if (utc) {
                            return this.toDate().toISOString();
                        } else {
                            return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                            .toISOString()
                            .replace('Z', formatMoment(m, 'Z'));
                        }
                    }
                    return formatMoment(
                    m,
                    utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
                    );
                }

                /**
                     * Return a human readable representation of a moment that can
                     * also be evaluated to get a new moment which is the same
                     *
                     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
                     */
                function inspect() {
                    if (!this.isValid()) {
                        return 'moment.invalid(/* ' + this._i + ' */)';
                    }
                    var func = 'moment',
                        zone = '',
                        prefix,
                        year,
                        datetime,
                        suffix;
                    if (!this.isLocal()) {
                        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
                        zone = 'Z';
                    }
                    prefix = '[' + func + '("]';
                    year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
                    datetime = '-MM-DD[T]HH:mm:ss.SSS';
                    suffix = zone + '[")]';

                    return this.format(prefix + year + datetime + suffix);
                }

                function format(inputString) {
                    if (!inputString) {
                        inputString = this.isUtc()
                        ? hooks.defaultFormatUtc
                        : hooks.defaultFormat;
                    }
                    var output = formatMoment(this, inputString);
                    return this.localeData().postformat(output);
                }

                function from(time, withoutSuffix) {
                    if (
                    this.isValid() &&
                    ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
                    ) {
                        return createDuration({
                            to: this,
                            from: time
                        })
                        .locale(this.locale())
                        .humanize(!withoutSuffix);
                    } else {
                        return this.localeData().invalidDate();
                    }
                }

                function fromNow(withoutSuffix) {
                    return this.from(createLocal(), withoutSuffix);
                }

                function to(time, withoutSuffix) {
                    if (
                    this.isValid() &&
                    ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
                    ) {
                        return createDuration({
                            from: this,
                            to: time
                        })
                        .locale(this.locale())
                        .humanize(!withoutSuffix);
                    } else {
                        return this.localeData().invalidDate();
                    }
                }

                function toNow(withoutSuffix) {
                    return this.to(createLocal(), withoutSuffix);
                }

                // If passed a locale key, it will set the locale for this
                // instance.  Otherwise, it will return the locale configuration
                // variables for this instance.
                function locale(key) {
                    var newLocaleData;

                    if (key === undefined) {
                        return this._locale._abbr;
                    } else {
                        newLocaleData = getLocale(key);
                        if (newLocaleData != null) {
                            this._locale = newLocaleData;
                        }
                        return this;
                    }
                }

                var lang = deprecate(
                'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
                function(key) {
                    if (key === undefined) {
                        return this.localeData();
                    } else {
                        return this.locale(key);
                    }
                }
                );

                function localeData() {
                    return this._locale;
                }

                var MS_PER_SECOND = 1000,
                    MS_PER_MINUTE = 60 * MS_PER_SECOND,
                    MS_PER_HOUR = 60 * MS_PER_MINUTE,
                    MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

                // actual modulo - handles negative numbers (for dates before 1970):
                function mod$1(dividend, divisor) {
                    return ((dividend % divisor) + divisor) % divisor;
                }

                function localStartOfDate(y, m, d) {
                    // the date constructor remaps years 0-99 to 1900-1999
                    if (y < 100 && y >= 0) {
                        // preserve leap years using a full 400 year cycle, then reset
                        return new Date(y + 400, m, d) - MS_PER_400_YEARS;
                    } else {
                        return new Date(y, m, d).valueOf();
                    }
                }

                function utcStartOfDate(y, m, d) {
                    // Date.UTC remaps years 0-99 to 1900-1999
                    if (y < 100 && y >= 0) {
                        // preserve leap years using a full 400 year cycle, then reset
                        return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
                    } else {
                        return Date.UTC(y, m, d);
                    }
                }

                function startOf(units) {
                    var time,
                        startOfDate;
                    units = normalizeUnits(units);
                    if (units === undefined || units === 'millisecond' || !this.isValid()) {
                        return this;
                    }

                    startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

                    switch (units) {
                    case 'year':
                        time = startOfDate(this.year(), 0, 1);
                        break;
                    case 'quarter':
                        time = startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3),
                        1
                        );
                        break;
                    case 'month':
                        time = startOfDate(this.year(), this.month(), 1);
                        break;
                    case 'week':
                        time = startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday()
                        );
                        break;
                    case 'isoWeek':
                        time = startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1)
                        );
                        break;
                    case 'day':
                    case 'date':
                        time = startOfDate(this.year(), this.month(), this.date());
                        break;
                    case 'hour':
                        time = this._d.valueOf();
                        time -= mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                        );
                        break;
                    case 'minute':
                        time = this._d.valueOf();
                        time -= mod$1(time, MS_PER_MINUTE);
                        break;
                    case 'second':
                        time = this._d.valueOf();
                        time -= mod$1(time, MS_PER_SECOND);
                        break;
                    }

                    this._d.setTime(time);
                    hooks.updateOffset(this, true);
                    return this;
                }

                function endOf(units) {
                    var time,
                        startOfDate;
                    units = normalizeUnits(units);
                    if (units === undefined || units === 'millisecond' || !this.isValid()) {
                        return this;
                    }

                    startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

                    switch (units) {
                    case 'year':
                        time = startOfDate(this.year() + 1, 0, 1) - 1;
                        break;
                    case 'quarter':
                        time =
                        startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3) + 3,
                        1
                        ) - 1;
                        break;
                    case 'month':
                        time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                        break;
                    case 'week':
                        time =
                        startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday() + 7
                        ) - 1;
                        break;
                    case 'isoWeek':
                        time =
                        startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1) + 7
                        ) - 1;
                        break;
                    case 'day':
                    case 'date':
                        time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                        break;
                    case 'hour':
                        time = this._d.valueOf();
                        time +=
                        MS_PER_HOUR -
                        mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                        ) -
                        1;
                        break;
                    case 'minute':
                        time = this._d.valueOf();
                        time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                        break;
                    case 'second':
                        time = this._d.valueOf();
                        time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                        break;
                    }

                    this._d.setTime(time);
                    hooks.updateOffset(this, true);
                    return this;
                }

                function valueOf() {
                    return this._d.valueOf() - (this._offset || 0) * 60000;
                }

                function unix() {
                    return Math.floor(this.valueOf() / 1000);
                }

                function toDate() {
                    return new Date(this.valueOf());
                }

                function toArray() {
                    var m = this;
                    return [
                    m.year(),
                    m.month(),
                    m.date(),
                    m.hour(),
                    m.minute(),
                    m.second(),
                    m.millisecond(),
                    ];
                }

                function toObject() {
                    var m = this;
                    return {
                        years: m.year(),
                        months: m.month(),
                        date: m.date(),
                        hours: m.hours(),
                        minutes: m.minutes(),
                        seconds: m.seconds(),
                        milliseconds: m.milliseconds(),
                    };
                }

                function toJSON() {
                    // new Date(NaN).toJSON() === null
                    return this.isValid() ? this.toISOString() : null;
                }

                function isValid$2() {
                    return isValid(this);
                }

                function parsingFlags() {
                    return extend({}, getParsingFlags(this));
                }

                function invalidAt() {
                    return getParsingFlags(this).overflow;
                }

                function creationData() {
                    return {
                        input: this._i,
                        format: this._f,
                        locale: this._locale,
                        isUTC: this._isUTC,
                        strict: this._strict,
                    };
                }

                addFormatToken('N', 0, 0, 'eraAbbr');
                addFormatToken('NN', 0, 0, 'eraAbbr');
                addFormatToken('NNN', 0, 0, 'eraAbbr');
                addFormatToken('NNNN', 0, 0, 'eraName');
                addFormatToken('NNNNN', 0, 0, 'eraNarrow');

                addFormatToken('y', ['y', 1], 'yo', 'eraYear');
                addFormatToken('y', ['yy', 2], 0, 'eraYear');
                addFormatToken('y', ['yyy', 3], 0, 'eraYear');
                addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

                addRegexToken('N', matchEraAbbr);
                addRegexToken('NN', matchEraAbbr);
                addRegexToken('NNN', matchEraAbbr);
                addRegexToken('NNNN', matchEraName);
                addRegexToken('NNNNN', matchEraNarrow);

                addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function(
                input,
                array,
                config,
                token
                ) {
                    var era = config._locale.erasParse(input, token, config._strict);
                    if (era) {
                        getParsingFlags(config).era = era;
                    } else {
                        getParsingFlags(config).invalidEra = input;
                    }
                });

                addRegexToken('y', matchUnsigned);
                addRegexToken('yy', matchUnsigned);
                addRegexToken('yyy', matchUnsigned);
                addRegexToken('yyyy', matchUnsigned);
                addRegexToken('yo', matchEraYearOrdinal);

                addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
                addParseToken(['yo'], function(input, array, config, token) {
                    var match;
                    if (config._locale._eraYearOrdinalRegex) {
                        match = input.match(config._locale._eraYearOrdinalRegex);
                    }

                    if (config._locale.eraYearOrdinalParse) {
                        array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
                    } else {
                        array[YEAR] = parseInt(input, 10);
                    }
                });

                function localeEras(m, format) {
                    var i,
                        l,
                        date,
                        eras = this._eras || getLocale('en')._eras;
                    for (i = 0, l = eras.length; i < l; ++i) {
                        switch (typeof eras[i].since) {
                        case 'string':
                            // truncate time
                            date = hooks(eras[i].since).startOf('day');
                            eras[i].since = date.valueOf();
                            break;
                        }

                        switch (typeof eras[i].until) {
                        case 'undefined':
                            eras[i].until = +Infinity;
                            break;
                        case 'string':
                            // truncate time
                            date = hooks(eras[i].until).startOf('day').valueOf();
                            eras[i].until = date.valueOf();
                            break;
                        }
                    }
                    return eras;
                }

                function localeErasParse(eraName, format, strict) {
                    var i,
                        l,
                        eras = this.eras(),
                        name,
                        abbr,
                        narrow;
                    eraName = eraName.toUpperCase();

                    for (i = 0, l = eras.length; i < l; ++i) {
                        name = eras[i].name.toUpperCase();
                        abbr = eras[i].abbr.toUpperCase();
                        narrow = eras[i].narrow.toUpperCase();

                        if (strict) {
                            switch (format) {
                            case 'N':
                            case 'NN':
                            case 'NNN':
                                if (abbr === eraName) {
                                    return eras[i];
                                }
                                break;

                            case 'NNNN':
                                if (name === eraName) {
                                    return eras[i];
                                }
                                break;

                            case 'NNNNN':
                                if (narrow === eraName) {
                                    return eras[i];
                                }
                                break;
                            }
                        } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                            return eras[i];
                        }
                    }
                }

                function localeErasConvertYear(era, year) {
                    var dir = era.since <= era.until ? +1 : -1;
                    if (year === undefined) {
                        return hooks(era.since).year();
                    } else {
                        return hooks(era.since).year() + (year - era.offset) * dir;
                    }
                }

                function getEraName() {
                    var i,
                        l,
                        val,
                        eras = this.localeData().eras();
                    for (i = 0, l = eras.length; i < l; ++i) {
                        // truncate time
                        val = this.clone().startOf('day').valueOf();

                        if (eras[i].since <= val && val <= eras[i].until) {
                            return eras[i].name;
                        }
                        if (eras[i].until <= val && val <= eras[i].since) {
                            return eras[i].name;
                        }
                    }

                    return '';
                }

                function getEraNarrow() {
                    var i,
                        l,
                        val,
                        eras = this.localeData().eras();
                    for (i = 0, l = eras.length; i < l; ++i) {
                        // truncate time
                        val = this.clone().startOf('day').valueOf();

                        if (eras[i].since <= val && val <= eras[i].until) {
                            return eras[i].narrow;
                        }
                        if (eras[i].until <= val && val <= eras[i].since) {
                            return eras[i].narrow;
                        }
                    }

                    return '';
                }

                function getEraAbbr() {
                    var i,
                        l,
                        val,
                        eras = this.localeData().eras();
                    for (i = 0, l = eras.length; i < l; ++i) {
                        // truncate time
                        val = this.clone().startOf('day').valueOf();

                        if (eras[i].since <= val && val <= eras[i].until) {
                            return eras[i].abbr;
                        }
                        if (eras[i].until <= val && val <= eras[i].since) {
                            return eras[i].abbr;
                        }
                    }

                    return '';
                }

                function getEraYear() {
                    var i,
                        l,
                        dir,
                        val,
                        eras = this.localeData().eras();
                    for (i = 0, l = eras.length; i < l; ++i) {
                        dir = eras[i].since <= eras[i].until ? +1 : -1;

                        // truncate time
                        val = this.clone().startOf('day').valueOf();

                        if (
                        (eras[i].since <= val && val <= eras[i].until) ||
                        (eras[i].until <= val && val <= eras[i].since)
                        ) {
                            return (
                            (this.year() - hooks(eras[i].since).year()) * dir +
                            eras[i].offset
                            ) ;
                        }
                    }

                    return this.year();
                }

                function erasNameRegex(isStrict) {
                    if (!hasOwnProp(this, '_erasNameRegex')) {
                        computeErasParse.call(this);
                    }
                    return isStrict ? this._erasNameRegex : this._erasRegex;
                }

                function erasAbbrRegex(isStrict) {
                    if (!hasOwnProp(this, '_erasAbbrRegex')) {
                        computeErasParse.call(this);
                    }
                    return isStrict ? this._erasAbbrRegex : this._erasRegex;
                }

                function erasNarrowRegex(isStrict) {
                    if (!hasOwnProp(this, '_erasNarrowRegex')) {
                        computeErasParse.call(this);
                    }
                    return isStrict ? this._erasNarrowRegex : this._erasRegex;
                }

                function matchEraAbbr(isStrict, locale) {
                    return locale.erasAbbrRegex(isStrict);
                }

                function matchEraName(isStrict, locale) {
                    return locale.erasNameRegex(isStrict);
                }

                function matchEraNarrow(isStrict, locale) {
                    return locale.erasNarrowRegex(isStrict);
                }

                function matchEraYearOrdinal(isStrict, locale) {
                    return locale._eraYearOrdinalRegex || matchUnsigned;
                }

                function computeErasParse() {
                    var abbrPieces = [],
                        namePieces = [],
                        narrowPieces = [],
                        mixedPieces = [],
                        i,
                        l,
                        eras = this.eras();

                    for (i = 0, l = eras.length; i < l; ++i) {
                        namePieces.push(regexEscape(eras[i].name));
                        abbrPieces.push(regexEscape(eras[i].abbr));
                        narrowPieces.push(regexEscape(eras[i].narrow));

                        mixedPieces.push(regexEscape(eras[i].name));
                        mixedPieces.push(regexEscape(eras[i].abbr));
                        mixedPieces.push(regexEscape(eras[i].narrow));
                    }

                    this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
                    this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
                    this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
                    this._erasNarrowRegex = new RegExp(
                    '^(' + narrowPieces.join('|') + ')',
                    'i'
                    );
                }

                // FORMATTING

                addFormatToken(0, ['gg', 2], 0, function() {
                    return this.weekYear() % 100;
                });

                addFormatToken(0, ['GG', 2], 0, function() {
                    return this.isoWeekYear() % 100;
                });

                function addWeekYearFormatToken(token, getter) {
                    addFormatToken(0, [token, token.length], 0, getter);
                }

                addWeekYearFormatToken('gggg', 'weekYear');
                addWeekYearFormatToken('ggggg', 'weekYear');
                addWeekYearFormatToken('GGGG', 'isoWeekYear');
                addWeekYearFormatToken('GGGGG', 'isoWeekYear');

                // ALIASES

                addUnitAlias('weekYear', 'gg');
                addUnitAlias('isoWeekYear', 'GG');

                // PRIORITY

                addUnitPriority('weekYear', 1);
                addUnitPriority('isoWeekYear', 1);

                // PARSING

                addRegexToken('G', matchSigned);
                addRegexToken('g', matchSigned);
                addRegexToken('GG', match1to2, match2);
                addRegexToken('gg', match1to2, match2);
                addRegexToken('GGGG', match1to4, match4);
                addRegexToken('gggg', match1to4, match4);
                addRegexToken('GGGGG', match1to6, match6);
                addRegexToken('ggggg', match1to6, match6);

                addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function(
                input,
                week,
                config,
                token
                ) {
                    week[token.substr(0, 2)] = toInt(input);
                });

                addWeekParseToken(['gg', 'GG'], function(input, week, config, token) {
                    week[token] = hooks.parseTwoDigitYear(input);
                });

                // MOMENTS

                function getSetWeekYear(input) {
                    return getSetWeekYearHelper.call(
                    this,
                    input,
                    this.week(),
                    this.weekday(),
                    this.localeData()._week.dow,
                    this.localeData()._week.doy
                    );
                }

                function getSetISOWeekYear(input) {
                    return getSetWeekYearHelper.call(
                    this,
                    input,
                    this.isoWeek(),
                    this.isoWeekday(),
                    1,
                    4
                    );
                }

                function getISOWeeksInYear() {
                    return weeksInYear(this.year(), 1, 4);
                }

                function getISOWeeksInISOWeekYear() {
                    return weeksInYear(this.isoWeekYear(), 1, 4);
                }

                function getWeeksInYear() {
                    var weekInfo = this.localeData()._week;
                    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
                }

                function getWeeksInWeekYear() {
                    var weekInfo = this.localeData()._week;
                    return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
                }

                function getSetWeekYearHelper(input, week, weekday, dow, doy) {
                    var weeksTarget;
                    if (input == null) {
                        return weekOfYear(this, dow, doy).year;
                    } else {
                        weeksTarget = weeksInYear(input, dow, doy);
                        if (week > weeksTarget) {
                            week = weeksTarget;
                        }
                        return setWeekAll.call(this, input, week, weekday, dow, doy);
                    }
                }

                function setWeekAll(weekYear, week, weekday, dow, doy) {
                    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
                        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

                    this.year(date.getUTCFullYear());
                    this.month(date.getUTCMonth());
                    this.date(date.getUTCDate());
                    return this;
                }

                // FORMATTING

                addFormatToken('Q', 0, 'Qo', 'quarter');

                // ALIASES

                addUnitAlias('quarter', 'Q');

                // PRIORITY

                addUnitPriority('quarter', 7);

                // PARSING

                addRegexToken('Q', match1);
                addParseToken('Q', function(input, array) {
                    array[MONTH] = (toInt(input) - 1) * 3;
                });

                // MOMENTS

                function getSetQuarter(input) {
                    return input == null
                    ? Math.ceil((this.month() + 1) / 3)
                    : this.month((input - 1) * 3 + (this.month() % 3));
                }

                // FORMATTING

                addFormatToken('D', ['DD', 2], 'Do', 'date');

                // ALIASES

                addUnitAlias('date', 'D');

                // PRIORITY
                addUnitPriority('date', 9);

                // PARSING

                addRegexToken('D', match1to2);
                addRegexToken('DD', match1to2, match2);
                addRegexToken('Do', function(isStrict, locale) {
                    // TODO: Remove "ordinalParse" fallback in next major release.
                    return isStrict
                    ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
                    : locale._dayOfMonthOrdinalParseLenient;
                });

                addParseToken(['D', 'DD'], DATE);
                addParseToken('Do', function(input, array) {
                    array[DATE] = toInt(input.match(match1to2)[0]);
                });

                // MOMENTS

                var getSetDayOfMonth = makeGetSet('Date', true);

                // FORMATTING

                addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

                // ALIASES

                addUnitAlias('dayOfYear', 'DDD');

                // PRIORITY
                addUnitPriority('dayOfYear', 4);

                // PARSING

                addRegexToken('DDD', match1to3);
                addRegexToken('DDDD', match3);
                addParseToken(['DDD', 'DDDD'], function(input, array, config) {
                    config._dayOfYear = toInt(input);
                });

                // HELPERS

                // MOMENTS

                function getSetDayOfYear(input) {
                    var dayOfYear =
                    Math.round(
                    (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
                    ) + 1;
                    return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
                }

                // FORMATTING

                addFormatToken('m', ['mm', 2], 0, 'minute');

                // ALIASES

                addUnitAlias('minute', 'm');

                // PRIORITY

                addUnitPriority('minute', 14);

                // PARSING

                addRegexToken('m', match1to2);
                addRegexToken('mm', match1to2, match2);
                addParseToken(['m', 'mm'], MINUTE);

                // MOMENTS

                var getSetMinute = makeGetSet('Minutes', false);

                // FORMATTING

                addFormatToken('s', ['ss', 2], 0, 'second');

                // ALIASES

                addUnitAlias('second', 's');

                // PRIORITY

                addUnitPriority('second', 15);

                // PARSING

                addRegexToken('s', match1to2);
                addRegexToken('ss', match1to2, match2);
                addParseToken(['s', 'ss'], SECOND);

                // MOMENTS

                var getSetSecond = makeGetSet('Seconds', false);

                // FORMATTING

                addFormatToken('S', 0, 0, function() {
                    return ~~(this.millisecond() / 100);
                });

                addFormatToken(0, ['SS', 2], 0, function() {
                    return ~~(this.millisecond() / 10);
                });

                addFormatToken(0, ['SSS', 3], 0, 'millisecond');
                addFormatToken(0, ['SSSS', 4], 0, function() {
                    return this.millisecond() * 10;
                });
                addFormatToken(0, ['SSSSS', 5], 0, function() {
                    return this.millisecond() * 100;
                });
                addFormatToken(0, ['SSSSSS', 6], 0, function() {
                    return this.millisecond() * 1000;
                });
                addFormatToken(0, ['SSSSSSS', 7], 0, function() {
                    return this.millisecond() * 10000;
                });
                addFormatToken(0, ['SSSSSSSS', 8], 0, function() {
                    return this.millisecond() * 100000;
                });
                addFormatToken(0, ['SSSSSSSSS', 9], 0, function() {
                    return this.millisecond() * 1000000;
                });

                // ALIASES

                addUnitAlias('millisecond', 'ms');

                // PRIORITY

                addUnitPriority('millisecond', 16);

                // PARSING

                addRegexToken('S', match1to3, match1);
                addRegexToken('SS', match1to3, match2);
                addRegexToken('SSS', match1to3, match3);

                var token,
                    getSetMillisecond;
                for (token = 'SSSS'; token.length <= 9; token += 'S') {
                    addRegexToken(token, matchUnsigned);
                }

                function parseMs(input, array) {
                    array[MILLISECOND] = toInt(('0.' + input) * 1000);
                }

                for (token = 'S'; token.length <= 9; token += 'S') {
                    addParseToken(token, parseMs);
                }

                getSetMillisecond = makeGetSet('Milliseconds', false);

                // FORMATTING

                addFormatToken('z', 0, 0, 'zoneAbbr');
                addFormatToken('zz', 0, 0, 'zoneName');

                // MOMENTS

                function getZoneAbbr() {
                    return this._isUTC ? 'UTC' : '';
                }

                function getZoneName() {
                    return this._isUTC ? 'Coordinated Universal Time' : '';
                }

                var proto = Moment.prototype;

                proto.add = add;
                proto.calendar = calendar$1;
                proto.clone = clone;
                proto.diff = diff;
                proto.endOf = endOf;
                proto.format = format;
                proto.from = from;
                proto.fromNow = fromNow;
                proto.to = to;
                proto.toNow = toNow;
                proto.get = stringGet;
                proto.invalidAt = invalidAt;
                proto.isAfter = isAfter;
                proto.isBefore = isBefore;
                proto.isBetween = isBetween;
                proto.isSame = isSame;
                proto.isSameOrAfter = isSameOrAfter;
                proto.isSameOrBefore = isSameOrBefore;
                proto.isValid = isValid$2;
                proto.lang = lang;
                proto.locale = locale;
                proto.localeData = localeData;
                proto.max = prototypeMax;
                proto.min = prototypeMin;
                proto.parsingFlags = parsingFlags;
                proto.set = stringSet;
                proto.startOf = startOf;
                proto.subtract = subtract;
                proto.toArray = toArray;
                proto.toObject = toObject;
                proto.toDate = toDate;
                proto.toISOString = toISOString;
                proto.inspect = inspect;
                if (typeof Symbol !== 'undefined' && Symbol.for != null) {
                    proto[Symbol.for('nodejs.util.inspect.custom')] = function() {
                        return 'Moment<' + this.format() + '>';
                    };
                }
                proto.toJSON = toJSON;
                proto.toString = toString;
                proto.unix = unix;
                proto.valueOf = valueOf;
                proto.creationData = creationData;
                proto.eraName = getEraName;
                proto.eraNarrow = getEraNarrow;
                proto.eraAbbr = getEraAbbr;
                proto.eraYear = getEraYear;
                proto.year = getSetYear;
                proto.isLeapYear = getIsLeapYear;
                proto.weekYear = getSetWeekYear;
                proto.isoWeekYear = getSetISOWeekYear;
                proto.quarter = proto.quarters = getSetQuarter;
                proto.month = getSetMonth;
                proto.daysInMonth = getDaysInMonth;
                proto.week = proto.weeks = getSetWeek;
                proto.isoWeek = proto.isoWeeks = getSetISOWeek;
                proto.weeksInYear = getWeeksInYear;
                proto.weeksInWeekYear = getWeeksInWeekYear;
                proto.isoWeeksInYear = getISOWeeksInYear;
                proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
                proto.date = getSetDayOfMonth;
                proto.day = proto.days = getSetDayOfWeek;
                proto.weekday = getSetLocaleDayOfWeek;
                proto.isoWeekday = getSetISODayOfWeek;
                proto.dayOfYear = getSetDayOfYear;
                proto.hour = proto.hours = getSetHour;
                proto.minute = proto.minutes = getSetMinute;
                proto.second = proto.seconds = getSetSecond;
                proto.millisecond = proto.milliseconds = getSetMillisecond;
                proto.utcOffset = getSetOffset;
                proto.utc = setOffsetToUTC;
                proto.local = setOffsetToLocal;
                proto.parseZone = setOffsetToParsedOffset;
                proto.hasAlignedHourOffset = hasAlignedHourOffset;
                proto.isDST = isDaylightSavingTime;
                proto.isLocal = isLocal;
                proto.isUtcOffset = isUtcOffset;
                proto.isUtc = isUtc;
                proto.isUTC = isUtc;
                proto.zoneAbbr = getZoneAbbr;
                proto.zoneName = getZoneName;
                proto.dates = deprecate(
                'dates accessor is deprecated. Use date instead.',
                getSetDayOfMonth
                );
                proto.months = deprecate(
                'months accessor is deprecated. Use month instead',
                getSetMonth
                );
                proto.years = deprecate(
                'years accessor is deprecated. Use year instead',
                getSetYear
                );
                proto.zone = deprecate(
                'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
                getSetZone
                );
                proto.isDSTShifted = deprecate(
                'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
                isDaylightSavingTimeShifted
                );

                function createUnix(input) {
                    return createLocal(input * 1000);
                }

                function createInZone() {
                    return createLocal.apply(null, arguments).parseZone();
                }

                function preParsePostFormat(string) {
                    return string;
                }

                var proto$1 = Locale.prototype;

                proto$1.calendar = calendar;
                proto$1.longDateFormat = longDateFormat;
                proto$1.invalidDate = invalidDate;
                proto$1.ordinal = ordinal;
                proto$1.preparse = preParsePostFormat;
                proto$1.postformat = preParsePostFormat;
                proto$1.relativeTime = relativeTime;
                proto$1.pastFuture = pastFuture;
                proto$1.set = set;
                proto$1.eras = localeEras;
                proto$1.erasParse = localeErasParse;
                proto$1.erasConvertYear = localeErasConvertYear;
                proto$1.erasAbbrRegex = erasAbbrRegex;
                proto$1.erasNameRegex = erasNameRegex;
                proto$1.erasNarrowRegex = erasNarrowRegex;

                proto$1.months = localeMonths;
                proto$1.monthsShort = localeMonthsShort;
                proto$1.monthsParse = localeMonthsParse;
                proto$1.monthsRegex = monthsRegex;
                proto$1.monthsShortRegex = monthsShortRegex;
                proto$1.week = localeWeek;
                proto$1.firstDayOfYear = localeFirstDayOfYear;
                proto$1.firstDayOfWeek = localeFirstDayOfWeek;

                proto$1.weekdays = localeWeekdays;
                proto$1.weekdaysMin = localeWeekdaysMin;
                proto$1.weekdaysShort = localeWeekdaysShort;
                proto$1.weekdaysParse = localeWeekdaysParse;

                proto$1.weekdaysRegex = weekdaysRegex;
                proto$1.weekdaysShortRegex = weekdaysShortRegex;
                proto$1.weekdaysMinRegex = weekdaysMinRegex;

                proto$1.isPM = localeIsPM;
                proto$1.meridiem = localeMeridiem;

                function get$1(format, index, field, setter) {
                    var locale = getLocale(),
                        utc = createUTC().set(setter, index);
                    return locale[field](utc, format);
                }

                function listMonthsImpl(format, index, field) {
                    if (isNumber(format)) {
                        index = format;
                        format = undefined;
                    }

                    format = format || '';

                    if (index != null) {
                        return get$1(format, index, field, 'month');
                    }

                    var i,
                        out = [];
                    for (i = 0; i < 12; i++) {
                        out[i] = get$1(format, i, field, 'month');
                    }
                    return out;
                }

                // ()
                // (5)
                // (fmt, 5)
                // (fmt)
                // (true)
                // (true, 5)
                // (true, fmt, 5)
                // (true, fmt)
                function listWeekdaysImpl(localeSorted, format, index, field) {
                    if (typeof localeSorted === 'boolean') {
                        if (isNumber(format)) {
                            index = format;
                            format = undefined;
                        }

                        format = format || '';
                    } else {
                        format = localeSorted;
                        index = format;
                        localeSorted = false;

                        if (isNumber(format)) {
                            index = format;
                            format = undefined;
                        }

                        format = format || '';
                    }

                    var locale = getLocale(),
                        shift = localeSorted ? locale._week.dow : 0,
                        i,
                        out = [];

                    if (index != null) {
                        return get$1(format, (index + shift) % 7, field, 'day');
                    }

                    for (i = 0; i < 7; i++) {
                        out[i] = get$1(format, (i + shift) % 7, field, 'day');
                    }
                    return out;
                }

                function listMonths(format, index) {
                    return listMonthsImpl(format, index, 'months');
                }

                function listMonthsShort(format, index) {
                    return listMonthsImpl(format, index, 'monthsShort');
                }

                function listWeekdays(localeSorted, format, index) {
                    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
                }

                function listWeekdaysShort(localeSorted, format, index) {
                    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
                }

                function listWeekdaysMin(localeSorted, format, index) {
                    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
                }

                getSetGlobalLocale('en', {
                    eras: [
                    {
                        since: '0001-01-01',
                        until: +Infinity,
                        offset: 1,
                        name: 'Anno Domini',
                        narrow: 'AD',
                        abbr: 'AD',
                    },
                    {
                        since: '0000-12-31',
                        until: -Infinity,
                        offset: 1,
                        name: 'Before Christ',
                        narrow: 'BC',
                        abbr: 'BC',
                    },
                    ],
                    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
                    ordinal: function(number) {
                        var b = number % 10,
                            output =
                            toInt((number % 100) / 10) === 1
                            ? 'th'
                            : b === 1
                            ? 'st'
                            : b === 2
                            ? 'nd'
                            : b === 3
                            ? 'rd'
                            : 'th';
                        return number + output;
                    },
                });

                // Side effect imports

                hooks.lang = deprecate(
                'moment.lang is deprecated. Use moment.locale instead.',
                getSetGlobalLocale
                );
                hooks.langData = deprecate(
                'moment.langData is deprecated. Use moment.localeData instead.',
                getLocale
                );

                var mathAbs = Math.abs;

                function abs() {
                    var data = this._data;

                    this._milliseconds = mathAbs(this._milliseconds);
                    this._days = mathAbs(this._days);
                    this._months = mathAbs(this._months);

                    data.milliseconds = mathAbs(data.milliseconds);
                    data.seconds = mathAbs(data.seconds);
                    data.minutes = mathAbs(data.minutes);
                    data.hours = mathAbs(data.hours);
                    data.months = mathAbs(data.months);
                    data.years = mathAbs(data.years);

                    return this;
                }

                function addSubtract$1(duration, input, value, direction) {
                    var other = createDuration(input, value);

                    duration._milliseconds += direction * other._milliseconds;
                    duration._days += direction * other._days;
                    duration._months += direction * other._months;

                    return duration._bubble();
                }

                // supports only 2.0-style add(1, 's') or add(duration)
                function add$1(input, value) {
                    return addSubtract$1(this, input, value, 1);
                }

                // supports only 2.0-style subtract(1, 's') or subtract(duration)
                function subtract$1(input, value) {
                    return addSubtract$1(this, input, value, -1);
                }

                function absCeil(number) {
                    if (number < 0) {
                        return Math.floor(number);
                    } else {
                        return Math.ceil(number);
                    }
                }

                function bubble() {
                    var milliseconds = this._milliseconds,
                        days = this._days,
                        months = this._months,
                        data = this._data,
                        seconds,
                        minutes,
                        hours,
                        years,
                        monthsFromDays;

                    // if we have a mix of positive and negative values, bubble down first
                    // check: https://github.com/moment/moment/issues/2166
                    if (
                    !(
                    (milliseconds >= 0 && days >= 0 && months >= 0) ||
                    (milliseconds <= 0 && days <= 0 && months <= 0)
                    )
                    ) {
                        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                        days = 0;
                        months = 0;
                    }

                    // The following code bubbles up values, see the tests for
                    // examples of what that means.
                    data.milliseconds = milliseconds % 1000;

                    seconds = absFloor(milliseconds / 1000);
                    data.seconds = seconds % 60;

                    minutes = absFloor(seconds / 60);
                    data.minutes = minutes % 60;

                    hours = absFloor(minutes / 60);
                    data.hours = hours % 24;

                    days += absFloor(hours / 24);

                    // convert days to months
                    monthsFromDays = absFloor(daysToMonths(days));
                    months += monthsFromDays;
                    days -= absCeil(monthsToDays(monthsFromDays));

                    // 12 months -> 1 year
                    years = absFloor(months / 12);
                    months %= 12;

                    data.days = days;
                    data.months = months;
                    data.years = years;

                    return this;
                }

                function daysToMonths(days) {
                    // 400 years have 146097 days (taking into account leap year rules)
                    // 400 years have 12 months === 4800
                    return (days * 4800) / 146097;
                }

                function monthsToDays(months) {
                    // the reverse of daysToMonths
                    return (months * 146097) / 4800;
                }

                function as(units) {
                    if (!this.isValid()) {
                        return NaN;
                    }
                    var days,
                        months,
                        milliseconds = this._milliseconds;

                    units = normalizeUnits(units);

                    if (units === 'month' || units === 'quarter' || units === 'year') {
                        days = this._days + milliseconds / 864e5;
                        months = this._months + daysToMonths(days);
                        switch (units) {
                        case 'month':
                            return months;
                        case 'quarter':
                            return months / 3;
                        case 'year':
                            return months / 12;
                        }
                    } else {
                        // handle milliseconds separately because of floating point math errors (issue #1867)
                        days = this._days + Math.round(monthsToDays(this._months));
                        switch (units) {
                        case 'week':
                            return days / 7 + milliseconds / 6048e5;
                        case 'day':
                            return days + milliseconds / 864e5;
                        case 'hour':
                            return days * 24 + milliseconds / 36e5;
                        case 'minute':
                            return days * 1440 + milliseconds / 6e4;
                        case 'second':
                            return days * 86400 + milliseconds / 1000;
                        // Math.floor prevents floating point math errors here
                        case 'millisecond':
                            return Math.floor(days * 864e5) + milliseconds;
                        default:
                            throw new Error('Unknown unit ' + units);
                        }
                    }
                }

                // TODO: Use this.as('ms')?
                function valueOf$1() {
                    if (!this.isValid()) {
                        return NaN;
                    }
                    return (
                    this._milliseconds +
                    this._days * 864e5 +
                    (this._months % 12) * 2592e6 +
                    toInt(this._months / 12) * 31536e6
                    ) ;
                }

                function makeAs(alias) {
                    return function() {
                        return this.as(alias);
                    };
                }

                var asMilliseconds = makeAs('ms'),
                    asSeconds = makeAs('s'),
                    asMinutes = makeAs('m'),
                    asHours = makeAs('h'),
                    asDays = makeAs('d'),
                    asWeeks = makeAs('w'),
                    asMonths = makeAs('M'),
                    asQuarters = makeAs('Q'),
                    asYears = makeAs('y');

                function clone$1() {
                    return createDuration(this);
                }

                function get$2(units) {
                    units = normalizeUnits(units);
                    return this.isValid() ? this[units + 's']() : NaN;
                }

                function makeGetter(name) {
                    return function() {
                        return this.isValid() ? this._data[name] : NaN;
                    };
                }

                var milliseconds = makeGetter('milliseconds'),
                    seconds = makeGetter('seconds'),
                    minutes = makeGetter('minutes'),
                    hours = makeGetter('hours'),
                    days = makeGetter('days'),
                    months = makeGetter('months'),
                    years = makeGetter('years');

                function weeks() {
                    return absFloor(this.days() / 7);
                }

                var round = Math.round,
                    thresholds = {
                        ss: 44,
                        // a few seconds to seconds
                        s: 45,
                        // seconds to minute
                        m: 45,
                        // minutes to hour
                        h: 22,
                        // hours to day
                        d: 26,
                        // days to month/week
                        w: null,
                        // weeks to month
                        M: 11,
                    };
                // months to year

                // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
                function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
                    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
                }

                function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
                    var duration = createDuration(posNegDuration).abs(),
                        seconds = round(duration.as('s')),
                        minutes = round(duration.as('m')),
                        hours = round(duration.as('h')),
                        days = round(duration.as('d')),
                        months = round(duration.as('M')),
                        weeks = round(duration.as('w')),
                        years = round(duration.as('y')),
                        a =
                        (seconds <= thresholds.ss && ['s', seconds]) ||
                        (seconds < thresholds.s && ['ss', seconds]) ||
                        (minutes <= 1 && ['m']) ||
                        (minutes < thresholds.m && ['mm', minutes]) ||
                        (hours <= 1 && ['h']) ||
                        (hours < thresholds.h && ['hh', hours]) ||
                        (days <= 1 && ['d']) ||
                        (days < thresholds.d && ['dd', days]);

                    if (thresholds.w != null) {
                        a =
                        a ||
                        (weeks <= 1 && ['w']) ||
                        (weeks < thresholds.w && ['ww', weeks]);
                    }
                    a = a ||
                    (months <= 1 && ['M']) ||
                    (months < thresholds.M && ['MM', months]) ||
                    (years <= 1 && ['y']) || ['yy', years];

                    a[2] = withoutSuffix;
                    a[3] = +posNegDuration > 0;
                    a[4] = locale;
                    return substituteTimeAgo.apply(null, a);
                }

                // This function allows you to set the rounding function for relative time strings
                function getSetRelativeTimeRounding(roundingFunction) {
                    if (roundingFunction === undefined) {
                        return round;
                    }
                    if (typeof roundingFunction === 'function') {
                        round = roundingFunction;
                        return true;
                    }
                    return false;
                }

                // This function allows you to set a threshold for relative time strings
                function getSetRelativeTimeThreshold(threshold, limit) {
                    if (thresholds[threshold] === undefined) {
                        return false;
                    }
                    if (limit === undefined) {
                        return thresholds[threshold];
                    }
                    thresholds[threshold] = limit;
                    if (threshold === 's') {
                        thresholds.ss = limit - 1;
                    }
                    return true;
                }

                function humanize(argWithSuffix, argThresholds) {
                    if (!this.isValid()) {
                        return this.localeData().invalidDate();
                    }

                    var withSuffix = false,
                        th = thresholds,
                        locale,
                        output;

                    if (typeof argWithSuffix === 'object') {
                        argThresholds = argWithSuffix;
                        argWithSuffix = false;
                    }
                    if (typeof argWithSuffix === 'boolean') {
                        withSuffix = argWithSuffix;
                    }
                    if (typeof argThresholds === 'object') {
                        th = Object.assign({}, thresholds, argThresholds);
                        if (argThresholds.s != null && argThresholds.ss == null) {
                            th.ss = argThresholds.s - 1;
                        }
                    }

                    locale = this.localeData();
                    output = relativeTime$1(this, !withSuffix, th, locale);

                    if (withSuffix) {
                        output = locale.pastFuture(+this, output);
                    }

                    return locale.postformat(output);
                }

                var abs$1 = Math.abs;

                function sign(x) {
                    return (x > 0) - (x < 0) || +x;
                }

                function toISOString$1() {
                    // for ISO strings we do not use the normal bubbling rules:
                    //  * milliseconds bubble up until they become hours
                    //  * days do not bubble at all
                    //  * months bubble up until they become years
                    // This is because there is no context-free conversion between hours and days
                    // (think of clock changes)
                    // and also not between days and months (28-31 days per month)
                    if (!this.isValid()) {
                        return this.localeData().invalidDate();
                    }

                    var seconds = abs$1(this._milliseconds) / 1000,
                        days = abs$1(this._days),
                        months = abs$1(this._months),
                        minutes,
                        hours,
                        years,
                        s,
                        total = this.asSeconds(),
                        totalSign,
                        ymSign,
                        daysSign,
                        hmsSign;

                    if (!total) {
                        // this is the same as C#'s (Noda) and python (isodate)...
                        // but not other JS (goog.date)
                        return 'P0D';
                    }

                    // 3600 seconds -> 60 minutes -> 1 hour
                    minutes = absFloor(seconds / 60);
                    hours = absFloor(minutes / 60);
                    seconds %= 60;
                    minutes %= 60;

                    // 12 months -> 1 year
                    years = absFloor(months / 12);
                    months %= 12;

                    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
                    s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

                    totalSign = total < 0 ? '-' : '';
                    ymSign = sign(this._months) !== sign(total) ? '-' : '';
                    daysSign = sign(this._days) !== sign(total) ? '-' : '';
                    hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

                    return (
                    totalSign +
                    'P' +
                    (years ? ymSign + years + 'Y' : '') +
                    (months ? ymSign + months + 'M' : '') +
                    (days ? daysSign + days + 'D' : '') +
                    (hours || minutes || seconds ? 'T' : '') +
                    (hours ? hmsSign + hours + 'H' : '') +
                    (minutes ? hmsSign + minutes + 'M' : '') +
                    (seconds ? hmsSign + s + 'S' : '')
                    ) ;
                }

                var proto$2 = Duration.prototype;

                proto$2.isValid = isValid$1;
                proto$2.abs = abs;
                proto$2.add = add$1;
                proto$2.subtract = subtract$1;
                proto$2.as = as;
                proto$2.asMilliseconds = asMilliseconds;
                proto$2.asSeconds = asSeconds;
                proto$2.asMinutes = asMinutes;
                proto$2.asHours = asHours;
                proto$2.asDays = asDays;
                proto$2.asWeeks = asWeeks;
                proto$2.asMonths = asMonths;
                proto$2.asQuarters = asQuarters;
                proto$2.asYears = asYears;
                proto$2.valueOf = valueOf$1;
                proto$2._bubble = bubble;
                proto$2.clone = clone$1;
                proto$2.get = get$2;
                proto$2.milliseconds = milliseconds;
                proto$2.seconds = seconds;
                proto$2.minutes = minutes;
                proto$2.hours = hours;
                proto$2.days = days;
                proto$2.weeks = weeks;
                proto$2.months = months;
                proto$2.years = years;
                proto$2.humanize = humanize;
                proto$2.toISOString = toISOString$1;
                proto$2.toString = toISOString$1;
                proto$2.toJSON = toISOString$1;
                proto$2.locale = locale;
                proto$2.localeData = localeData;

                proto$2.toIsoString = deprecate(
                'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
                toISOString$1
                );
                proto$2.lang = lang;

                // FORMATTING

                addFormatToken('X', 0, 0, 'unix');
                addFormatToken('x', 0, 0, 'valueOf');

                // PARSING

                addRegexToken('x', matchSigned);
                addRegexToken('X', matchTimestamp);
                addParseToken('X', function(input, array, config) {
                    config._d = new Date(parseFloat(input) * 1000);
                });
                addParseToken('x', function(input, array, config) {
                    config._d = new Date(toInt(input));
                });

                //! moment.js

                hooks.version = '2.29.1';

                setHookCallback(createLocal);

                hooks.fn = proto;
                hooks.min = min;
                hooks.max = max;
                hooks.now = now;
                hooks.utc = createUTC;
                hooks.unix = createUnix;
                hooks.months = listMonths;
                hooks.isDate = isDate;
                hooks.locale = getSetGlobalLocale;
                hooks.invalid = createInvalid;
                hooks.duration = createDuration;
                hooks.isMoment = isMoment;
                hooks.weekdays = listWeekdays;
                hooks.parseZone = createInZone;
                hooks.localeData = getLocale;
                hooks.isDuration = isDuration;
                hooks.monthsShort = listMonthsShort;
                hooks.weekdaysMin = listWeekdaysMin;
                hooks.defineLocale = defineLocale;
                hooks.updateLocale = updateLocale;
                hooks.locales = listLocales;
                hooks.weekdaysShort = listWeekdaysShort;
                hooks.normalizeUnits = normalizeUnits;
                hooks.relativeTimeRounding = getSetRelativeTimeRounding;
                hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
                hooks.calendarFormat = getCalendarFormat;
                hooks.prototype = proto;

                // currently HTML5 input type only supports 24-hour formats
                hooks.HTML5_FMT = {
                    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
                    // <input type="datetime-local" />
                    DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
                    // <input type="datetime-local" step="1" />
                    DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
                    // <input type="datetime-local" step="0.001" />
                    DATE: 'YYYY-MM-DD',
                    // <input type="date" />
                    TIME: 'HH:mm',
                    // <input type="time" />
                    TIME_SECONDS: 'HH:mm:ss',
                    // <input type="time" step="1" />
                    TIME_MS: 'HH:mm:ss.SSS',
                    // <input type="time" step="0.001" />
                    WEEK: 'GGGG-[W]WW',
                    // <input type="week" />
                    MONTH: 'YYYY-MM',
                };
                // <input type="month" />

                return hooks;

            })));

        }, {}],
        515: [function(require, module, exports) {
            /*
            object-assign
            (c) Sindre Sorhus
            @license MIT
            */

            'use strict';
            /* eslint-disable no-unused-vars */
            var getOwnPropertySymbols = Object.getOwnPropertySymbols;
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var propIsEnumerable = Object.prototype.propertyIsEnumerable;

            function toObject(val) {
                if (val === null || val === undefined) {
                    throw new TypeError('Object.assign cannot be called with null or undefined');
                }

                return Object(val);
            }

            function shouldUseNative() {
                try {
                    if (!Object.assign) {
                        return false;
                    }

                    // Detect buggy property enumeration order in older V8 versions.

                    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
                    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
                    test1[5] = 'de';
                    if (Object.getOwnPropertyNames(test1)[0] === '5') {
                        return false;
                    }

                    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
                    var test2 = {};
                    for (var i = 0; i < 10; i++) {
                        test2['_' + String.fromCharCode(i)] = i;
                    }
                    var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
                        return test2[n];
                    });
                    if (order2.join('') !== '0123456789') {
                        return false;
                    }

                    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
                    var test3 = {};
                    'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
                        test3[letter] = letter;
                    });
                    if (Object.keys(Object.assign({}, test3)).join('') !==
                    'abcdefghijklmnopqrst') {
                        return false;
                    }

                    return true;
                } catch (err) {
                    // We don't expect any of the above to throw, but better to be safe.
                    return false;
                }
            }

            module.exports = shouldUseNative() ? Object.assign : function(target, source) {
                var from;
                var to = toObject(target);
                var symbols;

                for (var s = 1; s < arguments.length; s++) {
                    from = Object(arguments[s]);

                    for (var key in from) {
                        if (hasOwnProperty.call(from, key)) {
                            to[key] = from[key];
                        }
                    }

                    if (getOwnPropertySymbols) {
                        symbols = getOwnPropertySymbols(from);
                        for (var i = 0; i < symbols.length; i++) {
                            if (propIsEnumerable.call(from, symbols[i])) {
                                to[symbols[i]] = from[symbols[i]];
                            }
                        }
                    }
                }

                return to;
            };

        }, {}],
        516: [function(require, module, exports) {
            // shim for using process in browser
            var process = module.exports = {};

            // cached from whatever global is present so that test runners that stub it
            // don't break things.  But we need to wrap it in a try catch in case it is
            // wrapped in strict mode code which doesn't define any globals.  It's inside a
            // function because try/catches deoptimize in certain engines.

            var cachedSetTimeout;
            var cachedClearTimeout;

            function defaultSetTimout() {
                throw new Error('setTimeout has not been defined');
            }
            function defaultClearTimeout() {
                throw new Error('clearTimeout has not been defined');
            }
            (function() {
                try {
                    if (typeof setTimeout === 'function') {
                        cachedSetTimeout = setTimeout;
                    } else {
                        cachedSetTimeout = defaultSetTimout;
                    }
                } catch (e) {
                    cachedSetTimeout = defaultSetTimout;
                }
                try {
                    if (typeof clearTimeout === 'function') {
                        cachedClearTimeout = clearTimeout;
                    } else {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                } catch (e) {
                    cachedClearTimeout = defaultClearTimeout;
                }
            }())
            function runTimeout(fun) {
                if (cachedSetTimeout === setTimeout) {
                    //normal enviroments in sane situations
                    return setTimeout(fun, 0);
                }
                // if setTimeout wasn't available but was latter defined
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                    cachedSetTimeout = setTimeout;
                    return setTimeout(fun, 0);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedSetTimeout(fun, 0);
                } catch (e) {
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                        return cachedSetTimeout.call(null, fun, 0);
                    } catch (e) {
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                        return cachedSetTimeout.call(this, fun, 0);
                    }
                }


            }
            function runClearTimeout(marker) {
                if (cachedClearTimeout === clearTimeout) {
                    //normal enviroments in sane situations
                    return clearTimeout(marker);
                }
                // if clearTimeout wasn't available but was latter defined
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                    cachedClearTimeout = clearTimeout;
                    return clearTimeout(marker);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedClearTimeout(marker);
                } catch (e) {
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                        return cachedClearTimeout.call(null, marker);
                    } catch (e) {
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                        // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                        return cachedClearTimeout.call(this, marker);
                    }
                }



            }
            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;

            function cleanUpNextTick() {
                if (!draining || !currentQueue) {
                    return;
                }
                draining = false;
                if (currentQueue.length) {
                    queue = currentQueue.concat(queue);
                } else {
                    queueIndex = -1;
                }
                if (queue.length) {
                    drainQueue();
                }
            }

            function drainQueue() {
                if (draining) {
                    return;
                }
                var timeout = runTimeout(cleanUpNextTick);
                draining = true;

                var len = queue.length;
                while (len) {
                    currentQueue = queue;
                    queue = [];
                    while (++queueIndex < len) {
                        if (currentQueue) {
                            currentQueue[queueIndex].run();
                        }
                    }
                    queueIndex = -1;
                    len = queue.length;
                }
                currentQueue = null;
                draining = false;
                runClearTimeout(timeout);
            }

            process.nextTick = function(fun) {
                var args = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                    for (var i = 1; i < arguments.length; i++) {
                        args[i - 1] = arguments[i];
                    }
                }
                queue.push(new Item(fun, args));
                if (queue.length === 1 && !draining) {
                    runTimeout(drainQueue);
                }
            };

            // v8 likes predictible objects
            function Item(fun, array) {
                this.fun = fun;
                this.array = array;
            }
            Item.prototype.run = function() {
                this.fun.apply(null, this.array);
            };
            process.title = 'browser';
            process.browser = true;
            process.env = {};
            process.argv = [];
            process.version = ''; // empty string to avoid regexp issues
            process.versions = {};

            function noop() {}

            process.on = noop;
            process.addListener = noop;
            process.once = noop;
            process.off = noop;
            process.removeListener = noop;
            process.removeAllListeners = noop;
            process.emit = noop;
            process.prependListener = noop;
            process.prependOnceListener = noop;

            process.listeners = function(name) {
                return []
            }

            process.binding = function(name) {
                throw new Error('process.binding is not supported');
            };

            process.cwd = function() {
                return '/'
            };
            process.chdir = function(dir) {
                throw new Error('process.chdir is not supported');
            };
            process.umask = function() {
                return 0;
            };

        }, {}],
        517: [function(require, module, exports) {
            module.exports = function isBuffer(arg) {
                return arg && typeof arg === 'object'
                    && typeof arg.copy === 'function'
                    && typeof arg.fill === 'function'
                    && typeof arg.readUInt8 === 'function';
            }
        }, {}],
        518: [function(require, module, exports) {
            (function(process, global) {
                (function() {
                    // Copyright Joyent, Inc. and other Node contributors.
                    //
                    // Permission is hereby granted, free of charge, to any person obtaining a
                    // copy of this software and associated documentation files (the
                    // "Software"), to deal in the Software without restriction, including
                    // without limitation the rights to use, copy, modify, merge, publish,
                    // distribute, sublicense, and/or sell copies of the Software, and to permit
                    // persons to whom the Software is furnished to do so, subject to the
                    // following conditions:
                    //
                    // The above copyright notice and this permission notice shall be included
                    // in all copies or substantial portions of the Software.
                    //
                    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                    // USE OR OTHER DEALINGS IN THE SOFTWARE.

                    var formatRegExp = /%[sdj%]/g;
                    exports.format = function(f) {
                        if (!isString(f)) {
                            var objects = [];
                            for (var i = 0; i < arguments.length; i++) {
                                objects.push(inspect(arguments[i]));
                            }
                            return objects.join(' ');
                        }

                        var i = 1;
                        var args = arguments;
                        var len = args.length;
                        var str = String(f).replace(formatRegExp, function(x) {
                            if (x === '%%')
                                return '%';
                            if (i >= len)
                                return x;
                            switch (x) {
                            case '%s':
                                return String(args[i++]);
                            case '%d':
                                return Number(args[i++]);
                            case '%j':
                                try {
                                    return JSON.stringify(args[i++]);
                                } catch (_) {
                                    return '[Circular]';
                                }
                            default:
                                return x;
                            }
                        });
                        for (var x = args[i]; i < len; x = args[++i]) {
                            if (isNull(x) || !isObject(x)) {
                                str += ' ' + x;
                            } else {
                                str += ' ' + inspect(x);
                            }
                        }
                        return str;
                    };

                    // Mark that a method should not be used.
                    // Returns a modified function which warns once by default.
                    // If --no-deprecation is set, then it is a no-op.
                    exports.deprecate = function(fn, msg) {
                        // Allow for deprecating things in the process of starting up.
                        if (isUndefined(global.process)) {
                            return function() {
                                return exports.deprecate(fn, msg).apply(this, arguments);
                            };
                        }

                        if (process.noDeprecation === true) {
                            return fn;
                        }

                        var warned = false;
                        function deprecated() {
                            if (!warned) {
                                if (process.throwDeprecation) {
                                    throw new Error(msg);
                                } else if (process.traceDeprecation) {
                                    console.trace(msg);
                                } else {
                                    console.error(msg);
                                }
                                warned = true;
                            }
                            return fn.apply(this, arguments);
                        }

                        return deprecated;
                    };


                    var debugs = {};
                    var debugEnviron;
                    exports.debuglog = function(set) {
                        if (isUndefined(debugEnviron))
                            debugEnviron = process.env.NODE_DEBUG || '';
                        set = set.toUpperCase();
                        if (!debugs[set]) {
                            if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                                var pid = process.pid;
                                debugs[set] = function() {
                                    var msg = exports.format.apply(exports, arguments);
                                    console.error('%s %d: %s', set, pid, msg);
                                };
                            } else {
                                debugs[set] = function() {};
                            }
                        }
                        return debugs[set];
                    };

                    /**
                     * Echos the value of a value. Trys to print the value out
                     * in the best way possible given the different types.
                     *
                     * @param {Object} obj The object to print out.
                     * @param {Object} opts Optional options object that alters the output.
                     */
                    /* legacy: obj, showHidden, depth, colors*/
                    function inspect(obj, opts) {
                        // default options
                        var ctx = {
                            seen: [],
                            stylize: stylizeNoColor
                        };
                        // legacy...
                        if (arguments.length >= 3)
                            ctx.depth = arguments[2];
                        if (arguments.length >= 4)
                            ctx.colors = arguments[3];
                        if (isBoolean(opts)) {
                            // legacy...
                            ctx.showHidden = opts;
                        } else if (opts) {
                            // got an "options" object
                            exports._extend(ctx, opts);
                        }
                        // set default options
                        if (isUndefined(ctx.showHidden))
                            ctx.showHidden = false;
                        if (isUndefined(ctx.depth))
                            ctx.depth = 2;
                        if (isUndefined(ctx.colors))
                            ctx.colors = false;
                        if (isUndefined(ctx.customInspect))
                            ctx.customInspect = true;
                        if (ctx.colors)
                            ctx.stylize = stylizeWithColor;
                        return formatValue(ctx, obj, ctx.depth);
                    }
                    exports.inspect = inspect;

                    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
                    inspect.colors = {
                        'bold': [1, 22],
                        'italic': [3, 23],
                        'underline': [4, 24],
                        'inverse': [7, 27],
                        'white': [37, 39],
                        'grey': [90, 39],
                        'black': [30, 39],
                        'blue': [34, 39],
                        'cyan': [36, 39],
                        'green': [32, 39],
                        'magenta': [35, 39],
                        'red': [31, 39],
                        'yellow': [33, 39]
                    };

                    // Don't use 'blue' not visible on cmd.exe
                    inspect.styles = {
                        'special': 'cyan',
                        'number': 'yellow',
                        'boolean': 'yellow',
                        'undefined': 'grey',
                        'null': 'bold',
                        'string': 'green',
                        'date': 'magenta',
                        // "name": intentionally not styling
                        'regexp': 'red'
                    };


                    function stylizeWithColor(str, styleType) {
                        var style = inspect.styles[styleType];

                        if (style) {
                            return '\u001b[' + inspect.colors[style][0] + 'm' + str +
                            '\u001b[' + inspect.colors[style][1] + 'm';
                        } else {
                            return str;
                        }
                    }


                    function stylizeNoColor(str, styleType) {
                        return str;
                    }


                    function arrayToHash(array) {
                        var hash = {};

                        array.forEach(function(val, idx) {
                            hash[val] = true;
                        });

                        return hash;
                    }


                    function formatValue(ctx, value, recurseTimes) {
                        // Provide a hook for user-specified inspect functions.
                        // Check that value is an object with an inspect function on it
                        if (ctx.customInspect &&
                        value &&
                        isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
                        value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
                        !(value.constructor && value.constructor.prototype === value)) {
                            var ret = value.inspect(recurseTimes, ctx);
                            if (!isString(ret)) {
                                ret = formatValue(ctx, ret, recurseTimes);
                            }
                            return ret;
                        }

                        // Primitive types cannot have properties
                        var primitive = formatPrimitive(ctx, value);
                        if (primitive) {
                            return primitive;
                        }

                        // Look up the keys of the object.
                        var keys = Object.keys(value);
                        var visibleKeys = arrayToHash(keys);

                        if (ctx.showHidden) {
                            keys = Object.getOwnPropertyNames(value);
                        }

                        // IE doesn't make error fields non-enumerable
                        // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
                        if (isError(value)
                        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                            return formatError(value);
                        }

                        // Some type of object without properties can be shortcutted.
                        if (keys.length === 0) {
                            if (isFunction(value)) {
                                var name = value.name ? ': ' + value.name : '';
                                return ctx.stylize('[Function' + name + ']', 'special');
                            }
                            if (isRegExp(value)) {
                                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                            }
                            if (isDate(value)) {
                                return ctx.stylize(Date.prototype.toString.call(value), 'date');
                            }
                            if (isError(value)) {
                                return formatError(value);
                            }
                        }

                        var base = '',
                            array = false,
                            braces = ['{', '}'];

                        // Make Array say that they are Array
                        if (isArray(value)) {
                            array = true;
                            braces = ['[', ']'];
                        }

                        // Make functions say that they are functions
                        if (isFunction(value)) {
                            var n = value.name ? ': ' + value.name : '';
                            base = ' [Function' + n + ']';
                        }

                        // Make RegExps say that they are RegExps
                        if (isRegExp(value)) {
                            base = ' ' + RegExp.prototype.toString.call(value);
                        }

                        // Make dates with properties first say the date
                        if (isDate(value)) {
                            base = ' ' + Date.prototype.toUTCString.call(value);
                        }

                        // Make error with message first say the error
                        if (isError(value)) {
                            base = ' ' + formatError(value);
                        }

                        if (keys.length === 0 && (!array || value.length == 0)) {
                            return braces[0] + base + braces[1];
                        }

                        if (recurseTimes < 0) {
                            if (isRegExp(value)) {
                                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                            } else {
                                return ctx.stylize('[Object]', 'special');
                            }
                        }

                        ctx.seen.push(value);

                        var output;
                        if (array) {
                            output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
                        } else {
                            output = keys.map(function(key) {
                                return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                            });
                        }

                        ctx.seen.pop();

                        return reduceToSingleString(output, base, braces);
                    }


                    function formatPrimitive(ctx, value) {
                        if (isUndefined(value))
                            return ctx.stylize('undefined', 'undefined');
                        if (isString(value)) {
                            var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                            .replace(/'/g, "\\'")
                            .replace(/\\"/g, '"') + '\'';
                            return ctx.stylize(simple, 'string');
                        }
                        if (isNumber(value))
                            return ctx.stylize('' + value, 'number');
                        if (isBoolean(value))
                            return ctx.stylize('' + value, 'boolean');
                        // For some reason typeof null is "object", so special case here.
                        if (isNull(value))
                            return ctx.stylize('null', 'null');
                    }


                    function formatError(value) {
                        return '[' + Error.prototype.toString.call(value) + ']';
                    }


                    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                        var output = [];
                        for (var i = 0, l = value.length; i < l; ++i) {
                            if (hasOwnProperty(value, String(i))) {
                                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                                String(i), true));
                            } else {
                                output.push('');
                            }
                        }
                        keys.forEach(function(key) {
                            if (!key.match(/^\d+$/)) {
                                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
                                key, true));
                            }
                        });
                        return output;
                    }


                    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                        var name,
                            str,
                            desc;
                        desc = Object.getOwnPropertyDescriptor(value, key) || {
                            value: value[key]
                        };
                        if (desc.get) {
                            if (desc.set) {
                                str = ctx.stylize('[Getter/Setter]', 'special');
                            } else {
                                str = ctx.stylize('[Getter]', 'special');
                            }
                        } else {
                            if (desc.set) {
                                str = ctx.stylize('[Setter]', 'special');
                            }
                        }
                        if (!hasOwnProperty(visibleKeys, key)) {
                            name = '[' + key + ']';
                        }
                        if (!str) {
                            if (ctx.seen.indexOf(desc.value) < 0) {
                                if (isNull(recurseTimes)) {
                                    str = formatValue(ctx, desc.value, null);
                                } else {
                                    str = formatValue(ctx, desc.value, recurseTimes - 1);
                                }
                                if (str.indexOf('\n') > -1) {
                                    if (array) {
                                        str = str.split('\n').map(function(line) {
                                            return '  ' + line;
                                        }).join('\n').substr(2);
                                    } else {
                                        str = '\n' + str.split('\n').map(function(line) {
                                            return '   ' + line;
                                        }).join('\n');
                                    }
                                }
                            } else {
                                str = ctx.stylize('[Circular]', 'special');
                            }
                        }
                        if (isUndefined(name)) {
                            if (array && key.match(/^\d+$/)) {
                                return str;
                            }
                            name = JSON.stringify('' + key);
                            if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                                name = name.substr(1, name.length - 2);
                                name = ctx.stylize(name, 'name');
                            } else {
                                name = name.replace(/'/g, "\\'")
                                .replace(/\\"/g, '"')
                                .replace(/(^"|"$)/g, "'");
                                name = ctx.stylize(name, 'string');
                            }
                        }

                        return name + ': ' + str;
                    }


                    function reduceToSingleString(output, base, braces) {
                        var numLinesEst = 0;
                        var length = output.reduce(function(prev, cur) {
                            numLinesEst++;
                            if (cur.indexOf('\n') >= 0)
                                numLinesEst++;
                            return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
                        }, 0);

                        if (length > 60) {
                            return braces[0] +
                            (base === '' ? '' : base + '\n ') +
                            ' ' +
                            output.join(',\n  ') +
                            ' ' +
                            braces[1];
                        }

                        return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
                    }

                    // NOTE: These type checking functions intentionally don't use `instanceof`
                    // because it is fragile and can be easily faked with `Object.create()`.
                    function isArray(ar) {
                        return Array.isArray(ar);
                    }
                    exports.isArray = isArray;

                    function isBoolean(arg) {
                        return typeof arg === 'boolean';
                    }
                    exports.isBoolean = isBoolean;

                    function isNull(arg) {
                        return arg === null;
                    }
                    exports.isNull = isNull;

                    function isNullOrUndefined(arg) {
                        return arg == null;
                    }
                    exports.isNullOrUndefined = isNullOrUndefined;

                    function isNumber(arg) {
                        return typeof arg === 'number';
                    }
                    exports.isNumber = isNumber;

                    function isString(arg) {
                        return typeof arg === 'string';
                    }
                    exports.isString = isString;

                    function isSymbol(arg) {
                        return typeof arg === 'symbol';
                    }
                    exports.isSymbol = isSymbol;

                    function isUndefined(arg) {
                        return arg === void 0;
                    }
                    exports.isUndefined = isUndefined;

                    function isRegExp(re) {
                        return isObject(re) && objectToString(re) === '[object RegExp]';
                    }
                    exports.isRegExp = isRegExp;

                    function isObject(arg) {
                        return typeof arg === 'object' && arg !== null;
                    }
                    exports.isObject = isObject;

                    function isDate(d) {
                        return isObject(d) && objectToString(d) === '[object Date]';
                    }
                    exports.isDate = isDate;

                    function isError(e) {
                        return isObject(e) &&
                            (objectToString(e) === '[object Error]' || e instanceof Error);
                    }
                    exports.isError = isError;

                    function isFunction(arg) {
                        return typeof arg === 'function';
                    }
                    exports.isFunction = isFunction;

                    function isPrimitive(arg) {
                        return arg === null ||
                            typeof arg === 'boolean' ||
                            typeof arg === 'number' ||
                            typeof arg === 'string' ||
                            typeof arg === 'symbol' || // ES6 symbol
                            typeof arg === 'undefined';
                    }
                    exports.isPrimitive = isPrimitive;

                    exports.isBuffer = require('./support/isBuffer');

                    function objectToString(o) {
                        return Object.prototype.toString.call(o);
                    }


                    function pad(n) {
                        return n < 10 ? '0' + n.toString(10) : n.toString(10);
                    }


                    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                    'Oct', 'Nov', 'Dec'];

                    // 26 Feb 16:19:34
                    function timestamp() {
                        var d = new Date();
                        var time = [pad(d.getHours()),
                        pad(d.getMinutes()),
                        pad(d.getSeconds())].join(':');
                        return [d.getDate(), months[d.getMonth()], time].join(' ');
                    }

                    // log is just a thin wrapper to console.log that prepends a timestamp
                    exports.log = function() {
                        console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
                    };

                    /**
                     * Inherit the prototype methods from one constructor into another.
                     *
                     * The Function.prototype.inherits from lang.js rewritten as a standalone
                     * function (not on Function.prototype). NOTE: If this file is to be loaded
                     * during bootstrapping this function needs to be rewritten using some native
                     * functions as prototype setup using normal JavaScript does not work as
                     * expected during bootstrapping (see mirror.js in r114903).
                     *
                     * @param {function} ctor Constructor function which needs to inherit the
                     *     prototype.
                     * @param {function} superCtor Constructor function to inherit prototype from.
                     */
                    exports.inherits = require('inherits');

                    exports._extend = function(origin, add) {
                        // Don't do anything if add isn't an object
                        if (!add || !isObject(add))
                            return origin;

                        var keys = Object.keys(add);
                        var i = keys.length;
                        while (i--) {
                            origin[keys[i]] = add[keys[i]];
                        }
                        return origin;
                    };

                    function hasOwnProperty(obj, prop) {
                        return Object.prototype.hasOwnProperty.call(obj, prop);
                    }

                }).call(this)
            }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

        }, {
            "./support/isBuffer": 517,
            "_process": 516,
            "inherits": 371
        }],
        519: [function(require, module, exports) {
            'use strict'
            module.exports = function(Yallist) {
                Yallist.prototype[Symbol.iterator] = function* () {
                    for (let walker = this.head; walker; walker = walker.next) {
                        yield walker.value
                    }
                }
            }

        }, {}],
        520: [function(require, module, exports) {
            'use strict'
            module.exports = Yallist

            Yallist.Node = Node
            Yallist.create = Yallist

            function Yallist(list) {
                var self = this
                if (!(self instanceof Yallist)) {
                    self = new Yallist()
                }

                self.tail = null
                self.head = null
                self.length = 0

                if (list && typeof list.forEach === 'function') {
                    list.forEach(function(item) {
                        self.push(item)
                    })
                } else if (arguments.length > 0) {
                    for (var i = 0, l = arguments.length; i < l; i++) {
                        self.push(arguments[i])
                    }
                }

                return self
            }

            Yallist.prototype.removeNode = function(node) {
                if (node.list !== this) {
                    throw new Error('removing node which does not belong to this list')
                }

                var next = node.next
                var prev = node.prev

                if (next) {
                    next.prev = prev
                }

                if (prev) {
                    prev.next = next
                }

                if (node === this.head) {
                    this.head = next
                }
                if (node === this.tail) {
                    this.tail = prev
                }

                node.list.length--
                node.next = null
                node.prev = null
                node.list = null

                return next
            }

            Yallist.prototype.unshiftNode = function(node) {
                if (node === this.head) {
                    return
                }

                if (node.list) {
                    node.list.removeNode(node)
                }

                var head = this.head
                node.list = this
                node.next = head
                if (head) {
                    head.prev = node
                }

                this.head = node
                if (!this.tail) {
                    this.tail = node
                }
                this.length++
            }

            Yallist.prototype.pushNode = function(node) {
                if (node === this.tail) {
                    return
                }

                if (node.list) {
                    node.list.removeNode(node)
                }

                var tail = this.tail
                node.list = this
                node.prev = tail
                if (tail) {
                    tail.next = node
                }

                this.tail = node
                if (!this.head) {
                    this.head = node
                }
                this.length++
            }

            Yallist.prototype.push = function() {
                for (var i = 0, l = arguments.length; i < l; i++) {
                    push(this, arguments[i])
                }
                return this.length
            }

            Yallist.prototype.unshift = function() {
                for (var i = 0, l = arguments.length; i < l; i++) {
                    unshift(this, arguments[i])
                }
                return this.length
            }

            Yallist.prototype.pop = function() {
                if (!this.tail) {
                    return undefined
                }

                var res = this.tail.value
                this.tail = this.tail.prev
                if (this.tail) {
                    this.tail.next = null
                } else {
                    this.head = null
                }
                this.length--
                return res
            }

            Yallist.prototype.shift = function() {
                if (!this.head) {
                    return undefined
                }

                var res = this.head.value
                this.head = this.head.next
                if (this.head) {
                    this.head.prev = null
                } else {
                    this.tail = null
                }
                this.length--
                return res
            }

            Yallist.prototype.forEach = function(fn, thisp) {
                thisp = thisp || this
                for (var walker = this.head, i = 0; walker !== null; i++) {
                    fn.call(thisp, walker.value, i, this)
                    walker = walker.next
                }
            }

            Yallist.prototype.forEachReverse = function(fn, thisp) {
                thisp = thisp || this
                for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
                    fn.call(thisp, walker.value, i, this)
                    walker = walker.prev
                }
            }

            Yallist.prototype.get = function(n) {
                for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
                    // abort out of the list early if we hit a cycle
                    walker = walker.next
                }
                if (i === n && walker !== null) {
                    return walker.value
                }
            }

            Yallist.prototype.getReverse = function(n) {
                for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
                    // abort out of the list early if we hit a cycle
                    walker = walker.prev
                }
                if (i === n && walker !== null) {
                    return walker.value
                }
            }

            Yallist.prototype.map = function(fn, thisp) {
                thisp = thisp || this
                var res = new Yallist()
                for (var walker = this.head; walker !== null;) {
                    res.push(fn.call(thisp, walker.value, this))
                    walker = walker.next
                }
                return res
            }

            Yallist.prototype.mapReverse = function(fn, thisp) {
                thisp = thisp || this
                var res = new Yallist()
                for (var walker = this.tail; walker !== null;) {
                    res.push(fn.call(thisp, walker.value, this))
                    walker = walker.prev
                }
                return res
            }

            Yallist.prototype.reduce = function(fn, initial) {
                var acc
                var walker = this.head
                if (arguments.length > 1) {
                    acc = initial
                } else if (this.head) {
                    walker = this.head.next
                    acc = this.head.value
                } else {
                    throw new TypeError('Reduce of empty list with no initial value')
                }

                for (var i = 0; walker !== null; i++) {
                    acc = fn(acc, walker.value, i)
                    walker = walker.next
                }

                return acc
            }

            Yallist.prototype.reduceReverse = function(fn, initial) {
                var acc
                var walker = this.tail
                if (arguments.length > 1) {
                    acc = initial
                } else if (this.tail) {
                    walker = this.tail.prev
                    acc = this.tail.value
                } else {
                    throw new TypeError('Reduce of empty list with no initial value')
                }

                for (var i = this.length - 1; walker !== null; i--) {
                    acc = fn(acc, walker.value, i)
                    walker = walker.prev
                }

                return acc
            }

            Yallist.prototype.toArray = function() {
                var arr = new Array(this.length)
                for (var i = 0, walker = this.head; walker !== null; i++) {
                    arr[i] = walker.value
                    walker = walker.next
                }
                return arr
            }

            Yallist.prototype.toArrayReverse = function() {
                var arr = new Array(this.length)
                for (var i = 0, walker = this.tail; walker !== null; i++) {
                    arr[i] = walker.value
                    walker = walker.prev
                }
                return arr
            }

            Yallist.prototype.slice = function(from, to) {
                to = to || this.length
                if (to < 0) {
                    to += this.length
                }
                from = from || 0
                if (from < 0) {
                    from += this.length
                }
                var ret = new Yallist()
                if (to < from || to < 0) {
                    return ret
                }
                if (from < 0) {
                    from = 0
                }
                if (to > this.length) {
                    to = this.length
                }
                for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
                    walker = walker.next
                }
                for (; walker !== null && i < to; i++, walker = walker.next) {
                    ret.push(walker.value)
                }
                return ret
            }

            Yallist.prototype.sliceReverse = function(from, to) {
                to = to || this.length
                if (to < 0) {
                    to += this.length
                }
                from = from || 0
                if (from < 0) {
                    from += this.length
                }
                var ret = new Yallist()
                if (to < from || to < 0) {
                    return ret
                }
                if (from < 0) {
                    from = 0
                }
                if (to > this.length) {
                    to = this.length
                }
                for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
                    walker = walker.prev
                }
                for (; walker !== null && i > from; i--, walker = walker.prev) {
                    ret.push(walker.value)
                }
                return ret
            }

            Yallist.prototype.splice = function(start, deleteCount /*, ...nodes */
            ) {
                if (start > this.length) {
                    start = this.length - 1
                }
                if (start < 0) {
                    start = this.length + start;
                }

                for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
                    walker = walker.next
                }

                var ret = []
                for (var i = 0; walker && i < deleteCount; i++) {
                    ret.push(walker.value)
                    walker = this.removeNode(walker)
                }
                if (walker === null) {
                    walker = this.tail
                }

                if (walker !== this.head && walker !== this.tail) {
                    walker = walker.prev
                }

                for (var i = 2; i < arguments.length; i++) {
                    walker = insert(this, walker, arguments[i])
                }
                return ret;
            }

            Yallist.prototype.reverse = function() {
                var head = this.head
                var tail = this.tail
                for (var walker = head; walker !== null; walker = walker.prev) {
                    var p = walker.prev
                    walker.prev = walker.next
                    walker.next = p
                }
                this.head = tail
                this.tail = head
                return this
            }

            function insert(self, node, value) {
                var inserted = node === self.head ?
                new Node(value, null, node, self) :
                new Node(value, node, node.next, self)

                if (inserted.next === null) {
                    self.tail = inserted
                }
                if (inserted.prev === null) {
                    self.head = inserted
                }

                self.length++

                return inserted
            }

            function push(self, item) {
                self.tail = new Node(item, self.tail, null, self)
                if (!self.head) {
                    self.head = self.tail
                }
                self.length++
            }

            function unshift(self, item) {
                self.head = new Node(item, null, self.head, self)
                if (!self.tail) {
                    self.tail = self.head
                }
                self.length++
            }

            function Node(value, prev, next, list) {
                if (!(this instanceof Node)) {
                    return new Node(value, prev, next, list)
                }

                this.list = list
                this.value = value

                if (prev) {
                    prev.next = this
                    this.prev = prev
                } else {
                    this.prev = null
                }

                if (next) {
                    next.prev = this
                    this.next = next
                } else {
                    this.next = null
                }
            }

            try {
                // add if support for Symbol.iterator is present
                require('./iterator.js')(Yallist)
            } catch (er) {}

        }, {
            "./iterator.js": 519
        }]
    }, {}, [1])(1)
});
//# sourceMappingURL=browser.js.map

